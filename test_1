#====================================================================================================================================================#
#                                                            Cost Model Tool
#                                                         ---------------------
# Description: The All Time Buy Tool is used to calculate the Net Present Value of all GM parts. It also presents a scenario builder for the users,
#              where users can simulate different scenarios based on the inputs of cost elements coming form users and hence will calculate NPV based
#              on these values.
#
#              

set.seed(7)
chooseCRANmirror(graphics=FALSE, ind=1)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls(all = TRUE))
#options(java.parameters = "- Xmx1024m")
options(java.parameters = "-Xmx8048m")
#-------------------------------------------------------------------------------
# Loading Required Packages
#-------------------------------------------------------------------------------

# remove.packages("RJDBC")

## list all packages you'd need here
list_of_packages <- c("RJDBC", "sqldf", "stringr", "shiny", "shinyjs", "shinythemes", "shinydashboard","shinyalert",
                      "ggplot2","rhandsontable", "lubridate", "shinysky", "highcharter", "shinyBS", "DT" ,"xlsx", "dplyr", "reader", "tidyr","data.table","scales","openxlsx")  ## list all packages you'd need here

new_packages<- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]

if(length(new_packages)) install.packages(new_packages)

## Loading all reguire
lapply(list_of_packages,require,character.only = TRUE)

ziplib<-Sys.getenv('HOME')
Sys.setenv(R_ZIPCMD = paste(ziplib, "Cost Model Tool/R-Portable/App/R-Portable/library/Rtools/bin/zip", sep = "/"))

##-------------------------------------------------------------------------------
jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = spoprod_wrn-cn.edc.nam.gm.com)(PORT = 1521))(ADDRESS = (PROTOCOL = TCP)(HOST = spoprod_wrn-cn.edc.nam.gm.com )(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = euc13734p_srv.edc.nam.gm.com)))
host_name <- "jdbc:oracle:thin:@spoprod_wrn-cn.edc.nam.gm.com :1521:spoprod1"
# 
user_name<-"MU_SIGMA2"
pass_word<-"PASS"
# 
# #options(java.parameters = "-Xmx8048m")
# 
# #---------------------
# # Insitializing Driver
# #---------------------
# # OJDBC6 Driver needs to be installed in the system
# # Can be downloaded from http://www.java2s.com/Code/Jar/o/Downloadojdbc6jar.html
# # Class Path subject to change depending on User's directory
# 
# #--------------
# # Setting path 
# #--------------
#setwd(".")
#getwd()
#setwd("/R-Portable/App/R-Portable/library/Rtools/bin/zip.exe")
# 
# #--------------------------------------------------------------------
# # Calling Driver file which is used to establish Oracle SQL connection
# #--------------------------------------------------------------------
   drv <- JDBC("oracle.jdbc.OracleDriver",classPath="ojdbc8.jar", " ")
#drv <- JDBC("oracle.jdbc.OracleDriver",classPath = "C:\\sqldeveloper-18.3.0.277.2354-no-jre\\sqldeveloper\\jdbc\\lib\\ojdbc8.jar", " ")
# #drv <- JDBC("oracle.jdbc.OracleDriver",classPath = "C:/sqldeveloper-4.2.0.16.260.1303-x64/sqldeveloper/jdbc/lib/ojdbc7.jar", " ")
#drv <- JDBC("oracle.jdbc.OracleDriver", classPath = "C://sqldeveloper-4.2.0.16.260.1303-x64//sqldeveloper//jdbc//lib//ojdbc8.jar", "`")
# #-------------------------------------------------------------------------------
# # Connecting to SQL DEVELOPER
# #-------------------------------------------------------------------------------
# 
# # Connecting to SQL
# #-----------------------------------
# # VPN Connection required (Aventail)
# #-----------------------------------
# 

con <- dbConnect(drv, host_name, user_name,pass_word)  


#---------------------------------------------------------------------------------
# Frontend of the tool
#---------------------------------------------------------------------------------
ui<-  dashboardPage(
  dashboardHeader(title = "Cost Model Tool"),
  dashboardSidebar(),
  dashboardBody(
    
    tagList(
      tags$head(
        tags$link(rel="stylesheet", type="text/css",href="style.css")
      )
    ),
    
    
    div(class = "login",
        uiOutput("uiLogin"),
        textOutput("pass"),
        tags$head(tags$style("#pass{color: red;"),
                  shinyjs::useShinyjs()
                  
        )),
    
    div(class = "changing",
        uiOutput("ui2"),
        tags$head(tags$style("#pass{color: red;"),
                  shinyjs::useShinyjs()
                  
        )),
    
    div(class = "toolui",
        uiOutput("ui3"),
        tags$head(tags$style("#pass{color: red;"),
                  shinyjs::useShinyjs())
    )
    
  ))

server <- function(input, output, session) {
  options(shiny.maxRequestSize=30*1024^2) 
  #options(java.parameters = "- Xmx1024m")
  
  USER <- reactiveValues(Logged = FALSE , session = session$user) 
  go_listvalues<-reactiveValues(Approved= FALSE ) 
  
  ######################Log in module############
  a<- paste("SELECT * FROM LOGIN_DATA_CM")
  user_data <- dbGetQuery(con, a)
  
  output$uiLogin <- renderUI({
    if (USER$Logged == FALSE) {
      wellPanel(titlePanel("Login Page"),
                textInput("username", "GMID:"),
                passwordInput("passwd", "Password:"),
                br(),
                column(1,actionButton("login", "Login")),
                column(1,offset=1,actionButton("submit1","Submit")),
                column(3,offset=6,actionButton("change","Change Password")),
                fluidRow(br(), br(), br(),br(),column(width=3, textOutput("admin_table"))
                ),
                fluidRow(),
                fluidRow(
                  rHandsontableOutput("hot")
                ),
                hidden(
                  actionButton("save", "Save")
                )
      )
    }
  })
  
  
  #  login button
  observeEvent(input$login , {
    a<- paste("SELECT * FROM LOGIN_DATA_CM")
    user_data <- dbGetQuery(con, a)
    UserName <- isolate(input$username)
    password <- isolate(input$passwd)
    MyData<-as.data.frame(isolate(input$username))
    print(MyData)
    colnames(MyData)<-"gm_id"
    print(MyData)
    MyData$gm_id<-tolower(MyData$gm_id)
    write.csv(MyData, file = "gm_id.csv",row.names = FALSE)
    rat_gm_id <- read.csv("gm_id.csv")
    colnames(rat_gm_id) <- "GM_ID"
    if (UserName %in% user_data$GMID==TRUE )
    {
      pass<-subset (user_data, GMID == UserName , select = "PASSWORD")
      #print(pass)
      if (pass==password)
      {
        
        USER$Logged <- TRUE
        USER$name <- UserName 
        output$ui3<-renderUI ({
          
          dashboardPage( skin = "blue",
                         dashboardHeader(title = "Cost Model Tool",
                                         tags$li(a(href = 'http://www.gm.com',
                                                   img(src = 'image_1.png',
                                                       title = "General Motors", height = "30px"),
                                                   style = "padding-top:10px; padding-bottom:10px;"),
                                                 class = "dropdown"),
                                         tags$li(a(href = 'http://www.mu-sigma.com',
                                                   img(src = 'image_3.png',
                                                       title = "Mu Sigma", height = "30px"),
                                                   style = "padding-top:10px; padding-bottom:10px;"),
                                                 class = "dropdown")),
                         dashboardSidebar( width = 100,
                                           sidebarMenu( id = "tabs",
                                                        width = 150,
                                                        menuItem(h5("Home", align= "bottom"), tabName = "Home_Page", icon = icon("home", "fa-2x")),
                                                        menuItem(h5("Upload", align= "bottom"), tabName = "Upload", icon = icon("upload", "fa-2x")),
                                                        menuItem(h5("Part List",align= "bottom"), tabName = "Part_List",icon = icon("list-alt", "fa-2x")),
                                                        menuItem(h5("Part View",align= "bottom"), tabName = "Part_view", icon = icon("wrench", "fa-2x")),
                                                        menuItem(h5("Finance View",align= "bottom"), tabName = "Finance_view", icon = icon("dollar-sign", "fa-2x")),
                                                        menuItem(h5("Help Page",align= "bottom"), tabName = "Help_page", icon = icon("question", "fa-2x"))
                                                        
                                           )
                         ),
                         dashboardBody(
                           
                           # tags$head(tags$style(HTML('
                           #                        #ui3{
                           #                       position: fixed;
                           #                       top:0;
                           #                       left: 0;
                           #                       height: 100%;
                           #                       width:100%;
                           #                       }
                           #                       '))),
                           tags$head(tags$style(HTML('
                                                     #ui3{
                                                     height: 100%;
                                                     position: absolute;
                                                     overflow-x: hidden;
                                                     overflow-y: hidden;
                                                     width: 100%;
                                                     top: 0;
                                                     left: 0;
        }
                                                     '))),
                           tags$style(type='text/css', "# reset_all { margin-right: 0px; padding-right:0px }"), 
                           tags$style(HTML(".skin-blue { padding-right: 0px !important; };")),
                           
                           tabItems(
                             
                             
                             #Home Tab
                             tabItem(
                               tabName = "Home_Page",
                               fluidRow(img(src="landing_1.png", height = '85%', width = '100%', align = "centre" ))
                               
                             ),
                             
                             # Upload tab: The users upload part numbers in this section, there are two methods to do that
                             # 1. By uploading a file
                             # 2. Through a list by entering the part numbers
                             
                             tabItem(
                               tabName = "Upload",
                               box(
                                 title = "Upload Options",
                                 width = 12,solidHeader = TRUE,status="primary",
                                 fluidRow(
                                   column(width = 3,
                                          radioButtons("sel", "Upload type:",
                                                       c("List" = "List",
                                                         "Forecee File" = "File",
                                                         "Cost File" = "Cost",
                                                         "Forecee and Cost File" = "Forecee_n_Cost",
                                                         "Cognos and Cost File" = "Cognos_n_Cost",
                                                         "Cognos File" = "Cognos"),
                                                       selected = "List"
                                          )),
                                   column(width = 3,uiOutput("forecast_data_upload")
                                   ),
                                   tags$br(),
                                   column( width = 2,
                                           checkboxInput("header", "Header", TRUE)),
                                   column(width = 2,
                                          box(title = "Enter RAT number",
                                              solidHeader = TRUE,
                                              status = "info",
                                              width = NULL,
                                              textInput("enterrat", label = "", value = "-"),
                                              tags$br(),
                                              actionButton("approve_rat",label = "Approve",icon("paper-plane"),class = "butt2"),
                                              tags$head(tags$style(".butt2{font-weight:bold;font-size:15px;background-color:green;color:white}"))))
                                 ),
                                 shinyjs::useShinyjs(),
                                 
                                 fluidRow(column(width = 3,
                                                 actionButton("go_list", "Submit")),
                                          
                                          
                                          column(width = 3,
                                                 uiOutput("cost_element_upload"))
                                 )),
                               fluidRow(
                                 column(
                                   width = 2,
                                   uiOutput("ui_cost_com_1")),
                                 box(title = "Instructions", width = 10, solidHeader = TRUE, status = "primary",
                                     column(
                                       width = 8,
                                       tags$h4(tags$b("Step- 1:")),
                                       tags$h5(" Select the Upload option- List, Forcee File, Cost File , Cognos File or both Forecee and Cost File"),
                                       tags$h4(tags$b("Step- 2.1 : 'File' option selected in step- 1")),
                                       tags$h5(" Upload a .csv file containing Part Numbers. The format of the file can be as under:"),
                                       tags$h5("    1. File with only part number"),
                                       tags$h5("    2. File with part number and forecast data : Forecee File"),
                                       tags$h5("    3. File with part number and updated cost element : Cost File"),
                                       tags$h5("    4. A Forecee File with part number and forecast data and an updated cost element : Forecee and Cost File"),
                                       tags$h4(tags$b(tags$i("    Note: The cost file uploaded should not be formatted or prefixed with $ and should be a .csv file"))),
                                       tags$h4(tags$b("Step- 2.2 : 'List' option selected in step- 1")),
                                       tags$h5(" Enter the number of parts to be uploaded in the box"),
                                       tags$h5(" Enter the part numbers in the table"),
                                       tags$h4(tags$b("Step- 3:")),
                                       tags$h5("Click Submit!")),
                                     column(
                                       width = 2,
                                       fluidRow(
                                         tags$h5("Click the button below to view all acceptable formats of file"),
                                         actionButton("tabBut", "Click here"),
                                         bsModal("modalExample", "File Format", "tabBut", size = "large",
                                                 htmlOutput("format"))
                                       ),
                                       tags$br(),
                                       tags$br(),
                                       tags$br(),
                                       tags$br(),
                                       tags$br(),
                                       tags$br(),
                                       fluidRow(
                                         downloadButton("download_cost_file", "Download Sample Cost File")
                                       ))
                                 ))),
                             
                             # Part List: Here, the results will be made available at an uber level to get the comparison done
                             tabItem(
                               tabName = "Part_List",
                               fluidRow(
                                 column(width = 1,
                                        tags$h3("Analysis Results", align= "left")),
                                 column(width = 3,
                                        infoBoxOutput("Total_Parts",width = NULL)),
                                 column(width = 2,
                                        downloadButton("downloadData", "Download Part List Report")),
                                 column(width = 3,
                                        actionButton("management_report", "Download Management Report")),
                                 column(width = 2, offset = 1,
                                        downloadButton("download_filtered_list", "Download Error Report"))
                                 
                               ),
                               tags$hr(style="border-color: black;"),
                               shinyjs::useShinyjs(),
                               fluidRow(
                                 column(width = 12,
                                        box(
                                          title = "Current Buying Scenario",
                                          width = NULL,solidHeader = TRUE,status="primary",
                                          fluidRow(
                                            column(width = 6,
                                                   box(title = "Cost Elements",
                                                       width = NULL,solidHeader = TRUE,status="primary",
                                                       tags$div(hotable("Cost_comp_1"), style = "height:300px; overflow-y: scroll;font-size:100%"))),
                                            column(width = 6,
                                                   box(title = "Analysis Results",
                                                       width = NULL,solidHeader = TRUE,status="primary",
                                                       tags$div(hotable("analysis_original"), style = "height:300px; overflow-y: scroll;font-size:100%")))
                                          )))),
                               fluidRow(
                                 column(width = 12,
                                        box(
                                          title = "Cost Comparison of Scenario-1 & 2",
                                          width = NULL,solidHeader = TRUE,status="primary",
                                          fluidRow(
                                            column(width = 6,
                                                   box(title = "Scenario- 1",
                                                       width = NULL,solidHeader = TRUE,status="primary",
                                                       tags$div(hotable("cost_sce_1"), style = "height:400px; overflow-y: scroll;font-size:100%"))),
                                            column(width = 6,
                                                   box(title = "Scenario- 2",
                                                       width = NULL,solidHeader = TRUE,status="primary",
                                                       tags$div(hotable("cost_sce_2"), style = "height:400px; overflow-y: scroll;font-size:100%")
                                                   )))
                                          
                                        ))),
                               fluidRow(
                                 column(width = 12,
                                        box(
                                          title = "Analysis Result of Scenario- 1 & 2",
                                          width = NULL,solidHeader = TRUE,status="primary",
                                          fluidRow(
                                            column(width = 6,
                                                   box(title = "Scenario- 1",
                                                       width = NULL,solidHeader = TRUE,status="primary",
                                                       tags$div(hotable("analysis_sce_1"), style = "height:400px; overflow-y: scroll;font-size:100%"))),
                                            column(width = 6,
                                                   box(title = "Scenario- 2",
                                                       width = NULL,solidHeader = TRUE,status="primary",
                                                       tags$div(hotable("analysis_sce_2"), style = "height:400px; overflow-y: scroll;font-size:100%")))))
                                 ))),
                             
                             ##Summary Tab: This tab will give user a part level information. 
                             # Here, the user can change the cpp of any parts and run the simulations again to get results
                             # A detailed report can also be generated in this tab
                             tabItem(tabName = "Part_view",
                                     fluidRow(
                                       column( width = 3,
                                               uiOutput("ui")),
                                       column(width = 3,
                                              div(actionButton("submit_current", "Submit!"), style= "margin-top:25px"))),
                                     fluidRow(
                                       column( width = 4, 
                                               box(title="Part Details", solidHeader = TRUE, status = "primary",height = 400,
                                                   tags$div(tableOutput("Part_det"), style = "font-size:85%"),width = NULL)),
                                       column(width = 8,
                                              box(
                                                title = "Instruction", status = "primary", solidHeader = TRUE, width = NULL,
                                                tags$div(tags$ul(
                                                  tags$li(tags$h4("Select a Part Number from the drop down above")),
                                                  tags$li(tags$h4("The Current scenario gives the NPV of a part as per the current buying pattern as well as 
                                                                  the Optimal NPV if the part is flagged as ATB part")),
                                                  tags$li(tags$h4("User can simulate results for different field values and cost elements by changing there values
                                                                  in Scenario-1 and Scenario-2")),
                                                  tags$li(tags$h4("The results generated can be compared to take better decisions")),
                                                  tags$li(tags$h4("A detailed report can be downloaded to do in-depth analysis"))
                                                  ))
                                                ))
                           ),
                           fluidRow(
                             column(width = 6,
                                    
                                    # The current Scenario gives, the current buying trend of parts 
                                    box(title = "Current Scenario", 
                                        status = "primary",
                                        solidHeader = TRUE,
                                        width = NULL,
                                        height = 0))),
                           tags$br(),
                           tags$br(),
                           shinyjs::useShinyjs(),
                           fluidRow(
                             column(width = 6,
                                    fluidRow(
                                      column(width = 6,
                                             box(
                                               title = "Original Values", # Are the default values present on server
                                               status = "primary",
                                               solidHeader = TRUE,
                                               tags$div(hotable("hotable_curr"),style = "font-size:90%"),
                                               width = NULL),
                                             fluidRow(
                                               column(width = 12,
                                                      actionButton("go_curr", "Submit")))),
                                      
                                      column(width = 6,
                                             box(
                                               title = "Result",
                                               status = "primary",
                                               solidHeader = TRUE,
                                               width= NULL,
                                               fluidRow(
                                                 column(width = 12,
                                                        tags$div(hotable("Curr_scen"), style = "font-size:90%"))))
                                             
                                      )),
                                    fluidRow(
                                      column(width = 6,
                                             downloadButton("download_current_scenario", "Download Current Scenario Report")),
                                      column(width = 5,
                                             downloadButton("download_income_report", "Download Income Report for Current Scenario"))
                                    )),
                             column(width = 6,
                                    fluidRow(
                                      column(width = 12,
                                             box(title = "Forecast Demand Variation (Forecee data)",
                                                 status = "primary",
                                                 solidHeader = TRUE,
                                                 height = 150,
                                                 width = NULL,
                                                 tags$div(hotable("fore_dem"), style = "font-size:85%")))),
                                    fluidRow(
                                      column(width = 4,
                                             actionButton("modify_forecast", "Modify Forecast")),
                                      column(width = 8,
                                             tags$div(infoBoxOutput("Total_Forecast", width = NULL), style = 'height: 25px')
                                             
                                      )
                                    ),
                                    fluidRow(
                                      column(width = 12,
                                             box(title = "Variation of Forecast Demand with Year", status = "primary", solidHeader = TRUE,
                                                 highchartOutput("line2"),height = 445, width = NULL)))
                             )),
                           fluidRow(
                             column(width = 6,
                                    box(
                                      title = "Scenario- 1", ## Simulation for Scenario-1, using updated values entered by users
                                      status = "warning",
                                      solidHeader = TRUE,
                                      width = NULL,
                                      height = 0)),
                             column(width = 6,
                                    box(
                                      title = "Scenario- 2",  ## Simulation for Scenario-2, using updated values entered by users
                                      status = "success",
                                      solidHeader = TRUE,
                                      width = NULL,
                                      height = 0))
                           ),
                           tags$br(),
                           tags$br(),
                           fluidRow(
                             column( width = 6,
                                     fluidRow(
                                       column(width = 6,
                                              box(
                                                title = "Input Fields",
                                                status = "warning",
                                                solidHeader = TRUE,
                                                tags$div(hotable("hotable_sce1"),style = "font-size:90%"), width = NULL),
                                              uiOutput("Buy_qty_s1")),
                                       column(width = 6,
                                              box(
                                                title = "Results",
                                                status = "warning",
                                                solidHeader = TRUE,
                                                width = NULL,
                                                fluidRow(
                                                  column(width = 12,
                                                         tags$div(hotable("Scen_1"), style = "font-size:90%")))),
                                              fluidRow(
                                                column(width = 12,
                                                       actionButton("go_s1", "Submit!")))))
                             ),
                             column(width = 6,
                                    fluidRow(
                                      column(width = 6,
                                             box(
                                               title = "Input Fields",
                                               status = "success",
                                               solidHeader = TRUE,
                                               tags$div(hotable("hotable_sce2"),style = "font-size:90%"),width = NULL),
                                             uiOutput("Buy_qty_s2")),
                                      column(
                                        width = 6,
                                        box(
                                          title = "Results",
                                          status = "success",
                                          solidHeader = TRUE,
                                          width = NULL,
                                          fluidRow(
                                            column(width = 12,
                                                   tags$div(hotable("Scen_2"), style = "font-size:90%")))),
                                        fluidRow(
                                          column(width = 12,
                                                 actionButton("go_s_2", "Submit!"))
                                        ))))),
                           tags$br(),
                           fluidRow(
                             column(width = 3,
                                    fluidRow(
                                      downloadButton("downloadData_s_1", "Download Scenario-1 Report")
                                    ),
                                    tags$br(),
                                    fluidRow(
                                      downloadButton("download_income_report_s_1", "Download Income Report for Scenario-1")
                                    )
                             ),
                             column(width = 4, offset = 1,
                                    box(title = "'Selected Scenario'", status = "primary", solidHeader = TRUE,
                                        uiOutput("scenario_selector") ,actionButton("finalize", "Finalize"), width = NULL)),
                             column(width = 3, offset = 1,
                                    fluidRow(
                                      downloadButton("downloadData_s_2", "Download Scenario-2 Report")
                                    ),
                                    tags$br(),
                                    fluidRow(
                                      downloadButton("download_income_report_s_2", "Download Income Report for Scenario-2")
                                    )
                             )
                           ),
                           
                           fluidRow(
                             column(width = 5,
                                    box(title = "NPV variation with Buy Qty", status = "warning", solidHeader = TRUE,
                                        highchartOutput("line_1",height = 300), width = NULL)),
                             column(width = 5, offset = 2,
                                    box(title = "NPV variation with Buy Qty", status = "success", solidHeader = TRUE,
                                        highchartOutput("line_2",height = 300), width = NULL))),
                           fluidRow(
                             column(width = 3, offset = 4,
                                    downloadButton("download_all_scenario", "Download Result for all Scenarios"))
                           )
                           
                                                ),
                           #Finance view tab
                           tabItem(
                             tabName = "Finance_view",
                             fluidRow(column(width=12,box(
                               title = "Instruction", status = "primary", solidHeader = TRUE, width = NULL,
                               tags$div(tags$ul(
                                 
                                 tags$li(tags$h4("Select a Part Number from the drop down below")),
                                 tags$li(tags$h4("The All Time Buy gives the costs of a part as per the number of ATB units present")),
                                 #tags$li(tags$h4("User can simulate results for All Time Buy  by changing Material cost/Unit, ATB Labor hours
                                  #               in Input Fields")),
                                 #tags$li(tags$h4("Enter inputs for Miscellaneous costs * in Output box(if present)")),
                                 
                                 tags$li(tags$h4("A detailed report for selected number of parts can be downloaded "))
                                 
                                 
                                 
                                 
                                 ))
                             ))),
                             
                             fluidRow(
                               column( width = 3,
                                       uiOutput("uio")),
                               column(width = 3,
                                      div(actionButton("submit_finance", "Submit"), style= "margin-top:25px"))),
                             fluidRow(
                               column(width=3,
                                      fluidRow( column(width=12,
                                                       box(title="Part Details", solidHeader = TRUE, status = "primary",height = 180,
                                                           tags$div(tableOutput("Part_details"), style = "font-size:95%"),width = NULL))),
                                      fluidRow(column(width=12, 
                                                      box(title="All Time Buy", solidHeader = TRUE, status = "primary",height = 380,
                                                          tags$div(hotable("cost_details"), style = "font-size:105%"),width = NULL))),
                                      fluidRow(column(width=12,
                                                      box(tags$div(hotable("material_f"), style = "font-size:105%"),width = NULL)
                                      )),
                                      tags$br()
                                      ,
                                      
                                      tags$br()
                                      ,fluidRow(column(width=12,
                                                       box(title="Other Assumptions", solidHeader = TRUE, status = "primary",height = 150,
                                                           tags$div(hotable("other_assum"), style = "font-size:105%"),width = NULL)))																 
                               ),
                               column( width = 6, offset=1,
                                       
                                       fluidRow(                       box(title="Output", solidHeader = TRUE, status = "primary",height = 325,
                                                                           tags$div(hotable("op_details"), style = "font-size:95%"),width = NULL)
                                       )
                                       
                                       
                                       ,fluidRow(width=3, 
                                                 box(title="NPV & Payback period", solidHeader = TRUE, status = "primary",height = 180,
                                                     tags$div(hotable("npv_table"), style = "font-size:105%"),width = NULL))
                                       ,fluidRow(
                                         
                                         width=3,offset=1,box(title="Historical Sales and Service Retention", solidHeader = TRUE, status = "primary",height = 210,
                                                              tags$div(hotable("serv_ret"), style = "font-size:105%"),width = NULL)
                                       )
                                       
                                        ,fluidRow(column(width=2,actionButton("macro", "Create Sheets")))
                                       
                               )
                               
                             )
                             
                             
                           ),
                           
                           
                           
                           # Help Page: Gives a deatil description about the tool. The features, standards to follow and others details
                           tabItem(
                             tabName = "Help_page",
                             fluidRow (box(title = "Purpose of the tool", background = "light-blue", solidHeader = TRUE, status = "primary", "The Cost Model tool
                                           is used to compute the Net Present Value(NPV) of a part under different scenarios",width = 12)),
                             tabsetPanel(
                               id = "tabs",
                               tabPanel(title = "User Manual", value = "lp",
                                        tags$iframe(style="min-width:100%; 
                                                    height:600px; width:80%;
                                                    position:relative;
                                                    scrolling=yes", 
                                                    src="User Manual-Cost Model Tool.pdf#zoom=80" )   
                                        
                               ),
                               tabPanel(title = "Methodology behind NPV Calculation", value = "ppa",
                                        tags$iframe(style="min-width:100%; 
                                                    height:600px; width:80%;
                                                    position:relative;
                                                    scrolling=yes", 
                                                    src="Methodology.pdf#zoom=80" )     
                               ))
                             
                             
                             
                               ) )))
      })
        
    }else {
      showModal(modalDialog(title="Warning message!","Password is incorrect"))
    }
  } else {
    showModal(modalDialog(title="Warning message!","GMID is incorrect"))
    
  }
    
})
  
  values = reactiveValues()
  
  data = reactive({
    if (!is.null(input$hot)) {
      user_data = hot_to_r(input$hot)
    } else {
      if (is.null(values[["user_data"]]))
        user_data = user_data
      else
        user_data = values[["user_data"]]
    }
    
    values[["user_data"]] = user_data
    user_data
  })
  
  # submit button
  observeEvent(input$submit1,{
    
    a<- paste("SELECT * FROM LOGIN_DATA_CM")
    user_data <- dbGetQuery(con, a)
    UserName <- isolate(input$username)
    password <- isolate(input$passwd)
    
    if (UserName %in% user_data$GMID==TRUE )
    {
      pass<-subset (user_data, GMID == UserName , select = "PASSWORD")
      #print(pass)
      if (pass==password)
      {
        fl<-subset (user_data, GMID == UserName  & PASSWORD == password, select = "FLAG")
        #print(fl)
        if (fl=="N")
        {
          showModal(modalDialog(title="Warning message!","User is not an admin"))
          shinyjs::hide("save")
          shinyjs::hide("hot")
          shinyjs::hide("admin_table")
        }
        else if(fl=="A")
        {shinyjs::show("hot")
          shinyjs::show("admin_table")
          shinyjs::show("save")
          
          output$admin_table<-renderText("User_data table")
          output$hot <- renderRHandsontable({
            user_data = data()
            if (!is.null(user_data))
              rhandsontable(user_data, stretchH = "all")
          })
        }
        
      }
      else {showModal(modalDialog(title="Warning message!","Password is incorrect"))}
    }
    else {showModal(modalDialog(title="Warning message!","GMID is incorrect"))}
    MyData<-as.data.frame(isolate(input$username))
    print(MyData)
    colnames(MyData)<-"gm_id"
    print(MyData)
    write.csv(MyData, file = "gm_id.csv",row.names = FALSE)
    rat_gm_id <- read.csv("gm_id.csv")
    colnames(rat_gm_id) <- "GM_ID"
  })
  
  # save button
  
  observeEvent(input$save,{
    user_data = data()
    if (!is.null(user_data)) user_data
    user_data
    dbWriteTable(con, name = "LOGIN_DATA_CM", value = user_data, row.names = FALSE)
    #print(user_data)
    showModal(modalDialog(title="Attention!","User data is saved"))
  })
  
  #change password button
  observeEvent(input$change, {
    a<- paste("SELECT * FROM LOGIN_DATA_CM")
    user_data <- dbGetQuery(con, a)
    
    UserName <- isolate(input$username)
    password <- isolate(input$passwd)
    
    if (UserName %in% user_data$GMID==TRUE )
    {
      pass<-subset (user_data, GMID == UserName , select = "PASSWORD")
      #print(pass)
      if (pass==password)
      {
        
        output$ui2 <- renderUI({
          if (USER$Logged == FALSE) {
            wellPanel(
              passwordInput("op", label = "Old password", value = ""),
              passwordInput("np",label="New password",value = ""),
              br(),
              actionButton("done", "Done")
              
            )
          }
        })
        shinyjs::show("ui2")
        shinyjs::hide("hot")
        shinyjs::hide("admin_table")
        shinyjs::hide("save")
        
      }else {
        showModal(modalDialog(title="Warning!","Password is incorrect"))
      }
    } else {
      showModal(modalDialog(title="Warning!","GMID is incorrect"))
      
    }
    
    
  })
  
  # done button
  observeEvent(input$done,{
    a<- paste("SELECT * FROM LOGIN_DATA_CM")
    user_data <- dbGetQuery(con, a)
    
    UserName <- isolate(input$username)
    password <- isolate(input$passwd)
    opd<-isolate(input$op)
    npd<-isolate(input$np)
    if (UserName %in% user_data$GMID==TRUE )
    {
      pass<-subset (user_data, GMID == UserName , select = "PASSWORD")
      #print(pass)
      z<-which(user_data$GMID==UserName)
      
      
      if ( opd == pass )
      {
        
        #print(opd)
        showModal(modalDialog(title="Password is changed! Please enter the new password for login"))
        
        user_data$PASSWORD[z]<-npd
        dbWriteTable(con, name = "LOGIN_DATA_CM", value = user_data, row.names = FALSE)
        #print(user_data)
        shinyjs::hide("ui2")
      }
      
      else {
        showModal(modalDialog(title="Warning!","Old Password is incorrect"))
      }
    } else {
      showModal(modalDialog(title="Warning!","GMID is incorrect"))
      
    }
  })
  isolate({updateTabItems(session, "tabs", "Home_Page")})
  #################################
  
  source("config.R")
  #source("Login_costmodel.R",  local = TRUE)
  
  global_scenario_1 <- reactiveValues(df_data_sce_1 = NULL)
  global_scenario_2 <- reactiveValues(df_data_sce_2 = NULL)
  global_ads <- reactiveValues(df_data_ads = NULL)
  
  global_current_sce_down <- reactiveValues(df_data_current = NULL)
  global_scenario_1_down <- reactiveValues(df_data_scenario_1_down = NULL)
  global_scenario_2_down <- reactiveValues(df_data_scenario_2_down = NULL)
  reflect_cost_scenario_1 <- reactiveValues(df_data_cost_scenario_1 = NULL)
  reflect_cost_scenario_2 <- reactiveValues(df_data_cost_scenario_2 = NULL)
  global_PARTdata<-reactiveValues(cognos=NULL)
  global_yeardata<-reactiveValues(prev=NULL)
  
  selected_part <- reactiveValues(data = NULL)
  ATB_ADS_RAT <- reactiveValues(value = NULL)
  
  test <- read.csv('gm_id.csv', stringsAsFactors = FALSE)
  my_email <- test$gm_id[1]
  
  user_id <- my_email
  user_id <- gsub("\\ ", "_", user_id)
  
  table_names <- Table_name_generator(user_id)
  table_names <- unlist(table_names)
  
  
  PART_NBR_data_name <- table_names[1]
  PART_data_name <- table_names[2]
  
  PART_data_num_name <- table_names[3]
  ATB_1_NAME <- table_names[4]
  ATB_2_NAME <- table_names[5]
  ATB_3_NAME <- table_names[6]
  ATB_4_NAME <- table_names[7]
  ATB_5_NAME <- table_names[8]
  ATB_6_NAME <- table_names[9]
  ATB_7_NAME <- table_names[10]
  ATB_8_NAME <- table_names[11]
  ATB_9_NAME <- table_names[12]
  ATB_10_NAME <- table_names[13]
  ATB_COST_ADS_EXAMPLE_NAME <- table_names[14]
  ATB_COST_ELEMENT_NAME <- table_names[15]
  ATB_COST_MAX_SUPPLY_NAME <- table_names[16]
  ATB_COST_CAL_EXAMPLE_NAME <- table_names[17]
  ATB_TRANS_PROCESS_COST_NAME <- table_names[18]
  ATB_final_ads_1_name <- table_names[19]
  PL_SL_LIST_ATB_NAME <- table_names[20]
  TEMP_MAN_REP_1_NAME <- table_names[21]
  TEMP_MAN_REP_2_NAME <- table_names[22]
  PART_data_num_name_1<-table_names[23]
  
  observeEvent({input$approve_rat},{
    
    ATB_ADS_RAT$value <- data.frame(RAT_NUMBER = isolate(input$enterrat))
    MyData<-as.data.frame(isolate(input$username))
    colnames(MyData)<-"gm_id"
    write.csv(MyData, file = "gm_id.csv",row.names = FALSE)
    
    rat_gm_id <- read.csv("gm_id.csv")
    ATB_ADS_RAT$value  <- cbind(ATB_ADS_RAT$value, rat_gm_id)
    colnames(ATB_ADS_RAT$value) <- c("RAT_NUMBER", "GM_ID")
  
    showModal(modalDialog(title='RAT number and GM ID have been Saved'))
    Sys.sleep(1)
    go_listvalues$Approved<-TRUE
    removeModal() 
  })
  
  
  
  
  
  ## Downloading sample Cost file
  output$download_cost_file <- downloadHandler(
    filename = function() {
      paste("Sample_Cost_File", ".csv", sep="")
    },
    content = function(file) {
      cost_file_sample <- read.csv("Sample_cost_file.csv", stringsAsFactors = FALSE)
      write.csv(cost_file_sample, file, row.names = FALSE)
    }
  )
  
  ## Selecting the type of input- It can be either 1. File or 2. List or 3.cognos
  output$forecast_data_upload <- renderUI({
    
    switch(input$sel,
           'File' ={fileInput('.file1', 'Upload Forecee data',
                              accept = c(
                                'text/csv',
                                'text/comma-separated-values',
                                'text/tab-separated-values',
                                'text/plain',
                                '.csv',
                                '.tsv'
                              )
           )},
           
           'List' =  {textInput("num_part", "Enter number of parts", value = "25" )
             
           },
           'Cost' = {fileInput("cost_file", "Upload Cost element file",
                               multiple = TRUE,
                               accept = c("text/csv",
                                          "text/comma-separated-values,text/plain",
                                          ".csv"))},
           'Forecee_n_Cost' = {fileInput('forecee_file', 'Upload Forcee data',
                                         accept = c(
                                           'text/csv',
                                           'text/comma-separated-values',
                                           'text/tab-separated-values',
                                           'text/plain',
                                           '.csv',
                                           '.tsv'
                                         )
           )},
           
           'Cognos' ={fileInput('.file2', 'Upload Cognos data',
                                accept = c(
                                  'text/csv',
                                  'text/comma-separated-values',
                                  'text/tab-separated-values',
                                  'text/plain',
                                  '.csv',
                                  '.tsv'
                                )
           )},
           'Cognos_n_Cost' ={fileInput('cognos_file', 'Upload Cognos data',
                                accept = c(
                                  'text/csv',
                                  'text/comma-separated-values',
                                  'text/tab-separated-values',
                                  'text/plain',
                                  '.csv',
                                  '.tsv'
                                )
           )}
    )
  })
  
  
  
  observe({
    if (is.null(input$sel)==TRUE)
    {return()}
    else if(input$sel == "File" |input$sel == "Cognos"){
      
      shinyjs::hide("cost_sce_1")
      shinyjs::hide("cost_sce_2")
      shinyjs::hide("analysis_sce_1")
      shinyjs::hide("analysis_sce_2")
      shinyjs::hide("cost_file_all")
      
    }
  })
  
  ## Handlling Exception: This exception will come when user switches between tabs without entering the part numbers
  
  observe({ 
    if (is.null(input$sel)==TRUE)
    {return()}
    
    else if(input$sel == "List" & !is.null(input$num_part)){
      
      output$ui_cost_com_1 <- renderUI({
        div(style = 'height:500px; overflow-y: scroll',
            hotable("hotable1"))
      })
      
      num_of_parts <- as.numeric(input$num_part)
      
      shinyjs::show("hotable1")
      
      if(!is.na(num_of_parts))
      {
        dfp <-  data.frame(SER_NUM = 1:num_of_parts, PART_NBR = character(num_of_parts))
      } else
      {
        dfp <-  data.frame(SER_NUM = 1:50, PART_NBR = character(50))
      }
      output$hotable1 <- renderHotable({
        dfp
      }, readOnly = FALSE)
      
      shinyjs::hide("cost_sce_1")
      shinyjs::hide("cost_sce_2")
      shinyjs::hide("analysis_sce_1")
      shinyjs::hide("analysis_sce_2")
      shinyjs::hide("cost_file_all")
    }
  })
  
  
  #Forecee and Cost 
  observe({
    if (is.null(input$sel)==TRUE)
    {return()}
    else if(input$sel == "Forecee_n_Cost")
    {
      output$cost_element_upload <- renderUI({
        fileInput("cost_file_all", "Upload Cost element file",
                  multiple = TRUE,
                  accept = c("text/csv",
                             "text/comma-separated-values,text/plain",
                             ".csv"))
      })
      
      shinyjs::show("cost_file_all")
    }
  })
   
  #Cognos and Cost
  observe({
    if (is.null(input$sel)==TRUE)
    {return()}
    else if(input$sel == "Cognos_n_Cost")
    {
      output$cost_element_upload <- renderUI({
        fileInput("cost_file_all", "Upload Cost element file",
                  multiple = TRUE,
                  accept = c("text/csv",
                             "text/comma-separated-values,text/plain",
                             ".csv"))
      })
      
      shinyjs::show("cost_file_all")
    }
  })
  
  #Cost File
  observe({
    if (is.null(input$sel)==TRUE)
    {return()}
    else if(input$sel == "Cost")
    {
      
      
      shinyjs::hide("cost_file_all")
    }
  })
  
  
  observe({
    if (is.null(input$sel)==TRUE)
    {return()}
    else if(input$sel == "Forecee_n_Cost")
    {
      shinyjs::hide("cost_file_all")
      
    }
  })
  
  observe({
    if (is.null(input$sel)==TRUE)
    {return()}
    else if(input$sel == "Cognos_n_Cost")
    {
      shinyjs::hide("cost_file_all")
      
    }
  })
  
  
  observeEvent({
    input$tabBut
  }, {
    output$format <- renderText({
      
      "<img src=format.png height=100% width=100%>"
      
    })
  })
  
  observe({
    if (is.null(input$go_list)==TRUE | is.null(input$tabs)==TRUE )
    {return()}
    
    else if(input$go_list == 0 & input$tabs == "Part_List"){
      showModal(modalDialog(
        title = "Warning Message",
        "First, upload the Part List and click Submit to get results"
      ))
    }
  })
  
  
  observe({
    if (is.null(input$go_list)==TRUE | is.null(input$tabs)==TRUE)
    {return()}
    
    else if(input$go_list == 0 & input$tabs == "Part_view"){
      showModal(modalDialog(
        title = "Warning Message",
        "First, upload the Part List and click Submit to get results"
      ))
    }
  })
  
  
  ### Trigger for starting the backend calculation for Part List View
  ### The Part list tab will start when we click on the Submit button on the Upload tab
  shinyjs::disable("go_list")
  observeEvent({input$go_list
  },{
    
    #if (go_listvalues$Approved == FALSE){
    # showModal(modalDialog(title='Enter RAT Number'))
    #Sys.sleep(1)
    #removeModal()}
    #else if (go_listvalues$Approved == TRUE)
    {
      shinyjs::disable("approve_rat")
      withProgress(message = 'Preparing the tables:', value = 0, {
        
        shinyjs::hide("Scen_1")
        shinyjs::hide("Scen_2")
        shinyjs::hide("line_1")
        shinyjs::hide("line_2")
        shinyjs::hide("Part_det")
        shinyjs::hide("hotable_curr")
        shinyjs::hide("Curr_scen")
        shinyjs::hide("fore_dem")
        shinyjs::hide("line2")
        shinyjs::hide("Part_details")
        shinyjs::hide("cost_details")
        shinyjs::hide("op_details")
        shinyjs::hide("material_f")
        shinyjs::hide("other_assum")
        shinyjs::hide("npv_table")
        shinyjs::hide("serv_ret")
        shinyjs::disable("download_filtered_list")
        
        incProgress(1/3, detail = "Preparing the tables")
        
        ## Creating table names
        test <- read.csv('gm_id.csv', stringsAsFactors = FALSE)
        my_email <- test$gm_id[1]
        user_id <- my_email
        user_id <- gsub("\\ ", "_", user_id)
        table_names <- Table_name_generator(user_id)
        table_names <- unlist(table_names)
        incProgress(1/3, detail = "Preparing the tables")
        
        PART_NBR_data_name <- table_names[1]
        PART_data_name <- table_names[2]
        PART_data_num_name <- table_names[3]
        ATB_1_NAME <- table_names[4]
        ATB_2_NAME <- table_names[5]
        ATB_3_NAME <- table_names[6]
        ATB_4_NAME <- table_names[7]
        ATB_5_NAME <- table_names[8]
        ATB_6_NAME <- table_names[9]
        ATB_7_NAME <- table_names[10]
        ATB_8_NAME <- table_names[11]
        ATB_9_NAME <- table_names[12]
        ATB_10_NAME <- table_names[13]
        ATB_COST_ADS_EXAMPLE_NAME <- table_names[14]
        ATB_COST_ELEMENT_NAME <- table_names[15]
        ATB_COST_MAX_SUPPLY_NAME <- table_names[16]
        ATB_COST_CAL_EXAMPLE_NAME <- table_names[17]
        ATB_TRANS_PROCESS_COST_NAME <- table_names[18]
        ATB_final_ads_1_name <- table_names[19]
        PL_SL_LIST_ATB_NAME <- table_names[20]
        TEMP_MAN_REP_1_NAME <- table_names[21]
        TEMP_MAN_REP_2_NAME <- table_names[22]
        PART_data_num_name_1<-table_names[23]
        table_drop <- Table_drop(table_names, con)
        incProgress(1/3, detail = "Preparing the tables")
      })
      
      if(input$sel == "Cognos")
      {
        
        ## Disabbing the Submit button andTab button so that multiple submit do not take place
        shinyjs::disable("go_list")
        shinyjs::disable("tabBut")
        shinyjs::hide("hotable1")
        shinyjs::hide("cost_sce_1")
        shinyjs::hide("cost_sce_2")
        shinyjs::hide("analysis_sce_1")
        shinyjs::hide("analysis_sce_2")
        ## Reading the uploaded file. This file contains the part numbers and info about the part like-
        ## Part name, Inventory Level
        inFile_2 <- input$.file2
        
        if(!is.null(inFile_2) )
          
        {
          
          if( (get.ext(inFile_2$name) %in% c(
            'text/csv',
            'text/comma-separated-values',
            'text/tab-separated-values',
            'text/plain',
            'csv',
            'tsv'
          )))
          {
            input2 <- read.csv(inFile_2$datapath, header = input$header,na.strings="")
            input2<-input2[-1, ]
            
            
            ## Progress Indicator: The indicator will help user to understand toll what point the code has executed and how much more,
            ## time will be needed to complete the process.
            if("REMAINDER" %in% colnames(input2)  &  ##The year need to be changed for each year
               "Retention.Modified.QTY" %in% colnames(input2) & "X2050" %in% colnames(input2) )
            {
              withProgress(message = 'Processing:', value = 0, {    
                ## Converting the column name which contains part number from PART_NBR to HEAD this is done because the column name is HEAD in
                ## FORCEE Table and we need to follow the same format.
                PART_data <- as.data.frame(input2)
                
                names(PART_data)[1]<-"PART_NBR"
                ##Check the column which has header Remainder
                rem<-which(colnames(PART_data)=="REMAINDER")
                rmq<-which(colnames(PART_data)=="Retention.Modified.QTY")
                # Getting the forecast data column numbers to assign column name for further calculation
                frc_fin<-rmq+30
                frc_start<-rmq+1
                
                col2cvt <- c(7:rem,frc_start:frc_fin)
                ##adding order number for part numbers
                PART_data$part.order<-as.numeric(row.names(PART_data))
                global_PARTdata$cognos<-select(PART_data,'PART_NBR',part.order)
                
                colnames(global_PARTdata$cognos)<-c("PART_NBR","PART_ORDER")
                #  global_yeardata<-reactiveValues(prev=NULL)
                PART_data[,col2cvt] <- lapply(PART_data[,col2cvt],function(x){as.numeric(gsub(",", "", x))})
                
                colnames(PART_data)[5:7]<-c("APPLICATION_LY","PART_NAME","INVENTORY_LVL")
                
                
                ##Calculate by keeping in mind the very next naming after this comment
                hist_yr <- rem-3
                colnames(PART_data)[hist_yr:rem]<-c("ACTUAL_SALES_CURR_YEAR_MINUS_2","ACTUAL_SALES_CURR_YEAR_MINUS_1","ACTUAL_SALES_CYTD","PROJECTED_SALES_CURR_YEAR")# change 666
                
                
                colnames(PART_data)[frc_start:frc_fin]<-c("FORECAST_YR_1","FORECAST_YR_2","FORECAST_YR_3","FORECAST_YR_4","FORECAST_YR_5","FORECAST_YR_6","FORECAST_YR_7",
                                                          "FORECAST_YR_8","FORECAST_YR_9","FORECAST_YR_10",
                                                          "FORECAST_YR_11", "FORECAST_YR_12", "FORECAST_YR_13", "FORECAST_YR_14",
                                                          "FORECAST_YR_15", "FORECAST_YR_16", "FORECAST_YR_17", "FORECAST_YR_18", "FORECAST_YR_19",
                                                          "FORECAST_YR_20", "FORECAST_YR_21", "FORECAST_YR_22", "FORECAST_YR_23", "FORECAST_YR_24",
                                                          "FORECAST_YR_25", "FORECAST_YR_26", "FORECAST_YR_27", "FORECAST_YR_28", "FORECAST_YR_29", "FORECAST_YR_30")
                PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_2<-as.numeric(PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_2)
                PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_1<-as.numeric(PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_1)
                PART_data$ACTUAL_SALES_CYTD<-as.numeric(PART_data$ACTUAL_SALES_CYTD)
                #PART_data <- sapply(PART_data, as.numeric)  
                PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_2[is.na(PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_2)]<-0
                PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_1[is.na(PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_1)]<-0
                PART_data$ACTUAL_SALES_CYTD[is.na(PART_data$ACTUAL_SALES_CYTD)]<-0
                ## ADDING LEADING ZEROS TO THE PART NUMBERS
                PART_data$PART_NBR <- str_pad(PART_data$PART_NBR, width=8, side="left", pad="0")
                
                PART_data[is.na(PART_data)]<-0
                Flag_PART_NBR_data <- 0
                Flag_PART_data <- 0
                
                if("PART_NAME" %in% colnames(PART_data))
                {
                  print("column present")
                } else
                {
                  PART_data$PART_NAME <- "Unknown"
                  PART_data$INVENTORY_LVL <- "Unknown"
                }
                
                incProgress(1/7, detail = "Pulling Data")
                
                ## Pulling Forcee Data from uploaded file
                if("FORECAST_YR_1" %in% colnames(PART_data))
                {
                  PART_NBR_data<- PART_data %>% filter(is.na(as.numeric(PART_data$FORECAST_YR_1)))
                  PART_NBR_data <- PART_NBR_data %>% select(PART_NBR)
                  
                  
                  ## WRITING THE TABLE IN THE SERVER, THIS TABLE WILL DROPPED AT THE END OF THE PROCESSING
                  
                  dbWriteTable(conn = con,
                               name = PART_NBR_data_name,
                               value = PART_NBR_data, overwrite = TRUE )
                  
                  Flag_PART_NBR_data <- 1
                  
                  YR<-as.numeric(format(Sys.Date(),"%Y"))
                  
                  PART_NBR_ex <- PART_data %>% filter(!is.na(as.numeric(PART_data$FORECAST_YR_1)))
                  
                  PART_NBR_ex_forcee <- PART_NBR_ex %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                               FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                               FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                               FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                               FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                               FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                               FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                  
                  
                  print("cognos-1")
                  data_forcee <- paste("SELECT HEAD AS PART_NBR,ACTUAL_SALES_CYTD, PROJECTED_SALES_CURR_YEAR, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1
                                       FROM A_SCREAD.FORECAST_DATA@SC
                                       WHERE HEAD IN (SELECT PART_NBR FROM", PART_NBR_data_name,")")
                  
                  
                  
                  ATB_1_Data <- dbGetQuery(con,data_forcee)
                  
                  print("cognos-2")
                    sql_atb_0_frocee<- paste("SELECT PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL,SUM(FORECAST_YR_1) AS FORECAST_YR_1,SUM(FORECAST_YR_2) AS FORECAST_YR_2 
                                          ,SUM(FORECAST_YR_3) AS FORECAST_YR_3,SUM(FORECAST_YR_4) AS FORECAST_YR_4,SUM(FORECAST_YR_5) AS FORECAST_YR_5,SUM(FORECAST_YR_6) AS FORECAST_YR_6
                                          ,SUM(FORECAST_YR_7) AS FORECAST_YR_7,SUM(FORECAST_YR_8) AS FORECAST_YR_8,SUM(FORECAST_YR_9) AS FORECAST_YR_9,SUM(FORECAST_YR_10) AS FORECAST_YR_10
                                          ,SUM(FORECAST_YR_11) AS FORECAST_YR_11,SUM(FORECAST_YR_12) AS FORECAST_YR_12,SUM(FORECAST_YR_13) AS FORECAST_YR_13,SUM(FORECAST_YR_14) AS FORECAST_YR_14
                                          ,SUM(FORECAST_YR_15) AS FORECAST_YR_15,SUM(FORECAST_YR_16) AS FORECAST_YR_16,SUM(FORECAST_YR_17) AS FORECAST_YR_17,SUM(FORECAST_YR_18) AS FORECAST_YR_18
                                          ,SUM(FORECAST_YR_19) AS FORECAST_YR_19,SUM(FORECAST_YR_20) AS FORECAST_YR_20,SUM(FORECAST_YR_21) AS FORECAST_YR_21,SUM(FORECAST_YR_22) AS FORECAST_YR_22
                                          ,SUM(FORECAST_YR_23) AS FORECAST_YR_23,SUM(FORECAST_YR_24) AS FORECAST_YR_24,SUM(FORECAST_YR_25) AS FORECAST_YR_25,SUM(FORECAST_YR_26) AS FORECAST_YR_26
                                          ,SUM(FORECAST_YR_27) AS FORECAST_YR_27,SUM(FORECAST_YR_28) AS FORECAST_YR_28,SUM(FORECAST_YR_29) AS FORECAST_YR_29,SUM(FORECAST_YR_30) AS FORECAST_YR_30 FROM 
                                          ( 
                                            SELECT P.PART_NBR,PD.PART_DESCRIPTION AS PART_NAME,PD.SVC_USE_LAST_YR AS APPLICATION_LY,PI.SALE_INV_QTY AS INVENTORY_LVL,
                                            CASE WHEN FY.YEAR=",YR+1," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_1,
                                            CASE WHEN FY.YEAR=",YR+2," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_2,
                                            CASE WHEN FY.YEAR=",YR+3," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_3,
                                            CASE WHEN FY.YEAR=",YR+4," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_4,
                                            CASE WHEN FY.YEAR=",YR+5," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_5,
                                            CASE WHEN FY.YEAR=",YR+6," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_6,
                                            CASE WHEN FY.YEAR=",YR+7," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_7,
                                            CASE WHEN FY.YEAR=",YR+8," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_8,
                                            CASE WHEN FY.YEAR=",YR+9," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_9,
                                            CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_10,
                                            CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_11,
                                            CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_12,
                                            CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_13,
                                            CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_14,
                                            CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_15,
                                            CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_16,
                                            CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_17,
                                            CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_18,
                                            CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_19,
                                            CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_20,
                                            CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_21,
                                            CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_22,
                                            CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_23,
                                            CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_24,
                                            CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_25,
                                            CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_26,
                                            CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_27,
                                            CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_28,
                                            CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_29,
                                            CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_30
                                            FROM FORECAST_DATA.PART P LEFT JOIN FORECAST_DATA.FORECAST F ON F.STD_PART_NBR = P.STD_PART_NBR
                                            LEFT JOIN FORECAST_DATA.FORECAST_YEAR FY ON FY.FORECAST_ID = F.FORECAST_ID
                                            LEFT JOIN FORECAST_DATA.PART_DETAIL PD ON PD.PART_ID = P.PART_ID
										                      	LEFT JOIN FORECAST_DATA.PART_INVENTORY PI ON PI.PART_ID = PI.PART_ID
                                            WHERE F.COUNTRY_ID='137' AND F.FORECAST_TYPE='ACTUAL' AND P.DELETE_IND='N' AND P.COUNTRY_ID='137' AND PD.DELETE_IND='N' AND PI.DELETE_IND='N'
                                            AND PART_NBR IN (SELECT PART_NBR FROM",PART_NBR_data_name,") GROUP BY P.PART_NBR,PD.PART_DESCRIPTION,PD.SVC_USE_LAST_YR,PI.SALE_INV_QTY,
                                              CASE WHEN FY.YEAR=",YR+1,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+2,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+3,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+4,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+5,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+6,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+7,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+8,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+9,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END) GROUP BY PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL")
                  PART_NBR_data_forcee_1 <- dbGetQuery(con,sql_atb_0_frocee)
                  print("merge initial")
                  
                  PART_NBR_data_forcee_1 <- merge(x= ATB_1_Data, y= PART_NBR_data_forcee_1, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                  
                  PART_NBR_data_forcee <- PART_NBR_data_forcee_1 %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                                            FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                                            FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                                            FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                                            FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                                            FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                                            FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                  
                  
                  #PART_NBR_data_forcee[is.na(PART_NBR_data_forcee)] <- 0
                  
                  ATB_1_Forcee <- rbind(PART_NBR_ex_forcee, PART_NBR_data_forcee)
                  
                  dbRemoveTable(con, PART_NBR_data_name)
                  
                  
                  
                } else  ## Pulling Forcee Data from server
                {
                  
                  
                  PART_data <- PART_data %>% select(PART_NBR)
                  dbWriteTable(conn = con,
                               name = PART_data_name,
                               value = PART_data,overwrite = TRUE )
                  
                  Flag_PART_data <- 1
                  
                  YR<-as.numeric(format(Sys.Date(),"%Y"))
                  
                  sql_atb_1_frocee<-  paste("SELECT HEAD AS PART_NBR,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR,ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1
                                            FROM A_SCREAD.FORECAST_DATA@SC
                                            WHERE HEAD IN (SELECT PART_NBR FROM", PART_data_name,")")
                  
                  PART_data_num_1 <- dbGetQuery(con,sql_atb_1_frocee)
                  PART_data_num_1[is.na(PART_data_num_1)]<-0
                  dbWriteTable(conn = con,
                               name = PART_data_num_name_1,
                               value = PART_data_num_1, overwrite = TRUE, append = FALSE)
                  
                  sql_atb_0_frocee<- paste("SELECT PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL,SUM(FORECAST_YR_1) AS FORECAST_YR_1,SUM(FORECAST_YR_2) AS FORECAST_YR_2 
                                          ,SUM(FORECAST_YR_3) AS FORECAST_YR_3,SUM(FORECAST_YR_4) AS FORECAST_YR_4,SUM(FORECAST_YR_5) AS FORECAST_YR_5,SUM(FORECAST_YR_6) AS FORECAST_YR_6
                                          ,SUM(FORECAST_YR_7) AS FORECAST_YR_7,SUM(FORECAST_YR_8) AS FORECAST_YR_8,SUM(FORECAST_YR_9) AS FORECAST_YR_9,SUM(FORECAST_YR_10) AS FORECAST_YR_10
                                          ,SUM(FORECAST_YR_11) AS FORECAST_YR_11,SUM(FORECAST_YR_12) AS FORECAST_YR_12,SUM(FORECAST_YR_13) AS FORECAST_YR_13,SUM(FORECAST_YR_14) AS FORECAST_YR_14
                                          ,SUM(FORECAST_YR_15) AS FORECAST_YR_15,SUM(FORECAST_YR_16) AS FORECAST_YR_16,SUM(FORECAST_YR_17) AS FORECAST_YR_17,SUM(FORECAST_YR_18) AS FORECAST_YR_18
                                          ,SUM(FORECAST_YR_19) AS FORECAST_YR_19,SUM(FORECAST_YR_20) AS FORECAST_YR_20,SUM(FORECAST_YR_21) AS FORECAST_YR_21,SUM(FORECAST_YR_22) AS FORECAST_YR_22
                                          ,SUM(FORECAST_YR_23) AS FORECAST_YR_23,SUM(FORECAST_YR_24) AS FORECAST_YR_24,SUM(FORECAST_YR_25) AS FORECAST_YR_25,SUM(FORECAST_YR_26) AS FORECAST_YR_26
                                          ,SUM(FORECAST_YR_27) AS FORECAST_YR_27,SUM(FORECAST_YR_28) AS FORECAST_YR_28,SUM(FORECAST_YR_29) AS FORECAST_YR_29,SUM(FORECAST_YR_30) AS FORECAST_YR_30 FROM 
                                          ( 
                                            SELECT P.PART_NBR,PD.PART_DESCRIPTION AS PART_NAME,PD.SVC_USE_LAST_YR AS APPLICATION_LY,PI.SALE_INV_QTY AS INVENTORY_LVL,
                                            CASE WHEN FY.YEAR=",YR+1," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_1,
                                            CASE WHEN FY.YEAR=",YR+2," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_2,
                                            CASE WHEN FY.YEAR=",YR+3," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_3,
                                            CASE WHEN FY.YEAR=",YR+4," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_4,
                                            CASE WHEN FY.YEAR=",YR+5," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_5,
                                            CASE WHEN FY.YEAR=",YR+6," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_6,
                                            CASE WHEN FY.YEAR=",YR+7," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_7,
                                            CASE WHEN FY.YEAR=",YR+8," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_8,
                                            CASE WHEN FY.YEAR=",YR+9," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_9,
                                            CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_10,
                                            CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_11,
                                            CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_12,
                                            CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_13,
                                            CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_14,
                                            CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_15,
                                            CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_16,
                                            CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_17,
                                            CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_18,
                                            CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_19,
                                            CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_20,
                                            CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_21,
                                            CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_22,
                                            CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_23,
                                            CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_24,
                                            CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_25,
                                            CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_26,
                                            CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_27,
                                            CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_28,
                                            CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_29,
                                            CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_30
                                            FROM FORECAST_DATA.PART P LEFT JOIN FORECAST_DATA.FORECAST F ON F.STD_PART_NBR = P.STD_PART_NBR
                                            LEFT JOIN FORECAST_DATA.FORECAST_YEAR FY ON FY.FORECAST_ID = F.FORECAST_ID
                                            LEFT JOIN FORECAST_DATA.PART_DETAIL PD ON PD.PART_ID = P.PART_ID
									                      		LEFT JOIN FORECAST_DATA.PART_INVENTORY PI ON PI.PART_ID = P.PART_ID
                                            WHERE F.COUNTRY_ID='137' AND F.FORECAST_TYPE='ACTUAL' AND P.DELETE_IND='N' AND P.COUNTRY_ID='137' AND PD.DELETE_IND='N'
                                            AND PART_NBR IN (SELECT PART_NBR FROM",PART_data_name,")GROUP BY P.PART_NBR,PD.PART_DESCRIPTION,PD.SVC_USE_LAST_YR,PI.SALE_INV_QTY,
                                              CASE WHEN FY.YEAR=",YR+1,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+2,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+3,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+4,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+5,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+6,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+7,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+8,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+9,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END) GROUP BY PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL")
                  ATB_1_Forcee_1 <- dbGetQuery(con,sql_atb_0_frocee)
                  
                  ATB_1_Forcee_2 <- merge(x= PART_data_num_1, y= ATB_1_Forcee_1, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                  
                  ATB_1_Forcee <- ATB_1_Forcee_2 %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                            FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                            FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                            FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                            FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                            FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                            FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                  
                  ATB_1_Forcee$FORECAST_YR_1<-as.character(ATB_1_Forcee$FORECAST_YR_1)
                  ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
                }
                
                if(nrow(ATB_1_Forcee) != nrow(PART_data))
                {
                  Complete_Part_List <- PART_data %>% select(PART_NBR)
                  ATB_1_Forcee <- merge(x =  Complete_Part_List, y = ATB_1_Forcee, by.x = "PART_NBR", by.y = "PART_NBR", all.x = TRUE)
                  ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
                  
                }
                print("x2")
                PART_data_num <- ATB_1_Forcee %>% select(PART_NBR)
                
                dbWriteTable(conn = con,
                             name = PART_data_num_name,
                             value = PART_data_num, overwrite = TRUE, append = FALSE)
                print("x3")
                #=================================================================================#
                ##### ATB_1, ATB_2, ATB_3, ATB_4, ATB_5, ATB_6, ATB_7, ATB_8, ATB_9 and ATB_10
                ##### are temprorary intermediate table created to map the different cost elements
                ##### associated with parts. These cost elements are coming from different tables.
                #==================================================================================#
                
                ## Mapping Last Cost
                sql_atb_1_ser_mat <- paste("SELECT  PART_NBR, B.CAMPN_DTE, B.CAMPN_QTY,B.DECK_CD,
                                           B.LAST_COST,A.USB_CD, B.RB1_ALPHA_WHSE_CLASS, A.UNIT_LOAD_QTY,A.PART_REMOVAL_DT,
                                           A.PART_REINST_DT, A.MDSNG_PKG_QTY ,A.MCHDG_PACK_HEIGHT, A.MCHDG_PACK_LENGTH,A.MCHDG_PACK_WIDTH
                                           FROM
                                           DBO.SERVICE_PART@EUC A
                                           LEFT JOIN DBO.MATERIAL_PART@EUC B
                                           ON A.PART_NBR=B.MATRL_PART_NBR
                                           WHERE PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name, ")")
                print("x4")
                ATB_1_ser_mat <- dbGetQuery(con, sql_atb_1_ser_mat)
                
                ATB_1_1 <- ATB_1_Forcee
                
                ATB_1 <- merge(x= ATB_1_1, y= ATB_1_ser_mat, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                print("x5")
                
                ATB_1$CAMPN_QTY <- as.character(ATB_1$CAMPN_QTY)
                ATB_1$DECK_CD <- as.character(ATB_1$CAMPN_QTY)
                ATB_1$LAST_COST <- as.character(ATB_1$LAST_COST)
                ATB_1$MDSNG_PKG_QTY[is.na(ATB_1$MDSNG_PKG_QTY)] <- 0
                ATB_1$MCHDG_PACK_HEIGHT[is.na(ATB_1$MCHDG_PACK_HEIGHT)] <- 0
                ATB_1$MCHDG_PACK_LENGTH[is.na(ATB_1$MCHDG_PACK_LENGTH)] <- 0
                ATB_1$MCHDG_PACK_WIDTH[is.na(ATB_1$MCHDG_PACK_WIDTH)] <- 0
                ATB_1$UNIT_LOAD_QTY[is.na(ATB_1$UNIT_LOAD_QTY)] <- 0
                
                dbWriteTable(conn = con,
                             name = ATB_1_NAME ,
                             value = ATB_1,overwrite = TRUE)
                
                incProgress(1/7, detail = "Pulling Data")
                print("x6")
                sql_ATB_2<- paste("SELECT * FROM
                                  (
                                  SELECT A.*, NVL(B.ALPHA,'0') AS ALPHA, NVL(B.NUMERIC,'0') AS NUMERIC FROM", ATB_1_NAME, "A
                                  LEFT JOIN A_SCREAD.COMMCODE@SC B
                                  ON A.PART_NBR = B.PART
                                  ) ")
                
                ATB_2 <- dbGetQuery(con, sql_ATB_2)
                
                dbWriteTable(conn = con,
                             name = ATB_2_NAME ,
                             value = ATB_2, overwrite = TRUE)
                
                print("ATB-2 Done")
                
                sql_ATB_3 <- paste("SELECT *
                                   FROM", ATB_2_NAME, "A
                                   
                                   LEFT JOIN
                                   
                                   (SELECT PN,
                                   (CASE WHEN CRLD IN (1,87,76,696,622,94,75,63,58,92,0) THEN CRLD
                                   ELSE 0
                                   END
                                   )AS CRLD,
                                   (CASE WHEN PROC IN (1,87,619,604,77,696,76,94,645,622,609,75,640,0,617) THEN PROC
                                   ELSE 0
                                   END
                                   )AS PROC FROM A_SCREAD.PART_DETAIL@SC
                                   )B 
                                   ON A.PART_NBR=B.PN")
                
                ATB_3 <- dbGetQuery(con, sql_ATB_3)
                
                ATB_3$PN[is.na(ATB_3$PN)] <- 0
                ATB_3$CRLD[is.na(ATB_3$CRLD)] <- 0
                ATB_3$PROC[is.na(ATB_3$PROC)] <- 0
                
                dbWriteTable(conn = con,
                             name = ATB_3_NAME ,
                             value = ATB_3, overwrite = TRUE)
                
                print("ATB-3 Done")
                
                sql_ATB_4 <- paste("SELECT * FROM
                                   (
                                   (SELECT * FROM", ATB_3_NAME, ")A
                                   LEFT JOIN
                                   (SELECT * FROM AVG_WEIGHTED_CUBE)B
                                   ON
                                   A.CRLD = B.FACILITY AND A.ALPHA = B.CCODE
                                   )")
                ATB_4 <- dbGetQuery(con, sql_ATB_4)
                dbWriteTable(conn = con,
                             name = ATB_4_NAME ,
                             value = ATB_4,overwrite = TRUE)
                print("ATB-4 Done")
                
                
                sql_ATB_5 <- paste("SELECT A.*,NVL(AVG_LCPP,0) AS AVG_LCPP,NVL(AVG_PCPP,0)AS AVG_PCPP FROM
                   (
                   (SELECT * FROM ", ATB_4_NAME,")A
                   LEFT JOIN
                   (SELECT PART_NBR,FACILITY,ROUND(NVL(AVG(LABOR_COST_PER_PIECE),0),5) as AVG_LCPP ,ROUND(NVL(AVG(PACK_COST_PER_PIECE),0),5)as AVG_PCPP
                   FROM(
                   (SELECT PART_NBR,WHSE_NBR,STATN_CD FROM DBO.M8STACD_STANDARDS@EUC )B
                   LEFT JOIN (SELECT * FROM PROCESSING_CPP)C
                   ON
                   B.WHSE_NBR = C.FACILITY
                   AND B.STATN_CD = C.STATN_CD)
                   WHERE C.FACILITY IS NOT NULL GROUP BY PART_NBR,FACILITY)D
                   ON
                   A.PART_NBR = D.PART_NBR
                   AND A.PROC = D.FACILITY)"
                )
                
                ATB_5 <- dbGetQuery(con, sql_ATB_5)
                dbWriteTable(conn = con,
                             name = ATB_5_NAME ,
                             value = ATB_5, overwrite = TRUE)
                print("ATB-5 Done")
                
                incProgress(1/7, detail = "Pulling Data")
                
                sql_ATB_6 <- paste("SELECT A.*, NVL(B.OVERALL_LABOR_COST_PER_PIECE,0) AS PC_LCPP, NVL(B.IB_LABOR_COST_PER_PIECE,0) AS PC_IB_LCPP, NVL(B.OB_LABOR_COST_PER_PIECE,0) AS PC_0B_LCPP
                   --SELECT *
                   FROM
                   (
                   (SELECT * FROM", ATB_5_NAME, ")A
                   LEFT JOIN
                   (SELECT * FROM PC_SERV_CPP)B
                   ON
                   A.CRLD=B.FACILITY AND A.ALPHA=B.COMMODITY_CODE
                   )")
                
                ATB_6 <- dbGetQuery(con, sql_ATB_6)
                dbWriteTable(conn = con,
                             name = ATB_6_NAME ,
                             value = ATB_6, overwrite = TRUE)
                print("ATB-6 Done")
                
                sql_ATB_7 <- paste("SELECT E.*, NVL (OFFSITE_LCPP,0) AS OFFSITE_LCPP
                   FROM
                   (
                   SELECT * FROM
                   (
                   SELECT C.*, NVL(BC_LCPP,0) AS BC_LCPP FROM
                   (
                   SELECT A.*, NVL(PDC_LCPP,0) AS PDC_LCPP FROM
                   (
                   (SELECT * FROM", ATB_6_NAME, ") A
                   LEFT JOIN
                   (SELECT CC, PDC_LCPP FROM PDC_SERV_CPP)B
                   ON A.ALPHA=B.CC
                   )
                   )C
                   LEFT JOIN
                   (SELECT CC, BC_LCPP FROM BC_SERV_CPP)D
                   ON C.ALPHA=D.CC
                   )
                   )E
                   LEFT JOIN
                   (SELECT CC, OFFSITE_LCPP FROM OFFSITE_SERV_CPP)F
                   ON E.ALPHA=F.CC")
                
                ATB_7 <- dbGetQuery(con, sql_ATB_7)
                dbWriteTable(conn = con,
                             name = ATB_7_NAME ,
                             value = ATB_7, overwrite = TRUE)
                print("ATB-7 Done")
                
                incProgress(1/7, detail = "Pulling Data")
                
                sql_ATB_8 <- paste("SELECT A.*, B.MTH_COST_PER_SQ_FT, B.UL_SQ_FT
                   FROM
                   (
                   (SELECT * FROM", ATB_7_NAME, ")A
                   LEFT JOIN
                   (SELECT * FROM WAREHOUSE_COST_PER_SQFT)B
                   ON A.CRLD=B.PLANT
                   )")
                
                ATB_8 <- dbGetQuery(con, sql_ATB_8)
                
                ATB_8$MTH_COST_PER_SQ_FT <- as.character(ATB_8$MTH_COST_PER_SQ_FT)
                ATB_8$UL_SQ_FT <- as.character(ATB_8$UL_SQ_FT)
                
                dbWriteTable(conn = con,
                             name = ATB_8_NAME ,
                             value = ATB_8, overwrite = TRUE)
                print("ATB-8 Done")
                
                
                sql_ATB_9 <- paste("SELECT C.*, TRANSPORTATION_OFFSITES_PKGR, TRANSPORTATION_FROM_SOURCE, TRANSPORTATION_PDC_TO_DLR, TRANSPORTATION_TO_PDC, TRANSPORTATION_FACILITY_TO_DLR, TRANSPORTATION_BCARRIER_TO_DLR
                   FROM
                   (
                   SELECT A.*, TRANS_OFFSITES_PKGR, TRANS_FROM_WC, MCD_TO_XDOCK, TRANS_TO_PDC, TRANS_PDC_TO_DLR, TRANS_FROM_SOURCE, XDOCK_OVERSIZE, XDOCK_STANDARD
                   FROM
                   (
                   (SELECT * FROM", ATB_8_NAME, ") A
                   LEFT JOIN
                   (SELECT * FROM TRANS_COSTS_PER_CUBIC_FT)B
                   ON
                   A.CRLD = B.FACILITY
                   )
                   )C
                   LEFT JOIN
                   (SELECT * FROM TRANSPORTATION_COSTS)D
                   ON C.CRLD=D.FACILITY AND C.ALPHA=D.CC")
                
                ATB_9 <- dbGetQuery(con, sql_ATB_9)
                dbWriteTable(conn = con,
                             name = ATB_9_NAME,
                             value = ATB_9, overwrite = TRUE)
                print("ATB-9 Done")
                
                sql_ATB_10 <- paste("SELECT A.*,
                    CASE WHEN MDSNG_PKG_QTY = 0 THEN 1
                    ELSE MDSNG_PKG_QTY
                    END AS ADJ_MDSNG_PKG_QTY
                    FROM", ATB_9_NAME, "A")
                
                ATB_10 <- dbGetQuery(con, sql_ATB_10)
                dbWriteTable(conn = con,
                             name = ATB_10_NAME ,
                             value = ATB_10, overwrite = TRUE)
                print("ATB-10 Done")
                write.csv(ATB_10,"ATB10.csv")
                sql_ATB_11 <- paste("SELECT X.*, Y.LCC_PRODLINE,
                    Y.LCC_SUBLINE,
                    Y.DLR_CURR_DEALER_PRC,Y.NATL_PIECE_SLS_DLR_4, 
                    Y.NATL_PIECE_SLS_COACH_4, Y.NATL_PIECE_SLS_OTD_4, Y.NATL_PIECE_SLS_EXPORT_4, Y.NATL_PIECE_SLS_WD_4,Y.NATL_PIECE_SLS_AFTMKT_4
                    FROM
                    (
                    SELECT B.*,
                    (CASE WHEN UNIT_LOAD_QTY>0 THEN UNIT_LOAD_QTY
                    ELSE 64/CUBIC_FT_PER_PIECE
                    END) AS ADJ_UNIT_LOAD_QTY
                    FROM
                    (
                    SELECT A.*,
                    (CASE WHEN MCHDG_PACK_HEIGHT>0 AND MCHDG_PACK_LENGTH > 0 AND MCHDG_PACK_WIDTH >0
                    THEN ROUND((MCHDG_PACK_HEIGHT*MCHDG_PACK_LENGTH*MCHDG_PACK_WIDTH/1728)/ADJ_MDSNG_PKG_QTY,12)
                    ELSE TO_NUMBER(AVG_WEIGHT)/ADJ_MDSNG_PKG_QTY
                    END) AS CUBIC_FT_PER_PIECE
                    FROM", ATB_10_NAME, "A
                    ) B
                    ) X
                    LEFT JOIN
                    COMMON_WORK_NO_COST Y
                    ON X.PART_NBR=Y.PART_NBR")
                print("sql_ATB_11")
                ATB_COST_ADS_EXAMPLE <- dbGetQuery(con, sql_ATB_11)
                write.csv(ATB_COST_ADS_EXAMPLE,"ATB11.csv")
                ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE <- as.character(ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE)
                ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY <- as.character(ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY)
                ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC <- as.character(ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC)
                
                #ATB_COST_ADS_EXAMPLE[is.na(ATB_COST_ADS_EXAMPLE)] <- 0
                print("ATB_COST_ADS_EXAMPLE")
                ATB_COST_ADS_EXAMPLE[is.na(ATB_COST_ADS_EXAMPLE)] <- 0
                dbWriteTable(conn = con,
                             name = ATB_COST_ADS_EXAMPLE_NAME ,
                             value = ATB_COST_ADS_EXAMPLE, overwrite = TRUE)
                print("ATB-11 Done")
                
                incProgress(1/7, detail = "Pulling Data")
                
                sql_ATB_12 <- paste("SELECT B.*,
                    (CASE WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1>165 THEN 'Y'
                    WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1<=165 THEN 'N'
                    ELSE 'Y' END ) AS BULK_CR_FLAG
                    FROM
                    (SELECT A.*,
                    ROUND((MTH_COST_PER_SQ_FT * UL_SQ_FT/ADJ_UNIT_LOAD_QTY), 10) AS MTH_SQ_FT_COST_PER_PEICE,
                    ROUND(TRANS_PDC_TO_DLR*CUBIC_FT_PER_PIECE) AS OB_TRANS_CST_PP,
                    
                    (CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_FROM_WC)*CUBIC_FT_PER_PIECE)
                    WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC!=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_OFFSITES_PKGR)*CUBIC_FT_PER_PIECE)
                    ELSE (TRANS_FROM_SOURCE*CUBIC_FT_PER_PIECE) END )AS IB_TRANS_CST_PP,
                    
                    ROUND(2*(MCHDG_PACK_HEIGHT+MCHDG_PACK_WIDTH)) AS BULK_CR_CALC_1,
                    
                    (CASE WHEN MCHDG_PACK_HEIGHT>MCHDG_PACK_WIDTH AND MCHDG_PACK_HEIGHT>MCHDG_PACK_LENGTH THEN MCHDG_PACK_HEIGHT
                    WHEN MCHDG_PACK_WIDTH>MCHDG_PACK_HEIGHT AND MCHDG_PACK_WIDTH>MCHDG_PACK_LENGTH THEN MCHDG_PACK_WIDTH
                    ELSE MCHDG_PACK_LENGTH END)AS BULK_CR_CALC_2
                    FROM", ATB_COST_ADS_EXAMPLE_NAME, "A
                    ) B")
                print("sql_ATB_12")
                ATB_COST_ELEMENT_CAL_EXAPMLE <- dbGetQuery(con, sql_ATB_12)
                print("ATB_COST_ELEMENT_CAL_EXAPMLE")
                ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE)
                ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP)
                ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP)
                ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1 <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1)
                
                print("ATB_COST_ELEMENT_CAL_EXAPMLE")
                dbWriteTable(conn = con,
                             name = ATB_COST_ELEMENT_NAME ,
                             value = ATB_COST_ELEMENT_CAL_EXAPMLE, overwrite = TRUE)
                print("ATB-12 Done")
                
                sql_ATB_13 <- paste("SELECT X.*,
                    (CASE WHEN USB_CD = 'U' THEN MAX_WEEKS_U
                    ELSE MAX_WEEKS_SB
                    END) AS MAX_WEEKS_SUPPLY
                    FROM
                    (
                    SELECT P.*,NVL(Q.MWSBOS,99) AS MAX_WEEKS_U
                    FROM
                    (
                    SELECT A.*,NVL(B.MWSBOS,99) AS MAX_WEEKS_SB
                    FROM", ATB_COST_ELEMENT_NAME, "A
                    LEFT JOIN
                    MWS_USB_SB B
                    ON A.ALPHA = B.ALPHA
                    ) P
                    LEFT JOIN MWS_USB_U Q
                    ON P.PROC=Q.PROC
                    ) X")
                
                ATB_COST_MAX_SUPPLY_EXAMPLE <- dbGetQuery(con, sql_ATB_13)
                dbWriteTable(conn = con,
                             name = ATB_COST_MAX_SUPPLY_NAME ,
                             value = ATB_COST_MAX_SUPPLY_EXAMPLE, overwrite = TRUE)
                print("ATB-13 Done")
                
                incProgress(1/7, detail = "Pulling Data")
                
                sql_ATB_14 <- paste("SELECT A.*,
                    CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' THEN 0
                    WHEN RB1_ALPHA_WHSE_CLASS!='SP' AND BULK_CR_FLAG='Y' THEN (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_OVERSIZE)*CUBIC_FT_PER_PIECE
                    ELSE (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_STANDARD)*CUBIC_FT_PER_PIECE
                    END AS REDISTRIBUTION_COST_PP,
                    
                    CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.39*PC_LCPP)+(0.39*PDC_LCPP)
                    WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.39*PC_LCPP)+(0.39*BC_LCPP)
                    ELSE (0.39*PC_LCPP)
                    END AS IB_LABOR_COST_PP,
                    
                    CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.61*PC_LCPP)+(0.61*PDC_LCPP)
                    WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.61*PC_LCPP)+(0.61*BC_LCPP)
                    ELSE (0.61*PC_LCPP)
                    END AS OB_LABOR_COST_PP
                    FROM", ATB_COST_MAX_SUPPLY_NAME, "A")
                
                ATB_COST_CAL_EXAMPLE <- dbGetQuery(con,sql_ATB_14)
                
                ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP <- as.character(ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP)
                
                dbWriteTable(conn = con,
                             name = ATB_COST_CAL_EXAMPLE_NAME ,
                             value = ATB_COST_CAL_EXAMPLE, overwrite = TRUE)
                print("ATB-14 Done")
                
                sql_ATB_15 <- paste("  SELECT A.*, (IB_LABOR_COST_PP + OB_LABOR_COST_PP + AVG_LCPP + AVG_PCPP) AS ONSITE_PRCS_COST_PP,
                    (OB_TRANS_CST_PP + IB_TRANS_CST_PP + REDISTRIBUTION_COST_PP) AS ONSITE_TRANS_COST_PER_PIECE,
                    (TRANS_OFFSITES_PKGR*CUBIC_FT_PER_PIECE) AS OFFSITE_TRANS_COST_PP
                    FROM",
                                    ATB_COST_CAL_EXAMPLE_NAME, "A")
                
                ATB_TRANS_PROCESS_COST_EXAMPLE <- dbGetQuery(con, sql_ATB_15)
                
                ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE)
                ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP)
                
                dbWriteTable(conn = con,
                             name = ATB_TRANS_PROCESS_COST_NAME ,
                             value = ATB_TRANS_PROCESS_COST_EXAMPLE, overwrite = TRUE)
                print("ATB-15 Done")
                
                sql_ads_1 <- paste("SELECT A.*, B.MINIMUM_BUY_QTY, B.STD_PACK_QTY, B.BUY_FREQ FROM",
                                   ATB_TRANS_PROCESS_COST_NAME, "A
                   LEFT JOIN
                   (SELECT MTL_PART_PART_NBR, MINIMUM_BUY_QTY, STD_PACK_QTY, BUY_FREQ
                   FROM DBO.SOURCE@EUC
                   WHERE PRIME_SOURCE_IND = 1) B
                   ON A.PART_NBR = B.MTL_PART_PART_NBR")
                
                ATB_final_ads_1 <- dbGetQuery(con, sql_ads_1)
                
                ATB_final_ads_1$MINIMUM_BUY_QTY <- as.character(ATB_final_ads_1$MINIMUM_BUY_QTY)
                ATB_final_ads_1$STD_PACK_QTY <- as.character(ATB_final_ads_1$STD_PACK_QTY)
                ATB_final_ads_1$BUY_FREQ <- as.character(ATB_final_ads_1$BUY_FREQ)
                
                dbWriteTable(conn = con,
                             name = ATB_final_ads_1_name,
                             value = ATB_final_ads_1, overwrite = TRUE)
                
                print("ATB-16 Done")
                
                sql_ads <- paste("SELECT A.*, B.* FROM",
                                 ATB_final_ads_1_name," A
                 LEFT JOIN MANDATORY_RETENTION_DB B
                 ON A.PART_NBR = B.PART_NUMBER")
                
                ATB_final_ads <- dbGetQuery(con, sql_ads)
                print("ATB-17 Done")
                
                
                sql_WD_price <- paste("SELECT PART_NUMBER, WD_WHSL_DIST_PRC FROM DBO.WD_PRICES@EUC
                      WHERE PART_NUMBER IN (SELECT PART_NBR FROM" ,PART_data_num_name, ")")
                print("0 done")
                WD_price <- dbGetQuery(con, sql_WD_price)
                print("1 done")
                
                sql_Inv_level <- paste("SELECT MATRL_PART_NBR, NATNL_INV AS TOTAL_INVENTORY
                       FROM DBO.MATERIAL_PART@EUC WHERE MATRL_PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")")
                print("2done")
                Inv_level <- dbGetQuery(con, sql_Inv_level)
                print("3done")
                ## Pulling Sales Distribution across different markets data
                sql_market_distribution <- paste("SELECT PART_NBR,
                                 CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                 WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                 WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                 END AS CATEGORY_CODE,
                                 SUM(YR1_SALES) AS YR1_SALES
                                 FROM DBO.PART_SLS_TO_DATE@EUC
                                 WHERE PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")","
                                 GROUP BY
                                 PART_NBR,
                                 CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                 WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                 WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                 END")
                print("4done")
                market_distribution <- dbGetQuery(con, sql_market_distribution)
                
                market_list <- c("SALES_OES", "SALES_ALLIED_EXPORT", "SALES_IAM")
                market_list <- as.data.frame(market_list)
                colnames(market_list) <- c("CATEGORY_CODE")
                part_list <- PART_data_num
                colnames(part_list) <- c("PART_NBR")
                cross_join <- merge(part_list, market_list)
                cross_join$CATEGORY_CODE <- as.character(cross_join$CATEGORY_CODE)
                
                market_distribution <- merge(cross_join, market_distribution, by = c("PART_NBR", "CATEGORY_CODE"), all.x = TRUE)
                
                spread_market_distribution <- spread(market_distribution ,key = CATEGORY_CODE,value = YR1_SALES)
                
                spread_market_distribution$SALES_ALLIED_EXPORT <- ifelse(is.na(spread_market_distribution$SALES_ALLIED_EXPORT), 0, (spread_market_distribution$SALES_ALLIED_EXPORT))
                spread_market_distribution$SALES_IAM <- ifelse(is.na(spread_market_distribution$SALES_IAM), 0, (spread_market_distribution$SALES_IAM))
                spread_market_distribution$SALES_OES <- ifelse(is.na(spread_market_distribution$SALES_OES), 0, (spread_market_distribution$SALES_OES))
                spread_market_distribution$COMPLETE_SAALES <- spread_market_distribution$SALES_ALLIED_EXPORT + spread_market_distribution$SALES_IAM + spread_market_distribution$SALES_OES
                spread_market_distribution$ALLIED_EXPORT_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_ALLIED_EXPORT/spread_market_distribution$COMPLETE_SAALES))
                spread_market_distribution$IAM_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_IAM/spread_market_distribution$COMPLETE_SAALES))
                spread_market_distribution$OES_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_OES/spread_market_distribution$COMPLETE_SAALES))
                
                
                # Merging WD preice
                ATB_final_ads <- merge(ATB_final_ads, WD_price, by.x= "PART_NBR", by.y= "PART_NUMBER", all.x= TRUE)
                
                # Merging Inventory Level
                ATB_final_ads <- merge(ATB_final_ads, Inv_level, by.x= "PART_NBR", by.y= "MATRL_PART_NBR", all.x= TRUE)
                
                ATB_final_ads <- merge(ATB_final_ads, spread_market_distribution, by.x= "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                
                dbRemoveTable(con, PART_data_num_name)
                
                ATB_final_ads$ACTUAL_SALES_CYTD <- ifelse(is.na(ATB_final_ads$ACTUAL_SALES_CYTD), 0, ATB_final_ads$ACTUAL_SALES_CYTD)
                ATB_final_ads$PROJECTED_SALES_CURR_YEAR <- ifelse(is.na(ATB_final_ads$PROJECTED_SALES_CURR_YEAR), 0, ATB_final_ads$PROJECTED_SALES_CURR_YEAR)
                ATB_final_ads$TOTAL_INVENTORY <- ifelse(is.na(ATB_final_ads$TOTAL_INVENTORY), 0, ATB_final_ads$TOTAL_INVENTORY)
                
                #ATB_final_ads$CURRENT_YEAR <- as.numeric(ATB_final_ads$PROJECTED_SALES_CURR_YEAR) - as.numeric(ATB_final_ads$ACTUAL_SALES_CYTD)
                ATB_final_ads$CURRENT_YEAR <- as.numeric(ATB_final_ads$PROJECTED_SALES_CURR_YEAR)
                ATB_final_ads$CURRENT_YEAR <- ifelse(ATB_final_ads$CURRENT_YEAR < 0, 0, ATB_final_ads$CURRENT_YEAR)
                
                ATB_final_ads$WD_WHSL_DIST_PRC <- ifelse(is.na(ATB_final_ads$WD_WHSL_DIST_PRC), 0, ATB_final_ads$WD_WHSL_DIST_PRC)
                
                ATB_final_ads$PART_NBR<- str_pad(ATB_final_ads$PART_NBR, width=8, side="left", pad="0")
                
                ATB_final_ads$PL_SL <- paste(ATB_final_ads$LCC_PRODLINE, ATB_final_ads$LCC_SUBLINE,sep = "-")
                PL_SL_LIST <- as.data.frame(ATB_final_ads$PL_SL)
                colnames(PL_SL_LIST) <- c("PL_SL")
                PL_SL_LIST <- as.data.frame(unique(PL_SL_LIST$PL_SL))
                
                colnames(PL_SL_LIST) <- c("PL_SL")
                PL_SL_LIST$PL_SL <- as.character(PL_SL_LIST$PL_SL)
                ATB_final_ads$DLR_SLS <- ifelse(ATB_final_ads$DLR_CURR_DEALER_PRC ==0 & ATB_final_ads$NATL_PIECE_SLS_DLR_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_COACH_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_EXPORT_4 ==0 ,
                                                0, 
                                                as.numeric( ATB_final_ads$NATL_PIECE_SLS_DLR_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_COACH_4) + 
                                                  as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4) + as.numeric(ATB_final_ads$NATL_PIECE_SLS_EXPORT_4))
                ATB_final_ads$WD_SLS <- ifelse(ATB_final_ads$DLR_SLS ==0,as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4)+as.numeric(ATB_final_ads$NATL_PIECE_SLS_WD_4) +as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4),
                                               as.numeric( ATB_final_ads$NATL_PIECE_SLS_WD_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4))							
                
                
                dbWriteTable(conn = con,
                             name = PL_SL_LIST_ATB_NAME,
                             value = PL_SL_LIST, overwrite = TRUE)
                
                sql_discount_market <- paste("SELECT PL_SL, MARKET, SUM(T_SLS) AS TOTAL_SALES, SUM(T_DISC) AS TOTAL_DISCOUNT
                             FROM (SELECT (LPAD(PROD_LINE,2,0) || '-' || SUB_LINE) AS PL_SL,MARKET,T_SLS,T_DISC FROM ABM_DATA.ABM_WIDE_DETAIL_NONW_PN_MV_P)
                             WHERE PL_SL IN (SELECT PL_SL FROM", PL_SL_LIST_ATB_NAME, ")
                             GROUP BY PL_SL, MARKET")
                
                discount_market <- dbGetQuery(con, sql_discount_market)
                print("5done")
                drop_table_PL_SL_LIST_ATB <- paste("BEGIN
                                   EXECUTE IMMEDIATE 'DROP TABLE", PL_SL_LIST_ATB_NAME,"';
                                   EXCEPTION
                                   WHEN OTHERS THEN NULL;
                                   END;")
                
                value_PL_SL_LIST_ATB <- dbSendUpdate(con, drop_table_PL_SL_LIST_ATB)
                
                market_list_for_discount <- c("ALLIED/EXPORT", "INDEP AFTERMKT", "ORIG EQUIP SRVC")
                market_list_for_discount <- as.data.frame(market_list_for_discount)
                colnames(market_list_for_discount) <- c("CATEGORY_CODE")
                
                cross_join_pl_sl <- merge(PL_SL_LIST, market_list_for_discount)
                cross_join_pl_sl$CATEGORY_CODE <- as.character(cross_join_pl_sl$CATEGORY_CODE)
                colnames(cross_join_pl_sl) <- c("PL_SL", "MARKET")
                
                discount_market <- merge(cross_join_pl_sl, discount_market, by = c("PL_SL", "MARKET"), all.x = TRUE)
                
                pl_sl_market_sales <- discount_market %>% select(MARKET, PL_SL, TOTAL_SALES)
                pl_sl_market_discount <- discount_market %>% select(MARKET, PL_SL, TOTAL_DISCOUNT)
                
                spread_sales <- spread(pl_sl_market_sales ,key = MARKET,value = TOTAL_SALES)
                spread_discount <- spread(pl_sl_market_discount, key = MARKET, value = TOTAL_DISCOUNT)
                
                spread_sales$`ALLIED/EXPORT` <- ifelse(is.na(spread_sales$`ALLIED/EXPORT`), 0, spread_sales$`ALLIED/EXPORT`)
                spread_sales$`INDEP AFTERMKT` <- ifelse(is.na(spread_sales$`INDEP AFTERMKT`), 0, spread_sales$`INDEP AFTERMKT`)
                spread_sales$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_sales$`ORIG EQUIP SRVC`), 0, spread_sales$`ORIG EQUIP SRVC`)
                
                colnames(spread_sales) <- c("PL_SL", "Sales_allied_export", "Sales_iam", "Sales_oes")
                
                spread_discount$`ALLIED/EXPORT` <- ifelse(is.na(spread_discount$`ALLIED/EXPORT`), 0, ( spread_discount$`ALLIED/EXPORT`))
                spread_discount$`INDEP AFTERMKT` <- ifelse(is.na(spread_discount$`INDEP AFTERMKT`), 0, ( spread_discount$`INDEP AFTERMKT`))
                spread_discount$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_discount$`ORIG EQUIP SRVC`), 0, ( spread_discount$`ORIG EQUIP SRVC`))
                
                colnames(spread_discount) <- c("PL_SL", "Discount_allied_export", "Discount_iam", "Discount_oes")
                
                discount_data_pl_sl_level <- merge(x = spread_sales, y = spread_discount, by.x = "PL_SL", by.y = "PL_SL", all = TRUE)
                
                discount_data_pl_sl_level$Discount_iam_percent <- ifelse(discount_data_pl_sl_level$Sales_iam == 0, 0, (discount_data_pl_sl_level$Discount_iam/discount_data_pl_sl_level$Sales_iam)* -100)
                discount_data_pl_sl_level$Discount_oes_percent <- ifelse(discount_data_pl_sl_level$Sales_oes == 0, 0, (discount_data_pl_sl_level$Discount_oes/discount_data_pl_sl_level$Sales_oes)* -100)
                discount_data_pl_sl_level$Discount_allied_export_percent <- ifelse(discount_data_pl_sl_level$Sales_allied_export == 0, 0, (discount_data_pl_sl_level$Discount_allied_export/discount_data_pl_sl_level$Sales_allied_export)* -100)
                
                ATB_final_ads <- merge(ATB_final_ads, discount_data_pl_sl_level, by.x = "PL_SL", by.y = "PL_SL", all.x = TRUE)
                
                ## Converting Back to numeric:
                ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE <- as.numeric(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)
                ATB_final_ads$OB_TRANS_CST_PP <- as.numeric(ATB_final_ads$OB_TRANS_CST_PP)
                ATB_final_ads$IB_TRANS_CST_PP <- as.numeric(ATB_final_ads$IB_TRANS_CST_PP)
                ATB_final_ads$BULK_CR_CALC_1 <- as.numeric(ATB_final_ads$BULK_CR_CALC_1)
                ATB_final_ads$REDISTRIBUTION_COST_PP <- as.numeric(ATB_final_ads$REDISTRIBUTION_COST_PP)
                ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE <- as.numeric(ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE)
                ATB_final_ads$OFFSITE_TRANS_COST_PP <- as.numeric(ATB_final_ads$OFFSITE_TRANS_COST_PP)
                ATB_final_ads$MINIMUM_BUY_QTY <- as.numeric(ATB_final_ads$MINIMUM_BUY_QTY)
                ATB_final_ads$STD_PACK_QTY <- as.numeric(ATB_final_ads$STD_PACK_QTY)
                ATB_final_ads$BUY_FREQ <- as.numeric(ATB_final_ads$BUY_FREQ)
                ATB_final_ads$CAMPN_QTY <- as.numeric(ATB_final_ads$CAMPN_QTY)
                ATB_final_ads$DECK_CD <- as.numeric(ATB_final_ads$CAMPN_QTY)
                ATB_final_ads$LAST_COST <- as.numeric(ATB_final_ads$LAST_COST)
                ATB_final_ads$CUBIC_FT_PER_PIECE <- as.numeric(ATB_final_ads$CUBIC_FT_PER_PIECE)
                ATB_final_ads$ADJ_UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$ADJ_UNIT_LOAD_QTY)
                #ATB_final_ads$MDSNG_PKG_QTY <- as.numeric(ATB_final_ads$MDSNG_PKG_QTY)
                ATB_final_ads$MCHDG_PACK_HEIGHT <- as.numeric(ATB_final_ads$MCHDG_PACK_HEIGHT)
                ATB_final_ads$MCHDG_PACK_LENGTH <- as.numeric(ATB_final_ads$MCHDG_PACK_LENGTH)
                ATB_final_ads$MCHDG_PACK_WIDTH <- as.numeric(ATB_final_ads$MCHDG_PACK_WIDTH)
                ATB_final_ads$UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$UNIT_LOAD_QTY)
                ATB_final_ads$DLR_CURR_DEALER_PRC <- as.numeric(ATB_final_ads$DLR_CURR_DEALER_PRC)
                ATB_final_ads$MTH_COST_PER_SQ_FT <- as.numeric(ATB_final_ads$MTH_COST_PER_SQ_FT)
                ATB_final_ads$UL_SQ_FT <- as.numeric(ATB_final_ads$UL_SQ_FT)
                
                
                ATB_final_ads$DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$DLR_CURR_DEALER_PRC
                ATB_final_ads$WD_DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$WD_WHSL_DIST_PRC
                
                ATB_final_ads$Dealer_Price_Allied_Export <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
                ATB_final_ads$Dealer_Price_OES <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_oes_percent/100))
                ATB_final_ads$Dealer_Price_IAM <- ATB_final_ads$WD_WHSL_DIST_PRC * (1 - (ATB_final_ads$Discount_iam_percent/100))
                
                ATB_final_ads$Proline_subline <- ATB_final_ads$PL_SL
                ATB_final_ads$PL_SL <- NULL
                ATB_final_ads$DLR_SLS <- as.numeric(ATB_final_ads$DLR_SLS)
                ATB_final_ads$WD_SLS <- as.numeric(ATB_final_ads$WD_SLS)
                ATB_final_ads$INVENTORY_LVL<-as.numeric(ATB_final_ads$INVENTORY_LVL)
                incProgress(1/7, detail = "Running Calculations")
                
                ### Filtering parts with no data
                
                all_part <- as.data.frame(PART_data$PART_NBR)
                present_part <- as.data.frame(ATB_final_ads$PART_NBR)
                colnames(all_part)[1] <- "PART_NBR"
                colnames(present_part)[1] <- "PART_NBR"
                
                print("6done")
                
                ATB_ads_filtered_part_internal <- subset(all_part, !(PART_NBR %in% present_part$PART_NBR))
                ATB_ads_filtered_part <- ATB_final_ads[which((is.na(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)) | (is.na(ATB_final_ads$FORECAST_YR_1)) | (is.na(ATB_final_ads$LAST_COST))),]
                
                if(nrow(ATB_ads_filtered_part_internal) > 0 & nrow(ATB_ads_filtered_part) > 0)
                {
                  ATB_ads_filtered_part_internal$Reason <- "Forcee data not present"
                  ATB_ads_filtered_part$Reason <- ifelse(is.na(ATB_ads_filtered_part$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part$LAST_COST), "Last Cost not present", "Forcee data not present"))
                  ATB_ads_filtered_part <- ATB_ads_filtered_part %>% select(PART_NBR, Reason)
                  ATB_ads_filtered_part <- rbind(ATB_ads_filtered_part, ATB_ads_filtered_part_internal)
                  
                  
                } else if(nrow(ATB_ads_filtered_part_internal) > 0 & nrow(ATB_ads_filtered_part) == 0)
                {
                  ATB_ads_filtered_part_internal$Reason <- "Forcee data not present"
                  ATB_ads_filtered_part <- ATB_ads_filtered_part_internal
                } else if(nrow(ATB_ads_filtered_part_internal) == 0 & nrow(ATB_ads_filtered_part) > 0)
                {
                  ATB_ads_filtered_part$Reason <- ifelse(is.na(ATB_ads_filtered_part$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part$LAST_COST), "Last Cost not present", "Forcee data not present"))
                  ATB_ads_filtered_part <- ATB_ads_filtered_part %>% select(PART_NBR, Reason)
                  
                } else
                {
                  ATB_ads_filtered_part <- data.frame()
                  
                }
                
                if(nrow(ATB_ads_filtered_part) > 0)
                {
                  
                  shinyjs::enable("download_filtered_list")
                  
                  output$modal_table <- renderDataTable({
                    datatable(ATB_ads_filtered_part, rownames = FALSE,
                              options = list(scrollX=TRUE, scrollY='200px',
                                             lengthMenu = c(5, 25, 50),
                                             paging=FALSE, searching=FALSE))
                  })
                  
                  showModal(modalDialog(
                    title = "Summary Report",
                    DT::dataTableOutput('modal_table')
                  ))
                  
                  output$download_filtered_list <- downloadHandler(
                    filename = function() {
                      paste("Filtered_Part_List", ".csv", sep="")
                    },
                    content = function(file) {
                      abc <- ATB_ads_filtered_part
                      
                      write.csv(abc, file, row.names = FALSE)
                      
                    }
                  )
                  
                }
                
                ATB_final_ads$MINIMUM_BUY_QTY <- ifelse(is.na(ATB_final_ads$MINIMUM_BUY_QTY), 0,ATB_final_ads$MINIMUM_BUY_QTY)
                ATB_final_ads$STD_PACK_QTY <- ifelse(is.na(ATB_final_ads$STD_PACK_QTY), 0,ATB_final_ads$STD_PACK_QTY )
                ATB_final_ads$BUY_FREQ <- ifelse(is.na(ATB_final_ads$BUY_FREQ ), 1,ATB_final_ads$BUY_FREQ )
                
                ## Negative inventory being made zero
                ATB_final_ads$TOTAL_INVENTORY <- ifelse(ATB_final_ads$TOTAL_INVENTORY < 0, 0, ATB_final_ads$TOTAL_INVENTORY)
                
                
                ATB_final_ads$X <- NULL
                
                print("7done")
                
                if(nrow(ATB_final_ads) > 0)
                {
                  
                  ATB_final_ads$Setup_cost <- 0
                  ATB_final_ads$Additional_cost <- 0
                  ATB_final_ads$FLAG <- 0
                  ATB_final_ads$Entered_Buy_Qty <- 0
                  ATB_final_ads$OES_FRACTION <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$OES_FRACTION)
                  ATB_final_ads$FLAG <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$FLAG)
                  
                  ## Converting characters\factors into numeric
                  ATB_final_ads <- as.data.frame(ATB_final_ads)
                  for(i in (4:35)){
                    ATB_final_ads[,i] <- as.numeric(ATB_final_ads[,i])
                  }
                  
                  ## Replacing all NA's with zero
                  ATB_final_ads[is.na(ATB_final_ads)] <- 0
                  
                  part_ads <- ATB_final_ads
                  
                  global_ads$df_data_ads <- ATB_final_ads
                  #write.csv(ATB_final_ads, file = "ATB_ads.csv")
                  
                  ATB_ADS <- ATB_final_ads
                  
                  if(Flag_PART_data == 1)
                  {
                    dbRemoveTable(con, PART_data_name)
                  }
                  
                  dbRemoveTable(con, ATB_final_ads_1_name)
                  
                  #  Code for Part List View:
                  #  1. Current (NPV_Scenario_1)
                  #  2. Resource: Current (NPV_Scenario_1_curr)
                  #  3. ATB Optimal: Original data (NPV_Cal_CR_list_orig)
                  #  4. ATB Optimal: Updated data (NPV_Cal_CR_list)
                  
                  ## Description about the variables used
                  # AMD- It is tha Average monthly demand
                  # BF_BQ- It is product of Buy frequency and buy quantity
                  # FCST- It is the Forecast data at year level
                  # BQ - Gives teh Buy Quantity of a part
                  # Purchase_times - The number of purchase has to be made
                  # Yearly_BQ - Sum of buy quantity at a yearly level
                  # Curr_Inv - The current Inventory level of the part
                  # Adj_Dem - The adjusted demand of a part it is given as (Yearly_BQ - Curr_Inv)
                  # Revenue
                  # Offsite_Qty
                  # Storage_Cost
                  # Freight_cost
                  # Processing_cost
                  # Material_cost
                  # All_Expense- Sum of the above mentioned cost elements
                  
                  
                  ################# 1. Code for Original Scenario: Current:
                  Original_current <- Current(ATB_ADS)
                  
                  ################# 3. Code for Original Scenario- Optimal
                  Original_optimal <- Optimal(ATB_ADS)
                  
                  ################# 7. Code for Selldown Calculation
                  Selldown_NPV <- Selldown(ATB_ADS)
                  
                  ####################################################################################################################################################################################################################
                  
                  
                  print("8done")
                  ########creating columns from ATB_final_ads
                  ATB_ads_per_piece <- ATB_ADS %>% select(PART_NBR,DEALER_PRICE_NO_DISCOUNT,Discount_oes_percent,Discount_allied_export_percent,
                                                          Dealer_Price_OES,Dealer_Price_Allied_Export,WD_DEALER_PRICE_NO_DISCOUNT,Discount_iam_percent,Dealer_Price_IAM,
                                                          LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                          REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                  
                  colnames(ATB_ads_per_piece)[1] <- "Part_Nbr"
                  ### Creating table for cost comparison:
                  orig_cost <- ATB_ADS %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC)
                  orig_cost$LAST_COST <- round(orig_cost$LAST_COST, 2)
                  orig_cost$DLR_CURR_DEALER_PRC <- round(orig_cost$DLR_CURR_DEALER_PRC, 2)
                  orig_cost$WD_WHSL_DIST_PRC <- round(orig_cost$WD_WHSL_DIST_PRC, 2)
                  
                  scenario_cost <- orig_cost
                  # ATB_ADS %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC)
                  scenario_cost$buy_qty <- 0
                  scenario_cost <- scenario_cost %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, buy_qty,
                                                            Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC,)
                  reflect_cost_scenario_1$df_data_cost_scenario_1 <- scenario_cost
                  reflect_cost_scenario_2$df_data_cost_scenario_2 <- scenario_cost
                  
                  ##### Output of Cost comparison table
                  output$Cost_comp_1 <- renderHotable({
                    orig_cost <- data.frame(Part_Nbr = orig_cost[,1], paste("$", formatC(orig_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                            lapply(orig_cost[,3:4], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                            lapply(orig_cost[,5:8], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
                    
                    colnames(orig_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Setup Cost", "Additional Cost", "Dealer Price", "WD Price")
                    orig_cost
                    
                  }, readOnly = TRUE)
                  
                  print("9done")
                  ##########################################################################################################################################################################################
                  #### Creating table for Part List Analysis Result
                  
                  #  1. Original: Original_current, Original_optimal, Selldown_NPV
                  #  2. Scenario-1: Scenario_1_current, Scenario_1_optimal, Selldown_NPV_Scenario_1
                  #  3. Scenario_2: Scenario_2_current, Scenario_2_optimal, Selldown_NPV_Scenario_2
                  
                  ## Creating intermediate tables to get proper format
                  # spl- Source Part List
                  
                  spl_1 <- Original_current
                  spl_1$Part_Nbr <- str_pad(spl_1$Part_Nbr, width=8, side="left", pad="0")
                  spl_2 <- Original_optimal
                  spl_2$Part_Nbr <- str_pad(spl_2$Part_Nbr, width=8, side="left", pad="0")
                  spl_3 <- Selldown_NPV
                  spl_3$Part_Nbr <- str_pad(spl_3$Part_Nbr, width=8, side="left", pad="0")
                  
                  spl_12 <- merge(spl_1, spl_2, by = "Part_Nbr")
                  spl_123 <- merge(spl_12, spl_3, by = "Part_Nbr")
                  spl_123 <- merge(spl_123, ATB_ads_per_piece, by = "Part_Nbr")
                  spl_123_result <- spl_123 %>% select(Part_Nbr, NPV, Selldown_NPV, Revenue, Revenue_non_npv,Optimal_NPV,Optimal_ATB_Quantity, Total_Forecast)
                  
                  
                  #global_scenario_1_down$df_data_scenario_1_down <- spl_123_result
                  
                  spl_456_result<- data.frame(Part_Nbr = spl_123_result$Part_Nbr)
                  spl_456_result$NPV_Scenario_1  <- NA
                  spl_456_result$Selldown_NPV_Scenario_1  <- NA
                  spl_456_result$Revenue_Scenario_1 <- NA
                  spl_456_result$Revenue_non_npv_Scenario_1 <- NA
                  spl_456_result$Optimal_NPV_Scenario_1 <- NA
                  spl_456_result$Optimal_ATB_Quantity_Scenario_1 <- NA
                  spl_456_result$Total_Forecast_Scenario_1 <- NA
                  print("10done")
                  write.csv(spl_456_result, file = "spl_123_result_s1.csv", row.names = FALSE)
                  #global_scenario_2_down$df_data_scenario_2_down <- spl_123_result
                  
                  spl_789_result <- data.frame(Part_Nbr = spl_123_result$Part_Nbr)
                  spl_789_result$NPV_Scenario_2  <- NA
                  spl_789_result$Selldown_NPV_Scenario_2  <- NA
                  spl_789_result$Revenue_Scenario_2 <- NA
                  spl_789_result$Revenue_non_npv_Scenario_2 <- NA
                  spl_789_result$Optimal_NPV_Scenario_2 <- NA
                  spl_789_result$Optimal_ATB_Quantity_Scenario_2 <- NA
                  spl_789_result$Total_Forecast_Scenario_2 <- NA
                  write.csv(spl_789_result, file = "spl_123_result_s2.csv", row.names = FALSE)
                  
                  output$analysis_original <- renderHotable({
                    spl_123_result$Part_Nbr <- str_pad(spl_123_result$Part_Nbr, width=8, side="left", pad="0")
                    spl_123_result <- data.frame(Part_Nbr = spl_123_result[,1], lapply(spl_123_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 formatC(spl_123_result[,7] , big.mark=",", digits=0, format="f"), formatC(spl_123_result[,8] , big.mark=",", digits=0, format="f"), stringsAsFactors = FALSE)
                    
                    colnames(spl_123_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
                    print("11done")
                    spl_123_result
                  })
                  #######################
                  part_ff<-global_ads$df_data_ads
                  y<-nrow(part_ff)
                  print(y)
                  ATB_ADS <- global_ads$df_data_ads
                  
                  finance_current_scenario= data.frame(matrix("",  nrow = as.numeric(y)))  
                  #finance_current_scenario<-0
                  finance_current_scenario<-as.data.frame(finance_current_scenario)
                  finance_current_scenario$matrix.....nrow...as.numeric.y..<-NULL
                  finance_current_scenario$Part_Nbr<-part_ff$PART_NBR
                  finance_current_scenario$Pb<-2
                  finance_current_scenario$Optimal_qty<-spl_2$Optimal_ATB_Quantity
                  finance_current_scenario$Discount_Rate<-15
                  finance_current_scenario$ATB_Units<-spl_1$Buy_Quantity
                  finance_current_scenario$Material_cost<-part_ff$LAST_COST
                  finance_current_scenario$Labour_cost_per_hr<-as.numeric(part_ff$AVG_LCPP)+
                    as.numeric(part_ff$OFFSITE_LCPP)+as.numeric(part_ff$IB_LABOR_COST_PP)+
                    as.numeric(part_ff$OB_LABOR_COST_PP)
                  finance_current_scenario$Storage_cost<-round(as.numeric(part_ff$MTH_SQ_FT_COST_PER_PEICE),2)
                  finance_current_scenario$Total_packaging_cost<-spl_1$Package_cost
                  finance_current_scenario$Freight_one_way<-round(as.numeric(part_ff$IB_TRANS_CST_PP)+as.numeric(part_ff$OFFSITE_TRANS_COST_PP),2)
                  finance_current_scenario$Inventory_lvl<-part_ff$INVENTORY_LVL
                  finance_current_scenario$FORECAST_YR_1<-part_ff$FORECAST_YR_1
                  finance_current_scenario$FORECAST_YR_2<-part_ff$FORECAST_YR_2
                  finance_current_scenario$FORECAST_YR_3<-part_ff$FORECAST_YR_3
                  finance_current_scenario$FORECAST_YR_4<-part_ff$FORECAST_YR_4
                  finance_current_scenario$FORECAST_YR_5<-part_ff$FORECAST_YR_5
                  finance_current_scenario$FORECAST_YR_6<-part_ff$FORECAST_YR_6
                  finance_current_scenario$FORECAST_YR_7<-part_ff$FORECAST_YR_7
                  finance_current_scenario$FORECAST_YR_8<-part_ff$FORECAST_YR_8
                  finance_current_scenario$FORECAST_YR_9<-part_ff$FORECAST_YR_9
                  finance_current_scenario$FORECAST_YR_10<-part_ff$FORECAST_YR_10
                  finance_current_scenario$FORECAST_YR_11<-part_ff$FORECAST_YR_11
                  finance_current_scenario$FORECAST_YR_12<-part_ff$FORECAST_YR_12
                  finance_current_scenario$FORECAST_YR_13<-part_ff$FORECAST_YR_13
                  finance_current_scenario$FORECAST_YR_14<-part_ff$FORECAST_YR_14
                  finance_current_scenario$FORECAST_YR_15<-part_ff$FORECAST_YR_15
                  finance_current_scenario$Historic_sales_CY<-part_ff$ACTUAL_SALES_CYTD
                  finance_current_scenario$Historic_sales_minus_1<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_1
                  finance_current_scenario$Historic_sales_minus_2<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_2
                  finance_current_scenario$Mandatory_serv_ret<-round(as.numeric(part_ff$APPLICATION_LY),0)
                  finance_current_scenario$Dealer_price<-part_ff$DEALER_PRICE_NO_DISCOUNT
                  finance_current_scenario$Dlr_sls<-part_ff$DLR_SLS
                  finance_current_scenario$WD_price<-part_ff$WD_DEALER_PRICE_NO_DISCOUNT
                  finance_current_scenario$WD_sls<-part_ff$WD_SLS	
                  finance_current_scenario$sa<-0.12
                  print("12done")
                  finance_current_scenario_pb<- finance_current_scenario
                  finance_current_scenario_pb$All_time_buy<-(finance_current_scenario_pb$ATB_Units*finance_current_scenario_pb$Material_cost)+
                    finance_current_scenario_pb$Labour_cost_per_hr+finance_current_scenario_pb$Storage_cost+ finance_current_scenario_pb$Total_packaging_cost+(
                      finance_current_scenario_pb$Freight_one_way*finance_current_scenario_pb$ATB_Units)
                  finance_current_scenario_pb$sp<-ifelse((finance_current_scenario_pb$Dlr_sls + finance_current_scenario_pb$WD_sls) ==0,
                                                         ifelse(finance_current_scenario_pb$Dealer_price ==0,finance_current_scenario_pb$WD_price,
                                                                ifelse(finance_current_scenario_pb$WD_price==0,finance_current_scenario_pb$Dealer_price,
                                                                       (as.numeric(finance_current_scenario_pb$Dealer_price)+as.numeric(finance_current_scenario_pb$WD_price))*0.5))
                                                         , finance_current_scenario_pb$Dealer_price*(finance_current_scenario_pb$Dlr_sls/
                                                                                                       (finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls))+ finance_current_scenario_pb$WD_price*
                                                           (finance_current_scenario_pb$WD_sls/(finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls)))
                  #finance_current_scenario_pb$sa<-if(x3=="GMP"){0.09}else if (x3=="ACD"){0.15}else if(x3=="-"){0.12}
                  finance_current_scenario_pb$sa<-0.12
                  finance_current_scenario_pb$Units_storage_0<-as.numeric(finance_current_scenario_pb$ATB_Units)+as.numeric(finance_current_scenario_pb$Inventory_lvl)
                  finance_current_scenario_pb$Units_storage_1<-ifelse(finance_current_scenario_pb$FORECAST_YR_1==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_1)
                  finance_current_scenario_pb$Units_storage_2<-ifelse(finance_current_scenario_pb$FORECAST_YR_2==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_2)
                  finance_current_scenario_pb$Units_storage_3<-ifelse(finance_current_scenario_pb$FORECAST_YR_3==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_3)
                  finance_current_scenario_pb$Units_storage_4<-ifelse(finance_current_scenario_pb$FORECAST_YR_4==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_4)
                  finance_current_scenario_pb$Units_storage_5<-ifelse(finance_current_scenario_pb$FORECAST_YR_5==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_5)
                  finance_current_scenario_pb$Units_storage_6<-ifelse(finance_current_scenario_pb$FORECAST_YR_6==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_6)
                  finance_current_scenario_pb$Units_storage_7<-ifelse(finance_current_scenario_pb$FORECAST_YR_7==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_7)
                  finance_current_scenario_pb$Units_storage_8<-ifelse(finance_current_scenario_pb$FORECAST_YR_8==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_8)
                  finance_current_scenario_pb$Units_storage_9<-ifelse(finance_current_scenario_pb$FORECAST_YR_9==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_9)
                  finance_current_scenario_pb$Units_storage_10<-ifelse(finance_current_scenario_pb$FORECAST_YR_10==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_10)
                  finance_current_scenario_pb$Units_storage_11<-ifelse(finance_current_scenario_pb$FORECAST_YR_11==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_11)
                  finance_current_scenario_pb$Units_storage_12<-ifelse(finance_current_scenario_pb$FORECAST_YR_12==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_12)
                  finance_current_scenario_pb$Units_storage_13<-ifelse(finance_current_scenario_pb$FORECAST_YR_13==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_13)
                  finance_current_scenario_pb$Units_storage_14<-ifelse(finance_current_scenario_pb$FORECAST_YR_14==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_14)
                  finance_current_scenario_pb$Units_storage_15<-ifelse(finance_current_scenario_pb$FORECAST_YR_15==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_15)
                  
                  finance_current_scenario_pb$Revenue_0<-0
                  finance_current_scenario_pb$Revenue_1<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_2<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_3<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_4<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_5<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_6<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_7<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_8<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_9<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_10<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_11<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_12<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_13<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_14<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  finance_current_scenario_pb$Revenue_15<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                  
                  print("13done")
                  finance_current_scenario_pb$Total_storage_cost_0<-0
                  finance_current_scenario_pb$Total_storage_cost_1<-finance_current_scenario_pb$Units_storage_1*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_2<-finance_current_scenario_pb$Units_storage_2*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_3<-finance_current_scenario_pb$Units_storage_3*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_4<-finance_current_scenario_pb$Units_storage_4*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_5<-finance_current_scenario_pb$Units_storage_5*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_6<-finance_current_scenario_pb$Units_storage_6*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_7<-finance_current_scenario_pb$Units_storage_7*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_8<-finance_current_scenario_pb$Units_storage_8*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_9<-finance_current_scenario_pb$Units_storage_9*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_10<-finance_current_scenario_pb$Units_storage_10*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_11<-finance_current_scenario_pb$Units_storage_11*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_12<-finance_current_scenario_pb$Units_storage_12*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_13<-finance_current_scenario_pb$Units_storage_13*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_14<-finance_current_scenario_pb$Units_storage_14*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  finance_current_scenario_pb$Total_storage_cost_15<-finance_current_scenario_pb$Units_storage_15*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                  
                  
                  finance_current_scenario_pb$outbound_cost_1<-finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_2<-finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_3<-finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_4<-finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_5<-finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_6<-finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_7<-finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_8<-finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_9<-finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_10<-finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_11<-finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_12<-finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_13<-finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_14<-finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$Freight_one_way
                  finance_current_scenario_pb$outbound_cost_15<-finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$Freight_one_way
                  
                  
                  finance_current_scenario_pb$Total_cost_0<-finance_current_scenario_pb$All_time_buy
                  finance_current_scenario_pb$Total_cost_1<-finance_current_scenario_pb$outbound_cost_1+finance_current_scenario_pb$Total_storage_cost_1
                  finance_current_scenario_pb$Total_cost_2<-finance_current_scenario_pb$outbound_cost_2+finance_current_scenario_pb$Total_storage_cost_2
                  finance_current_scenario_pb$Total_cost_3<-finance_current_scenario_pb$outbound_cost_3+finance_current_scenario_pb$Total_storage_cost_3
                  finance_current_scenario_pb$Total_cost_4<-finance_current_scenario_pb$outbound_cost_4+finance_current_scenario_pb$Total_storage_cost_4
                  finance_current_scenario_pb$Total_cost_5<-finance_current_scenario_pb$outbound_cost_5+finance_current_scenario_pb$Total_storage_cost_5
                  finance_current_scenario_pb$Total_cost_6<-finance_current_scenario_pb$outbound_cost_6+finance_current_scenario_pb$Total_storage_cost_6
                  finance_current_scenario_pb$Total_cost_7<-finance_current_scenario_pb$outbound_cost_7+finance_current_scenario_pb$Total_storage_cost_7
                  finance_current_scenario_pb$Total_cost_8<-finance_current_scenario_pb$outbound_cost_8+finance_current_scenario_pb$Total_storage_cost_8
                  finance_current_scenario_pb$Total_cost_9<-finance_current_scenario_pb$outbound_cost_9+finance_current_scenario_pb$Total_storage_cost_9
                  finance_current_scenario_pb$Total_cost_10<-finance_current_scenario_pb$outbound_cost_10+finance_current_scenario_pb$Total_storage_cost_10
                  finance_current_scenario_pb$Total_cost_11<-finance_current_scenario_pb$outbound_cost_11+finance_current_scenario_pb$Total_storage_cost_11
                  finance_current_scenario_pb$Total_cost_12<-finance_current_scenario_pb$outbound_cost_12+finance_current_scenario_pb$Total_storage_cost_12
                  finance_current_scenario_pb$Total_cost_13<-finance_current_scenario_pb$outbound_cost_13+finance_current_scenario_pb$Total_storage_cost_13
                  finance_current_scenario_pb$Total_cost_14<-finance_current_scenario_pb$outbound_cost_14+finance_current_scenario_pb$Total_storage_cost_14
                  finance_current_scenario_pb$Total_cost_15<-finance_current_scenario_pb$outbound_cost_15+finance_current_scenario_pb$Total_storage_cost_15
                  
                  print("14done")
                  finance_current_scenario_pb$Net_benefit_0<-finance_current_scenario_pb$Revenue_0-finance_current_scenario_pb$Total_cost_0
                  finance_current_scenario_pb$Net_benefit_1<-finance_current_scenario_pb$Revenue_1-finance_current_scenario_pb$Total_cost_1
                  finance_current_scenario_pb$Net_benefit_2<-finance_current_scenario_pb$Revenue_2-finance_current_scenario_pb$Total_cost_2
                  finance_current_scenario_pb$Net_benefit_3<-finance_current_scenario_pb$Revenue_3-finance_current_scenario_pb$Total_cost_3
                  finance_current_scenario_pb$Net_benefit_4<-finance_current_scenario_pb$Revenue_4-finance_current_scenario_pb$Total_cost_4
                  finance_current_scenario_pb$Net_benefit_5<-finance_current_scenario_pb$Revenue_5-finance_current_scenario_pb$Total_cost_5
                  finance_current_scenario_pb$Net_benefit_6<-finance_current_scenario_pb$Revenue_6-finance_current_scenario_pb$Total_cost_6
                  finance_current_scenario_pb$Net_benefit_7<-finance_current_scenario_pb$Revenue_7-finance_current_scenario_pb$Total_cost_7
                  finance_current_scenario_pb$Net_benefit_8<-finance_current_scenario_pb$Revenue_8-finance_current_scenario_pb$Total_cost_8
                  finance_current_scenario_pb$Net_benefit_9<-finance_current_scenario_pb$Revenue_9-finance_current_scenario_pb$Total_cost_9
                  finance_current_scenario_pb$Net_benefit_10<-finance_current_scenario_pb$Revenue_10-finance_current_scenario_pb$Total_cost_10
                  finance_current_scenario_pb$Net_benefit_11<-finance_current_scenario_pb$Revenue_11-finance_current_scenario_pb$Total_cost_11
                  finance_current_scenario_pb$Net_benefit_12<-finance_current_scenario_pb$Revenue_12-finance_current_scenario_pb$Total_cost_12
                  finance_current_scenario_pb$Net_benefit_13<-finance_current_scenario_pb$Revenue_13-finance_current_scenario_pb$Total_cost_13
                  finance_current_scenario_pb$Net_benefit_14<-finance_current_scenario_pb$Revenue_14-finance_current_scenario_pb$Total_cost_14
                  finance_current_scenario_pb$Net_benefit_15<-finance_current_scenario_pb$Revenue_15-finance_current_scenario_pb$Total_cost_15
                  
                  finance_current_scenario_pb$pv_cashflow_0<-finance_current_scenario_pb$Net_benefit_0/(1.15^0)
                  finance_current_scenario_pb$pv_cashflow_1<-finance_current_scenario_pb$Net_benefit_1/(1.15^1)
                  finance_current_scenario_pb$pv_cashflow_2<-finance_current_scenario_pb$Net_benefit_2/(1.15^2)
                  finance_current_scenario_pb$pv_cashflow_3<-finance_current_scenario_pb$Net_benefit_3/(1.15^3)
                  finance_current_scenario_pb$pv_cashflow_4<-finance_current_scenario_pb$Net_benefit_4/(1.15^4)
                  finance_current_scenario_pb$pv_cashflow_5<-finance_current_scenario_pb$Net_benefit_5/(1.15^5)
                  finance_current_scenario_pb$pv_cashflow_6<-finance_current_scenario_pb$Net_benefit_6/(1.15^6)
                  finance_current_scenario_pb$pv_cashflow_7<-finance_current_scenario_pb$Net_benefit_7/(1.15^7)
                  finance_current_scenario_pb$pv_cashflow_8<-finance_current_scenario_pb$Net_benefit_8/(1.15^8)
                  finance_current_scenario_pb$pv_cashflow_9<-finance_current_scenario_pb$Net_benefit_9/(1.15^9)
                  finance_current_scenario_pb$pv_cashflow_10<-finance_current_scenario_pb$Net_benefit_10/(1.15^10)
                  finance_current_scenario_pb$pv_cashflow_11<-finance_current_scenario_pb$Net_benefit_11/(1.15^11)
                  finance_current_scenario_pb$pv_cashflow_12<-finance_current_scenario_pb$Net_benefit_12/(1.15^12)
                  finance_current_scenario_pb$pv_cashflow_13<-finance_current_scenario_pb$Net_benefit_13/(1.15^13)
                  finance_current_scenario_pb$pv_cashflow_14<-finance_current_scenario_pb$Net_benefit_14/(1.15^14)
                  finance_current_scenario_pb$pv_cashflow_15<-finance_current_scenario_pb$Net_benefit_15/(1.15^15)
                  
                  
                  finance_current_scenario_pb$pb_non_npv_0<-finance_current_scenario_pb$Net_benefit_0
                  finance_current_scenario_pb$pb_non_npv_1<-finance_current_scenario_pb$Net_benefit_1+finance_current_scenario_pb$pb_non_npv_0
                  finance_current_scenario_pb$pb_non_npv_2<-finance_current_scenario_pb$Net_benefit_2+finance_current_scenario_pb$pb_non_npv_1
                  finance_current_scenario_pb$pb_non_npv_3<-finance_current_scenario_pb$Net_benefit_3+finance_current_scenario_pb$pb_non_npv_2
                  finance_current_scenario_pb$pb_non_npv_4<-finance_current_scenario_pb$Net_benefit_4+finance_current_scenario_pb$pb_non_npv_3
                  finance_current_scenario_pb$pb_non_npv_5<-finance_current_scenario_pb$Net_benefit_5+finance_current_scenario_pb$pb_non_npv_4
                  finance_current_scenario_pb$pb_non_npv_6<-finance_current_scenario_pb$Net_benefit_6+finance_current_scenario_pb$pb_non_npv_5
                  finance_current_scenario_pb$pb_non_npv_7<-finance_current_scenario_pb$Net_benefit_7+finance_current_scenario_pb$pb_non_npv_6
                  finance_current_scenario_pb$pb_non_npv_8<-finance_current_scenario_pb$Net_benefit_8+finance_current_scenario_pb$pb_non_npv_7
                  finance_current_scenario_pb$pb_non_npv_9<-finance_current_scenario_pb$Net_benefit_9+finance_current_scenario_pb$pb_non_npv_8
                  finance_current_scenario_pb$pb_non_npv_10<-finance_current_scenario_pb$Net_benefit_10+finance_current_scenario_pb$pb_non_npv_9
                  finance_current_scenario_pb$pb_non_npv_11<-finance_current_scenario_pb$Net_benefit_11+finance_current_scenario_pb$pb_non_npv_10
                  finance_current_scenario_pb$pb_non_npv_12<-finance_current_scenario_pb$Net_benefit_12+finance_current_scenario_pb$pb_non_npv_11
                  finance_current_scenario_pb$pb_non_npv_13<-finance_current_scenario_pb$Net_benefit_13+finance_current_scenario_pb$pb_non_npv_12
                  finance_current_scenario_pb$pb_non_npv_14<-finance_current_scenario_pb$Net_benefit_14+finance_current_scenario_pb$pb_non_npv_13
                  finance_current_scenario_pb$pb_non_npv_15<-finance_current_scenario_pb$Net_benefit_15+finance_current_scenario_pb$pb_non_npv_14
                  
                  
                  finance_current_scenario_pb$pb_npv_0<-finance_current_scenario_pb$pv_cashflow_0
                  finance_current_scenario_pb$pb_npv_1<-finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pb_npv_0
                  finance_current_scenario_pb$pb_npv_2<-finance_current_scenario_pb$pv_cashflow_2+finance_current_scenario_pb$pb_npv_1
                  finance_current_scenario_pb$pb_npv_3<-finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pb_npv_2
                  finance_current_scenario_pb$pb_npv_4<-finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pb_npv_3
                  finance_current_scenario_pb$pb_npv_5<-finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pb_npv_4
                  finance_current_scenario_pb$pb_npv_6<-finance_current_scenario_pb$pv_cashflow_6+finance_current_scenario_pb$pb_npv_5
                  finance_current_scenario_pb$pb_npv_7<-finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pb_npv_6
                  finance_current_scenario_pb$pb_npv_8<-finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pb_npv_7
                  finance_current_scenario_pb$pb_npv_9<-finance_current_scenario_pb$pv_cashflow_9+finance_current_scenario_pb$pb_npv_8
                  finance_current_scenario_pb$pb_npv_10<-finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pb_npv_9
                  finance_current_scenario_pb$pb_npv_11<-finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pb_npv_10
                  finance_current_scenario_pb$pb_npv_12<-finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pb_npv_11
                  finance_current_scenario_pb$pb_npv_13<-finance_current_scenario_pb$pv_cashflow_13+finance_current_scenario_pb$pb_npv_12
                  finance_current_scenario_pb$pb_npv_14<-finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pb_npv_13
                  finance_current_scenario_pb$pb_npv_15<-finance_current_scenario_pb$pv_cashflow_15+finance_current_scenario_pb$pb_npv_14
                  
                  
                  
                  finance_current_scenario_pb$pby_non_npv_0<-ifelse(finance_current_scenario_pb$pb_non_npv_0>0,"Error",0)
                  finance_current_scenario_pb$pby_non_npv_1<-ifelse(finance_current_scenario_pb$pb_non_npv_0<0 & finance_current_scenario_pb$pb_non_npv_1>0,(1-(finance_current_scenario_pb$pb_non_npv_1/finance_current_scenario_pb$Net_benefit_1)),0)
                  finance_current_scenario_pb$pby_non_npv_2<-ifelse(finance_current_scenario_pb$pb_non_npv_1<0 & finance_current_scenario_pb$pb_non_npv_2>0,(1-(finance_current_scenario_pb$pb_non_npv_2/finance_current_scenario_pb$Net_benefit_2))+1,0)
                  finance_current_scenario_pb$pby_non_npv_3<-ifelse(finance_current_scenario_pb$pb_non_npv_2<0 & finance_current_scenario_pb$pb_non_npv_3>0,(1-(finance_current_scenario_pb$pb_non_npv_3/finance_current_scenario_pb$Net_benefit_3))+2,0)
                  finance_current_scenario_pb$pby_non_npv_4<-ifelse(finance_current_scenario_pb$pb_non_npv_3<0 & finance_current_scenario_pb$pb_non_npv_4>0,(1-(finance_current_scenario_pb$pb_non_npv_4/finance_current_scenario_pb$Net_benefit_4))+3,0)
                  finance_current_scenario_pb$pby_non_npv_5<-ifelse(finance_current_scenario_pb$pb_non_npv_4<0 & finance_current_scenario_pb$pb_non_npv_5>0,(1-(finance_current_scenario_pb$pb_non_npv_5/finance_current_scenario_pb$Net_benefit_5))+4,0)
                  finance_current_scenario_pb$pby_non_npv_6<-ifelse(finance_current_scenario_pb$pb_non_npv_5<0 & finance_current_scenario_pb$pb_non_npv_6>0,(1-(finance_current_scenario_pb$pb_non_npv_6/finance_current_scenario_pb$Net_benefit_6))+5,0)
                  finance_current_scenario_pb$pby_non_npv_7<-ifelse(finance_current_scenario_pb$pb_non_npv_6<0 & finance_current_scenario_pb$pb_non_npv_7>0,(1-(finance_current_scenario_pb$pb_non_npv_7/finance_current_scenario_pb$Net_benefit_7))+6,0)
                  finance_current_scenario_pb$pby_non_npv_8<-ifelse(finance_current_scenario_pb$pb_non_npv_7<0 & finance_current_scenario_pb$pb_non_npv_8>0,(1-(finance_current_scenario_pb$pb_non_npv_8/finance_current_scenario_pb$Net_benefit_8))+7,0)
                  finance_current_scenario_pb$pby_non_npv_9<-ifelse(finance_current_scenario_pb$pb_non_npv_8<0 & finance_current_scenario_pb$pb_non_npv_9>0,(1-(finance_current_scenario_pb$pb_non_npv_9/finance_current_scenario_pb$Net_benefit_9))+8,0)
                  finance_current_scenario_pb$pby_non_npv_10<-ifelse(finance_current_scenario_pb$pb_non_npv_9<0 & finance_current_scenario_pb$pb_non_npv_10>0,(1-(finance_current_scenario_pb$pb_non_npv_10/finance_current_scenario_pb$Net_benefit_10))+9,0)
                  finance_current_scenario_pb$pby_non_npv_11<-ifelse(finance_current_scenario_pb$pb_non_npv_10<0 & finance_current_scenario_pb$pb_non_npv_11>0,(1-(finance_current_scenario_pb$pb_non_npv_11/finance_current_scenario_pb$Net_benefit_11))+10,0)
                  finance_current_scenario_pb$pby_non_npv_12<-ifelse(finance_current_scenario_pb$pb_non_npv_11<0 & finance_current_scenario_pb$pb_non_npv_12>0,(1-(finance_current_scenario_pb$pb_non_npv_12/finance_current_scenario_pb$Net_benefit_12))+11,0)
                  finance_current_scenario_pb$pby_non_npv_13<-ifelse(finance_current_scenario_pb$pb_non_npv_12<0 & finance_current_scenario_pb$pb_non_npv_13>0,(1-(finance_current_scenario_pb$pb_non_npv_13/finance_current_scenario_pb$Net_benefit_13))+12,0)
                  finance_current_scenario_pb$pby_non_npv_14<-ifelse(finance_current_scenario_pb$pb_non_npv_13<0 & finance_current_scenario_pb$pb_non_npv_14>0,(1-(finance_current_scenario_pb$pb_non_npv_14/finance_current_scenario_pb$Net_benefit_14))+13,0)
                  finance_current_scenario_pb$pby_non_npv_15<-ifelse(finance_current_scenario_pb$pb_non_npv_14<0 & finance_current_scenario_pb$pb_non_npv_15>0,(1-(finance_current_scenario_pb$pb_non_npv_15/finance_current_scenario_pb$Net_benefit_15))+14,0)
                  
                  print("15done")
                  #finance_current_scenario_pb$pby_npv_0<-ifelse(finance_current_scenario_pb$pb_npv_0>0,"Error"," ")
                  finance_current_scenario_pb$pby_npv_1<-ifelse(finance_current_scenario_pb$pb_npv_0<0 & finance_current_scenario_pb$pb_npv_1>0,1-(finance_current_scenario_pb$pb_npv_1/finance_current_scenario_pb$pv_cashflow_1),0)
                  finance_current_scenario_pb$pby_npv_2<-ifelse(finance_current_scenario_pb$pb_npv_1<0 & finance_current_scenario_pb$pb_npv_2>0,(1-(finance_current_scenario_pb$pb_npv_2/finance_current_scenario_pb$pv_cashflow_2))+1,0)
                  finance_current_scenario_pb$pby_npv_3<-ifelse(finance_current_scenario_pb$pb_npv_2<0 & finance_current_scenario_pb$pb_npv_3>0,(1-(finance_current_scenario_pb$pb_npv_3/finance_current_scenario_pb$pv_cashflow_3))+2,0)
                  finance_current_scenario_pb$pby_npv_4<-ifelse(finance_current_scenario_pb$pb_npv_3<0 & finance_current_scenario_pb$pb_npv_4>0,(1-(finance_current_scenario_pb$pb_npv_4/finance_current_scenario_pb$pv_cashflow_4))+3,0)
                  finance_current_scenario_pb$pby_npv_5<-ifelse(finance_current_scenario_pb$pb_npv_4<0 & finance_current_scenario_pb$pb_npv_5>0,(1-(finance_current_scenario_pb$pb_npv_5/finance_current_scenario_pb$pv_cashflow_5))+4,0)
                  finance_current_scenario_pb$pby_npv_6<-ifelse(finance_current_scenario_pb$pb_npv_5<0 & finance_current_scenario_pb$pb_npv_6>0,(1-(finance_current_scenario_pb$pb_npv_6/finance_current_scenario_pb$pv_cashflow_6))+5,0)
                  finance_current_scenario_pb$pby_npv_7<-ifelse(finance_current_scenario_pb$pb_npv_6<0 & finance_current_scenario_pb$pb_npv_7>0,(1-(finance_current_scenario_pb$pb_npv_7/finance_current_scenario_pb$pv_cashflow_7))+6,0)
                  finance_current_scenario_pb$pby_npv_8<-ifelse(finance_current_scenario_pb$pb_npv_7<0 & finance_current_scenario_pb$pb_npv_8>0,(1-(finance_current_scenario_pb$pb_npv_8/finance_current_scenario_pb$pv_cashflow_8))+7,0)
                  finance_current_scenario_pb$pby_npv_9<-ifelse(finance_current_scenario_pb$pb_npv_8<0 & finance_current_scenario_pb$pb_npv_9>0,(1-(finance_current_scenario_pb$pb_npv_9/finance_current_scenario_pb$pv_cashflow_9))+8,0)
                  finance_current_scenario_pb$pby_npv_10<-ifelse(finance_current_scenario_pb$pb_npv_9<0 & finance_current_scenario_pb$pb_npv_10>0,(1-(finance_current_scenario_pb$pb_npv_10/finance_current_scenario_pb$pv_cashflow_10))+9,0)
                  finance_current_scenario_pb$pby_npv_11<-ifelse(finance_current_scenario_pb$pb_npv_10<0 & finance_current_scenario_pb$pb_npv_11>0,(1-(finance_current_scenario_pb$pb_npv_11/finance_current_scenario_pb$pv_cashflow_11))+10,0)
                  finance_current_scenario_pb$pby_npv_12<-ifelse(finance_current_scenario_pb$pb_npv_11<0 & finance_current_scenario_pb$pb_npv_12>0,(1-(finance_current_scenario_pb$pb_npv_12/finance_current_scenario_pb$pv_cashflow_12))+11,0)
                  finance_current_scenario_pb$pby_npv_13<-ifelse(finance_current_scenario_pb$pb_npv_12<0 & finance_current_scenario_pb$pb_npv_13>0,(1-(finance_current_scenario_pb$pb_npv_13/finance_current_scenario_pb$pv_cashflow_13))+12,0)
                  finance_current_scenario_pb$pby_npv_14<-ifelse(finance_current_scenario_pb$pb_npv_13<0 & finance_current_scenario_pb$pb_npv_14>0,(1-(finance_current_scenario_pb$pb_npv_14/finance_current_scenario_pb$pv_cashflow_14))+13,0)
                  finance_current_scenario_pb$pby_npv_15<-ifelse(finance_current_scenario_pb$pb_npv_14<0 & finance_current_scenario_pb$pb_npv_15>0,(1-(finance_current_scenario_pb$pb_npv_15/finance_current_scenario_pb$pv_cashflow_15))+14,0)
                  
                  
                  finance_current_scenario_pb$NPV_pb<-finance_current_scenario_pb$pv_cashflow_0+finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pv_cashflow_2+
                    finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pv_cashflow_6+
                    finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pv_cashflow_9+
                    finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pv_cashflow_13+
                    finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pv_cashflow_15
                  finance_current_scenario_pb$flat_pb<-round(as.numeric(finance_current_scenario_pb$pby_non_npv_0)+as.numeric(finance_current_scenario_pb$pby_non_npv_1)+
                                                               as.numeric(finance_current_scenario_pb$pby_non_npv_2)+as.numeric(finance_current_scenario_pb$pby_non_npv_3)+
                                                               as.numeric(finance_current_scenario_pb$pby_non_npv_4)+as.numeric(finance_current_scenario_pb$pby_non_npv_5)+as.numeric(finance_current_scenario_pb$pby_non_npv_6)+
                                                               as.numeric(finance_current_scenario_pb$pby_non_npv_7)+as.numeric(finance_current_scenario_pb$pby_non_npv_8)+
                                                               as.numeric(finance_current_scenario_pb$pby_non_npv_9)+as.numeric(finance_current_scenario_pb$pby_non_npv_10)+
                                                               as.numeric(finance_current_scenario_pb$pby_non_npv_11)+as.numeric(finance_current_scenario_pb$pby_non_npv_12)+as.numeric(finance_current_scenario_pb$pby_non_npv_13)+
                                                               as.numeric(finance_current_scenario_pb$pby_non_npv_14)+as.numeric(finance_current_scenario_pb$pby_non_npv_15),2)
                  print("16done")
                  finance_current_scenario_pb$disc_pb<-round(as.numeric(finance_current_scenario_pb$pby_npv_1)+
                                                               as.numeric(finance_current_scenario_pb$pby_npv_2)+as.numeric(finance_current_scenario_pb$pby_npv_3)+as.numeric(finance_current_scenario_pb$pby_npv_4)+
                                                               as.numeric(finance_current_scenario_pb$pby_npv_5)+as.numeric(finance_current_scenario_pb$pby_npv_6)+
                                                               as.numeric(finance_current_scenario_pb$pby_npv_7)+
                                                               as.numeric(finance_current_scenario_pb$pby_npv_8)+as.numeric(finance_current_scenario_pb$pby_npv_9)+as.numeric(finance_current_scenario_pb$pby_npv_10)+
                                                               as.numeric(finance_current_scenario_pb$pby_npv_11)+as.numeric(finance_current_scenario_pb$pby_npv_12)+as.numeric(finance_current_scenario_pb$pby_npv_13)+
                                                               as.numeric(finance_current_scenario_pb$pby_npv_14)+as.numeric(finance_current_scenario_pb$pby_npv_15),2)
                  write.xlsx(finance_current_scenario,"finance_current_scenario.xlsx")
                  
                  path_to_vbs_file = "test_pb.vbs"
                  print("4")
                  shell(shQuote(normalizePath(path_to_vbs_file)), "cscript", flag = "//nologo")
                  print("5")
                  print("AM I the error a??")
                  pb_excel<-read.xlsx("PB_excel.xlsm")
                  global_ads$df_data_ads_pb<-pb_excel
                  print("17done")
                  global_ads$df_data_ads_pb_orig<-finance_current_scenario_pb
                  
                  #### Creating Download Report File
                  # spld- Scorce Part list dowlnoad file
                  spl_123<-merge(spl_123, finance_current_scenario_pb[ ,c("Part_Nbr","flat_pb","disc_pb")], by = "Part_Nbr")
                  print("18done")
                  
                  spl_123<-merge(spl_123, pb_excel[ ,c("Part_Nbr","ATB_Units","X210","X373")], by = "Part_Nbr") #ERROR
                  print("19done")
                  download_report <- spl_123
                  download_report$Selected_scenario <- "None"
                  
                  download_report <- download_report %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                                Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                                Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                                Selldown_Revenue,Selldown_Revenue_non_npv,
                                                                Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                                Total_Inventory,
                                                                First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                                Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                                Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                                Optimal_Storage_Cost,
                                                                Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                                Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT,
                                                                Dealer_Price_OES.x,Dealer_Price_Allied_Export.x,WD_DEALER_PRICE_NO_DISCOUNT,Dealer_Price_IAM.x,Discount_oes_percent.x,Discount_allied_export_percent.x, ##change 786 
                                                                Discount_iam_percent.x,LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                                REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP, Selected_scenario,flat_pb,disc_pb,ATB_Units,X210)
                  print("20done")
                  download_report_current <- download_report
                  #download_report_current[,c(43:54)] <- 0
                  
                  download_report_scenario_1 <- download_report
                  download_report_scenario_1 <- download_report_scenario_1 %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                                                      Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                                                      Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                                                      Selldown_Revenue,Selldown_Revenue_non_npv,
                                                                                      Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                                                      Total_Inventory,
                                                                                      First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                                                      Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                                                      Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                                                      Optimal_Storage_Cost,
                                                                                      Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                                                      Optimal_ATB_Quantity,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT,WD_DEALER_PRICE_NO_DISCOUNT,
                                                                                      LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                                                      REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                  print("21done")
                  colnames(download_report_scenario_1) <- c('Part_Nbr', 'NPV_Scenario_1',
                                                            'Selldown_NPV_Scenario_1','Selldown_NPV_non_npv_Scenario_1', 'Revenue_Scenario_1','Revenue_non_npv_Scenario_1','Part_Cost_Scenario_1','Material_cost_non_npv_Scenario_1',
                                                            'Setup_cost_Scenario_1' ,'Total_transport_cost_Scenario_1','Total_transport_cost_non_npv_Scenario_1','Storage_Cost_Scenario_1','Storage_Cost_non_npv_Scenario_1',
                                                            'Total_process_cost_Scenario_1',  'Total_process_cost_non_npv_Scenario_1','Package_cost_Scenario_1','Package_cost_non_npv_Scenario_1',
                                                            'Total_offsite_labor_cost_Scenario_1','Total_offsite_labor_cost_non_npv_Scenario_1','Total_offsite_transport_cost_Scenario_1','Total_offsite_transport_cost_non_npv_Scenario_1', 
                                                            'Additional_Cost_1','Selldown_Revenue_Scenario_1','Selldown_Revenue_non_npv_Scenario_1',
                                                            'Selldown_Material_cost_Scenario_1','Selldown_Material_cost_non_npv_Scenario_1',
                                                            'Selldown_Freight_cost_Scenario_1','Selldown_Freight_cost_non_npv_Scenario_1','Selldown_Storage_Cost_Scenario_1','Selldown_Storage_Cost_non_npv_Scenario_1', 'Selldown_Processing_Cost_Scenario_1',
                                                            'Selldown_Processing_Cost_non_npv_Scenario_1','Selldown_Packaging_Cost_Scenario_1','Selldown_Packaging_Cost_non_npv_Scenario_1',
                                                            'Total_Inventory',
                                                            'First_buy','Last_buy', 'Last_sale', 'Scrap_amount_Scenario_1', 'LTB_Buy_Quantity_Scenario_1',
                                                            'Buy_Quantity_Scenario_1', 'Total_Forecast_Scenario_1',
                                                            'Optimal_NPV_Scenario_1', 'Optimal_Revenue_Scenario_1', 'Optimal_Material_Cost_Scenario_1', 'Optimal_Setup_cost_Scenario_1',
                                                            'Optimal_Total_transport_cost_Scenario_1',
                                                            'Optimal_Total_offsite_transport_cost_Scenario_1', 'Optimal_Storage_Cost_Scenario_1', 'Optimal_Total_process_cost_Scenario_1',
                                                            'Optimal_Packaging_cost_Scenario_1',
                                                            'Optimal_Total_offsite_labor_cost_Scenario_1', 'Optimal_ATB_Quantity_Scenario_1', 'Extended_optimal_buy_cost_1',
                                                            'Extended_purchase_cost_1',"Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                                            "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                                            "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
                  print("22done")
                  download_report_scenario_1[,c(3:4,23:34)] <- 0
                  
                  download_report_scenario_2 <- download_report
                  download_report_scenario_2 <- download_report_scenario_2 %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                                                      Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                                                      Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                                                      Selldown_Revenue,Selldown_Revenue_non_npv,
                                                                                      Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                                                      Total_Inventory,
                                                                                      First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                                                      Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                                                      Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                                                      Optimal_Storage_Cost,
                                                                                      Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                                                      Optimal_ATB_Quantity,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT,WD_DEALER_PRICE_NO_DISCOUNT,
                                                                                      LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                                                      REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                  
                  colnames(download_report_scenario_2) <- c('Part_Nbr', 'NPV_Scenario_2',
                                                            'Selldown_NPV_Scenario_2','Selldown_NPV_non_npv_Scenario_2', 'Revenue_Scenario_2','Revenue_non_npv_Scenario_2','Part_Cost_Scenario_2','Material_cost_non_npv_Scenario_2',
                                                            'Setup_cost_Scenario_2' ,'Total_transport_cost_Scenario_2','Total_transport_cost_non_npv_Scenario_2','Storage_Cost_Scenario_2','Storage_Cost_non_npv_Scenario_2',
                                                            'Total_process_cost_Scenario_2',  'Total_process_cost_non_npv_Scenario_2','Package_cost_Scenario_2','Package_cost_non_npv_Scenario_2',
                                                            'Total_offsite_labor_cost_Scenario_2','Total_offsite_labor_cost_non_npv_Scenario_2','Total_offsite_transport_cost_Scenario_2','Total_offsite_transport_cost_non_npv_Scenario_2', 
                                                            'Additional_Cost_2','Selldown_Revenue_Scenario_2','Selldown_Revenue_non_npv_Scenario_2',
                                                            'Selldown_Material_cost_Scenario_2','Selldown_Material_cost_non_npv_Scenario_2',
                                                            'Selldown_Freight_cost_Scenario_2','Selldown_Freight_cost_non_npv_Scenario_2','Selldown_Storage_Cost_Scenario_2','Selldown_Storage_Cost_non_npv_Scenario_2', 'Selldown_Processing_Cost_Scenario_2',
                                                            'Selldown_Processing_Cost_non_npv_Scenario_2','Selldown_Packaging_Cost_Scenario_2','Selldown_Packaging_Cost_non_npv_Scenario_2',
                                                            'Total_Inventory',
                                                            'First_buy','Last_buy', 'Last_sale', 'Scrap_amount_Scenario_2', 'LTB_Buy_Quantity_Scenario_2',
                                                            'Buy_Quantity_Scenario_2', 'Total_Forecast_Scenario_2',
                                                            'Optimal_NPV_Scenario_2', 'Optimal_Revenue_Scenario_2', 'Optimal_Material_Cost_Scenario_2', 'Optimal_Setup_cost_Scenario_2',
                                                            'Optimal_Total_transport_cost_Scenario_2',
                                                            'Optimal_Total_offsite_transport_cost_Scenario_2', 'Optimal_Storage_Cost_Scenario_2', 'Optimal_Total_process_cost_Scenario_2',
                                                            'Optimal_Packaging_cost_Scenario_2',
                                                            'Optimal_Total_offsite_labor_cost_Scenario_2', 'Optimal_ATB_Quantity_Scenario_2', 'Extended_optimal_buy_cost_2',
                                                            'Extended_purchase_cost_2',"Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                                            "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                                            "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
                  
                  download_report_scenario_2[,c(3:4,23:34)] <- 0
                  
                  global_current_sce_down$df_data_current <- download_report_current
                  global_scenario_1_down$df_data_scenario_1_down <- download_report_scenario_1
                  global_scenario_2_down$df_data_scenario_2_down <- download_report_scenario_2
                  
                  
                  print(Sys.time())
                  
                  #finance_current_scenario<-finance_current_scenario[with(finance_current_scenario,order(-All_time_buy)), ]  
                  
                  
                  
                  ##### Report Download
                  output$downloadData <- downloadHandler(
                    filename = function() {
                      paste("ATB_Part_List",".xlsx", sep="")
                    },
                    content = function(file) {
                      #Downloading_function()
                      abc <- global_current_sce_down$df_data_current
                      abc <- data.frame(Part_Nbr = abc[,1],
                                        lapply(abc[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                        lapply(abc[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                        lapply(abc[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(abc[,53] , big.mark=",", digits=0, format="f"),formatC(abc[,54] , big.mark=",", digits=2, format="f"), ## change 786 
                                        lapply(abc[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                        lapply(abc[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                        paste("$", formatC(abc[,65] , big.mark=",", digits=0, format="f")),
                                        lapply(abc[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                        lapply(abc[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                        abc[,80:84], stringsAsFactors = FALSE)
                      
                      
                      colnames(abc) <- c("Part Number",
                                         "NPV", "Selldown NPV","Selldown Non NPV",
                                         "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                                         "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                                         "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                                         "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                                         "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                                         "Current Inventory",
                                         "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                                         "Total Purchase", "Total Sales", "Optimal NPV",
                                         "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                                         "Optimal Storage Cost",
                                         "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                                         "Optimal ATB Quantity","Optimal payback period" ,"Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export",
                                         "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                                         "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                                         "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                                         "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)", "Selected Scenario","Simple payabck period","Discounted payback period","2 year payback ATB","2 year payback NPV")
                      
                      scenario_1 <- global_scenario_1_down$df_data_scenario_1_down
                      scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                                               lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                               lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                               lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                               formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                                               lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                               lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                               lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                               lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                               stringsAsFactors = FALSE)
                      
                      colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                                "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                                "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                                "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                                "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                                "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                                "Current Inventory",
                                                "First Buy","Last Buy","Last Sale","Scrap Scenario-1", "Entered Buy Quantity Scenario-1",
                                                "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                                "Optimal NPV Scenario-1",
                                                "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                                "Optimal Offsite transport cost Scenario-1",
                                                "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                                "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                                "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                                "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
                      
                      scenario_2 <- global_scenario_2_down$df_data_scenario_2_down
                      scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],
                                               lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                               lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                               lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                               formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                                               lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                               lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                               lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                               lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                               stringsAsFactors = FALSE)
                      
                      colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                                "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                                "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                                "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                                "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                                "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                                "Current Inventory",
                                                "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                                "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                                "Optimal NPV  Scenario-2",
                                                "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                                "Optimal Offsite transport cost Scenario-2",
                                                "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                                "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                                "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                                "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
                      
                      write.xlsx2(abc, file, sheetName="Current_Scenario", row.names=FALSE)
                      write.xlsx2(scenario_1, file , sheetName = "Scenario-1", append = TRUE, row.names = FALSE)
                      write.xlsx2(scenario_2, file , sheetName = "Scenario-2", append = TRUE, row.names = FALSE)
                      
                    }
                  )
                  
                  ###############################
                  
                  ##### Rendering info box to show num to parts uploaded
                  output$Total_Parts<-renderInfoBox({
                    inFile <- input$.file2
                    if (is.null(inFile))
                      return(infoBox(
                        "Number of Parts", 0, icon = icon("cogs"),
                        color = "blue", fill = TRUE
                      ))
                    
                    input1 <- global_ads$df_data_ads
                    
                    infoBox(
                      "Number of Parts", paste0( nrow(ATB_ADS)), icon = icon("cogs"),
                      color = "blue", fill = TRUE
                    )
                  })
                  
                  ##### Rendering ui of part number input for Part View
                  output$ui <- renderUI({
                    
                    part_info <- ATB_ADS
                    part_inform <- as.data.frame(part_info)
                    part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
                    
                    selectInput("Part_Number", "Part Number", choices = as.vector(part_inform$PART_NBR))
                  })
                  
                  
                } else
                {
                  if(Flag_PART_data == 1)
                  {
                    dbRemoveTable(con, PART_data_name)
                  }
                  dbRemoveTable(con, ATB_final_ads_1_name)
                }
                
                shinyjs::enable("go_list")
                shinyjs::enable("tabBut")
                
                
              }
)
            } else
            {
              showModal(modalDialog(title="Attention!", "All the required columns are not present in the file!!"))
              shinyjs::enable("go_list")
              shinyjs::enable("tabBut")
            }
          } else
          {
            showModal(modalDialog(title="Attention!", "Wrong input format, please select a csv"))
            shinyjs::enable("go_list")
            shinyjs::enable("tabBut")
          }
          } else if(is.null(inFile_2))
          {
            showModal(modalDialog(
              title = "Warning Message",
              "First, upload the Cognos File and click Submit to get results"
            ))
            
            shinyjs::enable("go_list")
            shinyjs::enable("tabBut")
            
          }
        }
      
      if(input$sel == "File")
      {
        
        ## Disabbing the Submit button andTab button so that multiple submit do not take place
        shinyjs::disable("go_list")
        shinyjs::disable("tabBut")
        shinyjs::hide("hotable1")
        shinyjs::hide("cost_sce_1")
        shinyjs::hide("cost_sce_2")
        shinyjs::hide("analysis_sce_1")
        shinyjs::hide("analysis_sce_2")
        ## Reading the uploaded file. This file contains the part numbers and info about the part like-
        ## Part name, Inventory Level
        inFile <- input$.file1
        
        if(!is.null(inFile) )
          
        {
          
          if( (get.ext(inFile$name) %in% c(
            'text/csv',
            'text/comma-separated-values',
            'text/tab-separated-values',
            'text/plain',
            'csv',
            'tsv'
          )))
          {
            input1 <- read.csv(inFile$datapath, header = input$header,colClasses="character")
            
            input1$part.order<-as.numeric(row.names(input1))
            global_PARTdata$cognos<-select(input1,HEAD,part.order)
            colnames(global_PARTdata$cognos)<-c("PART_NBR","PART_ORDER")
            
            ## Progress Indicator: The indicator will help user to understand toll what point the code has executed and how much more,
            ## time will be needed to complete the process.
            if("ACTUAL_SALES_CYTD" %in% colnames(input1) & "PROJECTED_SALES_CURR_YEAR" %in% colnames(input1) &
               "FORECAST_YR_1" %in% colnames(input1) & "FORECAST_YR_30" %in% colnames(input1) )
            {
              withProgress(message = 'Processing:', value = 0, {
                
                
                ## Converting the column name which contains part number from PART_NBR to HEAD this is done because the column name is HEAD in
                ## FORCEE Table and we need to follow the same format.
                
                
                PART_data <- as.data.frame(input1)
                col2cvt <- c(6:10,20:49)
                PART_data[,col2cvt] <-  lapply(PART_data[,col2cvt],function(x){as.numeric(gsub(",", "", x))})
                
                #PART_data[,6]<-as.numeric(PART_data[,6]) 
                #PART_data[,c(6,20:49)] <- sapply(PART_data[,c(6,20:49)], as.factor) 
                #PART_data[,c(6,20:49)] <- sapply(PART_data[,c(6,20:49)], as.character) 
                #PART_data[,c(6,20:49)] <- sapply(PART_data[,c(6,20:49)], as.numeric) 
                
                
                names(PART_data)[names(PART_data) == 'HEAD'] <- 'PART_NBR'
                
                ## ADDING LEADING ZEROS TO THE PART NUMBERS
                PART_data$PART_NBR <- str_pad(PART_data$PART_NBR, width=8, side="left", pad="0")
                
                
                Flag_PART_NBR_data <- 0
                Flag_PART_data <- 0
                
                if("PART_NAME" %in% colnames(PART_data))
                {
                  print("column present")
                } else
                {
                  PART_data$PART_NAME <- "Unknown"
                  PART_data$INVENTORY_LVL <- "Unknown"
                }
                
                incProgress(1/7, detail = "Pulling Data")
                
                ## Pulling Forcee Data from uploaded file
                if("FORECAST_YR_1" %in% colnames(PART_data))
                {
                  PART_NBR_data<- PART_data %>% filter(is.na(as.numeric(PART_data$FORECAST_YR_1)))
                  PART_NBR_data <- PART_NBR_data %>% select(PART_NBR)
                  
                  
                  ## WRITING THE TABLE IN THE SERVER, THIS TABLE WILL DROPPED AT THE END OF THE PROCESSING
                  print(PART_NBR_data_name)
                  dbWriteTable(conn = con,
                               name = PART_NBR_data_name,
                               value = PART_NBR_data, overwrite = TRUE )
                  
                  Flag_PART_NBR_data <- 1
                  YR<-as.numeric(format(Sys.Date(),"%Y"))
                  
                  PART_NBR_ex <- PART_data %>% filter(!is.na(as.numeric(PART_data$FORECAST_YR_1)))
                  
                  PART_NBR_ex_forcee <- PART_NBR_ex %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                               FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                               FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                               FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                               FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                               FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                               FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                  
                  data_forcee <- paste("SELECT HEAD AS PART_NBR,ACTUAL_SALES_CYTD, PROJECTED_SALES_CURR_YEAR,ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1
                                       FROM A_SCREAD.FORECAST_DATA@SC
                                       WHERE HEAD IN (SELECT PART_NBR FROM", PART_NBR_data_name,")")
                  
                  
                  
                  ATB_1_Data <- dbGetQuery(con,data_forcee)
                  
                  
                  sql_atb_0_frocee<- paste("SELECT PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL,SUM(FORECAST_YR_1) AS FORECAST_YR_1,SUM(FORECAST_YR_2) AS FORECAST_YR_2 
                                          ,SUM(FORECAST_YR_3) AS FORECAST_YR_3,SUM(FORECAST_YR_4) AS FORECAST_YR_4,SUM(FORECAST_YR_5) AS FORECAST_YR_5,SUM(FORECAST_YR_6) AS FORECAST_YR_6
                                          ,SUM(FORECAST_YR_7) AS FORECAST_YR_7,SUM(FORECAST_YR_8) AS FORECAST_YR_8,SUM(FORECAST_YR_9) AS FORECAST_YR_9,SUM(FORECAST_YR_10) AS FORECAST_YR_10
                                          ,SUM(FORECAST_YR_11) AS FORECAST_YR_11,SUM(FORECAST_YR_12) AS FORECAST_YR_12,SUM(FORECAST_YR_13) AS FORECAST_YR_13,SUM(FORECAST_YR_14) AS FORECAST_YR_14
                                          ,SUM(FORECAST_YR_15) AS FORECAST_YR_15,SUM(FORECAST_YR_16) AS FORECAST_YR_16,SUM(FORECAST_YR_17) AS FORECAST_YR_17,SUM(FORECAST_YR_18) AS FORECAST_YR_18
                                          ,SUM(FORECAST_YR_19) AS FORECAST_YR_19,SUM(FORECAST_YR_20) AS FORECAST_YR_20,SUM(FORECAST_YR_21) AS FORECAST_YR_21,SUM(FORECAST_YR_22) AS FORECAST_YR_22
                                          ,SUM(FORECAST_YR_23) AS FORECAST_YR_23,SUM(FORECAST_YR_24) AS FORECAST_YR_24,SUM(FORECAST_YR_25) AS FORECAST_YR_25,SUM(FORECAST_YR_26) AS FORECAST_YR_26
                                          ,SUM(FORECAST_YR_27) AS FORECAST_YR_27,SUM(FORECAST_YR_28) AS FORECAST_YR_28,SUM(FORECAST_YR_29) AS FORECAST_YR_29,SUM(FORECAST_YR_30) AS FORECAST_YR_30 FROM 
                                          ( 
                                            SELECT P.PART_NBR,PD.PART_DESCRIPTION AS PART_NAME,PD.SVC_USE_LAST_YR AS APPLICATION_LY,PI.SALE_INV_QTY AS INVENTORY_LVL,
                                            CASE WHEN FY.YEAR=",YR+1," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_1,
                                            CASE WHEN FY.YEAR=",YR+2," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_2,
                                            CASE WHEN FY.YEAR=",YR+3," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_3,
                                            CASE WHEN FY.YEAR=",YR+4," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_4,
                                            CASE WHEN FY.YEAR=",YR+5," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_5,
                                            CASE WHEN FY.YEAR=",YR+6," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_6,
                                            CASE WHEN FY.YEAR=",YR+7," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_7,
                                            CASE WHEN FY.YEAR=",YR+8," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_8,
                                            CASE WHEN FY.YEAR=",YR+9," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_9,
                                            CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_10,
                                            CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_11,
                                            CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_12,
                                            CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_13,
                                            CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_14,
                                            CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_15,
                                            CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_16,
                                            CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_17,
                                            CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_18,
                                            CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_19,
                                            CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_20,
                                            CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_21,
                                            CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_22,
                                            CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_23,
                                            CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_24,
                                            CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_25,
                                            CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_26,
                                            CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_27,
                                            CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_28,
                                            CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_29,
                                            CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_30
                                            FROM FORECAST_DATA.PART P LEFT JOIN FORECAST_DATA.FORECAST F ON F.STD_PART_NBR = P.STD_PART_NBR
                                            LEFT JOIN FORECAST_DATA.FORECAST_YEAR FY ON FY.FORECAST_ID = F.FORECAST_ID
                                            LEFT JOIN FORECAST_DATA.PART_DETAIL PD ON PD.PART_ID = P.PART_ID
											                      LEFT JOIN FORECAST_DATA.PART_INVENTORY PI ON PI.PART_ID = PI.PART_ID
                                            WHERE F.COUNTRY_ID='137' AND F.FORECAST_TYPE='ACTUAL' AND P.DELETE_IND='N' AND P.COUNTRY_ID='137' AND PD.DELETE_IND='N' AND PI.DELETE_IND='N'
                                            AND PART_NBR IN (SELECT PART_NBR FROM",PART_NBR_data_name,")GROUP BY P.PART_NBR,PD.PART_DESCRIPTION,PD.SVC_USE_LAST_YR,PI.SALE_INV_QTY,
                                              CASE WHEN FY.YEAR=",YR+1,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+2,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+3,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+4,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+5,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+6,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+7,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+8,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+9,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END) GROUP BY PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL")
                  PART_NBR_data_forcee_1 <- dbGetQuery(con,sql_atb_0_frocee)
                  
                  PART_NBR_data_forcee_1 <- merge(x= ATB_1_Data, y= PART_NBR_data_forcee_1, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                  
                  PART_NBR_data_forcee <- PART_NBR_data_forcee_1 %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                                            FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                                            FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                                            FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                                            FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                                            FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                                            FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                  
                  
                   PART_NBR_data_forcee[is.na(PART_NBR_data_forcee)] <- 0
                  
                  ATB_1_Forcee <- rbind(PART_NBR_ex_forcee, PART_NBR_data_forcee)
                  
                  dbRemoveTable(con, PART_NBR_data_name)
                  
                  
                  
                } else  ## Pulling Forcee Data from server
                {
                  
                  
                  PART_data <- PART_data %>% select(PART_NBR)
                  dbWriteTable(conn = con,
                               name = PART_data_name,
                               value = PART_data,overwrite = TRUE )
                  
                  Flag_PART_data <- 1
                  
                  YR<-as.numeric(format(Sys.Date(),"%Y"))
                  
                  sql_atb_1_frocee<-  paste("SELECT HEAD AS PART_NBR,ACTUAL_SALES_CYTD, PROJECTED_SALES_CURR_YEAR, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1
                                            FROM A_SCREAD.FORECAST_DATA@SC
                                            WHERE HEAD IN (SELECT PART_NBR FROM", PART_data_name,")")
                  
                  PART_data_num_1 <- dbGetQuery(con,sql_atb_1_frocee)
                  PART_data_num_1[is.na(PART_data_num_1)]<-0
                  dbWriteTable(conn = con,
                               name = PART_data_num_name_1,
                               value = PART_data_num_1, overwrite = TRUE, append = FALSE)
                  
                  sql_atb_0_frocee<- paste("SELECT PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL,SUM(FORECAST_YR_1) AS FORECAST_YR_1,SUM(FORECAST_YR_2) AS FORECAST_YR_2 
                                          ,SUM(FORECAST_YR_3) AS FORECAST_YR_3,SUM(FORECAST_YR_4) AS FORECAST_YR_4,SUM(FORECAST_YR_5) AS FORECAST_YR_5,SUM(FORECAST_YR_6) AS FORECAST_YR_6
                                          ,SUM(FORECAST_YR_7) AS FORECAST_YR_7,SUM(FORECAST_YR_8) AS FORECAST_YR_8,SUM(FORECAST_YR_9) AS FORECAST_YR_9,SUM(FORECAST_YR_10) AS FORECAST_YR_10
                                          ,SUM(FORECAST_YR_11) AS FORECAST_YR_11,SUM(FORECAST_YR_12) AS FORECAST_YR_12,SUM(FORECAST_YR_13) AS FORECAST_YR_13,SUM(FORECAST_YR_14) AS FORECAST_YR_14
                                          ,SUM(FORECAST_YR_15) AS FORECAST_YR_15,SUM(FORECAST_YR_16) AS FORECAST_YR_16,SUM(FORECAST_YR_17) AS FORECAST_YR_17,SUM(FORECAST_YR_18) AS FORECAST_YR_18
                                          ,SUM(FORECAST_YR_19) AS FORECAST_YR_19,SUM(FORECAST_YR_20) AS FORECAST_YR_20,SUM(FORECAST_YR_21) AS FORECAST_YR_21,SUM(FORECAST_YR_22) AS FORECAST_YR_22
                                          ,SUM(FORECAST_YR_23) AS FORECAST_YR_23,SUM(FORECAST_YR_24) AS FORECAST_YR_24,SUM(FORECAST_YR_25) AS FORECAST_YR_25,SUM(FORECAST_YR_26) AS FORECAST_YR_26
                                          ,SUM(FORECAST_YR_27) AS FORECAST_YR_27,SUM(FORECAST_YR_28) AS FORECAST_YR_28,SUM(FORECAST_YR_29) AS FORECAST_YR_29,SUM(FORECAST_YR_30) AS FORECAST_YR_30 FROM 
                                          ( 
                                            SELECT P.PART_NBR,PD.PART_DESCRIPTION AS PART_NAME,PD.SVC_USE_LAST_YR AS APPLICATION_LY,PI.SALE_INV_QTY AS INVENTORY_LVL,
                                            CASE WHEN FY.YEAR=",YR+1," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_1,
                                            CASE WHEN FY.YEAR=",YR+2," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_2,
                                            CASE WHEN FY.YEAR=",YR+3," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_3,
                                            CASE WHEN FY.YEAR=",YR+4," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_4,
                                            CASE WHEN FY.YEAR=",YR+5," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_5,
                                            CASE WHEN FY.YEAR=",YR+6," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_6,
                                            CASE WHEN FY.YEAR=",YR+7," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_7,
                                            CASE WHEN FY.YEAR=",YR+8," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_8,
                                            CASE WHEN FY.YEAR=",YR+9," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_9,
                                            CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_10,
                                            CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_11,
                                            CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_12,
                                            CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_13,
                                            CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_14,
                                            CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_15,
                                            CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_16,
                                            CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_17,
                                            CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_18,
                                            CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_19,
                                            CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_20,
                                            CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_21,
                                            CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_22,
                                            CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_23,
                                            CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_24,
                                            CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_25,
                                            CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_26,
                                            CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_27,
                                            CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_28,
                                            CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_29,
                                            CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_30
                                            FROM FORECAST_DATA.PART P LEFT JOIN FORECAST_DATA.FORECAST F ON F.STD_PART_NBR = P.STD_PART_NBR
                                            LEFT JOIN FORECAST_DATA.FORECAST_YEAR FY ON FY.FORECAST_ID = F.FORECAST_ID
                                            LEFT JOIN FORECAST_DATA.PART_DETAIL PD ON PD.PART_ID = P.PART_ID
											                      LEFT JOIN FORECAST_DATA.PART_INVENTORY PI ON PI.PART_ID = P.PART_ID
                                            WHERE F.COUNTRY_ID='137' AND F.FORECAST_TYPE='ACTUAL' AND P.DELETE_IND='N' AND P.COUNTRY_ID='137' AND PD.DELETE_IND='N'
                                            AND PART_NBR IN (SELECT PART_NBR FROM",PART_data_name,")GROUP BY P.PART_NBR,PD.PART_DESCRIPTION,PD.SVC_USE_LAST_YR,PI.SALE_INV_QTY,
                                              CASE WHEN FY.YEAR=",YR+1,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+2,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+3,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+4,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+5,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+6,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+7,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+8,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+9,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END) GROUP BY PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL")
                  ATB_1_Forcee_1 <- dbGetQuery(con,sql_atb_0_frocee)
                  
                  ATB_1_Forcee_2 <- merge(x= PART_data_num_1, y= ATB_1_Forcee_1, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                  
                  ATB_1_Forcee <- ATB_1_Forcee_2 %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                            FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                            FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                            FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                            FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                            FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                            FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                  
                  ATB_1_Forcee$FORECAST_YR_1<-as.character(ATB_1_Forcee$FORECAST_YR_1)
                  ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
                }
                
                if(nrow(ATB_1_Forcee) != nrow(PART_data))
                {
                  Complete_Part_List <- PART_data %>% select(PART_NBR)
                  ATB_1_Forcee <- merge(x =  Complete_Part_List, y = ATB_1_Forcee, by.x = "PART_NBR", by.y = "PART_NBR", all.x = TRUE)
                  ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
                  
                }
                print("x2")
                PART_data_num <- ATB_1_Forcee %>% select(PART_NBR)
                
                dbWriteTable(conn = con,
                             name = PART_data_num_name,
                             value = PART_data_num, overwrite = TRUE, append = FALSE)
                print("x3")
                #=================================================================================#
                ##### ATB_1, ATB_2, ATB_3, ATB_4, ATB_5, ATB_6, ATB_7, ATB_8, ATB_9 and ATB_10
                ##### are temprorary intermediate table created to map the different cost elements
                ##### associated with parts. These cost elements are coming from different tables.
                #==================================================================================#
                
                ## Mapping Last Cost
                sql_atb_1_ser_mat <- paste("SELECT  PART_NBR, B.CAMPN_DTE, B.CAMPN_QTY,B.DECK_CD,
                                           B.LAST_COST,A.USB_CD, B.RB1_ALPHA_WHSE_CLASS, A.UNIT_LOAD_QTY,A.PART_REMOVAL_DT,
                                           A.PART_REINST_DT, A.MDSNG_PKG_QTY ,A.MCHDG_PACK_HEIGHT, A.MCHDG_PACK_LENGTH,A.MCHDG_PACK_WIDTH
                                           FROM
                                           DBO.SERVICE_PART@EUC A
                                           LEFT JOIN DBO.MATERIAL_PART@EUC B
                                           ON A.PART_NBR=B.MATRL_PART_NBR
                                           WHERE PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name, ")")
                print("x4")
                ATB_1_ser_mat <- dbGetQuery(con, sql_atb_1_ser_mat)
                
                ATB_1_1 <- ATB_1_Forcee
                
                ATB_1 <- merge(x= ATB_1_1, y= ATB_1_ser_mat, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                print("x5")
                
                ATB_1$CAMPN_QTY <- as.character(ATB_1$CAMPN_QTY)
                ATB_1$DECK_CD <- as.character(ATB_1$CAMPN_QTY)
                ATB_1$LAST_COST <- as.character(ATB_1$LAST_COST)
                ATB_1$MDSNG_PKG_QTY[is.na(ATB_1$MDSNG_PKG_QTY)] <- 0
                ATB_1$MCHDG_PACK_HEIGHT[is.na(ATB_1$MCHDG_PACK_HEIGHT)] <- 0
                ATB_1$MCHDG_PACK_LENGTH[is.na(ATB_1$MCHDG_PACK_LENGTH)] <- 0
                ATB_1$MCHDG_PACK_WIDTH[is.na(ATB_1$MCHDG_PACK_WIDTH)] <- 0
                ATB_1$UNIT_LOAD_QTY[is.na(ATB_1$UNIT_LOAD_QTY)] <- 0
                
                dbWriteTable(conn = con,
                             name = ATB_1_NAME ,
                             value = ATB_1,overwrite = TRUE)
                
                incProgress(1/7, detail = "Pulling Data")
                print("x6")
                sql_ATB_2<- paste("SELECT * FROM
                                  (
                                  SELECT A.*, NVL(B.ALPHA,'0') AS ALPHA, NVL(B.NUMERIC,'0') AS NUMERIC FROM", ATB_1_NAME, "A
                                  LEFT JOIN A_SCREAD.COMMCODE@SC B
                                  ON A.PART_NBR = B.PART
                                  ) ")

                ATB_2 <- dbGetQuery(con, sql_ATB_2)
                
                dbWriteTable(conn = con,
                             name = ATB_2_NAME ,
                             value = ATB_2, overwrite = TRUE)
                
                print("ATB-2 Done")
                
                sql_ATB_3 <- paste("SELECT *
                                   FROM", ATB_2_NAME, "A
                                   
                                   LEFT JOIN
                                   
                                   (SELECT PN,
                                   (CASE WHEN CRLD IN (1,87,76,696,622,94,75,63,58,92,0) THEN CRLD
                                   ELSE 0
                                   END
                                   )AS CRLD,
                                   (CASE WHEN PROC IN (1,87,619,604,77,696,76,94,645,622,609,75,640,0,617) THEN PROC
                                   ELSE 0
                                   END
                                   )AS PROC FROM A_SCREAD.PART_DETAIL@SC
                                   )B
                                   ON A.PART_NBR=B.PN")
                
                ATB_3 <- dbGetQuery(con, sql_ATB_3)
                
                ATB_3$PN[is.na(ATB_3$PN)] <- 0
                ATB_3$CRLD[is.na(ATB_3$CRLD)] <- 0
                ATB_3$PROC[is.na(ATB_3$PROC)] <- 0
                
                dbWriteTable(conn = con,
                             name = ATB_3_NAME ,
                             value = ATB_3, overwrite = TRUE)
                
                print("ATB-3 Done")
                
                sql_ATB_4 <- paste("SELECT * FROM
                                   (
                                   (SELECT * FROM", ATB_3_NAME, ")A
                                   LEFT JOIN
                                   (SELECT * FROM AVG_WEIGHTED_CUBE)B
                                   ON
                                   A.CRLD = B.FACILITY AND A.ALPHA = B.CCODE
                                   )")
ATB_4 <- dbGetQuery(con, sql_ATB_4)
dbWriteTable(conn = con,
             name = ATB_4_NAME ,
             value = ATB_4,overwrite = TRUE)
print("ATB-4 Done")


sql_ATB_5 <- paste("SELECT A.*,NVL(AVG_LCPP,0) AS AVG_LCPP,NVL(AVG_PCPP,0)AS AVG_PCPP FROM
                   (
                   (SELECT * FROM ", ATB_4_NAME,")A
                   LEFT JOIN
                   (SELECT PART_NBR,FACILITY,ROUND(NVL(AVG(LABOR_COST_PER_PIECE),0),5) as AVG_LCPP ,ROUND(NVL(AVG(PACK_COST_PER_PIECE),0),5)as AVG_PCPP
                   FROM(
                   (SELECT PART_NBR,WHSE_NBR,STATN_CD FROM DBO.M8STACD_STANDARDS@EUC )B
                   LEFT JOIN (SELECT * FROM PROCESSING_CPP)C
                   ON
                   B.WHSE_NBR = C.FACILITY
                   AND B.STATN_CD = C.STATN_CD)
                   WHERE C.FACILITY IS NOT NULL GROUP BY PART_NBR,FACILITY)D
                   ON
                   A.PART_NBR = D.PART_NBR
                   AND A.PROC = D.FACILITY)"
)

ATB_5 <- dbGetQuery(con, sql_ATB_5)
dbWriteTable(conn = con,
             name = ATB_5_NAME ,
             value = ATB_5, overwrite = TRUE)
print("ATB-5 Done")

incProgress(1/7, detail = "Pulling Data")

sql_ATB_6 <- paste("SELECT A.*, NVL(B.OVERALL_LABOR_COST_PER_PIECE,0) AS PC_LCPP, NVL(B.IB_LABOR_COST_PER_PIECE,0) AS PC_IB_LCPP, NVL(B.OB_LABOR_COST_PER_PIECE,0) AS PC_0B_LCPP
                   --SELECT *
                   FROM
                   (
                   (SELECT * FROM", ATB_5_NAME, ")A
                   LEFT JOIN
                   (SELECT * FROM PC_SERV_CPP)B
                   ON
                   A.CRLD=B.FACILITY AND A.ALPHA=B.COMMODITY_CODE
                   )")

ATB_6 <- dbGetQuery(con, sql_ATB_6)
dbWriteTable(conn = con,
             name = ATB_6_NAME ,
             value = ATB_6, overwrite = TRUE)
print("ATB-6 Done")

sql_ATB_7 <- paste("SELECT E.*, NVL (OFFSITE_LCPP,0) AS OFFSITE_LCPP
                   FROM
                   (
                   SELECT * FROM
                   (
                   SELECT C.*, NVL(BC_LCPP,0) AS BC_LCPP FROM
                   (
                   SELECT A.*, NVL(PDC_LCPP,0) AS PDC_LCPP FROM
                   (
                   (SELECT * FROM", ATB_6_NAME, ") A
                   LEFT JOIN
                   (SELECT CC, PDC_LCPP FROM PDC_SERV_CPP)B
                   ON A.ALPHA=B.CC
                   )
                   )C
                   LEFT JOIN
                   (SELECT CC, BC_LCPP FROM BC_SERV_CPP)D
                   ON C.ALPHA=D.CC
                   )
                   )E
                   LEFT JOIN
                   (SELECT CC, OFFSITE_LCPP FROM OFFSITE_SERV_CPP)F
                   ON E.ALPHA=F.CC")

ATB_7 <- dbGetQuery(con, sql_ATB_7)
dbWriteTable(conn = con,
             name = ATB_7_NAME ,
             value = ATB_7, overwrite = TRUE)
print("ATB-7 Done")

incProgress(1/7, detail = "Pulling Data")

sql_ATB_8 <- paste("SELECT A.*, B.MTH_COST_PER_SQ_FT, B.UL_SQ_FT
                   FROM
                   (
                   (SELECT * FROM", ATB_7_NAME, ")A
                   LEFT JOIN
                   (SELECT * FROM WAREHOUSE_COST_PER_SQFT)B
                   ON A.CRLD=B.PLANT
                   )")

ATB_8 <- dbGetQuery(con, sql_ATB_8)

ATB_8$MTH_COST_PER_SQ_FT <- as.character(ATB_8$MTH_COST_PER_SQ_FT)
ATB_8$UL_SQ_FT <- as.character(ATB_8$UL_SQ_FT)

dbWriteTable(conn = con,
             name = ATB_8_NAME ,
             value = ATB_8, overwrite = TRUE)
print("ATB-8 Done")


sql_ATB_9 <- paste("SELECT C.*, TRANSPORTATION_OFFSITES_PKGR, TRANSPORTATION_FROM_SOURCE, TRANSPORTATION_PDC_TO_DLR, TRANSPORTATION_TO_PDC, TRANSPORTATION_FACILITY_TO_DLR, TRANSPORTATION_BCARRIER_TO_DLR
                   FROM
                   (
                   SELECT A.*, TRANS_OFFSITES_PKGR, TRANS_FROM_WC, MCD_TO_XDOCK, TRANS_TO_PDC, TRANS_PDC_TO_DLR, TRANS_FROM_SOURCE, XDOCK_OVERSIZE, XDOCK_STANDARD
                   FROM
                   (
                   (SELECT * FROM", ATB_8_NAME, ") A
                   LEFT JOIN
                   (SELECT * FROM TRANS_COSTS_PER_CUBIC_FT)B
                   ON
                   A.CRLD = B.FACILITY
                   )
                   )C
                   LEFT JOIN
                   (SELECT * FROM TRANSPORTATION_COSTS)D
                   ON C.CRLD=D.FACILITY AND C.ALPHA=D.CC")

ATB_9 <- dbGetQuery(con, sql_ATB_9)
dbWriteTable(conn = con,
             name = ATB_9_NAME,
             value = ATB_9, overwrite = TRUE)
print("ATB-9 Done")

sql_ATB_10 <- paste("SELECT A.*,
                    CASE WHEN MDSNG_PKG_QTY = 0 THEN 1
                    ELSE MDSNG_PKG_QTY
                    END AS ADJ_MDSNG_PKG_QTY
                    FROM", ATB_9_NAME, "A")

ATB_10 <- dbGetQuery(con, sql_ATB_10)
dbWriteTable(conn = con,
             name = ATB_10_NAME ,
             value = ATB_10, overwrite = TRUE)
print("ATB-10 Done")
write.csv(ATB_10,"ATB10.csv")
sql_ATB_11 <- paste("SELECT X.*, Y.LCC_PRODLINE,
                    Y.LCC_SUBLINE,
                    Y.DLR_CURR_DEALER_PRC,Y.NATL_PIECE_SLS_DLR_4, 
                    Y.NATL_PIECE_SLS_COACH_4, Y.NATL_PIECE_SLS_OTD_4, Y.NATL_PIECE_SLS_EXPORT_4, Y.NATL_PIECE_SLS_WD_4,Y.NATL_PIECE_SLS_AFTMKT_4
                    FROM
                    (
                    SELECT B.*,
                    (CASE WHEN UNIT_LOAD_QTY>0 THEN UNIT_LOAD_QTY
                    ELSE 64/CUBIC_FT_PER_PIECE
                    END) AS ADJ_UNIT_LOAD_QTY
                    FROM
                    (
                    SELECT A.*,
                    (CASE WHEN MCHDG_PACK_HEIGHT>0 AND MCHDG_PACK_LENGTH > 0 AND MCHDG_PACK_WIDTH >0
                    THEN ROUND((MCHDG_PACK_HEIGHT*MCHDG_PACK_LENGTH*MCHDG_PACK_WIDTH/1728)/ADJ_MDSNG_PKG_QTY,12)
                    ELSE TO_NUMBER(AVG_WEIGHT)/ADJ_MDSNG_PKG_QTY
                    END) AS CUBIC_FT_PER_PIECE
                    FROM", ATB_10_NAME, "A
                    ) B
                    ) X
                    LEFT JOIN
                    COMMON_WORK_NO_COST Y
                    ON X.PART_NBR=Y.PART_NBR")
print("sql_ATB_11")
ATB_COST_ADS_EXAMPLE <- dbGetQuery(con, sql_ATB_11)
write.csv(ATB_COST_ADS_EXAMPLE,"ATB11.csv")
ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE <- as.character(ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE)
ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY <- as.character(ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY)
ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC <- as.character(ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC)

#ATB_COST_ADS_EXAMPLE[is.na(ATB_COST_ADS_EXAMPLE)] <- 0
print("ATB_COST_ADS_EXAMPLE")
ATB_COST_ADS_EXAMPLE[is.na(ATB_COST_ADS_EXAMPLE)] <- 0
dbWriteTable(conn = con,
             name = ATB_COST_ADS_EXAMPLE_NAME ,
             value = ATB_COST_ADS_EXAMPLE, overwrite = TRUE)
print("ATB-11 Done")

incProgress(1/7, detail = "Pulling Data")

sql_ATB_12 <- paste("SELECT B.*,
                    (CASE WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1>165 THEN 'Y'
                    WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1<=165 THEN 'N'
                    ELSE 'Y' END ) AS BULK_CR_FLAG
                    FROM
                    (SELECT A.*,
                    ROUND((MTH_COST_PER_SQ_FT * UL_SQ_FT/ADJ_UNIT_LOAD_QTY), 10) AS MTH_SQ_FT_COST_PER_PEICE,
                    ROUND(TRANS_PDC_TO_DLR*CUBIC_FT_PER_PIECE) AS OB_TRANS_CST_PP,
                    
                    (CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_FROM_WC)*CUBIC_FT_PER_PIECE)
                    WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC!=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_OFFSITES_PKGR)*CUBIC_FT_PER_PIECE)
                    ELSE (TRANS_FROM_SOURCE*CUBIC_FT_PER_PIECE) END )AS IB_TRANS_CST_PP,
                    
                    ROUND(2*(MCHDG_PACK_HEIGHT+MCHDG_PACK_WIDTH)) AS BULK_CR_CALC_1,
                    
                    (CASE WHEN MCHDG_PACK_HEIGHT>MCHDG_PACK_WIDTH AND MCHDG_PACK_HEIGHT>MCHDG_PACK_LENGTH THEN MCHDG_PACK_HEIGHT
                    WHEN MCHDG_PACK_WIDTH>MCHDG_PACK_HEIGHT AND MCHDG_PACK_WIDTH>MCHDG_PACK_LENGTH THEN MCHDG_PACK_WIDTH
                    ELSE MCHDG_PACK_LENGTH END)AS BULK_CR_CALC_2
                    FROM", ATB_COST_ADS_EXAMPLE_NAME, "A
                    ) B")
print("sql_ATB_12")
ATB_COST_ELEMENT_CAL_EXAPMLE <- dbGetQuery(con, sql_ATB_12)
print("ATB_COST_ELEMENT_CAL_EXAPMLE")
ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE)
ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP)
ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP)
ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1 <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1)

print("ATB_COST_ELEMENT_CAL_EXAPMLE")
dbWriteTable(conn = con,
             name = ATB_COST_ELEMENT_NAME ,
             value = ATB_COST_ELEMENT_CAL_EXAPMLE, overwrite = TRUE)
print("ATB-12 Done")

sql_ATB_13 <- paste("SELECT X.*,
                    (CASE WHEN USB_CD = 'U' THEN MAX_WEEKS_U
                    ELSE MAX_WEEKS_SB
                    END) AS MAX_WEEKS_SUPPLY
                    FROM
                    (
                    SELECT P.*,NVL(Q.MWSBOS,99) AS MAX_WEEKS_U
                    FROM
                    (
                    SELECT A.*,NVL(B.MWSBOS,99) AS MAX_WEEKS_SB
                    FROM", ATB_COST_ELEMENT_NAME, "A
                    LEFT JOIN
                    MWS_USB_SB B
                    ON A.ALPHA = B.ALPHA
                    ) P
                    LEFT JOIN MWS_USB_U Q
                    ON P.PROC=Q.PROC
                    ) X")

ATB_COST_MAX_SUPPLY_EXAMPLE <- dbGetQuery(con, sql_ATB_13)
dbWriteTable(conn = con,
             name = ATB_COST_MAX_SUPPLY_NAME ,
             value = ATB_COST_MAX_SUPPLY_EXAMPLE, overwrite = TRUE)
print("ATB-13 Done")

incProgress(1/7, detail = "Pulling Data")

sql_ATB_14 <- paste("SELECT A.*,
                    CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' THEN 0
                    WHEN RB1_ALPHA_WHSE_CLASS!='SP' AND BULK_CR_FLAG='Y' THEN (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_OVERSIZE)*CUBIC_FT_PER_PIECE
                    ELSE (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_STANDARD)*CUBIC_FT_PER_PIECE
                    END AS REDISTRIBUTION_COST_PP,
                    
                    CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.39*PC_LCPP)+(0.39*PDC_LCPP)
                    WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.39*PC_LCPP)+(0.39*BC_LCPP)
                    ELSE (0.39*PC_LCPP)
                    END AS IB_LABOR_COST_PP,
                    
                    CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.61*PC_LCPP)+(0.61*PDC_LCPP)
                    WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.61*PC_LCPP)+(0.61*BC_LCPP)
                    ELSE (0.61*PC_LCPP)
                    END AS OB_LABOR_COST_PP
                    FROM", ATB_COST_MAX_SUPPLY_NAME, "A")

ATB_COST_CAL_EXAMPLE <- dbGetQuery(con,sql_ATB_14)

ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP <- as.character(ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP)

dbWriteTable(conn = con,
             name = ATB_COST_CAL_EXAMPLE_NAME ,
             value = ATB_COST_CAL_EXAMPLE, overwrite = TRUE)
print("ATB-14 Done")

sql_ATB_15 <- paste("  SELECT A.*, (IB_LABOR_COST_PP + OB_LABOR_COST_PP + AVG_LCPP + AVG_PCPP) AS ONSITE_PRCS_COST_PP,
                    (OB_TRANS_CST_PP + IB_TRANS_CST_PP + REDISTRIBUTION_COST_PP) AS ONSITE_TRANS_COST_PER_PIECE,
                    (TRANS_OFFSITES_PKGR*CUBIC_FT_PER_PIECE) AS OFFSITE_TRANS_COST_PP
                    FROM",
                    ATB_COST_CAL_EXAMPLE_NAME, "A")

ATB_TRANS_PROCESS_COST_EXAMPLE <- dbGetQuery(con, sql_ATB_15)

ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE)
ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP)

dbWriteTable(conn = con,
             name = ATB_TRANS_PROCESS_COST_NAME ,
             value = ATB_TRANS_PROCESS_COST_EXAMPLE, overwrite = TRUE)
print("ATB-15 Done")

sql_ads_1 <- paste("SELECT A.*, B.MINIMUM_BUY_QTY, B.STD_PACK_QTY, B.BUY_FREQ FROM",
                   ATB_TRANS_PROCESS_COST_NAME, "A
                   LEFT JOIN
                   (SELECT MTL_PART_PART_NBR, MINIMUM_BUY_QTY, STD_PACK_QTY, BUY_FREQ
                   FROM DBO.SOURCE@EUC
                   WHERE PRIME_SOURCE_IND = 1) B
                   ON A.PART_NBR = B.MTL_PART_PART_NBR")

ATB_final_ads_1 <- dbGetQuery(con, sql_ads_1)

ATB_final_ads_1$MINIMUM_BUY_QTY <- as.character(ATB_final_ads_1$MINIMUM_BUY_QTY)
ATB_final_ads_1$STD_PACK_QTY <- as.character(ATB_final_ads_1$STD_PACK_QTY)
ATB_final_ads_1$BUY_FREQ <- as.character(ATB_final_ads_1$BUY_FREQ)

dbWriteTable(conn = con,
             name = ATB_final_ads_1_name,
             value = ATB_final_ads_1, overwrite = TRUE)

print("ATB-16 Done")

sql_ads <- paste("SELECT A.*, B.* FROM",
                 ATB_final_ads_1_name," A
                 LEFT JOIN MANDATORY_RETENTION_DB B
                 ON A.PART_NBR = B.PART_NUMBER")

ATB_final_ads <- dbGetQuery(con, sql_ads)
print("ATB-17 Done")


sql_WD_price <- paste("SELECT PART_NUMBER, WD_WHSL_DIST_PRC FROM DBO.WD_PRICES@EUC
                      WHERE PART_NUMBER IN (SELECT PART_NBR FROM" ,PART_data_num_name, ")")
print("0 done")
WD_price <- dbGetQuery(con, sql_WD_price)
print("1 done")

sql_Inv_level <- paste("SELECT MATRL_PART_NBR, NATNL_INV AS TOTAL_INVENTORY
                       FROM DBO.MATERIAL_PART@EUC WHERE MATRL_PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")")
print("2done")
Inv_level <- dbGetQuery(con, sql_Inv_level)
print("3done")
## Pulling Sales Distribution across different markets data
sql_market_distribution <- paste("SELECT PART_NBR,
                                 CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                 WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                 WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                 END AS CATEGORY_CODE,
                                 SUM(YR1_SALES) AS YR1_SALES
                                 FROM DBO.PART_SLS_TO_DATE@EUC
                                 WHERE PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")","
                                 GROUP BY
                                 PART_NBR,
                                 CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                 WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                 WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                 END")
print("4done")
market_distribution <- dbGetQuery(con, sql_market_distribution)

market_list <- c("SALES_OES", "SALES_ALLIED_EXPORT", "SALES_IAM")
market_list <- as.data.frame(market_list)
colnames(market_list) <- c("CATEGORY_CODE")
part_list <- PART_data_num
colnames(part_list) <- c("PART_NBR")
cross_join <- merge(part_list, market_list)
cross_join$CATEGORY_CODE <- as.character(cross_join$CATEGORY_CODE)

market_distribution <- merge(cross_join, market_distribution, by = c("PART_NBR", "CATEGORY_CODE"), all.x = TRUE)

spread_market_distribution <- spread(market_distribution ,key = CATEGORY_CODE,value = YR1_SALES)

spread_market_distribution$SALES_ALLIED_EXPORT <- ifelse(is.na(spread_market_distribution$SALES_ALLIED_EXPORT), 0, (spread_market_distribution$SALES_ALLIED_EXPORT))
spread_market_distribution$SALES_IAM <- ifelse(is.na(spread_market_distribution$SALES_IAM), 0, (spread_market_distribution$SALES_IAM))
spread_market_distribution$SALES_OES <- ifelse(is.na(spread_market_distribution$SALES_OES), 0, (spread_market_distribution$SALES_OES))
spread_market_distribution$COMPLETE_SAALES <- spread_market_distribution$SALES_ALLIED_EXPORT + spread_market_distribution$SALES_IAM + spread_market_distribution$SALES_OES
spread_market_distribution$ALLIED_EXPORT_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_ALLIED_EXPORT/spread_market_distribution$COMPLETE_SAALES))
spread_market_distribution$IAM_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_IAM/spread_market_distribution$COMPLETE_SAALES))
spread_market_distribution$OES_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_OES/spread_market_distribution$COMPLETE_SAALES))


# Merging WD preice
ATB_final_ads <- merge(ATB_final_ads, WD_price, by.x= "PART_NBR", by.y= "PART_NUMBER", all.x= TRUE)

# Merging Inventory Level
ATB_final_ads <- merge(ATB_final_ads, Inv_level, by.x= "PART_NBR", by.y= "MATRL_PART_NBR", all.x= TRUE)

ATB_final_ads <- merge(ATB_final_ads, spread_market_distribution, by.x= "PART_NBR", by.y= "PART_NBR", all.x= TRUE)

dbRemoveTable(con, PART_data_num_name)

ATB_final_ads$ACTUAL_SALES_CYTD <- ifelse(is.na(ATB_final_ads$ACTUAL_SALES_CYTD), 0, ATB_final_ads$ACTUAL_SALES_CYTD)
ATB_final_ads$PROJECTED_SALES_CURR_YEAR <- ifelse(is.na(ATB_final_ads$PROJECTED_SALES_CURR_YEAR), 0, ATB_final_ads$PROJECTED_SALES_CURR_YEAR)
ATB_final_ads$TOTAL_INVENTORY <- ifelse(is.na(ATB_final_ads$TOTAL_INVENTORY), 0, ATB_final_ads$TOTAL_INVENTORY)

ATB_final_ads$CURRENT_YEAR <- as.numeric(ATB_final_ads$PROJECTED_SALES_CURR_YEAR) - as.numeric(ATB_final_ads$ACTUAL_SALES_CYTD)
ATB_final_ads$CURRENT_YEAR <- ifelse(ATB_final_ads$CURRENT_YEAR < 0, 0, ATB_final_ads$CURRENT_YEAR)

ATB_final_ads$WD_WHSL_DIST_PRC <- ifelse(is.na(ATB_final_ads$WD_WHSL_DIST_PRC), 0, ATB_final_ads$WD_WHSL_DIST_PRC)

ATB_final_ads$PART_NBR<- str_pad(ATB_final_ads$PART_NBR, width=8, side="left", pad="0")

ATB_final_ads$PL_SL <- paste(ATB_final_ads$LCC_PRODLINE, ATB_final_ads$LCC_SUBLINE,sep = "-")
PL_SL_LIST <- as.data.frame(ATB_final_ads$PL_SL)
colnames(PL_SL_LIST) <- c("PL_SL")
PL_SL_LIST <- as.data.frame(unique(PL_SL_LIST$PL_SL))

colnames(PL_SL_LIST) <- c("PL_SL")
PL_SL_LIST$PL_SL <- as.character(PL_SL_LIST$PL_SL)
ATB_final_ads$DLR_SLS <- ifelse(ATB_final_ads$DLR_CURR_DEALER_PRC ==0 & ATB_final_ads$NATL_PIECE_SLS_DLR_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_COACH_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_EXPORT_4 ==0 ,
                                0, 
                                as.numeric( ATB_final_ads$NATL_PIECE_SLS_DLR_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_COACH_4) + 
                                  as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4) + as.numeric(ATB_final_ads$NATL_PIECE_SLS_EXPORT_4))
ATB_final_ads$WD_SLS <- ifelse(ATB_final_ads$DLR_SLS ==0,as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4)+as.numeric(ATB_final_ads$NATL_PIECE_SLS_WD_4) +as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4),
                               as.numeric( ATB_final_ads$NATL_PIECE_SLS_WD_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4))							


dbWriteTable(conn = con,
             name = PL_SL_LIST_ATB_NAME,
             value = PL_SL_LIST, overwrite = TRUE)

sql_discount_market <- paste("SELECT PL_SL, MARKET, SUM(T_SLS) AS TOTAL_SALES, SUM(T_DISC) AS TOTAL_DISCOUNT
                             FROM (SELECT (LPAD(PROD_LINE,2,0) || '-' || SUB_LINE) AS PL_SL,MARKET,T_SLS,T_DISC FROM ABM_DATA.ABM_WIDE_DETAIL_NONW_PN_MV_P)
                             WHERE PL_SL IN (SELECT PL_SL FROM", PL_SL_LIST_ATB_NAME, ")
                             GROUP BY PL_SL, MARKET")

discount_market <- dbGetQuery(con, sql_discount_market)
print("5done")
drop_table_PL_SL_LIST_ATB <- paste("BEGIN
                                   EXECUTE IMMEDIATE 'DROP TABLE", PL_SL_LIST_ATB_NAME,"';
                                   EXCEPTION
                                   WHEN OTHERS THEN NULL;
                                   END;")

value_PL_SL_LIST_ATB <- dbSendUpdate(con, drop_table_PL_SL_LIST_ATB)

market_list_for_discount <- c("ALLIED/EXPORT", "INDEP AFTERMKT", "ORIG EQUIP SRVC")
market_list_for_discount <- as.data.frame(market_list_for_discount)
colnames(market_list_for_discount) <- c("CATEGORY_CODE")

cross_join_pl_sl <- merge(PL_SL_LIST, market_list_for_discount)
cross_join_pl_sl$CATEGORY_CODE <- as.character(cross_join_pl_sl$CATEGORY_CODE)
colnames(cross_join_pl_sl) <- c("PL_SL", "MARKET")

discount_market <- merge(cross_join_pl_sl, discount_market, by = c("PL_SL", "MARKET"), all.x = TRUE)

pl_sl_market_sales <- discount_market %>% select(MARKET, PL_SL, TOTAL_SALES)
pl_sl_market_discount <- discount_market %>% select(MARKET, PL_SL, TOTAL_DISCOUNT)

spread_sales <- spread(pl_sl_market_sales ,key = MARKET,value = TOTAL_SALES)
spread_discount <- spread(pl_sl_market_discount, key = MARKET, value = TOTAL_DISCOUNT)

spread_sales$`ALLIED/EXPORT` <- ifelse(is.na(spread_sales$`ALLIED/EXPORT`), 0, spread_sales$`ALLIED/EXPORT`)
spread_sales$`INDEP AFTERMKT` <- ifelse(is.na(spread_sales$`INDEP AFTERMKT`), 0, spread_sales$`INDEP AFTERMKT`)
spread_sales$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_sales$`ORIG EQUIP SRVC`), 0, spread_sales$`ORIG EQUIP SRVC`)

colnames(spread_sales) <- c("PL_SL", "Sales_allied_export", "Sales_iam", "Sales_oes")

spread_discount$`ALLIED/EXPORT` <- ifelse(is.na(spread_discount$`ALLIED/EXPORT`), 0, ( spread_discount$`ALLIED/EXPORT`))
spread_discount$`INDEP AFTERMKT` <- ifelse(is.na(spread_discount$`INDEP AFTERMKT`), 0, ( spread_discount$`INDEP AFTERMKT`))
spread_discount$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_discount$`ORIG EQUIP SRVC`), 0, ( spread_discount$`ORIG EQUIP SRVC`))

colnames(spread_discount) <- c("PL_SL", "Discount_allied_export", "Discount_iam", "Discount_oes")

discount_data_pl_sl_level <- merge(x = spread_sales, y = spread_discount, by.x = "PL_SL", by.y = "PL_SL", all = TRUE)

discount_data_pl_sl_level$Discount_iam_percent <- ifelse(discount_data_pl_sl_level$Sales_iam == 0, 0, (discount_data_pl_sl_level$Discount_iam/discount_data_pl_sl_level$Sales_iam)* -100)
discount_data_pl_sl_level$Discount_oes_percent <- ifelse(discount_data_pl_sl_level$Sales_oes == 0, 0, (discount_data_pl_sl_level$Discount_oes/discount_data_pl_sl_level$Sales_oes)* -100)
discount_data_pl_sl_level$Discount_allied_export_percent <- ifelse(discount_data_pl_sl_level$Sales_allied_export == 0, 0, (discount_data_pl_sl_level$Discount_allied_export/discount_data_pl_sl_level$Sales_allied_export)* -100)

ATB_final_ads <- merge(ATB_final_ads, discount_data_pl_sl_level, by.x = "PL_SL", by.y = "PL_SL", all.x = TRUE)

## Converting Back to numeric:
ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE <- as.numeric(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)
ATB_final_ads$OB_TRANS_CST_PP <- as.numeric(ATB_final_ads$OB_TRANS_CST_PP)
ATB_final_ads$IB_TRANS_CST_PP <- as.numeric(ATB_final_ads$IB_TRANS_CST_PP)
ATB_final_ads$BULK_CR_CALC_1 <- as.numeric(ATB_final_ads$BULK_CR_CALC_1)
ATB_final_ads$REDISTRIBUTION_COST_PP <- as.numeric(ATB_final_ads$REDISTRIBUTION_COST_PP)
ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE <- as.numeric(ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE)
ATB_final_ads$OFFSITE_TRANS_COST_PP <- as.numeric(ATB_final_ads$OFFSITE_TRANS_COST_PP)
ATB_final_ads$MINIMUM_BUY_QTY <- as.numeric(ATB_final_ads$MINIMUM_BUY_QTY)
ATB_final_ads$STD_PACK_QTY <- as.numeric(ATB_final_ads$STD_PACK_QTY)
ATB_final_ads$BUY_FREQ <- as.numeric(ATB_final_ads$BUY_FREQ)
ATB_final_ads$CAMPN_QTY <- as.numeric(ATB_final_ads$CAMPN_QTY)
ATB_final_ads$DECK_CD <- as.numeric(ATB_final_ads$CAMPN_QTY)
ATB_final_ads$LAST_COST <- as.numeric(ATB_final_ads$LAST_COST)
ATB_final_ads$CUBIC_FT_PER_PIECE <- as.numeric(ATB_final_ads$CUBIC_FT_PER_PIECE)
ATB_final_ads$ADJ_UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$ADJ_UNIT_LOAD_QTY)
#ATB_final_ads$MDSNG_PKG_QTY <- as.numeric(ATB_final_ads$MDSNG_PKG_QTY)
ATB_final_ads$MCHDG_PACK_HEIGHT <- as.numeric(ATB_final_ads$MCHDG_PACK_HEIGHT)
ATB_final_ads$MCHDG_PACK_LENGTH <- as.numeric(ATB_final_ads$MCHDG_PACK_LENGTH)
ATB_final_ads$MCHDG_PACK_WIDTH <- as.numeric(ATB_final_ads$MCHDG_PACK_WIDTH)
ATB_final_ads$UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$UNIT_LOAD_QTY)
ATB_final_ads$DLR_CURR_DEALER_PRC <- as.numeric(ATB_final_ads$DLR_CURR_DEALER_PRC)
ATB_final_ads$MTH_COST_PER_SQ_FT <- as.numeric(ATB_final_ads$MTH_COST_PER_SQ_FT)
ATB_final_ads$UL_SQ_FT <- as.numeric(ATB_final_ads$UL_SQ_FT)


ATB_final_ads$DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$DLR_CURR_DEALER_PRC
ATB_final_ads$WD_DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$WD_WHSL_DIST_PRC

ATB_final_ads$Dealer_Price_Allied_Export <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
ATB_final_ads$Dealer_Price_OES <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_oes_percent/100))
ATB_final_ads$Dealer_Price_IAM <- ATB_final_ads$WD_WHSL_DIST_PRC * (1 - (ATB_final_ads$Discount_iam_percent/100))

ATB_final_ads$Proline_subline <- ATB_final_ads$PL_SL
ATB_final_ads$PL_SL <- NULL
ATB_final_ads$DLR_SLS <- as.numeric(ATB_final_ads$DLR_SLS)
ATB_final_ads$WD_SLS <- as.numeric(ATB_final_ads$WD_SLS)
ATB_final_ads$INVENTORY_LVL<-as.numeric(ATB_final_ads$INVENTORY_LVL)
incProgress(1/7, detail = "Running Calculations")

### Filtering parts with no data

all_part <- as.data.frame(PART_data$PART_NBR)
present_part <- as.data.frame(ATB_final_ads$PART_NBR)
colnames(all_part)[1] <- "PART_NBR"
colnames(present_part)[1] <- "PART_NBR"

print("6done")

ATB_ads_filtered_part_internal <- subset(all_part, !(PART_NBR %in% present_part$PART_NBR))
ATB_ads_filtered_part <- ATB_final_ads[which((is.na(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)) | (is.na(ATB_final_ads$FORECAST_YR_1)) | (is.na(ATB_final_ads$LAST_COST))),]

if(nrow(ATB_ads_filtered_part_internal) > 0 & nrow(ATB_ads_filtered_part) > 0)
{
  ATB_ads_filtered_part_internal$Reason <- "Forcee data not present"
  ATB_ads_filtered_part$Reason <- ifelse(is.na(ATB_ads_filtered_part$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part$LAST_COST), "Last Cost not present", "Forcee data not present"))
  ATB_ads_filtered_part <- ATB_ads_filtered_part %>% select(PART_NBR, Reason)
  ATB_ads_filtered_part <- rbind(ATB_ads_filtered_part, ATB_ads_filtered_part_internal)
  
  
} else if(nrow(ATB_ads_filtered_part_internal) > 0 & nrow(ATB_ads_filtered_part) == 0)
{
  ATB_ads_filtered_part_internal$Reason <- "Forcee data not present"
  ATB_ads_filtered_part <- ATB_ads_filtered_part_internal
} else if(nrow(ATB_ads_filtered_part_internal) == 0 & nrow(ATB_ads_filtered_part) > 0)
{
  ATB_ads_filtered_part$Reason <- ifelse(is.na(ATB_ads_filtered_part$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part$LAST_COST), "Last Cost not present", "Forcee data not present"))
  ATB_ads_filtered_part <- ATB_ads_filtered_part %>% select(PART_NBR, Reason)
  
} else
{
  ATB_ads_filtered_part <- data.frame()
  
}

if(nrow(ATB_ads_filtered_part) > 0)
{
  
  shinyjs::enable("download_filtered_list")
  
  output$modal_table <- renderDataTable({
    datatable(ATB_ads_filtered_part, rownames = FALSE,
              options = list(scrollX=TRUE, scrollY='200px',
                             lengthMenu = c(5, 25, 50),
                             paging=FALSE, searching=FALSE))
  })
  
  showModal(modalDialog(
    title = "Summary Report",
    DT::dataTableOutput('modal_table')
  ))
  
  output$download_filtered_list <- downloadHandler(
    filename = function() {
      paste("Filtered_Part_List", ".csv", sep="")
    },
    content = function(file) {
      abc <- ATB_ads_filtered_part
      
      write.csv(abc, file, row.names = FALSE)
      
    }
  )
  
}

ATB_final_ads$MINIMUM_BUY_QTY <- ifelse(is.na(ATB_final_ads$MINIMUM_BUY_QTY), 0,ATB_final_ads$MINIMUM_BUY_QTY)
ATB_final_ads$STD_PACK_QTY <- ifelse(is.na(ATB_final_ads$STD_PACK_QTY), 0,ATB_final_ads$STD_PACK_QTY )
ATB_final_ads$BUY_FREQ <- ifelse(is.na(ATB_final_ads$BUY_FREQ ), 1,ATB_final_ads$BUY_FREQ )

## Negative inventory being made zero
ATB_final_ads$TOTAL_INVENTORY <- ifelse(ATB_final_ads$TOTAL_INVENTORY < 0, 0, ATB_final_ads$TOTAL_INVENTORY)


ATB_final_ads$X <- NULL

print("7done")

if(nrow(ATB_final_ads) > 0)
{
  
  ATB_final_ads$Setup_cost <- 0
  ATB_final_ads$Additional_cost <- 0
  ATB_final_ads$FLAG <- 0
  ATB_final_ads$Entered_Buy_Qty <- 0
  ATB_final_ads$OES_FRACTION <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$OES_FRACTION)
  ATB_final_ads$FLAG <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$FLAG)
  
  ## Converting characters\factors into numeric
  ATB_final_ads <- as.data.frame(ATB_final_ads)
  for(i in (4:35)){
    ATB_final_ads[,i] <- as.numeric(ATB_final_ads[,i])
  }
  
  ## Replacing all NA's with zero
  ATB_final_ads[is.na(ATB_final_ads)] <- 0
  
  part_ads <- ATB_final_ads
  
  global_ads$df_data_ads <- ATB_final_ads
  #write.csv(ATB_final_ads, file = "ATB_ads.csv")
  
  ATB_ADS <- ATB_final_ads
  
  if(Flag_PART_data == 1)
  {
    dbRemoveTable(con, PART_data_name)
  }
  
  dbRemoveTable(con, ATB_final_ads_1_name)
  
  #  Code for Part List View:
  #  1. Current (NPV_Scenario_1)
  #  2. Resource: Current (NPV_Scenario_1_curr)
  #  3. ATB Optimal: Original data (NPV_Cal_CR_list_orig)
  #  4. ATB Optimal: Updated data (NPV_Cal_CR_list)
  
  ## Description about the variables used
  # AMD- It is tha Average monthly demand
  # BF_BQ- It is product of Buy frequency and buy quantity
  # FCST- It is the Forecast data at year level
  # BQ - Gives teh Buy Quantity of a part
  # Purchase_times - The number of purchase has to be made
  # Yearly_BQ - Sum of buy quantity at a yearly level
  # Curr_Inv - The current Inventory level of the part
  # Adj_Dem - The adjusted demand of a part it is given as (Yearly_BQ - Curr_Inv)
  # Revenue
  # Offsite_Qty
  # Storage_Cost
  # Freight_cost
  # Processing_cost
  # Material_cost
  # All_Expense- Sum of the above mentioned cost elements
  
  
  ################# 1. Code for Original Scenario: Current:
  Original_current <- Current(ATB_ADS)
  
  ################# 3. Code for Original Scenario- Optimal
  Original_optimal <- Optimal(ATB_ADS)
  
  ################# 7. Code for Selldown Calculation
  Selldown_NPV <- Selldown(ATB_ADS)
  
  ####################################################################################################################################################################################################################
  
  
  print("8done")
  ########creating columns from ATB_final_ads
  ATB_ads_per_piece <- ATB_ADS %>% select(PART_NBR,DEALER_PRICE_NO_DISCOUNT,Discount_oes_percent,Discount_allied_export_percent,
                                          Dealer_Price_OES,Dealer_Price_Allied_Export,WD_DEALER_PRICE_NO_DISCOUNT,Discount_iam_percent,Dealer_Price_IAM,
                                          LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                          REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
  
  colnames(ATB_ads_per_piece)[1] <- "Part_Nbr"
  ### Creating table for cost comparison:
  orig_cost <- ATB_ADS %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC)
  orig_cost$LAST_COST <- round(orig_cost$LAST_COST, 2)
  orig_cost$DLR_CURR_DEALER_PRC <- round(orig_cost$DLR_CURR_DEALER_PRC, 2)
  orig_cost$WD_WHSL_DIST_PRC <- round(orig_cost$WD_WHSL_DIST_PRC, 2)
  
  scenario_cost <- orig_cost
  # ATB_ADS %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC)
  scenario_cost$buy_qty <- 0
  scenario_cost <- scenario_cost %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, buy_qty,
                                            Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC,)
  reflect_cost_scenario_1$df_data_cost_scenario_1 <- scenario_cost
  reflect_cost_scenario_2$df_data_cost_scenario_2 <- scenario_cost
  
  ##### Output of Cost comparison table
  output$Cost_comp_1 <- renderHotable({
    orig_cost <- data.frame(Part_Nbr = orig_cost[,1], paste("$", formatC(orig_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                            lapply(orig_cost[,3:4], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                            lapply(orig_cost[,5:8], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
    
    colnames(orig_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Setup Cost", "Additional Cost", "Dealer Price", "WD Price")
    orig_cost
    
  }, readOnly = TRUE)
  
  print("9done")
  ##########################################################################################################################################################################################
  #### Creating table for Part List Analysis Result
  
  #  1. Original: Original_current, Original_optimal, Selldown_NPV
  #  2. Scenario-1: Scenario_1_current, Scenario_1_optimal, Selldown_NPV_Scenario_1
  #  3. Scenario_2: Scenario_2_current, Scenario_2_optimal, Selldown_NPV_Scenario_2
  
  ## Creating intermediate tables to get proper format
  # spl- Source Part List
  
  spl_1 <- Original_current
  spl_1$Part_Nbr <- str_pad(spl_1$Part_Nbr, width=8, side="left", pad="0")
  spl_2 <- Original_optimal
  spl_2$Part_Nbr <- str_pad(spl_2$Part_Nbr, width=8, side="left", pad="0")
  spl_3 <- Selldown_NPV
  spl_3$Part_Nbr <- str_pad(spl_3$Part_Nbr, width=8, side="left", pad="0")
  
  spl_12 <- merge(spl_1, spl_2, by = "Part_Nbr")
  spl_123 <- merge(spl_12, spl_3, by = "Part_Nbr")
  spl_123 <- merge(spl_123, ATB_ads_per_piece, by = "Part_Nbr")
  spl_123_result <- spl_123 %>% select(Part_Nbr, NPV, Selldown_NPV, Revenue, Revenue_non_npv,Optimal_NPV,Optimal_ATB_Quantity, Total_Forecast)
  
  
  #global_scenario_1_down$df_data_scenario_1_down <- spl_123_result
  
  spl_456_result<- data.frame(Part_Nbr = spl_123_result$Part_Nbr)
  spl_456_result$NPV_Scenario_1  <- NA
  spl_456_result$Selldown_NPV_Scenario_1  <- NA
  spl_456_result$Revenue_Scenario_1 <- NA
  spl_456_result$Revenue_non_npv_Scenario_1 <- NA
  spl_456_result$Optimal_NPV_Scenario_1 <- NA
  spl_456_result$Optimal_ATB_Quantity_Scenario_1 <- NA
  spl_456_result$Total_Forecast_Scenario_1 <- NA
  print("10done")
  write.csv(spl_456_result, file = "spl_123_result_s1.csv", row.names = FALSE)
  #global_scenario_2_down$df_data_scenario_2_down <- spl_123_result
  
  spl_789_result <- data.frame(Part_Nbr = spl_123_result$Part_Nbr)
  spl_789_result$NPV_Scenario_2  <- NA
  spl_789_result$Selldown_NPV_Scenario_2  <- NA
  spl_789_result$Revenue_Scenario_2 <- NA
  spl_789_result$Revenue_non_npv_Scenario_2 <- NA
  spl_789_result$Optimal_NPV_Scenario_2 <- NA
  spl_789_result$Optimal_ATB_Quantity_Scenario_2 <- NA
  spl_789_result$Total_Forecast_Scenario_2 <- NA
  write.csv(spl_789_result, file = "spl_123_result_s2.csv", row.names = FALSE)
  
  output$analysis_original <- renderHotable({
    spl_123_result$Part_Nbr <- str_pad(spl_123_result$Part_Nbr, width=8, side="left", pad="0")
    spl_123_result <- data.frame(Part_Nbr = spl_123_result[,1], lapply(spl_123_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                 formatC(spl_123_result[,7] , big.mark=",", digits=0, format="f"), formatC(spl_123_result[,8] , big.mark=",", digits=0, format="f"), stringsAsFactors = FALSE)
    
    colnames(spl_123_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
    print("11done")
    spl_123_result
  })
  #######################
  part_ff<-global_ads$df_data_ads
  y<-nrow(part_ff)
  print(y)
  ATB_ADS <- global_ads$df_data_ads
  
  finance_current_scenario= data.frame(matrix("",  nrow = as.numeric(y)))  
  #finance_current_scenario<-0
  finance_current_scenario<-as.data.frame(finance_current_scenario)
  finance_current_scenario$matrix.....nrow...as.numeric.y..<-NULL
  finance_current_scenario$Part_Nbr<-part_ff$PART_NBR
  finance_current_scenario$Pb<-2
  finance_current_scenario$Optimal_qty<-spl_2$Optimal_ATB_Quantity
  finance_current_scenario$Discount_Rate<-15
  finance_current_scenario$ATB_Units<-spl_1$Buy_Quantity
  finance_current_scenario$Material_cost<-part_ff$LAST_COST
  finance_current_scenario$Labour_cost_per_hr<-as.numeric(part_ff$AVG_LCPP)+
    as.numeric(part_ff$OFFSITE_LCPP)+as.numeric(part_ff$IB_LABOR_COST_PP)+
    as.numeric(part_ff$OB_LABOR_COST_PP)
  finance_current_scenario$Storage_cost<-round(as.numeric(part_ff$MTH_SQ_FT_COST_PER_PEICE),2)
  finance_current_scenario$Total_packaging_cost<-spl_1$Package_cost
  finance_current_scenario$Freight_one_way<-round(as.numeric(part_ff$IB_TRANS_CST_PP)+as.numeric(part_ff$OFFSITE_TRANS_COST_PP),2)
  finance_current_scenario$Inventory_lvl<-part_ff$INVENTORY_LVL
  finance_current_scenario$FORECAST_YR_1<-part_ff$FORECAST_YR_1
  finance_current_scenario$FORECAST_YR_2<-part_ff$FORECAST_YR_2
  finance_current_scenario$FORECAST_YR_3<-part_ff$FORECAST_YR_3
  finance_current_scenario$FORECAST_YR_4<-part_ff$FORECAST_YR_4
  finance_current_scenario$FORECAST_YR_5<-part_ff$FORECAST_YR_5
  finance_current_scenario$FORECAST_YR_6<-part_ff$FORECAST_YR_6
  finance_current_scenario$FORECAST_YR_7<-part_ff$FORECAST_YR_7
  finance_current_scenario$FORECAST_YR_8<-part_ff$FORECAST_YR_8
  finance_current_scenario$FORECAST_YR_9<-part_ff$FORECAST_YR_9
  finance_current_scenario$FORECAST_YR_10<-part_ff$FORECAST_YR_10
  finance_current_scenario$FORECAST_YR_11<-part_ff$FORECAST_YR_11
  finance_current_scenario$FORECAST_YR_12<-part_ff$FORECAST_YR_12
  finance_current_scenario$FORECAST_YR_13<-part_ff$FORECAST_YR_13
  finance_current_scenario$FORECAST_YR_14<-part_ff$FORECAST_YR_14
  finance_current_scenario$FORECAST_YR_15<-part_ff$FORECAST_YR_15
  finance_current_scenario$Historic_sales_CY<-part_ff$ACTUAL_SALES_CYTD
  finance_current_scenario$Historic_sales_minus_1<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_1
  finance_current_scenario$Historic_sales_minus_2<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_2
  finance_current_scenario$Mandatory_serv_ret<-round(as.numeric(part_ff$APPLICATION_LY),0)
  finance_current_scenario$Dealer_price<-part_ff$DEALER_PRICE_NO_DISCOUNT
  finance_current_scenario$Dlr_sls<-part_ff$DLR_SLS
  finance_current_scenario$WD_price<-part_ff$WD_DEALER_PRICE_NO_DISCOUNT
  finance_current_scenario$WD_sls<-part_ff$WD_SLS	
  finance_current_scenario$sa<-0.12
  print("12done")
  finance_current_scenario_pb<- finance_current_scenario
  finance_current_scenario_pb$All_time_buy<-(finance_current_scenario_pb$ATB_Units*finance_current_scenario_pb$Material_cost)+
    finance_current_scenario_pb$Labour_cost_per_hr+finance_current_scenario_pb$Storage_cost+ finance_current_scenario_pb$Total_packaging_cost+(
      finance_current_scenario_pb$Freight_one_way*finance_current_scenario_pb$ATB_Units)
  finance_current_scenario_pb$sp<-ifelse((finance_current_scenario_pb$Dlr_sls + finance_current_scenario_pb$WD_sls) ==0,
                                         ifelse(finance_current_scenario_pb$Dealer_price ==0,finance_current_scenario_pb$WD_price,
                                                ifelse(finance_current_scenario_pb$WD_price==0,finance_current_scenario_pb$Dealer_price,
                                                       (as.numeric(finance_current_scenario_pb$Dealer_price)+as.numeric(finance_current_scenario_pb$WD_price))*0.5))
                                         , finance_current_scenario_pb$Dealer_price*(finance_current_scenario_pb$Dlr_sls/
                                                                                       (finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls))+ finance_current_scenario_pb$WD_price*
                                           (finance_current_scenario_pb$WD_sls/(finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls)))
  #finance_current_scenario_pb$sa<-if(x3=="GMP"){0.09}else if (x3=="ACD"){0.15}else if(x3=="-"){0.12}
  finance_current_scenario_pb$sa<-0.12
  finance_current_scenario_pb$Units_storage_0<-as.numeric(finance_current_scenario_pb$ATB_Units)+as.numeric(finance_current_scenario_pb$Inventory_lvl)
  finance_current_scenario_pb$Units_storage_1<-ifelse(finance_current_scenario_pb$FORECAST_YR_1==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_1)
  finance_current_scenario_pb$Units_storage_2<-ifelse(finance_current_scenario_pb$FORECAST_YR_2==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_2)
  finance_current_scenario_pb$Units_storage_3<-ifelse(finance_current_scenario_pb$FORECAST_YR_3==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_3)
  finance_current_scenario_pb$Units_storage_4<-ifelse(finance_current_scenario_pb$FORECAST_YR_4==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_4)
  finance_current_scenario_pb$Units_storage_5<-ifelse(finance_current_scenario_pb$FORECAST_YR_5==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_5)
  finance_current_scenario_pb$Units_storage_6<-ifelse(finance_current_scenario_pb$FORECAST_YR_6==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_6)
  finance_current_scenario_pb$Units_storage_7<-ifelse(finance_current_scenario_pb$FORECAST_YR_7==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_7)
  finance_current_scenario_pb$Units_storage_8<-ifelse(finance_current_scenario_pb$FORECAST_YR_8==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_8)
  finance_current_scenario_pb$Units_storage_9<-ifelse(finance_current_scenario_pb$FORECAST_YR_9==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_9)
  finance_current_scenario_pb$Units_storage_10<-ifelse(finance_current_scenario_pb$FORECAST_YR_10==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_10)
  finance_current_scenario_pb$Units_storage_11<-ifelse(finance_current_scenario_pb$FORECAST_YR_11==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_11)
  finance_current_scenario_pb$Units_storage_12<-ifelse(finance_current_scenario_pb$FORECAST_YR_12==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_12)
  finance_current_scenario_pb$Units_storage_13<-ifelse(finance_current_scenario_pb$FORECAST_YR_13==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_13)
  finance_current_scenario_pb$Units_storage_14<-ifelse(finance_current_scenario_pb$FORECAST_YR_14==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_14)
  finance_current_scenario_pb$Units_storage_15<-ifelse(finance_current_scenario_pb$FORECAST_YR_15==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_15)
  
  finance_current_scenario_pb$Revenue_0<-0
  finance_current_scenario_pb$Revenue_1<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_2<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_3<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_4<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_5<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_6<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_7<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_8<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_9<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_10<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_11<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_12<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_13<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_14<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_15<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  
  print("13done")
  finance_current_scenario_pb$Total_storage_cost_0<-0
  finance_current_scenario_pb$Total_storage_cost_1<-finance_current_scenario_pb$Units_storage_1*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_2<-finance_current_scenario_pb$Units_storage_2*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_3<-finance_current_scenario_pb$Units_storage_3*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_4<-finance_current_scenario_pb$Units_storage_4*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_5<-finance_current_scenario_pb$Units_storage_5*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_6<-finance_current_scenario_pb$Units_storage_6*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_7<-finance_current_scenario_pb$Units_storage_7*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_8<-finance_current_scenario_pb$Units_storage_8*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_9<-finance_current_scenario_pb$Units_storage_9*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_10<-finance_current_scenario_pb$Units_storage_10*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_11<-finance_current_scenario_pb$Units_storage_11*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_12<-finance_current_scenario_pb$Units_storage_12*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_13<-finance_current_scenario_pb$Units_storage_13*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_14<-finance_current_scenario_pb$Units_storage_14*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_15<-finance_current_scenario_pb$Units_storage_15*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  
  
  finance_current_scenario_pb$outbound_cost_1<-finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_2<-finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_3<-finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_4<-finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_5<-finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_6<-finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_7<-finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_8<-finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_9<-finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_10<-finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_11<-finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_12<-finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_13<-finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_14<-finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_15<-finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$Freight_one_way
  
  
  finance_current_scenario_pb$Total_cost_0<-finance_current_scenario_pb$All_time_buy
  finance_current_scenario_pb$Total_cost_1<-finance_current_scenario_pb$outbound_cost_1+finance_current_scenario_pb$Total_storage_cost_1
  finance_current_scenario_pb$Total_cost_2<-finance_current_scenario_pb$outbound_cost_2+finance_current_scenario_pb$Total_storage_cost_2
  finance_current_scenario_pb$Total_cost_3<-finance_current_scenario_pb$outbound_cost_3+finance_current_scenario_pb$Total_storage_cost_3
  finance_current_scenario_pb$Total_cost_4<-finance_current_scenario_pb$outbound_cost_4+finance_current_scenario_pb$Total_storage_cost_4
  finance_current_scenario_pb$Total_cost_5<-finance_current_scenario_pb$outbound_cost_5+finance_current_scenario_pb$Total_storage_cost_5
  finance_current_scenario_pb$Total_cost_6<-finance_current_scenario_pb$outbound_cost_6+finance_current_scenario_pb$Total_storage_cost_6
  finance_current_scenario_pb$Total_cost_7<-finance_current_scenario_pb$outbound_cost_7+finance_current_scenario_pb$Total_storage_cost_7
  finance_current_scenario_pb$Total_cost_8<-finance_current_scenario_pb$outbound_cost_8+finance_current_scenario_pb$Total_storage_cost_8
  finance_current_scenario_pb$Total_cost_9<-finance_current_scenario_pb$outbound_cost_9+finance_current_scenario_pb$Total_storage_cost_9
  finance_current_scenario_pb$Total_cost_10<-finance_current_scenario_pb$outbound_cost_10+finance_current_scenario_pb$Total_storage_cost_10
  finance_current_scenario_pb$Total_cost_11<-finance_current_scenario_pb$outbound_cost_11+finance_current_scenario_pb$Total_storage_cost_11
  finance_current_scenario_pb$Total_cost_12<-finance_current_scenario_pb$outbound_cost_12+finance_current_scenario_pb$Total_storage_cost_12
  finance_current_scenario_pb$Total_cost_13<-finance_current_scenario_pb$outbound_cost_13+finance_current_scenario_pb$Total_storage_cost_13
  finance_current_scenario_pb$Total_cost_14<-finance_current_scenario_pb$outbound_cost_14+finance_current_scenario_pb$Total_storage_cost_14
  finance_current_scenario_pb$Total_cost_15<-finance_current_scenario_pb$outbound_cost_15+finance_current_scenario_pb$Total_storage_cost_15
  
  print("14done")
  finance_current_scenario_pb$Net_benefit_0<-finance_current_scenario_pb$Revenue_0-finance_current_scenario_pb$Total_cost_0
  finance_current_scenario_pb$Net_benefit_1<-finance_current_scenario_pb$Revenue_1-finance_current_scenario_pb$Total_cost_1
  finance_current_scenario_pb$Net_benefit_2<-finance_current_scenario_pb$Revenue_2-finance_current_scenario_pb$Total_cost_2
  finance_current_scenario_pb$Net_benefit_3<-finance_current_scenario_pb$Revenue_3-finance_current_scenario_pb$Total_cost_3
  finance_current_scenario_pb$Net_benefit_4<-finance_current_scenario_pb$Revenue_4-finance_current_scenario_pb$Total_cost_4
  finance_current_scenario_pb$Net_benefit_5<-finance_current_scenario_pb$Revenue_5-finance_current_scenario_pb$Total_cost_5
  finance_current_scenario_pb$Net_benefit_6<-finance_current_scenario_pb$Revenue_6-finance_current_scenario_pb$Total_cost_6
  finance_current_scenario_pb$Net_benefit_7<-finance_current_scenario_pb$Revenue_7-finance_current_scenario_pb$Total_cost_7
  finance_current_scenario_pb$Net_benefit_8<-finance_current_scenario_pb$Revenue_8-finance_current_scenario_pb$Total_cost_8
  finance_current_scenario_pb$Net_benefit_9<-finance_current_scenario_pb$Revenue_9-finance_current_scenario_pb$Total_cost_9
  finance_current_scenario_pb$Net_benefit_10<-finance_current_scenario_pb$Revenue_10-finance_current_scenario_pb$Total_cost_10
  finance_current_scenario_pb$Net_benefit_11<-finance_current_scenario_pb$Revenue_11-finance_current_scenario_pb$Total_cost_11
  finance_current_scenario_pb$Net_benefit_12<-finance_current_scenario_pb$Revenue_12-finance_current_scenario_pb$Total_cost_12
  finance_current_scenario_pb$Net_benefit_13<-finance_current_scenario_pb$Revenue_13-finance_current_scenario_pb$Total_cost_13
  finance_current_scenario_pb$Net_benefit_14<-finance_current_scenario_pb$Revenue_14-finance_current_scenario_pb$Total_cost_14
  finance_current_scenario_pb$Net_benefit_15<-finance_current_scenario_pb$Revenue_15-finance_current_scenario_pb$Total_cost_15
  
  finance_current_scenario_pb$pv_cashflow_0<-finance_current_scenario_pb$Net_benefit_0/(1.15^0)
  finance_current_scenario_pb$pv_cashflow_1<-finance_current_scenario_pb$Net_benefit_1/(1.15^1)
  finance_current_scenario_pb$pv_cashflow_2<-finance_current_scenario_pb$Net_benefit_2/(1.15^2)
  finance_current_scenario_pb$pv_cashflow_3<-finance_current_scenario_pb$Net_benefit_3/(1.15^3)
  finance_current_scenario_pb$pv_cashflow_4<-finance_current_scenario_pb$Net_benefit_4/(1.15^4)
  finance_current_scenario_pb$pv_cashflow_5<-finance_current_scenario_pb$Net_benefit_5/(1.15^5)
  finance_current_scenario_pb$pv_cashflow_6<-finance_current_scenario_pb$Net_benefit_6/(1.15^6)
  finance_current_scenario_pb$pv_cashflow_7<-finance_current_scenario_pb$Net_benefit_7/(1.15^7)
  finance_current_scenario_pb$pv_cashflow_8<-finance_current_scenario_pb$Net_benefit_8/(1.15^8)
  finance_current_scenario_pb$pv_cashflow_9<-finance_current_scenario_pb$Net_benefit_9/(1.15^9)
  finance_current_scenario_pb$pv_cashflow_10<-finance_current_scenario_pb$Net_benefit_10/(1.15^10)
  finance_current_scenario_pb$pv_cashflow_11<-finance_current_scenario_pb$Net_benefit_11/(1.15^11)
  finance_current_scenario_pb$pv_cashflow_12<-finance_current_scenario_pb$Net_benefit_12/(1.15^12)
  finance_current_scenario_pb$pv_cashflow_13<-finance_current_scenario_pb$Net_benefit_13/(1.15^13)
  finance_current_scenario_pb$pv_cashflow_14<-finance_current_scenario_pb$Net_benefit_14/(1.15^14)
  finance_current_scenario_pb$pv_cashflow_15<-finance_current_scenario_pb$Net_benefit_15/(1.15^15)
  
  
  finance_current_scenario_pb$pb_non_npv_0<-finance_current_scenario_pb$Net_benefit_0
  finance_current_scenario_pb$pb_non_npv_1<-finance_current_scenario_pb$Net_benefit_1+finance_current_scenario_pb$pb_non_npv_0
  finance_current_scenario_pb$pb_non_npv_2<-finance_current_scenario_pb$Net_benefit_2+finance_current_scenario_pb$pb_non_npv_1
  finance_current_scenario_pb$pb_non_npv_3<-finance_current_scenario_pb$Net_benefit_3+finance_current_scenario_pb$pb_non_npv_2
  finance_current_scenario_pb$pb_non_npv_4<-finance_current_scenario_pb$Net_benefit_4+finance_current_scenario_pb$pb_non_npv_3
  finance_current_scenario_pb$pb_non_npv_5<-finance_current_scenario_pb$Net_benefit_5+finance_current_scenario_pb$pb_non_npv_4
  finance_current_scenario_pb$pb_non_npv_6<-finance_current_scenario_pb$Net_benefit_6+finance_current_scenario_pb$pb_non_npv_5
  finance_current_scenario_pb$pb_non_npv_7<-finance_current_scenario_pb$Net_benefit_7+finance_current_scenario_pb$pb_non_npv_6
  finance_current_scenario_pb$pb_non_npv_8<-finance_current_scenario_pb$Net_benefit_8+finance_current_scenario_pb$pb_non_npv_7
  finance_current_scenario_pb$pb_non_npv_9<-finance_current_scenario_pb$Net_benefit_9+finance_current_scenario_pb$pb_non_npv_8
  finance_current_scenario_pb$pb_non_npv_10<-finance_current_scenario_pb$Net_benefit_10+finance_current_scenario_pb$pb_non_npv_9
  finance_current_scenario_pb$pb_non_npv_11<-finance_current_scenario_pb$Net_benefit_11+finance_current_scenario_pb$pb_non_npv_10
  finance_current_scenario_pb$pb_non_npv_12<-finance_current_scenario_pb$Net_benefit_12+finance_current_scenario_pb$pb_non_npv_11
  finance_current_scenario_pb$pb_non_npv_13<-finance_current_scenario_pb$Net_benefit_13+finance_current_scenario_pb$pb_non_npv_12
  finance_current_scenario_pb$pb_non_npv_14<-finance_current_scenario_pb$Net_benefit_14+finance_current_scenario_pb$pb_non_npv_13
  finance_current_scenario_pb$pb_non_npv_15<-finance_current_scenario_pb$Net_benefit_15+finance_current_scenario_pb$pb_non_npv_14
  
  
  finance_current_scenario_pb$pb_npv_0<-finance_current_scenario_pb$pv_cashflow_0
  finance_current_scenario_pb$pb_npv_1<-finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pb_npv_0
  finance_current_scenario_pb$pb_npv_2<-finance_current_scenario_pb$pv_cashflow_2+finance_current_scenario_pb$pb_npv_1
  finance_current_scenario_pb$pb_npv_3<-finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pb_npv_2
  finance_current_scenario_pb$pb_npv_4<-finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pb_npv_3
  finance_current_scenario_pb$pb_npv_5<-finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pb_npv_4
  finance_current_scenario_pb$pb_npv_6<-finance_current_scenario_pb$pv_cashflow_6+finance_current_scenario_pb$pb_npv_5
  finance_current_scenario_pb$pb_npv_7<-finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pb_npv_6
  finance_current_scenario_pb$pb_npv_8<-finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pb_npv_7
  finance_current_scenario_pb$pb_npv_9<-finance_current_scenario_pb$pv_cashflow_9+finance_current_scenario_pb$pb_npv_8
  finance_current_scenario_pb$pb_npv_10<-finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pb_npv_9
  finance_current_scenario_pb$pb_npv_11<-finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pb_npv_10
  finance_current_scenario_pb$pb_npv_12<-finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pb_npv_11
  finance_current_scenario_pb$pb_npv_13<-finance_current_scenario_pb$pv_cashflow_13+finance_current_scenario_pb$pb_npv_12
  finance_current_scenario_pb$pb_npv_14<-finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pb_npv_13
  finance_current_scenario_pb$pb_npv_15<-finance_current_scenario_pb$pv_cashflow_15+finance_current_scenario_pb$pb_npv_14
  
  
  
  finance_current_scenario_pb$pby_non_npv_0<-ifelse(finance_current_scenario_pb$pb_non_npv_0>0,"Error",0)
  finance_current_scenario_pb$pby_non_npv_1<-ifelse(finance_current_scenario_pb$pb_non_npv_0<0 & finance_current_scenario_pb$pb_non_npv_1>0,(1-(finance_current_scenario_pb$pb_non_npv_1/finance_current_scenario_pb$Net_benefit_1)),0)
  finance_current_scenario_pb$pby_non_npv_2<-ifelse(finance_current_scenario_pb$pb_non_npv_1<0 & finance_current_scenario_pb$pb_non_npv_2>0,(1-(finance_current_scenario_pb$pb_non_npv_2/finance_current_scenario_pb$Net_benefit_2))+1,0)
  finance_current_scenario_pb$pby_non_npv_3<-ifelse(finance_current_scenario_pb$pb_non_npv_2<0 & finance_current_scenario_pb$pb_non_npv_3>0,(1-(finance_current_scenario_pb$pb_non_npv_3/finance_current_scenario_pb$Net_benefit_3))+2,0)
  finance_current_scenario_pb$pby_non_npv_4<-ifelse(finance_current_scenario_pb$pb_non_npv_3<0 & finance_current_scenario_pb$pb_non_npv_4>0,(1-(finance_current_scenario_pb$pb_non_npv_4/finance_current_scenario_pb$Net_benefit_4))+3,0)
  finance_current_scenario_pb$pby_non_npv_5<-ifelse(finance_current_scenario_pb$pb_non_npv_4<0 & finance_current_scenario_pb$pb_non_npv_5>0,(1-(finance_current_scenario_pb$pb_non_npv_5/finance_current_scenario_pb$Net_benefit_5))+4,0)
  finance_current_scenario_pb$pby_non_npv_6<-ifelse(finance_current_scenario_pb$pb_non_npv_5<0 & finance_current_scenario_pb$pb_non_npv_6>0,(1-(finance_current_scenario_pb$pb_non_npv_6/finance_current_scenario_pb$Net_benefit_6))+5,0)
  finance_current_scenario_pb$pby_non_npv_7<-ifelse(finance_current_scenario_pb$pb_non_npv_6<0 & finance_current_scenario_pb$pb_non_npv_7>0,(1-(finance_current_scenario_pb$pb_non_npv_7/finance_current_scenario_pb$Net_benefit_7))+6,0)
  finance_current_scenario_pb$pby_non_npv_8<-ifelse(finance_current_scenario_pb$pb_non_npv_7<0 & finance_current_scenario_pb$pb_non_npv_8>0,(1-(finance_current_scenario_pb$pb_non_npv_8/finance_current_scenario_pb$Net_benefit_8))+7,0)
  finance_current_scenario_pb$pby_non_npv_9<-ifelse(finance_current_scenario_pb$pb_non_npv_8<0 & finance_current_scenario_pb$pb_non_npv_9>0,(1-(finance_current_scenario_pb$pb_non_npv_9/finance_current_scenario_pb$Net_benefit_9))+8,0)
  finance_current_scenario_pb$pby_non_npv_10<-ifelse(finance_current_scenario_pb$pb_non_npv_9<0 & finance_current_scenario_pb$pb_non_npv_10>0,(1-(finance_current_scenario_pb$pb_non_npv_10/finance_current_scenario_pb$Net_benefit_10))+9,0)
  finance_current_scenario_pb$pby_non_npv_11<-ifelse(finance_current_scenario_pb$pb_non_npv_10<0 & finance_current_scenario_pb$pb_non_npv_11>0,(1-(finance_current_scenario_pb$pb_non_npv_11/finance_current_scenario_pb$Net_benefit_11))+10,0)
  finance_current_scenario_pb$pby_non_npv_12<-ifelse(finance_current_scenario_pb$pb_non_npv_11<0 & finance_current_scenario_pb$pb_non_npv_12>0,(1-(finance_current_scenario_pb$pb_non_npv_12/finance_current_scenario_pb$Net_benefit_12))+11,0)
  finance_current_scenario_pb$pby_non_npv_13<-ifelse(finance_current_scenario_pb$pb_non_npv_12<0 & finance_current_scenario_pb$pb_non_npv_13>0,(1-(finance_current_scenario_pb$pb_non_npv_13/finance_current_scenario_pb$Net_benefit_13))+12,0)
  finance_current_scenario_pb$pby_non_npv_14<-ifelse(finance_current_scenario_pb$pb_non_npv_13<0 & finance_current_scenario_pb$pb_non_npv_14>0,(1-(finance_current_scenario_pb$pb_non_npv_14/finance_current_scenario_pb$Net_benefit_14))+13,0)
  finance_current_scenario_pb$pby_non_npv_15<-ifelse(finance_current_scenario_pb$pb_non_npv_14<0 & finance_current_scenario_pb$pb_non_npv_15>0,(1-(finance_current_scenario_pb$pb_non_npv_15/finance_current_scenario_pb$Net_benefit_15))+14,0)
  
  print("15done")
  #finance_current_scenario_pb$pby_npv_0<-ifelse(finance_current_scenario_pb$pb_npv_0>0,"Error"," ")
  finance_current_scenario_pb$pby_npv_1<-ifelse(finance_current_scenario_pb$pb_npv_0<0 & finance_current_scenario_pb$pb_npv_1>0,1-(finance_current_scenario_pb$pb_npv_1/finance_current_scenario_pb$pv_cashflow_1),0)
  finance_current_scenario_pb$pby_npv_2<-ifelse(finance_current_scenario_pb$pb_npv_1<0 & finance_current_scenario_pb$pb_npv_2>0,(1-(finance_current_scenario_pb$pb_npv_2/finance_current_scenario_pb$pv_cashflow_2))+1,0)
  finance_current_scenario_pb$pby_npv_3<-ifelse(finance_current_scenario_pb$pb_npv_2<0 & finance_current_scenario_pb$pb_npv_3>0,(1-(finance_current_scenario_pb$pb_npv_3/finance_current_scenario_pb$pv_cashflow_3))+2,0)
  finance_current_scenario_pb$pby_npv_4<-ifelse(finance_current_scenario_pb$pb_npv_3<0 & finance_current_scenario_pb$pb_npv_4>0,(1-(finance_current_scenario_pb$pb_npv_4/finance_current_scenario_pb$pv_cashflow_4))+3,0)
  finance_current_scenario_pb$pby_npv_5<-ifelse(finance_current_scenario_pb$pb_npv_4<0 & finance_current_scenario_pb$pb_npv_5>0,(1-(finance_current_scenario_pb$pb_npv_5/finance_current_scenario_pb$pv_cashflow_5))+4,0)
  finance_current_scenario_pb$pby_npv_6<-ifelse(finance_current_scenario_pb$pb_npv_5<0 & finance_current_scenario_pb$pb_npv_6>0,(1-(finance_current_scenario_pb$pb_npv_6/finance_current_scenario_pb$pv_cashflow_6))+5,0)
  finance_current_scenario_pb$pby_npv_7<-ifelse(finance_current_scenario_pb$pb_npv_6<0 & finance_current_scenario_pb$pb_npv_7>0,(1-(finance_current_scenario_pb$pb_npv_7/finance_current_scenario_pb$pv_cashflow_7))+6,0)
  finance_current_scenario_pb$pby_npv_8<-ifelse(finance_current_scenario_pb$pb_npv_7<0 & finance_current_scenario_pb$pb_npv_8>0,(1-(finance_current_scenario_pb$pb_npv_8/finance_current_scenario_pb$pv_cashflow_8))+7,0)
  finance_current_scenario_pb$pby_npv_9<-ifelse(finance_current_scenario_pb$pb_npv_8<0 & finance_current_scenario_pb$pb_npv_9>0,(1-(finance_current_scenario_pb$pb_npv_9/finance_current_scenario_pb$pv_cashflow_9))+8,0)
  finance_current_scenario_pb$pby_npv_10<-ifelse(finance_current_scenario_pb$pb_npv_9<0 & finance_current_scenario_pb$pb_npv_10>0,(1-(finance_current_scenario_pb$pb_npv_10/finance_current_scenario_pb$pv_cashflow_10))+9,0)
  finance_current_scenario_pb$pby_npv_11<-ifelse(finance_current_scenario_pb$pb_npv_10<0 & finance_current_scenario_pb$pb_npv_11>0,(1-(finance_current_scenario_pb$pb_npv_11/finance_current_scenario_pb$pv_cashflow_11))+10,0)
  finance_current_scenario_pb$pby_npv_12<-ifelse(finance_current_scenario_pb$pb_npv_11<0 & finance_current_scenario_pb$pb_npv_12>0,(1-(finance_current_scenario_pb$pb_npv_12/finance_current_scenario_pb$pv_cashflow_12))+11,0)
  finance_current_scenario_pb$pby_npv_13<-ifelse(finance_current_scenario_pb$pb_npv_12<0 & finance_current_scenario_pb$pb_npv_13>0,(1-(finance_current_scenario_pb$pb_npv_13/finance_current_scenario_pb$pv_cashflow_13))+12,0)
  finance_current_scenario_pb$pby_npv_14<-ifelse(finance_current_scenario_pb$pb_npv_13<0 & finance_current_scenario_pb$pb_npv_14>0,(1-(finance_current_scenario_pb$pb_npv_14/finance_current_scenario_pb$pv_cashflow_14))+13,0)
  finance_current_scenario_pb$pby_npv_15<-ifelse(finance_current_scenario_pb$pb_npv_14<0 & finance_current_scenario_pb$pb_npv_15>0,(1-(finance_current_scenario_pb$pb_npv_15/finance_current_scenario_pb$pv_cashflow_15))+14,0)
  
  
  finance_current_scenario_pb$NPV_pb<-finance_current_scenario_pb$pv_cashflow_0+finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pv_cashflow_2+
    finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pv_cashflow_6+
    finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pv_cashflow_9+
    finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pv_cashflow_13+
    finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pv_cashflow_15
  finance_current_scenario_pb$flat_pb<-round(as.numeric(finance_current_scenario_pb$pby_non_npv_0)+as.numeric(finance_current_scenario_pb$pby_non_npv_1)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_2)+as.numeric(finance_current_scenario_pb$pby_non_npv_3)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_4)+as.numeric(finance_current_scenario_pb$pby_non_npv_5)+as.numeric(finance_current_scenario_pb$pby_non_npv_6)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_7)+as.numeric(finance_current_scenario_pb$pby_non_npv_8)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_9)+as.numeric(finance_current_scenario_pb$pby_non_npv_10)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_11)+as.numeric(finance_current_scenario_pb$pby_non_npv_12)+as.numeric(finance_current_scenario_pb$pby_non_npv_13)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_14)+as.numeric(finance_current_scenario_pb$pby_non_npv_15),2)
  print("16done")
  finance_current_scenario_pb$disc_pb<-round(as.numeric(finance_current_scenario_pb$pby_npv_1)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_2)+as.numeric(finance_current_scenario_pb$pby_npv_3)+as.numeric(finance_current_scenario_pb$pby_npv_4)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_5)+as.numeric(finance_current_scenario_pb$pby_npv_6)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_7)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_8)+as.numeric(finance_current_scenario_pb$pby_npv_9)+as.numeric(finance_current_scenario_pb$pby_npv_10)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_11)+as.numeric(finance_current_scenario_pb$pby_npv_12)+as.numeric(finance_current_scenario_pb$pby_npv_13)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_14)+as.numeric(finance_current_scenario_pb$pby_npv_15),2)
  write.xlsx(finance_current_scenario,"finance_current_scenario.xlsx")
  
  path_to_vbs_file = "test_pb.vbs"
  print("4")
  shell(shQuote(normalizePath(path_to_vbs_file)), "cscript", flag = "//nologo")
  print("5")
  print("AM I the error a-1??")
  pb_excel<-read.xlsx("PB_excel.xlsm")
  global_ads$df_data_ads_pb<-pb_excel
  print("17done")
  global_ads$df_data_ads_pb_orig<-finance_current_scenario_pb
  
  #### Creating Download Report File
  # spld- Scorce Part list dowlnoad file
  spl_123<-merge(spl_123, finance_current_scenario_pb[ ,c("Part_Nbr","flat_pb","disc_pb")], by = "Part_Nbr")
  print("18done")
  
  spl_123<-merge(spl_123, pb_excel[ ,c("Part_Nbr","ATB_Units","X210","X373")], by = "Part_Nbr") #ERROR
  print("19done")
  download_report <- spl_123
  download_report$Selected_scenario <- "None"
  
  download_report <- download_report %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                Selldown_Revenue,Selldown_Revenue_non_npv,
                                                Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                Total_Inventory,
                                                First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                Optimal_Storage_Cost,
                                                Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT,
                                                Dealer_Price_OES.x,Dealer_Price_Allied_Export.x,WD_DEALER_PRICE_NO_DISCOUNT,Dealer_Price_IAM.x,Discount_oes_percent.x,Discount_allied_export_percent.x, ##change 786 
                                                Discount_iam_percent.x,LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP, Selected_scenario,flat_pb,disc_pb,ATB_Units,X210)
  print("20done")
  download_report_current <- download_report
  #download_report_current[,c(43:54)] <- 0
  
  download_report_scenario_1 <- download_report
  download_report_scenario_1 <- download_report_scenario_1 %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                                      Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                                      Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                                      Selldown_Revenue,Selldown_Revenue_non_npv,
                                                                      Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                                      Total_Inventory,
                                                                      First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                                      Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                                      Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                                      Optimal_Storage_Cost,
                                                                      Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                                      Optimal_ATB_Quantity,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT,WD_DEALER_PRICE_NO_DISCOUNT,
                                                                      LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                                      REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
  print("21done")
  colnames(download_report_scenario_1) <- c('Part_Nbr', 'NPV_Scenario_1',
                                            'Selldown_NPV_Scenario_1','Selldown_NPV_non_npv_Scenario_1', 'Revenue_Scenario_1','Revenue_non_npv_Scenario_1','Part_Cost_Scenario_1','Material_cost_non_npv_Scenario_1',
                                            'Setup_cost_Scenario_1' ,'Total_transport_cost_Scenario_1','Total_transport_cost_non_npv_Scenario_1','Storage_Cost_Scenario_1','Storage_Cost_non_npv_Scenario_1',
                                            'Total_process_cost_Scenario_1',  'Total_process_cost_non_npv_Scenario_1','Package_cost_Scenario_1','Package_cost_non_npv_Scenario_1',
                                            'Total_offsite_labor_cost_Scenario_1','Total_offsite_labor_cost_non_npv_Scenario_1','Total_offsite_transport_cost_Scenario_1','Total_offsite_transport_cost_non_npv_Scenario_1', 
                                            'Additional_Cost_1','Selldown_Revenue_Scenario_1','Selldown_Revenue_non_npv_Scenario_1',
                                            'Selldown_Material_cost_Scenario_1','Selldown_Material_cost_non_npv_Scenario_1',
                                            'Selldown_Freight_cost_Scenario_1','Selldown_Freight_cost_non_npv_Scenario_1','Selldown_Storage_Cost_Scenario_1','Selldown_Storage_Cost_non_npv_Scenario_1', 'Selldown_Processing_Cost_Scenario_1',
                                            'Selldown_Processing_Cost_non_npv_Scenario_1','Selldown_Packaging_Cost_Scenario_1','Selldown_Packaging_Cost_non_npv_Scenario_1',
                                            'Total_Inventory',
                                            'First_buy','Last_buy', 'Last_sale', 'Scrap_amount_Scenario_1', 'LTB_Buy_Quantity_Scenario_1',
                                            'Buy_Quantity_Scenario_1', 'Total_Forecast_Scenario_1',
                                            'Optimal_NPV_Scenario_1', 'Optimal_Revenue_Scenario_1', 'Optimal_Material_Cost_Scenario_1', 'Optimal_Setup_cost_Scenario_1',
                                            'Optimal_Total_transport_cost_Scenario_1',
                                            'Optimal_Total_offsite_transport_cost_Scenario_1', 'Optimal_Storage_Cost_Scenario_1', 'Optimal_Total_process_cost_Scenario_1',
                                            'Optimal_Packaging_cost_Scenario_1',
                                            'Optimal_Total_offsite_labor_cost_Scenario_1', 'Optimal_ATB_Quantity_Scenario_1', 'Extended_optimal_buy_cost_1',
                                            'Extended_purchase_cost_1',"Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                            "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                            "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
  print("22done")
  download_report_scenario_1[,c(3:4,23:34)] <- 0
  
  download_report_scenario_2 <- download_report
  download_report_scenario_2 <- download_report_scenario_2 %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                                      Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                                      Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                                      Selldown_Revenue,Selldown_Revenue_non_npv,
                                                                      Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                                      Total_Inventory,
                                                                      First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                                      Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                                      Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                                      Optimal_Storage_Cost,
                                                                      Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                                      Optimal_ATB_Quantity,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT,WD_DEALER_PRICE_NO_DISCOUNT,
                                                                      LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                                      REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
  
  colnames(download_report_scenario_2) <- c('Part_Nbr', 'NPV_Scenario_2',
                                            'Selldown_NPV_Scenario_2','Selldown_NPV_non_npv_Scenario_2', 'Revenue_Scenario_2','Revenue_non_npv_Scenario_2','Part_Cost_Scenario_2','Material_cost_non_npv_Scenario_2',
                                            'Setup_cost_Scenario_2' ,'Total_transport_cost_Scenario_2','Total_transport_cost_non_npv_Scenario_2','Storage_Cost_Scenario_2','Storage_Cost_non_npv_Scenario_2',
                                            'Total_process_cost_Scenario_2',  'Total_process_cost_non_npv_Scenario_2','Package_cost_Scenario_2','Package_cost_non_npv_Scenario_2',
                                            'Total_offsite_labor_cost_Scenario_2','Total_offsite_labor_cost_non_npv_Scenario_2','Total_offsite_transport_cost_Scenario_2','Total_offsite_transport_cost_non_npv_Scenario_2', 
                                            'Additional_Cost_2','Selldown_Revenue_Scenario_2','Selldown_Revenue_non_npv_Scenario_2',
                                            'Selldown_Material_cost_Scenario_2','Selldown_Material_cost_non_npv_Scenario_2',
                                            'Selldown_Freight_cost_Scenario_2','Selldown_Freight_cost_non_npv_Scenario_2','Selldown_Storage_Cost_Scenario_2','Selldown_Storage_Cost_non_npv_Scenario_2', 'Selldown_Processing_Cost_Scenario_2',
                                            'Selldown_Processing_Cost_non_npv_Scenario_2','Selldown_Packaging_Cost_Scenario_2','Selldown_Packaging_Cost_non_npv_Scenario_2',
                                            'Total_Inventory',
                                            'First_buy','Last_buy', 'Last_sale', 'Scrap_amount_Scenario_2', 'LTB_Buy_Quantity_Scenario_2',
                                            'Buy_Quantity_Scenario_2', 'Total_Forecast_Scenario_2',
                                            'Optimal_NPV_Scenario_2', 'Optimal_Revenue_Scenario_2', 'Optimal_Material_Cost_Scenario_2', 'Optimal_Setup_cost_Scenario_2',
                                            'Optimal_Total_transport_cost_Scenario_2',
                                            'Optimal_Total_offsite_transport_cost_Scenario_2', 'Optimal_Storage_Cost_Scenario_2', 'Optimal_Total_process_cost_Scenario_2',
                                            'Optimal_Packaging_cost_Scenario_2',
                                            'Optimal_Total_offsite_labor_cost_Scenario_2', 'Optimal_ATB_Quantity_Scenario_2', 'Extended_optimal_buy_cost_2',
                                            'Extended_purchase_cost_2',"Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                            "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                            "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
  
  download_report_scenario_2[,c(3:4,23:34)] <- 0
  
  global_current_sce_down$df_data_current <- download_report_current
  global_scenario_1_down$df_data_scenario_1_down <- download_report_scenario_1
  global_scenario_2_down$df_data_scenario_2_down <- download_report_scenario_2
  
  
  print(Sys.time())
  
  #finance_current_scenario<-finance_current_scenario[with(finance_current_scenario,order(-All_time_buy)), ]  
  
  
  
  ##### Report Download
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("ATB_Part_List",".xlsx", sep="")
    },
    content = function(file) {
      #Downloading_function()
      abc <- global_current_sce_down$df_data_current
      abc <- data.frame(Part_Nbr = abc[,1],
                        lapply(abc[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                        lapply(abc[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                        lapply(abc[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(abc[,53] , big.mark=",", digits=0, format="f"),formatC(abc[,54] , big.mark=",", digits=2, format="f"), ## change 786 
                        lapply(abc[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                        lapply(abc[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                        paste("$", formatC(abc[,65] , big.mark=",", digits=0, format="f")),
                        lapply(abc[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                        lapply(abc[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                        abc[,80:84], stringsAsFactors = FALSE)
      
      
      colnames(abc) <- c("Part Number",
                         "NPV", "Selldown NPV","Selldown Non NPV",
                         "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                         "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                         "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                         "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                         "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                         "Current Inventory",
                         "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                         "Total Purchase", "Total Sales", "Optimal NPV",
                         "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                         "Optimal Storage Cost",
                         "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                         "Optimal ATB Quantity","Optimal payback period" ,"Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export",
                         "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                         "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                         "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                         "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)", "Selected Scenario","Simple payabck period","Discounted payback period","2 year payback ATB","2 year payback NPV")
      
      scenario_1 <- global_scenario_1_down$df_data_scenario_1_down
      scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                               lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                               lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                               lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                               formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                               lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                               lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                               lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                               lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                               stringsAsFactors = FALSE)
      
      colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                "Current Inventory",
                                "First Buy","Last Buy","Last Sale","Scrap Scenario-1", "Entered Buy Quantity Scenario-1",
                                "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                "Optimal NPV Scenario-1",
                                "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                "Optimal Offsite transport cost Scenario-1",
                                "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
      
      scenario_2 <- global_scenario_2_down$df_data_scenario_2_down
      scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],
                               lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                               lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                               lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                               formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                               lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                               lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                               lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                               lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                               stringsAsFactors = FALSE)
      
      colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                "Current Inventory",
                                "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                "Optimal NPV  Scenario-2",
                                "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                "Optimal Offsite transport cost Scenario-2",
                                "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
      
      write.xlsx2(abc, file, sheetName="Current_Scenario", row.names=FALSE)
      write.xlsx2(scenario_1, file , sheetName = "Scenario-1", append = TRUE, row.names = FALSE)
      write.xlsx2(scenario_2, file , sheetName = "Scenario-2", append = TRUE, row.names = FALSE)
      
    }
  )
  
  ###############################
  
  ##### Rendering info box to show num to parts uploaded
  output$Total_Parts<-renderInfoBox({
    inFile <- input$.file1
    if (is.null(inFile))
      return(infoBox(
        "Number of Parts", 0, icon = icon("cogs"),
        color = "blue", fill = TRUE
      ))
    
    input1 <- global_ads$df_data_ads
    
    infoBox(
      "Number of Parts", paste0( nrow(ATB_ADS)), icon = icon("cogs"),
      color = "blue", fill = TRUE
    )
  })
  
  ##### Rendering ui of part number input for Part View
  output$ui <- renderUI({
    
    part_info <- ATB_ADS
    part_inform <- as.data.frame(part_info)
    part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
    
    selectInput("Part_Number", "Part Number", choices = as.vector(part_inform$PART_NBR))
  })
  
  
} else
{
  if(Flag_PART_data == 1)
  {
    dbRemoveTable(con, PART_data_name)
  }
  dbRemoveTable(con, ATB_final_ads_1_name)
}

shinyjs::enable("go_list")
shinyjs::enable("tabBut")

              }
)
            } else
            {
              showModal(modalDialog(title="Attention!", "All the required columns are not present in the file"))
              shinyjs::enable("go_list")
              shinyjs::enable("tabBut")
            }
            } else
            {
              showModal(modalDialog(title="Attention!", "Wrong input format, please select a csv"))
              shinyjs::enable("go_list")
              shinyjs::enable("tabBut")
            }
          } else if(is.null(inFile))
          {
            showModal(modalDialog(
              title = "Warning Message",
              "First, upload the Forecee File and click Submit to get results"
            ))
            
            shinyjs::enable("go_list")
            shinyjs::enable("tabBut")
            
          }
        }
      if(input$sel == "List")
      {
        shinyjs::disable("go_list")
        
        shinyjs::show("hotable1")
        
        withProgress(message = 'Processing:', value = 0, {
          
          list_part_num <- hot.to.df(input$hotable1)
          
          list_part_num$part.order<-as.numeric(row.names(list_part_num))
          global_PARTdata$cognos<-select(list_part_num,PART_NBR,part.order)
          colnames(global_PARTdata$cognos)<-c("PART_NBR","PART_ORDER")
          list_part_num$part.order<-NULL
          
          list_part_num$PART_NBR <- str_pad(list_part_num$PART_NBR, width=8, side="left", pad="0")
          
          PART_data <- as.data.frame(list_part_num)
          
          Flag_PART_NBR_data <- 0
          Flag_PART_data <- 0
          
          incProgress(1/7, detail = "Pulling Data")
          
          ####### Filtering data
          
          PART_data <- PART_data %>% select(PART_NBR)
          print("aa2")
          
          PART_data <- unique(PART_data)
          PART_data <- PART_data[!(PART_data$PART_NBR == "00000000"),]
          PART_data <- as.data.frame(PART_data)
          colnames(PART_data) <- c("PART_NBR")
          PART_data$PART_NBR <- as.character(PART_data$PART_NBR)
          YR<-as.numeric(format(Sys.Date(),"%Y"))
          print("aa1")
          
          dbWriteTable(conn = con,
                       name = PART_data_name,
                       value = PART_data,overwrite = TRUE )
          print("aa3")
          sql_atb_1_frocee<-  paste("SELECT HEAD AS PART_NBR,ACTUAL_SALES_CYTD, PROJECTED_SALES_CURR_YEAR,ACTUAL_SALES_CURR_YEAR_MINUS_2,ACTUAL_SALES_CURR_YEAR_MINUS_1
                                    FROM A_SCREAD.FORECAST_DATA@SC
                                    WHERE HEAD IN (SELECT PART_NBR FROM", PART_data_name, ")")

      	  print(sql_atb_1_frocee)

									PART_data_num_1 <- dbGetQuery(con,sql_atb_1_frocee)
          PART_data_num_1[is.na(PART_data_num_1)]<-0
          print(PART_data_num_name_1)
		  print(PART_data_num_1)
		  dbWriteTable(conn = con,
                       name = PART_data_num_name_1,
                       value = PART_data_num_1, overwrite = TRUE, append = FALSE)
          print("aa")
          
          sql_atb_0_frocee<- paste("SELECT PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL,SUM(FORECAST_YR_1) AS FORECAST_YR_1,SUM(FORECAST_YR_2) AS FORECAST_YR_2 
                                          ,SUM(FORECAST_YR_3) AS FORECAST_YR_3,SUM(FORECAST_YR_4) AS FORECAST_YR_4,SUM(FORECAST_YR_5) AS FORECAST_YR_5,SUM(FORECAST_YR_6) AS FORECAST_YR_6
                                          ,SUM(FORECAST_YR_7) AS FORECAST_YR_7,SUM(FORECAST_YR_8) AS FORECAST_YR_8,SUM(FORECAST_YR_9) AS FORECAST_YR_9,SUM(FORECAST_YR_10) AS FORECAST_YR_10
                                          ,SUM(FORECAST_YR_11) AS FORECAST_YR_11,SUM(FORECAST_YR_12) AS FORECAST_YR_12,SUM(FORECAST_YR_13) AS FORECAST_YR_13,SUM(FORECAST_YR_14) AS FORECAST_YR_14
                                          ,SUM(FORECAST_YR_15) AS FORECAST_YR_15,SUM(FORECAST_YR_16) AS FORECAST_YR_16,SUM(FORECAST_YR_17) AS FORECAST_YR_17,SUM(FORECAST_YR_18) AS FORECAST_YR_18
                                          ,SUM(FORECAST_YR_19) AS FORECAST_YR_19,SUM(FORECAST_YR_20) AS FORECAST_YR_20,SUM(FORECAST_YR_21) AS FORECAST_YR_21,SUM(FORECAST_YR_22) AS FORECAST_YR_22
                                          ,SUM(FORECAST_YR_23) AS FORECAST_YR_23,SUM(FORECAST_YR_24) AS FORECAST_YR_24,SUM(FORECAST_YR_25) AS FORECAST_YR_25,SUM(FORECAST_YR_26) AS FORECAST_YR_26
                                          ,SUM(FORECAST_YR_27) AS FORECAST_YR_27,SUM(FORECAST_YR_28) AS FORECAST_YR_28,SUM(FORECAST_YR_29) AS FORECAST_YR_29,SUM(FORECAST_YR_30) AS FORECAST_YR_30 FROM 
                                          ( 
                                            SELECT P.PART_NBR,PD.PART_DESCRIPTION AS PART_NAME,PD.SVC_USE_LAST_YR AS APPLICATION_LY,PI.SALE_INV_QTY AS INVENTORY_LVL,
                                            CASE WHEN FY.YEAR=",YR+1," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_1,
                                            CASE WHEN FY.YEAR=",YR+2," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_2,
                                            CASE WHEN FY.YEAR=",YR+3," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_3,
                                            CASE WHEN FY.YEAR=",YR+4," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_4,
                                            CASE WHEN FY.YEAR=",YR+5," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_5,
                                            CASE WHEN FY.YEAR=",YR+6," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_6,
                                            CASE WHEN FY.YEAR=",YR+7," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_7,
                                            CASE WHEN FY.YEAR=",YR+8," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_8,
                                            CASE WHEN FY.YEAR=",YR+9," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_9,
                                            CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_10,
                                            CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_11,
                                            CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_12,
                                            CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_13,
                                            CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_14,
                                            CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_15,
                                            CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_16,
                                            CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_17,
                                            CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_18,
                                            CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_19,
                                            CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_20,
                                            CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_21,
                                            CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_22,
                                            CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_23,
                                            CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_24,
                                            CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_25,
                                            CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_26,
                                            CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_27,
                                            CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_28,
                                            CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_29,
                                            CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_30
                                            FROM FORECAST_DATA.PART P LEFT JOIN FORECAST_DATA.FORECAST F ON F.STD_PART_NBR = P.STD_PART_NBR
                                            LEFT JOIN FORECAST_DATA.FORECAST_YEAR FY ON FY.FORECAST_ID = F.FORECAST_ID
                                            LEFT JOIN FORECAST_DATA.PART_DETAIL PD ON PD.PART_ID = P.PART_ID
										                      	LEFT JOIN FORECAST_DATA.PART_INVENTORY PI ON PI.PART_ID = P.PART_ID
                                            WHERE F.COUNTRY_ID='137' AND F.FORECAST_TYPE='ACTUAL' AND P.DELETE_IND='N' AND P.COUNTRY_ID='137' AND PD.DELETE_IND='N'
                                            AND PART_NBR IN (SELECT PART_NBR FROM",PART_data_name,")GROUP BY P.PART_NBR,PD.PART_DESCRIPTION,PD.SVC_USE_LAST_YR,PI.SALE_INV_QTY,
                                              CASE WHEN FY.YEAR=",YR+1,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+2,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+3,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+4,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+5,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+6,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+7,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+8,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+9,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END) GROUP BY PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL")
          ATB_1_Forcee_1 <- dbGetQuery(con,sql_atb_0_frocee)
          
          
          ATB_1_Forcee_2 <- merge(x= PART_data_num_1, y= ATB_1_Forcee_1, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
          
          ATB_1_Forcee <- ATB_1_Forcee_2 %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                    FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                    FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                    FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                    FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                    FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                    FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
          
          ATB_1_Forcee$FORECAST_YR_1<-as.character(ATB_1_Forcee$FORECAST_YR_1)
          ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
          
          
          if(nrow(ATB_1_Forcee) != nrow(PART_data))
          {
            Complete_Part_List <- PART_data %>% select(PART_NBR)
            ATB_1_Forcee <- merge(x =  Complete_Part_List, y = ATB_1_Forcee, by.x = "PART_NBR", by.y = "PART_NBR", all.x = TRUE)
            ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
            print("TRUE statement")
          }
          
          if(nrow(ATB_1_Forcee) > 0)
          {
            
            PART_data_num <- ATB_1_Forcee %>% select(PART_NBR)
            
            dbWriteTable(conn = con,
                         name = PART_data_num_name,
                         value = PART_data_num, overwrite = TRUE)
            
            print("Filtering Complete")
            
            ####### Mapping Last Cost
            sql_atb_1_ser_mat <- paste("SELECT  PART_NBR, B.CAMPN_DTE, B.CAMPN_QTY,B.DECK_CD,
                                       B.LAST_COST,A.USB_CD, B.RB1_ALPHA_WHSE_CLASS, A.UNIT_LOAD_QTY,A.PART_REMOVAL_DT,
                                       A.PART_REINST_DT, A.MDSNG_PKG_QTY ,A.MCHDG_PACK_HEIGHT, A.MCHDG_PACK_LENGTH,A.MCHDG_PACK_WIDTH
                                       
                                       FROM
                                       DBO.SERVICE_PART@EUC A
                                       LEFT JOIN DBO.MATERIAL_PART@EUC B
                                       ON A.PART_NBR=B.MATRL_PART_NBR
                                       WHERE PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name, ")")
            
            ATB_1_ser_mat <- dbGetQuery(con, sql_atb_1_ser_mat)
            
            ATB_1_1 <- ATB_1_Forcee
            
            ATB_1 <- merge(x= ATB_1_1, y= ATB_1_ser_mat, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
            
            ATB_1$CAMPN_QTY <- as.character(ATB_1$CAMPN_QTY)
            ATB_1$DECK_CD <- as.character(ATB_1$CAMPN_QTY)
            ATB_1$LAST_COST <- as.character(ATB_1$LAST_COST)
            
            ATB_1$MDSNG_PKG_QTY[is.na(ATB_1$MDSNG_PKG_QTY)] <- 0
            ATB_1$MCHDG_PACK_HEIGHT[is.na(ATB_1$MCHDG_PACK_HEIGHT)] <- 0
            ATB_1$MCHDG_PACK_LENGTH[is.na(ATB_1$MCHDG_PACK_LENGTH)] <- 0
            ATB_1$MCHDG_PACK_WIDTH[is.na(ATB_1$MCHDG_PACK_WIDTH)] <- 0
            ATB_1$UNIT_LOAD_QTY[is.na(ATB_1$UNIT_LOAD_QTY)] <- 0
            
            dbWriteTable(conn = con,
                         name = ATB_1_NAME ,
                         value = ATB_1,overwrite = TRUE)
            
            incProgress(1/7, detail = "Pulling Data")
            
            sql_ATB_2<- paste(" SELECT * FROM
                              (
                              SELECT A.*, NVL(B.ALPHA,'0') AS ALPHA, NVL(B.NUMERIC,'0') AS NUMERIC FROM", ATB_1_NAME, "A
                              LEFT JOIN A_SCREAD.COMMCODE@SC B
                              ON A.PART_NBR = B.PART
                              ) ")

            ATB_2 <- dbGetQuery(con, sql_ATB_2)
            
            dbWriteTable(conn = con,
                         name = ATB_2_NAME ,
                         value = ATB_2, overwrite = TRUE)
            
            print("ATB-2 Done")
            
            sql_ATB_3 <- paste("SELECT *
                               FROM", ATB_2_NAME, "A
                               
                               LEFT JOIN
                               (SELECT PN,
                               (CASE WHEN CRLD IN (1,87,76,696,622,94,75,63,58,92,0) THEN CRLD
                               ELSE 0
                               END
                               )AS CRLD,
                               (CASE WHEN PROC IN (1,87,619,604,77,696,76,94,645,622,609,75,640,0,617) THEN PROC
                               ELSE 0
                               END
                               )AS PROC FROM A_SCREAD.PART_DETAIL@SC
                               )B
                               
                               ON A.PART_NBR=B.PN")
            
            ATB_3 <- dbGetQuery(con, sql_ATB_3)
            
            ATB_3$PN[is.na(ATB_3$PN)] <- 0
            ATB_3$CRLD[is.na(ATB_3$CRLD)] <- 0
            ATB_3$PROC[is.na(ATB_3$PROC)] <- 0
            
            dbWriteTable(conn = con,
                         name = ATB_3_NAME ,
                         value = ATB_3, overwrite = TRUE)
            print("ATB-3 Done")
            
            sql_ATB_4 <- paste("SELECT * FROM
                               (
                               (SELECT * FROM", ATB_3_NAME, ")A
                               LEFT JOIN
                               (SELECT * FROM AVG_WEIGHTED_CUBE)B
                               ON
                               A.CRLD = B.FACILITY AND A.ALPHA = B.CCODE
                               )")

            ATB_4 <- dbGetQuery(con, sql_ATB_4)
            dbWriteTable(conn = con,
                         name = ATB_4_NAME ,
                         value = ATB_4,overwrite = TRUE)
            print("ATB-4 Done")
            
            sql_ATB_5 <-  paste("SELECT A.*,NVL(AVG_LCPP,0) AS AVG_LCPP,NVL(AVG_PCPP,0)AS AVG_PCPP FROM
                                (
                                (SELECT * FROM ", ATB_4_NAME,")A
                                LEFT JOIN
                                (SELECT PART_NBR,FACILITY,ROUND(NVL(AVG(LABOR_COST_PER_PIECE),0),5) as AVG_LCPP ,ROUND(NVL(AVG(PACK_COST_PER_PIECE),0),5)as AVG_PCPP
                                FROM(
                                (SELECT PART_NBR,WHSE_NBR,STATN_CD FROM DBO.M8STACD_STANDARDS@EUC )B
                                LEFT JOIN (SELECT * FROM PROCESSING_CPP)C
                                ON
                                B.WHSE_NBR = C.FACILITY
                                AND B.STATN_CD = C.STATN_CD)
                                WHERE C.FACILITY IS NOT NULL GROUP BY PART_NBR,FACILITY)D
                                ON
                                A.PART_NBR = D.PART_NBR
                                AND A.PROC = D.FACILITY)"
            )
            
            
            ATB_5 <- dbGetQuery(con, sql_ATB_5)
            dbWriteTable(conn = con,
                         name = ATB_5_NAME ,
                         value = ATB_5, overwrite = TRUE)
            print("ATB-5 Done")
            
            
            
            sql_ATB_6 <- paste("SELECT A.*, NVL(B.OVERALL_LABOR_COST_PER_PIECE,0) AS PC_LCPP, NVL(B.IB_LABOR_COST_PER_PIECE,0) AS PC_IB_LCPP, NVL(B.OB_LABOR_COST_PER_PIECE,0) AS PC_0B_LCPP
                               --SELECT *
                               FROM
                               (
                               (SELECT * FROM", ATB_5_NAME, ")A
                               LEFT JOIN
                               (SELECT * FROM PC_SERV_CPP)B
                               ON
                               A.CRLD=B.FACILITY AND A.ALPHA=B.COMMODITY_CODE
                               )")

            ATB_6 <- dbGetQuery(con, sql_ATB_6)
            dbWriteTable(conn = con,
                         name = ATB_6_NAME ,
                         value = ATB_6, overwrite = TRUE)
            print("ATB-6 Done")
            
            sql_ATB_7 <- paste("SELECT E.*, NVL (OFFSITE_LCPP,0) AS OFFSITE_LCPP
                               FROM
                               (
                               SELECT * FROM
                               (
                               SELECT C.*, NVL(BC_LCPP,0) AS BC_LCPP FROM
                               (
                               SELECT A.*, NVL(PDC_LCPP,0) AS PDC_LCPP FROM
                               (
                               (SELECT * FROM", ATB_6_NAME, ") A
                               LEFT JOIN
                               (SELECT CC, PDC_LCPP FROM PDC_SERV_CPP)B
                               ON A.ALPHA=B.CC
                               )
                               )C
                               LEFT JOIN
                               (SELECT CC, BC_LCPP FROM BC_SERV_CPP)D
                               ON C.ALPHA=D.CC
                               )
                               )E
                               LEFT JOIN
                               (SELECT CC, OFFSITE_LCPP FROM OFFSITE_SERV_CPP)F
                               ON E.ALPHA=F.CC")
            
            ATB_7 <- dbGetQuery(con, sql_ATB_7)
            dbWriteTable(conn = con,
                         name = ATB_7_NAME ,
                         value = ATB_7, overwrite = TRUE)
            print("ATB-7 Done")
            
            incProgress(1/7, detail = "Pulling Data")
            
            sql_ATB_8 <- paste("SELECT A.*, B.MTH_COST_PER_SQ_FT, B.UL_SQ_FT
                               FROM
                               (
                               (SELECT * FROM", ATB_7_NAME, ")A
                               LEFT JOIN
                               (SELECT * FROM WAREHOUSE_COST_PER_SQFT)B
                               ON A.CRLD=B.PLANT
                               )")

            ATB_8 <- dbGetQuery(con, sql_ATB_8)
            
            ATB_8$MTH_COST_PER_SQ_FT <- as.character(ATB_8$MTH_COST_PER_SQ_FT)
            ATB_8$UL_SQ_FT <- as.character(ATB_8$UL_SQ_FT)
            
            dbWriteTable(conn = con,
                         name = ATB_8_NAME,
                         value = ATB_8, overwrite = TRUE)
            print("ATB-8 Done")
            
            
            sql_ATB_9 <- paste("SELECT C.*, TRANSPORTATION_OFFSITES_PKGR, TRANSPORTATION_FROM_SOURCE, TRANSPORTATION_PDC_TO_DLR, TRANSPORTATION_TO_PDC, TRANSPORTATION_FACILITY_TO_DLR, TRANSPORTATION_BCARRIER_TO_DLR
                               FROM
                               (
                               SELECT A.*, TRANS_OFFSITES_PKGR, TRANS_FROM_WC, MCD_TO_XDOCK, TRANS_TO_PDC, TRANS_PDC_TO_DLR, TRANS_FROM_SOURCE, XDOCK_OVERSIZE, XDOCK_STANDARD
                               FROM
                               (
                               (SELECT * FROM", ATB_8_NAME, ") A
                               LEFT JOIN
                               (SELECT * FROM TRANS_COSTS_PER_CUBIC_FT)B
                               ON
                               A.CRLD = B.FACILITY
                               )
                               )C
                               LEFT JOIN
                               (SELECT * FROM TRANSPORTATION_COSTS)D
                               ON C.CRLD=D.FACILITY AND C.ALPHA=D.CC")
            
            ATB_9 <- dbGetQuery(con, sql_ATB_9)
            
            dbWriteTable(conn = con,
                         name = ATB_9_NAME ,
                         value = ATB_9, overwrite = TRUE)
            print("ATB-9 Done")
            
            incProgress(1/7, detail = "Pulling Data")
            
            sql_ATB_10 <- paste("SELECT A.*,
                                CASE WHEN MDSNG_PKG_QTY = 0 THEN 1
                                ELSE MDSNG_PKG_QTY
                                END AS ADJ_MDSNG_PKG_QTY
                                FROM", ATB_9_NAME, "A")
            
            
            ATB_10 <- dbGetQuery(con, sql_ATB_10)
            
            dbWriteTable(conn = con,
                         name = ATB_10_NAME ,
                         value = ATB_10, overwrite = TRUE)
            print("ATB-10 Done")
            
            sql_ATB_11 <- paste("SELECT X.*, Y.LCC_PRODLINE,
                                Y.LCC_SUBLINE,
                                Y.DLR_CURR_DEALER_PRC,Y.NATL_PIECE_SLS_DLR_4, 
                                Y.NATL_PIECE_SLS_COACH_4, Y.NATL_PIECE_SLS_OTD_4, Y.NATL_PIECE_SLS_EXPORT_4, Y.NATL_PIECE_SLS_WD_4,Y.NATL_PIECE_SLS_AFTMKT_4,Y.GMP_PART_NBR,Y.AC_DELCO
                                FROM
                                
                                (
                                SELECT B.*,
                                (CASE WHEN UNIT_LOAD_QTY>0 THEN UNIT_LOAD_QTY
                                ELSE 64/CUBIC_FT_PER_PIECE
                                END) AS ADJ_UNIT_LOAD_QTY
                                FROM
                                (
                                SELECT A.*,
                                (CASE WHEN MCHDG_PACK_HEIGHT>0 AND MCHDG_PACK_LENGTH > 0 AND MCHDG_PACK_WIDTH >0
                                THEN ROUND((MCHDG_PACK_HEIGHT*MCHDG_PACK_LENGTH*MCHDG_PACK_WIDTH/1728)/ADJ_MDSNG_PKG_QTY,12)
                                ELSE TO_NUMBER(AVG_WEIGHT)/ADJ_MDSNG_PKG_QTY
                                END) AS CUBIC_FT_PER_PIECE
                                FROM", ATB_10_NAME, "A
                                ) B
                                ) X
                                LEFT JOIN
                                COMMON_WORK_NO_COST Y
                                ON X.PART_NBR=Y.PART_NBR")
            
            ATB_COST_ADS_EXAMPLE <- dbGetQuery(con, sql_ATB_11)
            
            
            ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE <- as.character(ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE)
            ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY <- as.character(ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY)
            ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC <- as.character(ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC)
            
            dbWriteTable(conn = con,
                         name = ATB_COST_ADS_EXAMPLE_NAME,
                         value = ATB_COST_ADS_EXAMPLE, overwrite = TRUE)
            print("ATB-11 Done")
            
            sql_ATB_12 <- paste("SELECT B.*,
                                (CASE WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1>165 THEN 'Y'
                                WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1<=165 THEN 'N'
                                ELSE 'Y' END ) AS BULK_CR_FLAG
                                FROM
                                (SELECT A.*,
                                ROUND((MTH_COST_PER_SQ_FT * UL_SQ_FT/ADJ_UNIT_LOAD_QTY), 10) AS MTH_SQ_FT_COST_PER_PEICE,
                                ROUND(TRANS_PDC_TO_DLR*CUBIC_FT_PER_PIECE) AS OB_TRANS_CST_PP,
                                
                                (CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_FROM_WC)*CUBIC_FT_PER_PIECE)
                                WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC!=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_OFFSITES_PKGR)*CUBIC_FT_PER_PIECE)
                                ELSE (TRANS_FROM_SOURCE*CUBIC_FT_PER_PIECE) END )AS IB_TRANS_CST_PP,
                                
                                ROUND(2*(MCHDG_PACK_HEIGHT+MCHDG_PACK_WIDTH)) AS BULK_CR_CALC_1,
                                
                                (CASE WHEN MCHDG_PACK_HEIGHT>MCHDG_PACK_WIDTH AND MCHDG_PACK_HEIGHT>MCHDG_PACK_LENGTH THEN MCHDG_PACK_HEIGHT
                                WHEN MCHDG_PACK_WIDTH>MCHDG_PACK_HEIGHT AND MCHDG_PACK_WIDTH>MCHDG_PACK_LENGTH THEN MCHDG_PACK_WIDTH
                                ELSE MCHDG_PACK_LENGTH END)AS BULK_CR_CALC_2
                                FROM", ATB_COST_ADS_EXAMPLE_NAME, "A
                                ) B")

            ATB_COST_ELEMENT_CAL_EXAPMLE <- dbGetQuery(con, sql_ATB_12)
            
            ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE)
            ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP)
            ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP)
            ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1 <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1)
            
            
            dbWriteTable(conn = con,
                         name = ATB_COST_ELEMENT_NAME ,
                         value = ATB_COST_ELEMENT_CAL_EXAPMLE, overwrite = TRUE)
            print("ATB-12 Done")
            
            incProgress(1/7, detail = "Pulling Data")
            
            sql_ATB_13 <- paste("SELECT X.*,
                                (CASE WHEN USB_CD = 'U' THEN MAX_WEEKS_U
                                ELSE MAX_WEEKS_SB
                                END) AS MAX_WEEKS_SUPPLY
                                FROM
                                (
                                SELECT P.*,NVL(Q.MWSBOS,99) AS MAX_WEEKS_U
                                FROM
                                (
                                SELECT A.*,NVL(B.MWSBOS,99) AS MAX_WEEKS_SB
                                FROM", ATB_COST_ELEMENT_NAME, "A
                                LEFT JOIN
                                MWS_USB_SB B
                                ON A.ALPHA = B.ALPHA
                                ) P
                                LEFT JOIN MWS_USB_U Q
                                ON P.PROC=Q.PROC
                                ) X")
ATB_COST_MAX_SUPPLY_EXAMPLE <- dbGetQuery(con, sql_ATB_13)
dbWriteTable(conn = con,
             name = ATB_COST_MAX_SUPPLY_NAME ,
             value = ATB_COST_MAX_SUPPLY_EXAMPLE, overwrite = TRUE)
print("ATB-13 Done")

sql_ATB_14 <- paste("SELECT A.*,
                    CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' THEN 0
                    WHEN RB1_ALPHA_WHSE_CLASS!='SP' AND BULK_CR_FLAG='Y' THEN (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_OVERSIZE)*CUBIC_FT_PER_PIECE
                    ELSE (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_STANDARD)*CUBIC_FT_PER_PIECE
                    END AS REDISTRIBUTION_COST_PP,
                    
                    CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.39*PC_LCPP)+(0.39*PDC_LCPP)
                    WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.39*PC_LCPP)+(0.39*BC_LCPP)
                    ELSE (0.39*PC_LCPP)
                    END AS IB_LABOR_COST_PP,
                    
                    CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.61*PC_LCPP)+(0.61*PDC_LCPP)
                    WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.61*PC_LCPP)+(0.61*BC_LCPP)
                    ELSE (0.61*PC_LCPP)
                    END AS OB_LABOR_COST_PP
                    FROM", ATB_COST_MAX_SUPPLY_NAME, "A")

ATB_COST_CAL_EXAMPLE <- dbGetQuery(con,sql_ATB_14)

ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP <- as.character(ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP)

dbWriteTable(conn = con,
             name = ATB_COST_CAL_EXAMPLE_NAME ,
             value = ATB_COST_CAL_EXAMPLE, overwrite = TRUE)
print("ATB-14 Done")

sql_ATB_15 <- paste("  SELECT A.*, (IB_LABOR_COST_PP + OB_LABOR_COST_PP + AVG_LCPP + AVG_PCPP) AS ONSITE_PRCS_COST_PP,
                    (OB_TRANS_CST_PP + IB_TRANS_CST_PP + REDISTRIBUTION_COST_PP) AS ONSITE_TRANS_COST_PER_PIECE,
                    (TRANS_OFFSITES_PKGR*CUBIC_FT_PER_PIECE) AS OFFSITE_TRANS_COST_PP
                    FROM",
                    ATB_COST_CAL_EXAMPLE_NAME, "A")

ATB_TRANS_PROCESS_COST_EXAMPLE <- dbGetQuery(con, sql_ATB_15)

ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE)
ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP)


dbWriteTable(conn = con,
             name = ATB_TRANS_PROCESS_COST_NAME ,
             value = ATB_TRANS_PROCESS_COST_EXAMPLE, overwrite = TRUE)
print("ATB-15 Done")

sql_ads_1 <- paste("SELECT A.*, B.MINIMUM_BUY_QTY, B.STD_PACK_QTY, B.BUY_FREQ FROM",
                   ATB_TRANS_PROCESS_COST_NAME, "A
                   LEFT JOIN
                   (SELECT MTL_PART_PART_NBR, MINIMUM_BUY_QTY, STD_PACK_QTY, BUY_FREQ
                   FROM DBO.SOURCE@EUC
                   WHERE PRIME_SOURCE_IND = 1) B
                   ON A.PART_NBR = B.MTL_PART_PART_NBR")

ATB_final_ads_1 <- dbGetQuery(con, sql_ads_1)

ATB_final_ads_1$MINIMUM_BUY_QTY <- as.character(ATB_final_ads_1$MINIMUM_BUY_QTY)
ATB_final_ads_1$STD_PACK_QTY <- as.character(ATB_final_ads_1$STD_PACK_QTY)
ATB_final_ads_1$BUY_FREQ <- as.character(ATB_final_ads_1$BUY_FREQ)

dbWriteTable(conn = con,
             name = ATB_final_ads_1_name,
             value = ATB_final_ads_1, overwrite = TRUE)

print("ATB-16 Done")

sql_ads <- paste("SELECT A.*, B.* FROM",
                 ATB_final_ads_1_name," A
                 LEFT JOIN MANDATORY_RETENTION_DB B
                 ON A.PART_NBR = B.PART_NUMBER")

ATB_final_ads <- dbGetQuery(con, sql_ads)
print("ATB-17 Done")

sql_WD_price <- paste("SELECT PART_NUMBER, WD_WHSL_DIST_PRC FROM DBO.WD_PRICES@EUC
                      WHERE PART_NUMBER IN (SELECT PART_NBR FROM" ,PART_data_num_name, ")")

WD_price <- dbGetQuery(con, sql_WD_price)

sql_Inv_level <- paste("SELECT MATRL_PART_NBR, NATNL_INV AS TOTAL_INVENTORY
                       FROM DBO.MATERIAL_PART@EUC WHERE MATRL_PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")")

Inv_level <- dbGetQuery(con, sql_Inv_level)

## Pulling Sales Distribution across different markets data
sql_market_distribution <- paste("SELECT PART_NBR,
                                 CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                 WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                 WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                 END AS CATEGORY_CODE,
                                 SUM(YR1_SALES) AS YR1_SALES
                                 FROM DBO.PART_SLS_TO_DATE@EUC
                                 WHERE PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")","
                                 GROUP BY
                                 PART_NBR,
                                 CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                 WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                 WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                 END")

market_distribution <- dbGetQuery(con, sql_market_distribution)

market_list <- c("SALES_OES", "SALES_ALLIED_EXPORT", "SALES_IAM")
market_list <- as.data.frame(market_list)
colnames(market_list) <- c("CATEGORY_CODE")
part_list <- PART_data
colnames(part_list) <- c("PART_NBR")
cross_join <- merge(part_list, market_list)

cross_join$CATEGORY_CODE <- as.character(cross_join$CATEGORY_CODE)

market_distribution <- merge(cross_join, market_distribution, by = c("PART_NBR", "CATEGORY_CODE"), all.x = TRUE)


spread_market_distribution <- spread(market_distribution ,key = CATEGORY_CODE,value = YR1_SALES)

spread_market_distribution$SALES_ALLIED_EXPORT <- ifelse(is.na(spread_market_distribution$SALES_ALLIED_EXPORT), 0, (spread_market_distribution$SALES_ALLIED_EXPORT))
spread_market_distribution$SALES_IAM <- ifelse(is.na(spread_market_distribution$SALES_IAM), 0, (spread_market_distribution$SALES_IAM))
spread_market_distribution$SALES_OES <- ifelse(is.na(spread_market_distribution$SALES_OES), 0, (spread_market_distribution$SALES_OES))
spread_market_distribution$COMPLETE_SAALES <- spread_market_distribution$SALES_ALLIED_EXPORT + spread_market_distribution$SALES_IAM + spread_market_distribution$SALES_OES
spread_market_distribution$ALLIED_EXPORT_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_ALLIED_EXPORT/spread_market_distribution$COMPLETE_SAALES))
spread_market_distribution$IAM_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_IAM/spread_market_distribution$COMPLETE_SAALES))
spread_market_distribution$OES_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_OES/spread_market_distribution$COMPLETE_SAALES))

print("all data taken")

# Merging WD preice
ATB_final_ads <- merge(ATB_final_ads, WD_price, by.x= "PART_NBR", by.y= "PART_NUMBER", all.x= TRUE)

# Merging Inventory Level
ATB_final_ads <- merge(ATB_final_ads, Inv_level, by.x= "PART_NBR", by.y= "MATRL_PART_NBR", all.x= TRUE)

ATB_final_ads <- merge(ATB_final_ads, spread_market_distribution, by.x= "PART_NBR", by.y= "PART_NBR", all.x= TRUE)

print("merge done")
dbRemoveTable(con, PART_data_num_name)

ATB_final_ads$ACTUAL_SALES_CYTD <- ifelse(is.na(ATB_final_ads$ACTUAL_SALES_CYTD), 0, ATB_final_ads$ACTUAL_SALES_CYTD)
ATB_final_ads$PROJECTED_SALES_CURR_YEAR <- ifelse(is.na(ATB_final_ads$PROJECTED_SALES_CURR_YEAR), 0, ATB_final_ads$PROJECTED_SALES_CURR_YEAR)
ATB_final_ads$TOTAL_INVENTORY <- ifelse(is.na(ATB_final_ads$TOTAL_INVENTORY), 0, ATB_final_ads$TOTAL_INVENTORY)

ATB_final_ads$CURRENT_YEAR <- (ATB_final_ads$PROJECTED_SALES_CURR_YEAR - ATB_final_ads$ACTUAL_SALES_CYTD)
ATB_final_ads$CURRENT_YEAR <- ifelse(ATB_final_ads$CURRENT_YEAR < 0, 0, ATB_final_ads$CURRENT_YEAR)

ATB_final_ads$WD_WHSL_DIST_PRC <- ifelse(is.na(ATB_final_ads$WD_WHSL_DIST_PRC), 0, ATB_final_ads$WD_WHSL_DIST_PRC)

ATB_final_ads$PART_NBR<- str_pad(ATB_final_ads$PART_NBR, width=8, side="left", pad="0")

ATB_final_ads$PL_SL <- paste(ATB_final_ads$LCC_PRODLINE, ATB_final_ads$LCC_SUBLINE,sep = "-")
PL_SL_LIST <- as.data.frame(ATB_final_ads$PL_SL)
colnames(PL_SL_LIST) <- c("PL_SL")
PL_SL_LIST <- as.data.frame(unique(PL_SL_LIST$PL_SL))

colnames(PL_SL_LIST) <- c("PL_SL")
PL_SL_LIST$PL_SL <- as.character(PL_SL_LIST$PL_SL)
ATB_final_ads$DLR_SLS <- ifelse(ATB_final_ads$DLR_CURR_DEALER_PRC ==0 & ATB_final_ads$NATL_PIECE_SLS_DLR_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_COACH_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_EXPORT_4 ==0 ,
                                0, 
                                as.numeric( ATB_final_ads$NATL_PIECE_SLS_DLR_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_COACH_4) + 
                                  as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4) + as.numeric(ATB_final_ads$NATL_PIECE_SLS_EXPORT_4))
ATB_final_ads$WD_SLS <- ifelse(ATB_final_ads$DLR_SLS ==0,as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4)+as.numeric(ATB_final_ads$NATL_PIECE_SLS_WD_4) +as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4),
                               as.numeric( ATB_final_ads$NATL_PIECE_SLS_WD_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4))


dbWriteTable(conn = con,
             name = PL_SL_LIST_ATB_NAME,
             value = PL_SL_LIST, overwrite = TRUE)

sql_discount_market <- paste("SELECT PL_SL, MARKET, SUM(T_SLS) AS TOTAL_SALES, SUM(T_DISC) AS TOTAL_DISCOUNT
                             FROM (SELECT (LPAD(PROD_LINE,2,0) || '-' || SUB_LINE) AS PL_SL,MARKET,T_SLS,T_DISC FROM ABM_DATA.ABM_WIDE_DETAIL_NONW_PN_MV_P)
                             WHERE PL_SL IN (SELECT  PL_SL FROM", PL_SL_LIST_ATB_NAME, ")
                             GROUP BY PL_SL, MARKET")

discount_market <- dbGetQuery(con, sql_discount_market)

drop_table_PL_SL_LIST_ATB <- paste("BEGIN
                                   EXECUTE IMMEDIATE 'DROP TABLE", PL_SL_LIST_ATB_NAME,"';
                                   EXCEPTION
                                   WHEN OTHERS THEN NULL;
                                   END;")

value_PL_SL_LIST_ATB <- dbSendUpdate(con, drop_table_PL_SL_LIST_ATB)

market_list_for_discount <- c("ALLIED/EXPORT", "INDEP AFTERMKT", "ORIG EQUIP SRVC")
market_list_for_discount <- as.data.frame(market_list_for_discount)
colnames(market_list_for_discount) <- c("CATEGORY_CODE")

cross_join_pl_sl <- merge(PL_SL_LIST, market_list_for_discount)

cross_join_pl_sl$CATEGORY_CODE <- as.character(cross_join_pl_sl$CATEGORY_CODE)
colnames(cross_join_pl_sl) <- c("PL_SL", "MARKET")

discount_market <- merge(cross_join_pl_sl, discount_market, by = c("PL_SL", "MARKET"), all.x = TRUE)

pl_sl_market_sales <- discount_market %>% select(MARKET, PL_SL, TOTAL_SALES)
pl_sl_market_discount <- discount_market %>% select(MARKET, PL_SL, TOTAL_DISCOUNT)

spread_sales <- spread(pl_sl_market_sales ,key = MARKET,value = TOTAL_SALES)
spread_discount <- spread(pl_sl_market_discount, key = MARKET, value = TOTAL_DISCOUNT)

spread_sales$`ALLIED/EXPORT` <- ifelse(is.na(spread_sales$`ALLIED/EXPORT`), 0, spread_sales$`ALLIED/EXPORT`)
spread_sales$`INDEP AFTERMKT` <- ifelse(is.na(spread_sales$`INDEP AFTERMKT`), 0, spread_sales$`INDEP AFTERMKT`)
spread_sales$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_sales$`ORIG EQUIP SRVC`), 0, spread_sales$`ORIG EQUIP SRVC`)

colnames(spread_sales) <- c("PL_SL", "Sales_allied_export", "Sales_iam", "Sales_oes")

spread_discount$`ALLIED/EXPORT` <- ifelse(is.na(spread_discount$`ALLIED/EXPORT`), 0, ( spread_discount$`ALLIED/EXPORT`))
spread_discount$`INDEP AFTERMKT` <- ifelse(is.na(spread_discount$`INDEP AFTERMKT`), 0, ( spread_discount$`INDEP AFTERMKT`))
spread_discount$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_discount$`ORIG EQUIP SRVC`), 0, ( spread_discount$`ORIG EQUIP SRVC`))

colnames(spread_discount) <- c("PL_SL", "Discount_allied_export", "Discount_iam", "Discount_oes")

discount_data_pl_sl_level <- merge(x = spread_sales, y = spread_discount, by.x = "PL_SL", by.y = "PL_SL", all = TRUE)

discount_data_pl_sl_level$Discount_iam_percent <- ifelse(discount_data_pl_sl_level$Sales_iam == 0, 0, (discount_data_pl_sl_level$Discount_iam/discount_data_pl_sl_level$Sales_iam)* -100)
discount_data_pl_sl_level$Discount_oes_percent <- ifelse(discount_data_pl_sl_level$Sales_oes == 0, 0, (discount_data_pl_sl_level$Discount_oes/discount_data_pl_sl_level$Sales_oes)* -100)
discount_data_pl_sl_level$Discount_allied_export_percent <- ifelse(discount_data_pl_sl_level$Sales_allied_export == 0, 0, (discount_data_pl_sl_level$Discount_allied_export/discount_data_pl_sl_level$Sales_allied_export)* -100)

ATB_final_ads <- merge(ATB_final_ads, discount_data_pl_sl_level, by.x = "PL_SL", by.y = "PL_SL", all.x = TRUE)

## Converting Back to numeric:
ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE <- as.numeric(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)
ATB_final_ads$OB_TRANS_CST_PP <- as.numeric(ATB_final_ads$OB_TRANS_CST_PP)
ATB_final_ads$IB_TRANS_CST_PP <- as.numeric(ATB_final_ads$IB_TRANS_CST_PP)
ATB_final_ads$BULK_CR_CALC_1 <- as.numeric(ATB_final_ads$BULK_CR_CALC_1)
ATB_final_ads$REDISTRIBUTION_COST_PP <- as.numeric(ATB_final_ads$REDISTRIBUTION_COST_PP)
ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE <- as.numeric(ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE)
ATB_final_ads$OFFSITE_TRANS_COST_PP <- as.numeric(ATB_final_ads$OFFSITE_TRANS_COST_PP)
ATB_final_ads$MINIMUM_BUY_QTY <- as.numeric(ATB_final_ads$MINIMUM_BUY_QTY)
ATB_final_ads$STD_PACK_QTY <- as.numeric(ATB_final_ads$STD_PACK_QTY)
ATB_final_ads$BUY_FREQ <- as.numeric(ATB_final_ads$BUY_FREQ)
ATB_final_ads$CAMPN_QTY <- as.numeric(ATB_final_ads$CAMPN_QTY)
ATB_final_ads$DECK_CD <- as.numeric(ATB_final_ads$CAMPN_QTY)
ATB_final_ads$LAST_COST <- as.numeric(ATB_final_ads$LAST_COST)
ATB_final_ads$CUBIC_FT_PER_PIECE <- as.numeric(ATB_final_ads$CUBIC_FT_PER_PIECE)
ATB_final_ads$ADJ_UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$ADJ_UNIT_LOAD_QTY)
#ATB_final_ads$MDSNG_PKG_QTY <- as.numeric(ATB_final_ads$MDSNG_PKG_QTY)
ATB_final_ads$MCHDG_PACK_HEIGHT <- as.numeric(ATB_final_ads$MCHDG_PACK_HEIGHT)
ATB_final_ads$MCHDG_PACK_LENGTH <- as.numeric(ATB_final_ads$MCHDG_PACK_LENGTH)
ATB_final_ads$MCHDG_PACK_WIDTH <- as.numeric(ATB_final_ads$MCHDG_PACK_WIDTH)
ATB_final_ads$UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$UNIT_LOAD_QTY)
ATB_final_ads$DLR_CURR_DEALER_PRC <- as.numeric(ATB_final_ads$DLR_CURR_DEALER_PRC)
ATB_final_ads$MTH_COST_PER_SQ_FT <- as.numeric(ATB_final_ads$MTH_COST_PER_SQ_FT)
ATB_final_ads$UL_SQ_FT <- as.numeric(ATB_final_ads$UL_SQ_FT)


ATB_final_ads$DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$DLR_CURR_DEALER_PRC
ATB_final_ads$WD_DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$WD_WHSL_DIST_PRC

ATB_final_ads$Dealer_Price_Allied_Export <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
ATB_final_ads$Dealer_Price_OES <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_oes_percent/100))
ATB_final_ads$Dealer_Price_IAM <- ATB_final_ads$WD_WHSL_DIST_PRC * (1 - (ATB_final_ads$Discount_iam_percent/100))

ATB_final_ads$Proline_subline <- ATB_final_ads$PL_SL
ATB_final_ads$PL_SL <- NULL


incProgress(1/7, detail = "Running Calculations")

### Filtering parts with no data
all_part <- as.data.frame(PART_data$PART_NBR)
present_part <- as.data.frame(ATB_final_ads$PART_NBR)
colnames(all_part)[1] <- "PART_NBR"
colnames(present_part)[1] <- "PART_NBR"

ATB_ads_filtered_part <- subset(all_part, !(PART_NBR %in% present_part$PART_NBR))
ATB_ads_filtered_part_internal <- ATB_final_ads[which((is.na(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)) | (is.na(ATB_final_ads$FORECAST_YR_1)) | (is.na(ATB_final_ads$LAST_COST))),]


if(nrow(ATB_ads_filtered_part) > 0 & nrow(ATB_ads_filtered_part_internal) > 0)
{
  ATB_ads_filtered_part$Reason <- "Forcee data not present"
  ATB_ads_filtered_part_internal$Reason <- ifelse(is.na(ATB_ads_filtered_part_internal$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part_internal$LAST_COST), "Last Cost not present", "Forcee data not present"))
  ATB_ads_filtered_part_internal <- ATB_ads_filtered_part_internal %>% select(PART_NBR, Reason)
  ATB_ads_filtered_part <- rbind(ATB_ads_filtered_part, ATB_ads_filtered_part_internal)
  
} else if(nrow(ATB_ads_filtered_part_internal) > 0 & nrow(ATB_ads_filtered_part) == 0)
{
  ATB_ads_filtered_part_internal$Reason <- ifelse(is.na(ATB_ads_filtered_part_internal$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part_internal$LAST_COST), "Last Cost not present", "Forcee data not present"))
  ATB_ads_filtered_part_internal <- ATB_ads_filtered_part_internal %>% select(PART_NBR, Reason)
  ATB_ads_filtered_part <- ATB_ads_filtered_part_internal
  
} else if(nrow(ATB_ads_filtered_part_internal) == 0 & nrow(ATB_ads_filtered_part) > 0)
{
  ATB_ads_filtered_part$Reason <- "Forcee data not present"
  
} else
{
  ATB_ads_filtered_part <- data.frame()
}

if(nrow(ATB_ads_filtered_part) > 0)
{
  
  output$modal_table <- renderDataTable({
    datatable(ATB_ads_filtered_part, rownames = FALSE,
              options = list(scrollX=TRUE, scrollY='200px',
                             lengthMenu = c(5, 25, 50),
                             paging=FALSE, searching=FALSE))
  })
  
  showModal(modalDialog(
    title = "Summary Report",
    DT::dataTableOutput('modal_table')
  ))
  
  shinyjs::enable("download_filtered_list")
  output$download_filtered_list <- downloadHandler(
    filename = function() {
      paste("Filtered_Part_List", ".csv", sep="")
    },
    content = function(file) {
      abc <- ATB_ads_filtered_part
      
      write.csv(abc, file, row.names = FALSE)
      
    }
  )
  
}

ATB_final_ads$MINIMUM_BUY_QTY <- ifelse(is.na(ATB_final_ads$MINIMUM_BUY_QTY), 0,ATB_final_ads$MINIMUM_BUY_QTY)
ATB_final_ads$STD_PACK_QTY <- ifelse(is.na(ATB_final_ads$STD_PACK_QTY), 0,ATB_final_ads$STD_PACK_QTY )
ATB_final_ads$BUY_FREQ <- ifelse(is.na(ATB_final_ads$BUY_FREQ ), 1,ATB_final_ads$BUY_FREQ )

## Negative Inventory being made zero
ATB_final_ads$TOTAL_INVENTORY <- ifelse(ATB_final_ads$TOTAL_INVENTORY < 0, 0, ATB_final_ads$TOTAL_INVENTORY)

ATB_final_ads$X <- NULL

## Converting characters\factors into numeric
for(i in (4:35)){
  ATB_final_ads[,i] <- as.numeric(ATB_final_ads[,i])
}

if(nrow(ATB_final_ads) > 0)
{
  
  ATB_final_ads$Setup_cost <- 0
  ATB_final_ads$Additional_cost <- 0
  ATB_final_ads$FLAG <- 0
  ATB_final_ads$Entered_Buy_Qty <- 0
  ATB_final_ads$OES_FRACTION <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$OES_FRACTION)
  ATB_final_ads$FLAG <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$FLAG)
  
  ## Converting all NA's to zero
  ATB_final_ads[is.na(ATB_final_ads)] <- 0
  
  part_ads <- ATB_final_ads
  
  global_ads$df_data_ads <- ATB_final_ads
  #write.csv(ATB_final_ads, file = "ATB_ads.csv")
  
  ATB_ADS <- ATB_final_ads
  
  
  dbRemoveTable(con, PART_data_name)
  
  dbRemoveTable(con, ATB_final_ads_1_name)
  
  
  incProgress(1/7, detail = "Pulling Data")
  
  ################# Code for Scenario- Current (original data coz file dosen't contain )
  
  
  Original_current <- Current(ATB_ADS)
  
  ################# Code for Scenario- Optimal
  
  
  Original_optimal <- Optimal(ATB_ADS)
  
  
  ################## Code for Scenario- Selldown
  
  Selldown_NPV <- Selldown(ATB_ADS)
  
  ########creating columns from ATB_final_ads
  ATB_ads_per_piece <- ATB_ADS %>% select(PART_NBR,DEALER_PRICE_NO_DISCOUNT,Discount_oes_percent,Discount_allied_export_percent,
                                          Dealer_Price_OES,Dealer_Price_Allied_Export,WD_DEALER_PRICE_NO_DISCOUNT,Discount_iam_percent,Dealer_Price_IAM,
                                          LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                          REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
  
  colnames(ATB_ads_per_piece)[1] <- "Part_Nbr"
  
  
  #################################################################################################################################################################
  orig_cost <- ATB_ADS %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC)
  orig_cost <- orig_cost %>% mutate_at(vars(-PART_NBR),funs(round(.,2)))
  
  scenario_cost <- orig_cost
  scenario_cost$buy_qty <- 0
  scenario_cost <- scenario_cost %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, buy_qty,
                                            Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC)
  reflect_cost_scenario_1$df_data_cost_scenario_1 <- scenario_cost
  reflect_cost_scenario_2$df_data_cost_scenario_2 <- scenario_cost
  
  ##### Output of Cost comparison table
  output$Cost_comp_1 <- renderHotable({
    orig_cost <- data.frame(Part_Nbr = orig_cost[,1], paste("$", formatC(orig_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                            lapply(orig_cost[,3:4], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                            lapply(orig_cost[,5:8], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
    
    colnames(orig_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Setup Cost", "Additional Cost", "Dealer Price", "WD Price")
    orig_cost
  }, readOnly = TRUE)
  
  ## Creating intermediate tables to get proper format
  # spl- Source Part List
  
  spl_1 <- Original_current
  spl_1$Part_Nbr <- str_pad(spl_1$Part_Nbr, width=8, side="left", pad="0")
  spl_2 <- Original_optimal
  spl_2$Part_Nbr <- str_pad(spl_2$Part_Nbr, width=8, side="left", pad="0")
  spl_3 <- Selldown_NPV
  spl_3$Part_Nbr <- str_pad(spl_3$Part_Nbr, width=8, side="left", pad="0")
  
  
  spl_12 <- merge(spl_1, spl_2, by = "Part_Nbr")
  
  spl_123 <- merge(spl_12, spl_3, by = "Part_Nbr")
  spl_123 <- merge(spl_123, ATB_ads_per_piece, by = "Part_Nbr")
  
  spl_123_result <- spl_123 %>% select(Part_Nbr, NPV, Selldown_NPV, Revenue, Revenue_non_npv,Optimal_NPV,Optimal_ATB_Quantity, Total_Forecast)
  
  spl_456_result<- data.frame(Part_Nbr = spl_123_result$Part_Nbr)
  spl_456_result$NPV_Scenario_1  <- NA
  spl_456_result$Selldown_NPV_Scenario_1  <- NA
  spl_456_result$Revenue_Scenario_1 <- NA
  spl_456_result$Revenue_non_npv_Scenario_1 <- NA
  spl_456_result$Optimal_NPV_Scenario_1 <- NA
  spl_456_result$Optimal_ATB_Quantity_Scenario_1 <- NA
  spl_456_result$Total_Forecast_Scenario_1 <- NA
  
  write.csv(spl_456_result, file = "spl_123_result_s1.csv", row.names = FALSE)
  
  spl_789_result <- data.frame(Part_Nbr = spl_123_result$Part_Nbr)
  spl_789_result$NPV_Scenario_2  <- NA
  spl_789_result$Selldown_NPV_Scenario_2  <- NA
  spl_789_result$Revenue_Scenario_2 <- NA
  spl_789_result$Revenue_non_npv_Scenario_2 <- NA
  spl_789_result$Optimal_NPV_Scenario_2 <- NA
  spl_789_result$Optimal_ATB_Quantity_Scenario_2 <- NA
  spl_789_result$Total_Forecast_Scenario_2 <- NA
  
  write.csv(spl_789_result, file = "spl_123_result_s2.csv", row.names = FALSE)
  
  output$analysis_original <- renderHotable({
    spl_123_result$Part_Nbr <- str_pad(spl_123_result$Part_Nbr, width=8, side="left", pad="0")
    spl_123_result <- data.frame(Part_Nbr = spl_123_result[,1], lapply(spl_123_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                 formatC(spl_123_result[,7] , big.mark=",", digits=0, format="f"), formatC(spl_123_result[,8] , big.mark=",", digits=0, format="f"), stringsAsFactors = FALSE)
    
    colnames(spl_123_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
    
    spl_123_result
  })
  part_ff<-global_ads$df_data_ads
  y<-nrow(part_ff)
  print(y)
  ATB_ADS <- global_ads$df_data_ads
  
  finance_current_scenario= data.frame(matrix("",  nrow = as.numeric(y)))  
  #finance_current_scenario<-0
  finance_current_scenario<-as.data.frame(finance_current_scenario)
  finance_current_scenario$matrix.....nrow...as.numeric.y..<-NULL
  finance_current_scenario$Part_Nbr<-part_ff$PART_NBR
  finance_current_scenario$Pb<-2
  finance_current_scenario$Optimal_qty<-spl_2$Optimal_ATB_Quantity
  finance_current_scenario$Discount_Rate<-15
  finance_current_scenario$ATB_Units<-spl_1$Buy_Quantity
  finance_current_scenario$Material_cost<-part_ff$LAST_COST
  finance_current_scenario$Labour_cost_per_hr<-as.numeric(part_ff$AVG_LCPP)+
    as.numeric(part_ff$OFFSITE_LCPP)+as.numeric(part_ff$IB_LABOR_COST_PP)+
    as.numeric(part_ff$OB_LABOR_COST_PP)
  finance_current_scenario$Storage_cost<-round(as.numeric(part_ff$MTH_SQ_FT_COST_PER_PEICE),2)
  finance_current_scenario$Total_packaging_cost<-spl_1$Package_cost
  finance_current_scenario$Freight_one_way<-round(as.numeric(part_ff$IB_TRANS_CST_PP)+as.numeric(part_ff$OFFSITE_TRANS_COST_PP),2)
  finance_current_scenario$Inventory_lvl<-part_ff$INVENTORY_LVL
  finance_current_scenario$FORECAST_YR_1<-part_ff$FORECAST_YR_1
  finance_current_scenario$FORECAST_YR_2<-part_ff$FORECAST_YR_2
  finance_current_scenario$FORECAST_YR_3<-part_ff$FORECAST_YR_3
  finance_current_scenario$FORECAST_YR_4<-part_ff$FORECAST_YR_4
  finance_current_scenario$FORECAST_YR_5<-part_ff$FORECAST_YR_5
  finance_current_scenario$FORECAST_YR_6<-part_ff$FORECAST_YR_6
  finance_current_scenario$FORECAST_YR_7<-part_ff$FORECAST_YR_7
  finance_current_scenario$FORECAST_YR_8<-part_ff$FORECAST_YR_8
  finance_current_scenario$FORECAST_YR_9<-part_ff$FORECAST_YR_9
  finance_current_scenario$FORECAST_YR_10<-part_ff$FORECAST_YR_10
  finance_current_scenario$FORECAST_YR_11<-part_ff$FORECAST_YR_11
  finance_current_scenario$FORECAST_YR_12<-part_ff$FORECAST_YR_12
  finance_current_scenario$FORECAST_YR_13<-part_ff$FORECAST_YR_13
  finance_current_scenario$FORECAST_YR_14<-part_ff$FORECAST_YR_14
  finance_current_scenario$FORECAST_YR_15<-part_ff$FORECAST_YR_15
  finance_current_scenario$Historic_sales_CY<-part_ff$ACTUAL_SALES_CYTD
  finance_current_scenario$Historic_sales_minus_1<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_1
  finance_current_scenario$Historic_sales_minus_2<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_2
  finance_current_scenario$Mandatory_serv_ret<-round(as.numeric(part_ff$APPLICATION_LY),0)
  finance_current_scenario$Dealer_price<-part_ff$DEALER_PRICE_NO_DISCOUNT
  finance_current_scenario$Dlr_sls<-part_ff$DLR_SLS
  finance_current_scenario$WD_price<-part_ff$WD_DEALER_PRICE_NO_DISCOUNT
  finance_current_scenario$WD_sls<-part_ff$WD_SLS	
  finance_current_scenario$sa<-0.12
  
  finance_current_scenario_pb<- finance_current_scenario
  finance_current_scenario_pb$All_time_buy<-(finance_current_scenario_pb$ATB_Units*finance_current_scenario_pb$Material_cost)+
    finance_current_scenario_pb$Labour_cost_per_hr+finance_current_scenario_pb$Storage_cost+ finance_current_scenario_pb$Total_packaging_cost+(
      finance_current_scenario_pb$Freight_one_way*finance_current_scenario_pb$ATB_Units)
  finance_current_scenario_pb$sp<-ifelse((finance_current_scenario_pb$Dlr_sls + finance_current_scenario_pb$WD_sls) ==0,
                                         ifelse(finance_current_scenario_pb$Dealer_price ==0,finance_current_scenario_pb$WD_price,
                                                ifelse(finance_current_scenario_pb$WD_price==0,finance_current_scenario_pb$Dealer_price,
                                                       (as.numeric(finance_current_scenario_pb$Dealer_price)+as.numeric(finance_current_scenario_pb$WD_price))*0.5))
                                         , finance_current_scenario_pb$Dealer_price*(finance_current_scenario_pb$Dlr_sls/
                                                                                       (finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls))+ finance_current_scenario_pb$WD_price*
                                           (finance_current_scenario_pb$WD_sls/(finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls)))
  #finance_current_scenario_pb$sa<-if(x3=="GMP"){0.09}else if (x3=="ACD"){0.15}else if(x3=="-"){0.12}
  finance_current_scenario_pb$sa<-0.12
  finance_current_scenario_pb$Units_storage_0<-as.numeric(finance_current_scenario_pb$ATB_Units)+as.numeric(finance_current_scenario_pb$Inventory_lvl)
  finance_current_scenario_pb$Units_storage_1<-ifelse(finance_current_scenario_pb$FORECAST_YR_1==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_1)
  finance_current_scenario_pb$Units_storage_2<-ifelse(finance_current_scenario_pb$FORECAST_YR_2==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_2)
  finance_current_scenario_pb$Units_storage_3<-ifelse(finance_current_scenario_pb$FORECAST_YR_3==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_3)
  finance_current_scenario_pb$Units_storage_4<-ifelse(finance_current_scenario_pb$FORECAST_YR_4==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_4)
  finance_current_scenario_pb$Units_storage_5<-ifelse(finance_current_scenario_pb$FORECAST_YR_5==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_5)
  finance_current_scenario_pb$Units_storage_6<-ifelse(finance_current_scenario_pb$FORECAST_YR_6==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_6)
  finance_current_scenario_pb$Units_storage_7<-ifelse(finance_current_scenario_pb$FORECAST_YR_7==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_7)
  finance_current_scenario_pb$Units_storage_8<-ifelse(finance_current_scenario_pb$FORECAST_YR_8==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_8)
  finance_current_scenario_pb$Units_storage_9<-ifelse(finance_current_scenario_pb$FORECAST_YR_9==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_9)
  finance_current_scenario_pb$Units_storage_10<-ifelse(finance_current_scenario_pb$FORECAST_YR_10==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_10)
  finance_current_scenario_pb$Units_storage_11<-ifelse(finance_current_scenario_pb$FORECAST_YR_11==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_11)
  finance_current_scenario_pb$Units_storage_12<-ifelse(finance_current_scenario_pb$FORECAST_YR_12==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_12)
  finance_current_scenario_pb$Units_storage_13<-ifelse(finance_current_scenario_pb$FORECAST_YR_13==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_13)
  finance_current_scenario_pb$Units_storage_14<-ifelse(finance_current_scenario_pb$FORECAST_YR_14==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_14)
  finance_current_scenario_pb$Units_storage_15<-ifelse(finance_current_scenario_pb$FORECAST_YR_15==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_15)
  
  finance_current_scenario_pb$Revenue_0<-0
  finance_current_scenario_pb$Revenue_1<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_2<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_3<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_4<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_5<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_6<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_7<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_8<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_9<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_10<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_11<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_12<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_13<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_14<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  finance_current_scenario_pb$Revenue_15<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
  
  
  finance_current_scenario_pb$Total_storage_cost_0<-0
  finance_current_scenario_pb$Total_storage_cost_1<-finance_current_scenario_pb$Units_storage_1*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_2<-finance_current_scenario_pb$Units_storage_2*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_3<-finance_current_scenario_pb$Units_storage_3*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_4<-finance_current_scenario_pb$Units_storage_4*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_5<-finance_current_scenario_pb$Units_storage_5*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_6<-finance_current_scenario_pb$Units_storage_6*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_7<-finance_current_scenario_pb$Units_storage_7*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_8<-finance_current_scenario_pb$Units_storage_8*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_9<-finance_current_scenario_pb$Units_storage_9*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_10<-finance_current_scenario_pb$Units_storage_10*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_11<-finance_current_scenario_pb$Units_storage_11*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_12<-finance_current_scenario_pb$Units_storage_12*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_13<-finance_current_scenario_pb$Units_storage_13*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_14<-finance_current_scenario_pb$Units_storage_14*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  finance_current_scenario_pb$Total_storage_cost_15<-finance_current_scenario_pb$Units_storage_15*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
  
  
  finance_current_scenario_pb$outbound_cost_1<-finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_2<-finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_3<-finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_4<-finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_5<-finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_6<-finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_7<-finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_8<-finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_9<-finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_10<-finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_11<-finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_12<-finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_13<-finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_14<-finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$Freight_one_way
  finance_current_scenario_pb$outbound_cost_15<-finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$Freight_one_way
  
  
  finance_current_scenario_pb$Total_cost_0<-finance_current_scenario_pb$All_time_buy
  finance_current_scenario_pb$Total_cost_1<-finance_current_scenario_pb$outbound_cost_1+finance_current_scenario_pb$Total_storage_cost_1
  finance_current_scenario_pb$Total_cost_2<-finance_current_scenario_pb$outbound_cost_2+finance_current_scenario_pb$Total_storage_cost_2
  finance_current_scenario_pb$Total_cost_3<-finance_current_scenario_pb$outbound_cost_3+finance_current_scenario_pb$Total_storage_cost_3
  finance_current_scenario_pb$Total_cost_4<-finance_current_scenario_pb$outbound_cost_4+finance_current_scenario_pb$Total_storage_cost_4
  finance_current_scenario_pb$Total_cost_5<-finance_current_scenario_pb$outbound_cost_5+finance_current_scenario_pb$Total_storage_cost_5
  finance_current_scenario_pb$Total_cost_6<-finance_current_scenario_pb$outbound_cost_6+finance_current_scenario_pb$Total_storage_cost_6
  finance_current_scenario_pb$Total_cost_7<-finance_current_scenario_pb$outbound_cost_7+finance_current_scenario_pb$Total_storage_cost_7
  finance_current_scenario_pb$Total_cost_8<-finance_current_scenario_pb$outbound_cost_8+finance_current_scenario_pb$Total_storage_cost_8
  finance_current_scenario_pb$Total_cost_9<-finance_current_scenario_pb$outbound_cost_9+finance_current_scenario_pb$Total_storage_cost_9
  finance_current_scenario_pb$Total_cost_10<-finance_current_scenario_pb$outbound_cost_10+finance_current_scenario_pb$Total_storage_cost_10
  finance_current_scenario_pb$Total_cost_11<-finance_current_scenario_pb$outbound_cost_11+finance_current_scenario_pb$Total_storage_cost_11
  finance_current_scenario_pb$Total_cost_12<-finance_current_scenario_pb$outbound_cost_12+finance_current_scenario_pb$Total_storage_cost_12
  finance_current_scenario_pb$Total_cost_13<-finance_current_scenario_pb$outbound_cost_13+finance_current_scenario_pb$Total_storage_cost_13
  finance_current_scenario_pb$Total_cost_14<-finance_current_scenario_pb$outbound_cost_14+finance_current_scenario_pb$Total_storage_cost_14
  finance_current_scenario_pb$Total_cost_15<-finance_current_scenario_pb$outbound_cost_15+finance_current_scenario_pb$Total_storage_cost_15
  
  
  finance_current_scenario_pb$Net_benefit_0<-finance_current_scenario_pb$Revenue_0-finance_current_scenario_pb$Total_cost_0
  finance_current_scenario_pb$Net_benefit_1<-finance_current_scenario_pb$Revenue_1-finance_current_scenario_pb$Total_cost_1
  finance_current_scenario_pb$Net_benefit_2<-finance_current_scenario_pb$Revenue_2-finance_current_scenario_pb$Total_cost_2
  finance_current_scenario_pb$Net_benefit_3<-finance_current_scenario_pb$Revenue_3-finance_current_scenario_pb$Total_cost_3
  finance_current_scenario_pb$Net_benefit_4<-finance_current_scenario_pb$Revenue_4-finance_current_scenario_pb$Total_cost_4
  finance_current_scenario_pb$Net_benefit_5<-finance_current_scenario_pb$Revenue_5-finance_current_scenario_pb$Total_cost_5
  finance_current_scenario_pb$Net_benefit_6<-finance_current_scenario_pb$Revenue_6-finance_current_scenario_pb$Total_cost_6
  finance_current_scenario_pb$Net_benefit_7<-finance_current_scenario_pb$Revenue_7-finance_current_scenario_pb$Total_cost_7
  finance_current_scenario_pb$Net_benefit_8<-finance_current_scenario_pb$Revenue_8-finance_current_scenario_pb$Total_cost_8
  finance_current_scenario_pb$Net_benefit_9<-finance_current_scenario_pb$Revenue_9-finance_current_scenario_pb$Total_cost_9
  finance_current_scenario_pb$Net_benefit_10<-finance_current_scenario_pb$Revenue_10-finance_current_scenario_pb$Total_cost_10
  finance_current_scenario_pb$Net_benefit_11<-finance_current_scenario_pb$Revenue_11-finance_current_scenario_pb$Total_cost_11
  finance_current_scenario_pb$Net_benefit_12<-finance_current_scenario_pb$Revenue_12-finance_current_scenario_pb$Total_cost_12
  finance_current_scenario_pb$Net_benefit_13<-finance_current_scenario_pb$Revenue_13-finance_current_scenario_pb$Total_cost_13
  finance_current_scenario_pb$Net_benefit_14<-finance_current_scenario_pb$Revenue_14-finance_current_scenario_pb$Total_cost_14
  finance_current_scenario_pb$Net_benefit_15<-finance_current_scenario_pb$Revenue_15-finance_current_scenario_pb$Total_cost_15
  
  finance_current_scenario_pb$pv_cashflow_0<-finance_current_scenario_pb$Net_benefit_0/(1.15^0)
  finance_current_scenario_pb$pv_cashflow_1<-finance_current_scenario_pb$Net_benefit_1/(1.15^1)
  finance_current_scenario_pb$pv_cashflow_2<-finance_current_scenario_pb$Net_benefit_2/(1.15^2)
  finance_current_scenario_pb$pv_cashflow_3<-finance_current_scenario_pb$Net_benefit_3/(1.15^3)
  finance_current_scenario_pb$pv_cashflow_4<-finance_current_scenario_pb$Net_benefit_4/(1.15^4)
  finance_current_scenario_pb$pv_cashflow_5<-finance_current_scenario_pb$Net_benefit_5/(1.15^5)
  finance_current_scenario_pb$pv_cashflow_6<-finance_current_scenario_pb$Net_benefit_6/(1.15^6)
  finance_current_scenario_pb$pv_cashflow_7<-finance_current_scenario_pb$Net_benefit_7/(1.15^7)
  finance_current_scenario_pb$pv_cashflow_8<-finance_current_scenario_pb$Net_benefit_8/(1.15^8)
  finance_current_scenario_pb$pv_cashflow_9<-finance_current_scenario_pb$Net_benefit_9/(1.15^9)
  finance_current_scenario_pb$pv_cashflow_10<-finance_current_scenario_pb$Net_benefit_10/(1.15^10)
  finance_current_scenario_pb$pv_cashflow_11<-finance_current_scenario_pb$Net_benefit_11/(1.15^11)
  finance_current_scenario_pb$pv_cashflow_12<-finance_current_scenario_pb$Net_benefit_12/(1.15^12)
  finance_current_scenario_pb$pv_cashflow_13<-finance_current_scenario_pb$Net_benefit_13/(1.15^13)
  finance_current_scenario_pb$pv_cashflow_14<-finance_current_scenario_pb$Net_benefit_14/(1.15^14)
  finance_current_scenario_pb$pv_cashflow_15<-finance_current_scenario_pb$Net_benefit_15/(1.15^15)
  
  
  finance_current_scenario_pb$pb_non_npv_0<-finance_current_scenario_pb$Net_benefit_0
  finance_current_scenario_pb$pb_non_npv_1<-finance_current_scenario_pb$Net_benefit_1+finance_current_scenario_pb$pb_non_npv_0
  finance_current_scenario_pb$pb_non_npv_2<-finance_current_scenario_pb$Net_benefit_2+finance_current_scenario_pb$pb_non_npv_1
  finance_current_scenario_pb$pb_non_npv_3<-finance_current_scenario_pb$Net_benefit_3+finance_current_scenario_pb$pb_non_npv_2
  finance_current_scenario_pb$pb_non_npv_4<-finance_current_scenario_pb$Net_benefit_4+finance_current_scenario_pb$pb_non_npv_3
  finance_current_scenario_pb$pb_non_npv_5<-finance_current_scenario_pb$Net_benefit_5+finance_current_scenario_pb$pb_non_npv_4
  finance_current_scenario_pb$pb_non_npv_6<-finance_current_scenario_pb$Net_benefit_6+finance_current_scenario_pb$pb_non_npv_5
  finance_current_scenario_pb$pb_non_npv_7<-finance_current_scenario_pb$Net_benefit_7+finance_current_scenario_pb$pb_non_npv_6
  finance_current_scenario_pb$pb_non_npv_8<-finance_current_scenario_pb$Net_benefit_8+finance_current_scenario_pb$pb_non_npv_7
  finance_current_scenario_pb$pb_non_npv_9<-finance_current_scenario_pb$Net_benefit_9+finance_current_scenario_pb$pb_non_npv_8
  finance_current_scenario_pb$pb_non_npv_10<-finance_current_scenario_pb$Net_benefit_10+finance_current_scenario_pb$pb_non_npv_9
  finance_current_scenario_pb$pb_non_npv_11<-finance_current_scenario_pb$Net_benefit_11+finance_current_scenario_pb$pb_non_npv_10
  finance_current_scenario_pb$pb_non_npv_12<-finance_current_scenario_pb$Net_benefit_12+finance_current_scenario_pb$pb_non_npv_11
  finance_current_scenario_pb$pb_non_npv_13<-finance_current_scenario_pb$Net_benefit_13+finance_current_scenario_pb$pb_non_npv_12
  finance_current_scenario_pb$pb_non_npv_14<-finance_current_scenario_pb$Net_benefit_14+finance_current_scenario_pb$pb_non_npv_13
  finance_current_scenario_pb$pb_non_npv_15<-finance_current_scenario_pb$Net_benefit_15+finance_current_scenario_pb$pb_non_npv_14
  
  
  finance_current_scenario_pb$pb_npv_0<-finance_current_scenario_pb$pv_cashflow_0
  finance_current_scenario_pb$pb_npv_1<-finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pb_npv_0
  finance_current_scenario_pb$pb_npv_2<-finance_current_scenario_pb$pv_cashflow_2+finance_current_scenario_pb$pb_npv_1
  finance_current_scenario_pb$pb_npv_3<-finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pb_npv_2
  finance_current_scenario_pb$pb_npv_4<-finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pb_npv_3
  finance_current_scenario_pb$pb_npv_5<-finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pb_npv_4
  finance_current_scenario_pb$pb_npv_6<-finance_current_scenario_pb$pv_cashflow_6+finance_current_scenario_pb$pb_npv_5
  finance_current_scenario_pb$pb_npv_7<-finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pb_npv_6
  finance_current_scenario_pb$pb_npv_8<-finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pb_npv_7
  finance_current_scenario_pb$pb_npv_9<-finance_current_scenario_pb$pv_cashflow_9+finance_current_scenario_pb$pb_npv_8
  finance_current_scenario_pb$pb_npv_10<-finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pb_npv_9
  finance_current_scenario_pb$pb_npv_11<-finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pb_npv_10
  finance_current_scenario_pb$pb_npv_12<-finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pb_npv_11
  finance_current_scenario_pb$pb_npv_13<-finance_current_scenario_pb$pv_cashflow_13+finance_current_scenario_pb$pb_npv_12
  finance_current_scenario_pb$pb_npv_14<-finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pb_npv_13
  finance_current_scenario_pb$pb_npv_15<-finance_current_scenario_pb$pv_cashflow_15+finance_current_scenario_pb$pb_npv_14
  
  
  
  finance_current_scenario_pb$pby_non_npv_0<-ifelse(finance_current_scenario_pb$pb_non_npv_0>0,"Error",0)
  finance_current_scenario_pb$pby_non_npv_1<-ifelse(finance_current_scenario_pb$pb_non_npv_0<0 & finance_current_scenario_pb$pb_non_npv_1>0,(1-(finance_current_scenario_pb$pb_non_npv_1/finance_current_scenario_pb$Net_benefit_1)),0)
  finance_current_scenario_pb$pby_non_npv_2<-ifelse(finance_current_scenario_pb$pb_non_npv_1<0 & finance_current_scenario_pb$pb_non_npv_2>0,(1-(finance_current_scenario_pb$pb_non_npv_2/finance_current_scenario_pb$Net_benefit_2))+1,0)
  finance_current_scenario_pb$pby_non_npv_3<-ifelse(finance_current_scenario_pb$pb_non_npv_2<0 & finance_current_scenario_pb$pb_non_npv_3>0,(1-(finance_current_scenario_pb$pb_non_npv_3/finance_current_scenario_pb$Net_benefit_3))+2,0)
  finance_current_scenario_pb$pby_non_npv_4<-ifelse(finance_current_scenario_pb$pb_non_npv_3<0 & finance_current_scenario_pb$pb_non_npv_4>0,(1-(finance_current_scenario_pb$pb_non_npv_4/finance_current_scenario_pb$Net_benefit_4))+3,0)
  finance_current_scenario_pb$pby_non_npv_5<-ifelse(finance_current_scenario_pb$pb_non_npv_4<0 & finance_current_scenario_pb$pb_non_npv_5>0,(1-(finance_current_scenario_pb$pb_non_npv_5/finance_current_scenario_pb$Net_benefit_5))+4,0)
  finance_current_scenario_pb$pby_non_npv_6<-ifelse(finance_current_scenario_pb$pb_non_npv_5<0 & finance_current_scenario_pb$pb_non_npv_6>0,(1-(finance_current_scenario_pb$pb_non_npv_6/finance_current_scenario_pb$Net_benefit_6))+5,0)
  finance_current_scenario_pb$pby_non_npv_7<-ifelse(finance_current_scenario_pb$pb_non_npv_6<0 & finance_current_scenario_pb$pb_non_npv_7>0,(1-(finance_current_scenario_pb$pb_non_npv_7/finance_current_scenario_pb$Net_benefit_7))+6,0)
  finance_current_scenario_pb$pby_non_npv_8<-ifelse(finance_current_scenario_pb$pb_non_npv_7<0 & finance_current_scenario_pb$pb_non_npv_8>0,(1-(finance_current_scenario_pb$pb_non_npv_8/finance_current_scenario_pb$Net_benefit_8))+7,0)
  finance_current_scenario_pb$pby_non_npv_9<-ifelse(finance_current_scenario_pb$pb_non_npv_8<0 & finance_current_scenario_pb$pb_non_npv_9>0,(1-(finance_current_scenario_pb$pb_non_npv_9/finance_current_scenario_pb$Net_benefit_9))+8,0)
  finance_current_scenario_pb$pby_non_npv_10<-ifelse(finance_current_scenario_pb$pb_non_npv_9<0 & finance_current_scenario_pb$pb_non_npv_10>0,(1-(finance_current_scenario_pb$pb_non_npv_10/finance_current_scenario_pb$Net_benefit_10))+9,0)
  finance_current_scenario_pb$pby_non_npv_11<-ifelse(finance_current_scenario_pb$pb_non_npv_10<0 & finance_current_scenario_pb$pb_non_npv_11>0,(1-(finance_current_scenario_pb$pb_non_npv_11/finance_current_scenario_pb$Net_benefit_11))+10,0)
  finance_current_scenario_pb$pby_non_npv_12<-ifelse(finance_current_scenario_pb$pb_non_npv_11<0 & finance_current_scenario_pb$pb_non_npv_12>0,(1-(finance_current_scenario_pb$pb_non_npv_12/finance_current_scenario_pb$Net_benefit_12))+11,0)
  finance_current_scenario_pb$pby_non_npv_13<-ifelse(finance_current_scenario_pb$pb_non_npv_12<0 & finance_current_scenario_pb$pb_non_npv_13>0,(1-(finance_current_scenario_pb$pb_non_npv_13/finance_current_scenario_pb$Net_benefit_13))+12,0)
  finance_current_scenario_pb$pby_non_npv_14<-ifelse(finance_current_scenario_pb$pb_non_npv_13<0 & finance_current_scenario_pb$pb_non_npv_14>0,(1-(finance_current_scenario_pb$pb_non_npv_14/finance_current_scenario_pb$Net_benefit_14))+13,0)
  finance_current_scenario_pb$pby_non_npv_15<-ifelse(finance_current_scenario_pb$pb_non_npv_14<0 & finance_current_scenario_pb$pb_non_npv_15>0,(1-(finance_current_scenario_pb$pb_non_npv_15/finance_current_scenario_pb$Net_benefit_15))+14,0)
  
  
  #finance_current_scenario_pb$pby_npv_0<-ifelse(finance_current_scenario_pb$pb_npv_0>0,"Error"," ")
  finance_current_scenario_pb$pby_npv_1<-ifelse(finance_current_scenario_pb$pb_npv_0<0 & finance_current_scenario_pb$pb_npv_1>0,1-(finance_current_scenario_pb$pb_npv_1/finance_current_scenario_pb$pv_cashflow_1),0)
  finance_current_scenario_pb$pby_npv_2<-ifelse(finance_current_scenario_pb$pb_npv_1<0 & finance_current_scenario_pb$pb_npv_2>0,(1-(finance_current_scenario_pb$pb_npv_2/finance_current_scenario_pb$pv_cashflow_2))+1,0)
  finance_current_scenario_pb$pby_npv_3<-ifelse(finance_current_scenario_pb$pb_npv_2<0 & finance_current_scenario_pb$pb_npv_3>0,(1-(finance_current_scenario_pb$pb_npv_3/finance_current_scenario_pb$pv_cashflow_3))+2,0)
  finance_current_scenario_pb$pby_npv_4<-ifelse(finance_current_scenario_pb$pb_npv_3<0 & finance_current_scenario_pb$pb_npv_4>0,(1-(finance_current_scenario_pb$pb_npv_4/finance_current_scenario_pb$pv_cashflow_4))+3,0)
  finance_current_scenario_pb$pby_npv_5<-ifelse(finance_current_scenario_pb$pb_npv_4<0 & finance_current_scenario_pb$pb_npv_5>0,(1-(finance_current_scenario_pb$pb_npv_5/finance_current_scenario_pb$pv_cashflow_5))+4,0)
  finance_current_scenario_pb$pby_npv_6<-ifelse(finance_current_scenario_pb$pb_npv_5<0 & finance_current_scenario_pb$pb_npv_6>0,(1-(finance_current_scenario_pb$pb_npv_6/finance_current_scenario_pb$pv_cashflow_6))+5,0)
  finance_current_scenario_pb$pby_npv_7<-ifelse(finance_current_scenario_pb$pb_npv_6<0 & finance_current_scenario_pb$pb_npv_7>0,(1-(finance_current_scenario_pb$pb_npv_7/finance_current_scenario_pb$pv_cashflow_7))+6,0)
  finance_current_scenario_pb$pby_npv_8<-ifelse(finance_current_scenario_pb$pb_npv_7<0 & finance_current_scenario_pb$pb_npv_8>0,(1-(finance_current_scenario_pb$pb_npv_8/finance_current_scenario_pb$pv_cashflow_8))+7,0)
  finance_current_scenario_pb$pby_npv_9<-ifelse(finance_current_scenario_pb$pb_npv_8<0 & finance_current_scenario_pb$pb_npv_9>0,(1-(finance_current_scenario_pb$pb_npv_9/finance_current_scenario_pb$pv_cashflow_9))+8,0)
  finance_current_scenario_pb$pby_npv_10<-ifelse(finance_current_scenario_pb$pb_npv_9<0 & finance_current_scenario_pb$pb_npv_10>0,(1-(finance_current_scenario_pb$pb_npv_10/finance_current_scenario_pb$pv_cashflow_10))+9,0)
  finance_current_scenario_pb$pby_npv_11<-ifelse(finance_current_scenario_pb$pb_npv_10<0 & finance_current_scenario_pb$pb_npv_11>0,(1-(finance_current_scenario_pb$pb_npv_11/finance_current_scenario_pb$pv_cashflow_11))+10,0)
  finance_current_scenario_pb$pby_npv_12<-ifelse(finance_current_scenario_pb$pb_npv_11<0 & finance_current_scenario_pb$pb_npv_12>0,(1-(finance_current_scenario_pb$pb_npv_12/finance_current_scenario_pb$pv_cashflow_12))+11,0)
  finance_current_scenario_pb$pby_npv_13<-ifelse(finance_current_scenario_pb$pb_npv_12<0 & finance_current_scenario_pb$pb_npv_13>0,(1-(finance_current_scenario_pb$pb_npv_13/finance_current_scenario_pb$pv_cashflow_13))+12,0)
  finance_current_scenario_pb$pby_npv_14<-ifelse(finance_current_scenario_pb$pb_npv_13<0 & finance_current_scenario_pb$pb_npv_14>0,(1-(finance_current_scenario_pb$pb_npv_14/finance_current_scenario_pb$pv_cashflow_14))+13,0)
  finance_current_scenario_pb$pby_npv_15<-ifelse(finance_current_scenario_pb$pb_npv_14<0 & finance_current_scenario_pb$pb_npv_15>0,(1-(finance_current_scenario_pb$pb_npv_15/finance_current_scenario_pb$pv_cashflow_15))+14,0)
  
  
  finance_current_scenario_pb$NPV_pb<-finance_current_scenario_pb$pv_cashflow_0+finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pv_cashflow_2+
    finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pv_cashflow_6+
    finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pv_cashflow_9+
    finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pv_cashflow_13+
    finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pv_cashflow_15
  finance_current_scenario_pb$flat_pb<-round(as.numeric(finance_current_scenario_pb$pby_non_npv_0)+as.numeric(finance_current_scenario_pb$pby_non_npv_1)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_2)+as.numeric(finance_current_scenario_pb$pby_non_npv_3)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_4)+as.numeric(finance_current_scenario_pb$pby_non_npv_5)+as.numeric(finance_current_scenario_pb$pby_non_npv_6)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_7)+as.numeric(finance_current_scenario_pb$pby_non_npv_8)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_9)+as.numeric(finance_current_scenario_pb$pby_non_npv_10)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_11)+as.numeric(finance_current_scenario_pb$pby_non_npv_12)+as.numeric(finance_current_scenario_pb$pby_non_npv_13)+
                                               as.numeric(finance_current_scenario_pb$pby_non_npv_14)+as.numeric(finance_current_scenario_pb$pby_non_npv_15),2)
  
  finance_current_scenario_pb$disc_pb<-round(as.numeric(finance_current_scenario_pb$pby_npv_1)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_2)+as.numeric(finance_current_scenario_pb$pby_npv_3)+as.numeric(finance_current_scenario_pb$pby_npv_4)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_5)+as.numeric(finance_current_scenario_pb$pby_npv_6)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_7)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_8)+as.numeric(finance_current_scenario_pb$pby_npv_9)+as.numeric(finance_current_scenario_pb$pby_npv_10)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_11)+as.numeric(finance_current_scenario_pb$pby_npv_12)+as.numeric(finance_current_scenario_pb$pby_npv_13)+
                                               as.numeric(finance_current_scenario_pb$pby_npv_14)+as.numeric(finance_current_scenario_pb$pby_npv_15),2)
  write.xlsx(finance_current_scenario,"finance_current_scenario.xlsx")
  
  path_to_vbs_file = "test_pb.vbs"
  print("4")
  shell(shQuote(normalizePath(path_to_vbs_file)), "cscript", flag = "//nologo")
  print("5")
  print("AM I the error b-1??")
  pb_excel<-read.xlsx("PB_excel.xlsm")
  
  print(pb_excel$X210)
  global_ads$df_data_ads_pb<-pb_excel
  
  global_ads$df_data_ads_pb_orig<-finance_current_scenario_pb
  
  #### Creating Download Report File
  # spld- Scorce Part list dowlnoad file
  spl_123<-merge(spl_123, finance_current_scenario_pb[ ,c("Part_Nbr","flat_pb","disc_pb")], by = "Part_Nbr")
  
  spl_123<-merge(spl_123, pb_excel[ ,c("Part_Nbr","ATB_Units","X210","X373")], by = "Part_Nbr")
  
  download_report <- spl_123
  download_report$Selected_scenario <- "None"
  
  download_report <- download_report %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                Selldown_Revenue,Selldown_Revenue_non_npv,
                                                Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                Total_Inventory,
                                                First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                Optimal_Storage_Cost,
                                                Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT, ##change 786 
                                                Dealer_Price_OES.x,Dealer_Price_Allied_Export.x,WD_DEALER_PRICE_NO_DISCOUNT,Dealer_Price_IAM.x,Discount_oes_percent.x,Discount_allied_export_percent.x,
                                                Discount_iam_percent.x,LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP, Selected_scenario,flat_pb,disc_pb,ATB_Units,X210)
  
  download_report_current <- download_report
  #download_report_current[,c(43:54)] <- 0
  
  download_report_scenario_1 <- download_report
  download_report_scenario_1 <- download_report_scenario_1 %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                                      Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                                      Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                                      Selldown_Revenue,Selldown_Revenue_non_npv,
                                                                      Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                                      Total_Inventory,
                                                                      First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                                      Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                                      Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                                      Optimal_Storage_Cost,
                                                                      Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                                      Optimal_ATB_Quantity,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT,WD_DEALER_PRICE_NO_DISCOUNT,
                                                                      LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                                      REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
  
  colnames(download_report_scenario_1) <- c('Part_Nbr', 'NPV_Scenario_1',
                                            'Selldown_NPV_Scenario_1','Selldown_NPV_non_npv_Scenario_1', 'Revenue_Scenario_1','Revenue_non_npv_Scenario_1','Part_Cost_Scenario_1','Material_cost_non_npv_Scenario_1',
                                            'Setup_cost_Scenario_1' ,'Total_transport_cost_Scenario_1','Total_transport_cost_non_npv_Scenario_1','Storage_Cost_Scenario_1','Storage_Cost_non_npv_Scenario_1',
                                            'Total_process_cost_Scenario_1',  'Total_process_cost_non_npv_Scenario_1','Package_cost_Scenario_1','Package_cost_non_npv_Scenario_1',
                                            'Total_offsite_labor_cost_Scenario_1','Total_offsite_labor_cost_non_npv_Scenario_1','Total_offsite_transport_cost_Scenario_1','Total_offsite_transport_cost_non_npv_Scenario_1', 
                                            'Additional_Cost_1','Selldown_Revenue_Scenario_1','Selldown_Revenue_non_npv_Scenario_1',
                                            'Selldown_Material_cost_Scenario_1','Selldown_Material_cost_non_npv_Scenario_1',
                                            'Selldown_Freight_cost_Scenario_1','Selldown_Freight_cost_non_npv_Scenario_1','Selldown_Storage_Cost_Scenario_1','Selldown_Storage_Cost_non_npv_Scenario_1', 'Selldown_Processing_Cost_Scenario_1',
                                            'Selldown_Processing_Cost_non_npv_Scenario_1','Selldown_Packaging_Cost_Scenario_1','Selldown_Packaging_Cost_non_npv_Scenario_1',
                                            'Total_Inventory',
                                            'First_buy','Last_buy', 'Last_sale', 'Scrap_amount_Scenario_1', 'LTB_Buy_Quantity_Scenario_1',
                                            'Buy_Quantity_Scenario_1', 'Total_Forecast_Scenario_1',
                                            'Optimal_NPV_Scenario_1', 'Optimal_Revenue_Scenario_1', 'Optimal_Material_Cost_Scenario_1', 'Optimal_Setup_cost_Scenario_1',
                                            'Optimal_Total_transport_cost_Scenario_1',
                                            'Optimal_Total_offsite_transport_cost_Scenario_1', 'Optimal_Storage_Cost_Scenario_1', 'Optimal_Total_process_cost_Scenario_1',
                                            'Optimal_Packaging_cost_Scenario_1',
                                            'Optimal_Total_offsite_labor_cost_Scenario_1', 'Optimal_ATB_Quantity_Scenario_1', 'Extended_optimal_buy_cost_1',
                                            'Extended_purchase_cost_1',"Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                            "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                            "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
  
  download_report_scenario_1[,c(3:4,23:34)] <- 0
  
  download_report_scenario_2 <- download_report
  download_report_scenario_2 <- download_report_scenario_2 %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                                      Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                                      Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                                      Selldown_Revenue,Selldown_Revenue_non_npv,
                                                                      Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                                      Total_Inventory,
                                                                      First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                                      Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                                      Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                                      Optimal_Storage_Cost,
                                                                      Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                                      Optimal_ATB_Quantity,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT,WD_DEALER_PRICE_NO_DISCOUNT,
                                                                      LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                                      REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
  
  colnames(download_report_scenario_2) <- c('Part_Nbr', 'NPV_Scenario_2',
                                            'Selldown_NPV_Scenario_2','Selldown_NPV_non_npv_Scenario_2', 'Revenue_Scenario_2','Revenue_non_npv_Scenario_2','Part_Cost_Scenario_2','Material_cost_non_npv_Scenario_2',
                                            'Setup_cost_Scenario_2' ,'Total_transport_cost_Scenario_2','Total_transport_cost_non_npv_Scenario_2','Storage_Cost_Scenario_2','Storage_Cost_non_npv_Scenario_2',
                                            'Total_process_cost_Scenario_2',  'Total_process_cost_non_npv_Scenario_2','Package_cost_Scenario_2','Package_cost_non_npv_Scenario_2',
                                            'Total_offsite_labor_cost_Scenario_2','Total_offsite_labor_cost_non_npv_Scenario_2','Total_offsite_transport_cost_Scenario_2','Total_offsite_transport_cost_non_npv_Scenario_2', 
                                            'Additional_Cost_2','Selldown_Revenue_Scenario_2','Selldown_Revenue_non_npv_Scenario_2',
                                            'Selldown_Material_cost_Scenario_2','Selldown_Material_cost_non_npv_Scenario_2',
                                            'Selldown_Freight_cost_Scenario_2','Selldown_Freight_cost_non_npv_Scenario_2','Selldown_Storage_Cost_Scenario_2','Selldown_Storage_Cost_non_npv_Scenario_2', 'Selldown_Processing_Cost_Scenario_2',
                                            'Selldown_Processing_Cost_non_npv_Scenario_2','Selldown_Packaging_Cost_Scenario_2','Selldown_Packaging_Cost_non_npv_Scenario_2',
                                            'Total_Inventory',
                                            'First_buy','Last_buy', 'Last_sale', 'Scrap_amount_Scenario_2', 'LTB_Buy_Quantity_Scenario_2',
                                            'Buy_Quantity_Scenario_2', 'Total_Forecast_Scenario_2',
                                            'Optimal_NPV_Scenario_2', 'Optimal_Revenue_Scenario_2', 'Optimal_Material_Cost_Scenario_2', 'Optimal_Setup_cost_Scenario_2',
                                            'Optimal_Total_transport_cost_Scenario_2',
                                            'Optimal_Total_offsite_transport_cost_Scenario_2', 'Optimal_Storage_Cost_Scenario_2', 'Optimal_Total_process_cost_Scenario_2',
                                            'Optimal_Packaging_cost_Scenario_2',
                                            'Optimal_Total_offsite_labor_cost_Scenario_2', 'Optimal_ATB_Quantity_Scenario_2', 'Extended_optimal_buy_cost_2',
                                            'Extended_purchase_cost_2',"Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                            "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                            "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
  
  download_report_scenario_2[,c(3:4,23:34)] <- 0
  
  global_current_sce_down$df_data_current <- download_report_current
  
  global_scenario_1_down$df_data_scenario_1_down <- download_report_scenario_1
  
  global_scenario_2_down$df_data_scenario_2_down <- download_report_scenario_2
  
  
  ##### Report Download
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("ATB_Part_List",".xlsx", sep="")
    },
    content = function(file) {
      #Downloading_function()
      abc <- global_current_sce_down$df_data_current
      abc <- data.frame(Part_Nbr = abc[,1],
                        lapply(abc[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                        lapply(abc[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                        lapply(abc[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(abc[,53] , big.mark=",", digits=0, format="f"),formatC(abc[,54] , big.mark=",", digits=2, format="f"), ## change 786 
                        lapply(abc[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                        lapply(abc[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                        paste("$", formatC(abc[,65] , big.mark=",", digits=0, format="f")),
                        lapply(abc[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                        lapply(abc[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                        abc[,80:84], stringsAsFactors = FALSE)
      
      
      
      colnames(abc) <- c("Part Number",
                         "NPV", "Selldown NPV","Selldown Non NPV",
                         "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                         "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                         "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                         "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                         "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                         "Current Inventory",
                         "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                         "Total Purchase", "Total Sales", "Optimal NPV",
                         "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                         "Optimal Storage Cost",
                         "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                         "Optimal ATB Quantity","Optimal payback period" ,"Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export",
                         "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                         "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                         "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                         "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)", 
                         "Selected Scenario","Simple payabck period","Discounted payback period","2 year payback ATB","2 year payback NPV")  ##change 786 
      
      scenario_1 <- global_scenario_1_down$df_data_scenario_1_down
      scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                               lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                               lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                               lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                               formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                               lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                               lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                               lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                               lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                               stringsAsFactors = FALSE)
      
      colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                "Current Inventory",
                                "First Buy","Last Buy","Last Sale","Scrap Scenario-1", "Entered Buy Quantity Scenario-1",
                                "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                "Optimal NPV Scenario-1",
                                "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                "Optimal Offsite transport cost Scenario-1",
                                "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
      
      scenario_2 <- global_scenario_2_down$df_data_scenario_2_down
      scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],
                               lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                               lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                               lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                               formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                               lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                               lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                               lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                               lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                               stringsAsFactors = FALSE)
      
      colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                "Current Inventory",
                                "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                "Optimal NPV  Scenario-2",
                                "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                "Optimal Offsite transport cost Scenario-2",
                                "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
      
      write.xlsx2(abc, file, sheetName="Current_Scenario", row.names=FALSE)
      write.xlsx2(scenario_1, file , sheetName = "Scenario-1", append = TRUE, row.names = FALSE)
      write.xlsx2(scenario_2, file , sheetName = "Scenario-2", append = TRUE, row.names = FALSE)
      
    }
  )
  
  output$Total_Parts<-renderInfoBox({
    
    input1 <- global_ads$df_data_ads
    infoBox(
      "Number of Parts", paste0( nrow(ATB_ADS) ), icon = icon("cogs"),
      color = "blue", fill = TRUE
    )
  })
  
  
  
  output$ui <- renderUI({
    part_info <- global_ads$df_data_ads
    part_inform <- as.data.frame(part_info)
    part_inform$X <- NULL
    part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
    selectInput("Part_Number", "Part Number", choices = as.vector(part_inform$PART_NBR))
  })
  
  
} else
{
  dbRemoveTable(con, PART_data_name)
  
  dbRemoveTable(con, ATB_final_ads_1_name)
}

shinyjs::enable("go_list")


          } else
          {
            showModal(modalDialog(
              title = "Warning Message",
              "Forecast data is not present for this part"
            ))
            shinyjs::enable("go_list")
            dbRemoveTable(con, PART_data_name)
          }
          
        } # Close for progress bar
)
      }
      if(input$sel == "Cost")
      {
        shinyjs::disable("go_list")
        shinyjs::disable("tabBut")
        shinyjs::hide("hotable1")
        shinyjs::hide("cost_sce_1")
        shinyjs::hide("cost_sce_2")
        shinyjs::hide("analysis_sce_1")
        shinyjs::hide("analysis_sce_2")
        
        updated_cost_elements <- input$cost_file
        
        
        if(!is.null(updated_cost_elements) )
        {
          if((get.ext(updated_cost_elements$name) %in% c(
            'text/csv',
            'text/comma-separated-values',
            'text/tab-separated-values',
            'text/plain',
            'csv',
            'tsv'
          )))
          {
            
            updated_cost_elements_data<- read.csv(updated_cost_elements$datapath, header = input$header)
            
            
            updated_cost_elements_data$part.order<-as.numeric(row.names(updated_cost_elements_data))
            global_PARTdata$cognos<-select(updated_cost_elements_data,Part_Number,part.order)
            colnames(global_PARTdata$cognos)<-c("PART_NBR","PART_ORDER")
            
            updated_cost_elements_data <- as.data.frame(updated_cost_elements_data)
            
            if( ("Part_Number" %in% colnames(updated_cost_elements_data)) & ("Material_cost_Scenario_1" %in% colnames(updated_cost_elements_data)) & ("Moq_1" %in% colnames(updated_cost_elements_data)) &
                ("Standard_Pack_1" %in% colnames(updated_cost_elements_data)) & ("Buy_Quantity_Scenario_1" %in% colnames(updated_cost_elements_data)) &
                ("Setup_Cost_Scenario_1" %in% colnames(updated_cost_elements_data)) & ("Additional_Cost_Scenario_1" %in% colnames(updated_cost_elements_data)) &
                ("Proposed_Dealer_Price_1" %in% colnames(updated_cost_elements_data)) & ("Proposed_Wd_Price_1" %in% colnames(updated_cost_elements_data)) &
                ("Material_cost_Scenario_2" %in% colnames(updated_cost_elements_data)) & ("Moq_2" %in% colnames(updated_cost_elements_data)) &
                ("Standard_Pack_2" %in% colnames(updated_cost_elements_data)) & ("Buy_Quantity_Scenario_2" %in% colnames(updated_cost_elements_data)) &
                ("Setup_Cost_Scenario_2" %in% colnames(updated_cost_elements_data)) & ("Additional_Cost_Scenario_2" %in% colnames(updated_cost_elements_data)) &
                ("Proposed_Dealer_Price_2" %in% colnames(updated_cost_elements_data)) & ("Proposed_Wd_Price_2" %in% colnames(updated_cost_elements_data)))
            {
              updated_cost_elements_data$Part_Number <- str_pad(updated_cost_elements_data$Part_Number, width=8, side="left", pad="0")
              
              withProgress(message = 'Processing:', value = 0, {
                PART_data <- updated_cost_elements_data %>% select(Part_Number)
                colnames(PART_data) <- c("PART_NBR")
                
                Flag_PART_NBR_data <- 0
                Flag_PART_data <- 0
             
                
                incProgress(1/7, detail = "Pulling Data")
                
                ####### Filtering data
                
                PART_data <- PART_data %>% select(PART_NBR)
                dbWriteTable(conn = con,
                             name = PART_data_name,
                             value = PART_data,overwrite = TRUE )
                YR<-as.numeric(format(Sys.Date(),"%Y"))
                
                sql_atb_1_frocee<-  paste("SELECT HEAD AS PART_NBR,ACTUAL_SALES_CYTD, PROJECTED_SALES_CURR_YEAR,ACTUAL_SALES_CURR_YEAR_MINUS_2,ACTUAL_SALES_CURR_YEAR_MINUS_1
                                          FROM A_SCREAD.FORECAST_DATA@SC
                                          WHERE HEAD IN (SELECT PART_NBR FROM", PART_data_name, ")")
                
                PART_data_num_1 <- dbGetQuery(con,sql_atb_1_frocee)
                PART_data_num_1[is.na(PART_data_num_1)]<-0
                dbWriteTable(conn = con,
                             name = PART_data_num_name_1,
                             value = PART_data_num_1, overwrite = TRUE, append = FALSE)
                
                sql_atb_0_frocee<- paste("SELECT PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL,SUM(FORECAST_YR_1) AS FORECAST_YR_1,SUM(FORECAST_YR_2) AS FORECAST_YR_2 
                                          ,SUM(FORECAST_YR_3) AS FORECAST_YR_3,SUM(FORECAST_YR_4) AS FORECAST_YR_4,SUM(FORECAST_YR_5) AS FORECAST_YR_5,SUM(FORECAST_YR_6) AS FORECAST_YR_6
                                          ,SUM(FORECAST_YR_7) AS FORECAST_YR_7,SUM(FORECAST_YR_8) AS FORECAST_YR_8,SUM(FORECAST_YR_9) AS FORECAST_YR_9,SUM(FORECAST_YR_10) AS FORECAST_YR_10
                                          ,SUM(FORECAST_YR_11) AS FORECAST_YR_11,SUM(FORECAST_YR_12) AS FORECAST_YR_12,SUM(FORECAST_YR_13) AS FORECAST_YR_13,SUM(FORECAST_YR_14) AS FORECAST_YR_14
                                          ,SUM(FORECAST_YR_15) AS FORECAST_YR_15,SUM(FORECAST_YR_16) AS FORECAST_YR_16,SUM(FORECAST_YR_17) AS FORECAST_YR_17,SUM(FORECAST_YR_18) AS FORECAST_YR_18
                                          ,SUM(FORECAST_YR_19) AS FORECAST_YR_19,SUM(FORECAST_YR_20) AS FORECAST_YR_20,SUM(FORECAST_YR_21) AS FORECAST_YR_21,SUM(FORECAST_YR_22) AS FORECAST_YR_22
                                          ,SUM(FORECAST_YR_23) AS FORECAST_YR_23,SUM(FORECAST_YR_24) AS FORECAST_YR_24,SUM(FORECAST_YR_25) AS FORECAST_YR_25,SUM(FORECAST_YR_26) AS FORECAST_YR_26
                                          ,SUM(FORECAST_YR_27) AS FORECAST_YR_27,SUM(FORECAST_YR_28) AS FORECAST_YR_28,SUM(FORECAST_YR_29) AS FORECAST_YR_29,SUM(FORECAST_YR_30) AS FORECAST_YR_30 FROM 
                                          ( 
                                            SELECT P.PART_NBR,PD.PART_DESCRIPTION AS PART_NAME,PD.SVC_USE_LAST_YR AS APPLICATION_LY,PI.SALE_INV_QTY AS INVENTORY_LVL,
                                            CASE WHEN FY.YEAR=",YR+1," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_1,
                                            CASE WHEN FY.YEAR=",YR+2," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_2,
                                            CASE WHEN FY.YEAR=",YR+3," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_3,
                                            CASE WHEN FY.YEAR=",YR+4," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_4,
                                            CASE WHEN FY.YEAR=",YR+5," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_5,
                                            CASE WHEN FY.YEAR=",YR+6," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_6,
                                            CASE WHEN FY.YEAR=",YR+7," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_7,
                                            CASE WHEN FY.YEAR=",YR+8," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_8,
                                            CASE WHEN FY.YEAR=",YR+9," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_9,
                                            CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_10,
                                            CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_11,
                                            CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_12,
                                            CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_13,
                                            CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_14,
                                            CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_15,
                                            CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_16,
                                            CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_17,
                                            CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_18,
                                            CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_19,
                                            CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_20,
                                            CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_21,
                                            CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_22,
                                            CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_23,
                                            CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_24,
                                            CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_25,
                                            CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_26,
                                            CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_27,
                                            CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_28,
                                            CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_29,
                                            CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_30
                                            FROM FORECAST_DATA.PART P LEFT JOIN FORECAST_DATA.FORECAST F ON F.STD_PART_NBR = P.STD_PART_NBR
                                            LEFT JOIN FORECAST_DATA.FORECAST_YEAR FY ON FY.FORECAST_ID = F.FORECAST_ID
                                            LEFT JOIN FORECAST_DATA.PART_DETAIL PD ON PD.PART_ID = P.PART_ID
											                      LEFT JOIN FORECAST_DATA.PART_INVENTORY PI ON PI.PART_ID = P.PART_ID
                                            WHERE F.COUNTRY_ID='137' AND F.FORECAST_TYPE='ACTUAL' AND P.DELETE_IND='N' AND P.COUNTRY_ID='137' AND PD.DELETE_IND='N'
                                            AND PART_NBR IN (SELECT PART_NBR FROM",PART_data_name,")GROUP BY P.PART_NBR,PD.PART_DESCRIPTION,PD.SVC_USE_LAST_YR,PI.SALE_INV_QTY,
                                              CASE WHEN FY.YEAR=",YR+1,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+2,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+3,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+4,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+5,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+6,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+7,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+8,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+9,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END) GROUP BY PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL")
                ATB_1_Forcee_1 <- dbGetQuery(con,sql_atb_0_frocee)
                
                ATB_1_Forcee_2 <- merge(x= PART_data_num_1, y= ATB_1_Forcee_1, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                
                ATB_1_Forcee <- ATB_1_Forcee_2 %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                          FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                          FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                          FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                          FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                          FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                          FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                
                ATB_1_Forcee$FORECAST_YR_1<-as.character(ATB_1_Forcee$FORECAST_YR_1)
                ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
                
                if(nrow(ATB_1_Forcee) != nrow(PART_data))
                {
                  Complete_Part_List <- PART_data %>% select(PART_NBR)
                  ATB_1_Forcee <- merge(x =  Complete_Part_List, y = ATB_1_Forcee, by.x = "PART_NBR", by.y = "PART_NBR", all.x = TRUE)
                  ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
                  print("TRUE statement")
                }
                
                
                if(nrow(ATB_1_Forcee) > 0)
                {
                  
                  PART_data_num <- ATB_1_Forcee %>% select(PART_NBR)
                  
                  dbWriteTable(conn = con,
                               name = PART_data_num_name,
                               value = PART_data_num, overwrite = TRUE)
                  
                  print("Filtering Complete")
                  
                  ####### Mapping Last Cost
                  sql_atb_1_ser_mat <- paste("SELECT  PART_NBR, B.CAMPN_DTE, B.CAMPN_QTY,B.DECK_CD,
                                             B.LAST_COST,A.USB_CD, B.RB1_ALPHA_WHSE_CLASS, A.UNIT_LOAD_QTY,A.PART_REMOVAL_DT,
                                             A.PART_REINST_DT, A.MDSNG_PKG_QTY ,A.MCHDG_PACK_HEIGHT, A.MCHDG_PACK_LENGTH,A.MCHDG_PACK_WIDTH
                                             FROM
                                             DBO.SERVICE_PART@EUC A
                                             LEFT JOIN DBO.MATERIAL_PART@EUC B
                                             ON A.PART_NBR=B.MATRL_PART_NBR
                                             WHERE PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name, ")")
                  print("aa")
                  ATB_1_ser_mat <- dbGetQuery(con, sql_atb_1_ser_mat)
                  
                  ATB_1_1 <- ATB_1_Forcee
                  
                  ATB_1 <- merge(x= ATB_1_1, y= ATB_1_ser_mat, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                  
                  ATB_1$CAMPN_QTY <- as.character(ATB_1$CAMPN_QTY)
                  ATB_1$DECK_CD <- as.character(ATB_1$CAMPN_QTY)
                  ATB_1$LAST_COST <- as.character(ATB_1$LAST_COST)
                  ATB_1$MDSNG_PKG_QTY[is.na(ATB_1$MDSNG_PKG_QTY)] <- 0
                  ATB_1$MCHDG_PACK_HEIGHT[is.na(ATB_1$MCHDG_PACK_HEIGHT)] <- 0
                  ATB_1$MCHDG_PACK_LENGTH[is.na(ATB_1$MCHDG_PACK_LENGTH)] <- 0
                  ATB_1$MCHDG_PACK_WIDTH[is.na(ATB_1$MCHDG_PACK_WIDTH)] <- 0
                  ATB_1$UNIT_LOAD_QTY[is.na(ATB_1$UNIT_LOAD_QTY)] <- 0
                  ATB_1$FORECAST_YR_1<-as.character(ATB_1$FORECAST_YR_1)
                  ATB_1[is.na(ATB_1)]<-0
                  dbWriteTable(conn = con,
                               name = ATB_1_NAME ,
                               value = ATB_1,overwrite = TRUE)
                  
                  print("bpd")
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_2<- paste(" SELECT * FROM
                                    (
                                    SELECT A.*, NVL(B.ALPHA,'0') AS ALPHA, NVL(B.NUMERIC,'0') AS NUMERIC FROM", ATB_1_NAME, "A
                                    LEFT JOIN A_SCREAD.COMMCODE@SC B
                                    ON A.PART_NBR = B.PART
                                    ) ")

                  ATB_2 <- dbGetQuery(con, sql_ATB_2)
                  
                  dbWriteTable(conn = con,
                               name = ATB_2_NAME ,
                               value = ATB_2, overwrite = TRUE)
                  
                  print("ATB-2 Done")
                  
                  sql_ATB_3 <- paste("SELECT *
                                     FROM", ATB_2_NAME, "A
                                     
                                     LEFT JOIN
                                     
                                     (SELECT PN,
                                     (CASE WHEN CRLD IN (1,87,76,696,622,94,75,63,58,92,0) THEN CRLD
                                     ELSE 0
                                     END
                                     )AS CRLD,
                                     (CASE WHEN PROC IN (1,87,619,604,77,696,76,94,645,622,609,75,640,0,617) THEN PROC
                                     ELSE 0
                                     END
                                     )AS PROC FROM A_SCREAD.PART_DETAIL@SC
                                     )B
                                     
                                     ON A.PART_NBR=B.PN")
                  
                  ATB_3 <- dbGetQuery(con, sql_ATB_3)
                  
                  ATB_3$PN[is.na(ATB_3$PN)] <- 0
                  ATB_3$CRLD[is.na(ATB_3$CRLD)] <- 0
                  ATB_3$PROC[is.na(ATB_3$PROC)] <- 0
                  
                  dbWriteTable(conn = con,
                               name = ATB_3_NAME ,
                               value = ATB_3, overwrite = TRUE)
                  print("ATB-3 Done")
                  
                  sql_ATB_4 <- paste("SELECT * FROM
                                     (
                                     (SELECT * FROM", ATB_3_NAME, ")A
                                     LEFT JOIN
                                     (SELECT * FROM AVG_WEIGHTED_CUBE)B
                                     ON
                                     A.CRLD = B.FACILITY AND A.ALPHA = B.CCODE
                                     )")

                  ATB_4 <- dbGetQuery(con, sql_ATB_4)
                  dbWriteTable(conn = con,
                               name = ATB_4_NAME ,
                               value = ATB_4,overwrite = TRUE)
                  print("ATB-4 Done")
                  
                  sql_ATB_5 <- paste("SELECT A.*,NVL(AVG_LCPP,0) AS AVG_LCPP,NVL(AVG_PCPP,0)AS AVG_PCPP FROM
                                     (
                                     (SELECT * FROM ", ATB_4_NAME,")A
                                     LEFT JOIN
                                     (SELECT PART_NBR,FACILITY,ROUND(NVL(AVG(LABOR_COST_PER_PIECE),0),5) as AVG_LCPP ,ROUND(NVL(AVG(PACK_COST_PER_PIECE),0),5)as AVG_PCPP
                                     FROM(
                                     (SELECT PART_NBR,WHSE_NBR,STATN_CD FROM DBO.M8STACD_STANDARDS@EUC )B
                                     LEFT JOIN (SELECT * FROM PROCESSING_CPP)C
                                     ON
                                     B.WHSE_NBR = C.FACILITY
                                     AND B.STATN_CD = C.STATN_CD)
                                     WHERE C.FACILITY IS NOT NULL GROUP BY PART_NBR,FACILITY)D
                                     ON
                                     A.PART_NBR = D.PART_NBR
                                     AND A.PROC = D.FACILITY)"
                  )
                  
                  ATB_5 <- dbGetQuery(con, sql_ATB_5)
                  dbWriteTable(conn = con,
                               name = ATB_5_NAME ,
                               value = ATB_5, overwrite = TRUE)
                  print("ATB-5 Done")
                  
                  sql_ATB_6 <- paste("SELECT A.*, NVL(B.OVERALL_LABOR_COST_PER_PIECE,0) AS PC_LCPP, NVL(B.IB_LABOR_COST_PER_PIECE,0) AS PC_IB_LCPP, NVL(B.OB_LABOR_COST_PER_PIECE,0) AS PC_0B_LCPP
                                     --SELECT *
                                     FROM
                                     (
                                     (SELECT * FROM", ATB_5_NAME, ")A
                                     LEFT JOIN
                                     (SELECT * FROM PC_SERV_CPP)B
                                     ON
                                     A.CRLD=B.FACILITY AND A.ALPHA=B.COMMODITY_CODE
                                     )")

                  ATB_6 <- dbGetQuery(con, sql_ATB_6)
                  dbWriteTable(conn = con,
                               name = ATB_6_NAME ,
                               value = ATB_6, overwrite = TRUE)
                  print("ATB-6 Done")
                  
                  sql_ATB_7 <- paste("SELECT E.*, NVL (OFFSITE_LCPP,0) AS OFFSITE_LCPP
                                     FROM
                                     (
                                     SELECT * FROM
                                     (
                                     SELECT C.*, NVL(BC_LCPP,0) AS BC_LCPP FROM
                                     (
                                     SELECT A.*, NVL(PDC_LCPP,0) AS PDC_LCPP FROM
                                     (
                                     (SELECT * FROM", ATB_6_NAME, ") A
                                     LEFT JOIN
                                     (SELECT CC, PDC_LCPP FROM PDC_SERV_CPP)B
                                     ON A.ALPHA=B.CC
                                     )
                                     )C
                                     LEFT JOIN
                                     (SELECT CC, BC_LCPP FROM BC_SERV_CPP)D
                                     ON C.ALPHA=D.CC
                                     )
                                     )E
                                     LEFT JOIN
                                     (SELECT CC, OFFSITE_LCPP FROM OFFSITE_SERV_CPP)F
                                     ON E.ALPHA=F.CC")
                  
                  ATB_7 <- dbGetQuery(con, sql_ATB_7)
                  dbWriteTable(conn = con,
                               name = ATB_7_NAME ,
                               value = ATB_7, overwrite = TRUE)
                  print("ATB-7 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_8 <- paste("SELECT A.*, B.MTH_COST_PER_SQ_FT, B.UL_SQ_FT
                                     FROM
                                     (
                                     (SELECT * FROM", ATB_7_NAME, ")A
                                     LEFT JOIN
                                     (SELECT * FROM WAREHOUSE_COST_PER_SQFT)B
                                     ON A.CRLD=B.PLANT
                                     )")

                  ATB_8 <- dbGetQuery(con, sql_ATB_8)
                  
                  ATB_8$MTH_COST_PER_SQ_FT <- as.character(ATB_8$MTH_COST_PER_SQ_FT)
                  ATB_8$UL_SQ_FT <- as.character(ATB_8$UL_SQ_FT)
                  
                  dbWriteTable(conn = con,
                               name = ATB_8_NAME ,
                               value = ATB_8, overwrite = TRUE)
                  print("ATB-8 Done")
                  
                  
                  sql_ATB_9 <- paste("SELECT C.*, TRANSPORTATION_OFFSITES_PKGR, TRANSPORTATION_FROM_SOURCE, TRANSPORTATION_PDC_TO_DLR, TRANSPORTATION_TO_PDC, TRANSPORTATION_FACILITY_TO_DLR, TRANSPORTATION_BCARRIER_TO_DLR
                                     FROM
                                     (
                                     SELECT A.*, TRANS_OFFSITES_PKGR, TRANS_FROM_WC, MCD_TO_XDOCK, TRANS_TO_PDC, TRANS_PDC_TO_DLR, TRANS_FROM_SOURCE, XDOCK_OVERSIZE, XDOCK_STANDARD
                                     FROM
                                     (
                                     (SELECT * FROM", ATB_8_NAME, ") A
                                     LEFT JOIN
                                     (SELECT * FROM TRANS_COSTS_PER_CUBIC_FT)B
                                     ON
                                     A.CRLD = B.FACILITY
                                     )
                                     )C
                                     LEFT JOIN
                                     (SELECT * FROM TRANSPORTATION_COSTS)D
                                     ON C.CRLD=D.FACILITY AND C.ALPHA=D.CC")
                  
                  ATB_9 <- dbGetQuery(con, sql_ATB_9)
                  dbWriteTable(conn = con,
                               name = ATB_9_NAME ,
                               value = ATB_9, overwrite = TRUE)
                  print("ATB-9 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_10 <- paste("SELECT A.*,
                                      CASE WHEN MDSNG_PKG_QTY = 0 THEN 1
                                      ELSE MDSNG_PKG_QTY
                                      END AS ADJ_MDSNG_PKG_QTY
                                      FROM", ATB_9_NAME, "A")
                  
                  ATB_10 <- dbGetQuery(con, sql_ATB_10)
                  dbWriteTable(conn = con,
                               name = ATB_10_NAME ,
                               value = ATB_10, overwrite = TRUE)
                  print("ATB-10 Done")
                  
                  sql_ATB_11 <- paste("SELECT X.*, Y.LCC_PRODLINE,
                                      Y.LCC_SUBLINE,
                                      Y.DLR_CURR_DEALER_PRC,Y.NATL_PIECE_SLS_DLR_4, 
                                      Y.NATL_PIECE_SLS_COACH_4, Y.NATL_PIECE_SLS_OTD_4, Y.NATL_PIECE_SLS_EXPORT_4, Y.NATL_PIECE_SLS_WD_4,Y.NATL_PIECE_SLS_AFTMKT_4,Y.GMP_PART_NBR,Y.AC_DELCO
                                      FROM
                                      
                                      (
                                      SELECT B.*,
                                      (CASE WHEN UNIT_LOAD_QTY>0 THEN UNIT_LOAD_QTY
                                      ELSE 64/CUBIC_FT_PER_PIECE
                                      END) AS ADJ_UNIT_LOAD_QTY
                                      FROM
                                      (
                                      SELECT A.*,
                                      (CASE WHEN MCHDG_PACK_HEIGHT>0 AND MCHDG_PACK_LENGTH > 0 AND MCHDG_PACK_WIDTH >0
                                      THEN ROUND((MCHDG_PACK_HEIGHT*MCHDG_PACK_LENGTH*MCHDG_PACK_WIDTH/1728)/ADJ_MDSNG_PKG_QTY,12)
                                      ELSE TO_NUMBER(AVG_WEIGHT)/ADJ_MDSNG_PKG_QTY
                                      END) AS CUBIC_FT_PER_PIECE
                                      FROM", ATB_10_NAME, "A
                                      ) B
                                      ) X
                                      LEFT JOIN
                                      COMMON_WORK_NO_COST Y
                                      ON X.PART_NBR=Y.PART_NBR")
                  
                  ATB_COST_ADS_EXAMPLE <- dbGetQuery(con, sql_ATB_11)
                  
                  
                  #x<-as.numeric(which(ATB_COST_ADS_EXAMPLE$PART_NBR==0))
                  #ATB_COST_ADS_EXAMPLE<-ATB_COST_ADS_EXAMPLE[-x, ]
                  
                  
                  ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE <- as.character(ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE)
                  ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY <- as.character(ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY)
                  ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC <- as.character(ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC)
                  ATB_COST_ADS_EXAMPLE$LCC_PRODLINE <- as.character(ATB_COST_ADS_EXAMPLE$LCC_PRODLINE)
                  ATB_COST_ADS_EXAMPLE$LCC_SUBLINE <- as.character(ATB_COST_ADS_EXAMPLE$LCC_SUBLINE)
                  
                  
                  dbWriteTable(conn = con,
                               name = ATB_COST_ADS_EXAMPLE_NAME ,
                               value = ATB_COST_ADS_EXAMPLE, overwrite = TRUE)
                  print("ATB-11 Done")
                  
                  sql_ATB_12 <- paste("SELECT B.*,
                                      (CASE WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1>165 THEN 'Y'
                                      WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1<=165 THEN 'N'
                                      ELSE 'Y' END ) AS BULK_CR_FLAG
                                      FROM
                                      (SELECT A.*,
                                      ROUND((MTH_COST_PER_SQ_FT * UL_SQ_FT/ADJ_UNIT_LOAD_QTY), 10) AS MTH_SQ_FT_COST_PER_PEICE,
                                      ROUND(TRANS_PDC_TO_DLR*CUBIC_FT_PER_PIECE) AS OB_TRANS_CST_PP,
                                      
                                      (CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_FROM_WC)*CUBIC_FT_PER_PIECE)
                                      WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC!=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_OFFSITES_PKGR)*CUBIC_FT_PER_PIECE)
                                      ELSE (TRANS_FROM_SOURCE*CUBIC_FT_PER_PIECE) END )AS IB_TRANS_CST_PP,
                                      
                                      ROUND(2*(MCHDG_PACK_HEIGHT+MCHDG_PACK_WIDTH)) AS BULK_CR_CALC_1,
                                      
                                      (CASE WHEN MCHDG_PACK_HEIGHT>MCHDG_PACK_WIDTH AND MCHDG_PACK_HEIGHT>MCHDG_PACK_LENGTH THEN MCHDG_PACK_HEIGHT
                                      WHEN MCHDG_PACK_WIDTH>MCHDG_PACK_HEIGHT AND MCHDG_PACK_WIDTH>MCHDG_PACK_LENGTH THEN MCHDG_PACK_WIDTH
                                      ELSE MCHDG_PACK_LENGTH END)AS BULK_CR_CALC_2
                                      FROM", ATB_COST_ADS_EXAMPLE_NAME, "A
                                      ) B")

                  ATB_COST_ELEMENT_CAL_EXAPMLE <- dbGetQuery(con, sql_ATB_12)
                  
                  ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE)
                  ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP)
                  ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP)
                  ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1 <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1)
                  
                  dbWriteTable(conn = con,
                               name = ATB_COST_ELEMENT_NAME ,
                               value = ATB_COST_ELEMENT_CAL_EXAPMLE, overwrite = TRUE)
                  print("ATB-12 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_13 <- paste("SELECT X.*,
                                      (CASE WHEN USB_CD = 'U' THEN MAX_WEEKS_U
                                      ELSE MAX_WEEKS_SB
                                      END) AS MAX_WEEKS_SUPPLY
                                      FROM
                                      (
                                      SELECT P.*,NVL(Q.MWSBOS,99) AS MAX_WEEKS_U
                                      FROM
                                      (
                                      SELECT A.*,NVL(B.MWSBOS,99) AS MAX_WEEKS_SB
                                      FROM", ATB_COST_ELEMENT_NAME, "A
                                      LEFT JOIN
                                      MWS_USB_SB B
                                      ON A.ALPHA = B.ALPHA
                                      ) P
                                      LEFT JOIN MWS_USB_U Q
                                      ON P.PROC=Q.PROC
                                      ) X")

                  ATB_COST_MAX_SUPPLY_EXAMPLE <- dbGetQuery(con, sql_ATB_13)
                  dbWriteTable(conn = con,
                               name = ATB_COST_MAX_SUPPLY_NAME ,
                               value = ATB_COST_MAX_SUPPLY_EXAMPLE, overwrite = TRUE)
                  print("ATB-13 Done")
                  
                  sql_ATB_14 <- paste("SELECT A.*,
                                      CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' THEN 0
                                      WHEN RB1_ALPHA_WHSE_CLASS!='SP' AND BULK_CR_FLAG='Y' THEN (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_OVERSIZE)*CUBIC_FT_PER_PIECE
                                      ELSE (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_STANDARD)*CUBIC_FT_PER_PIECE
                                      END AS REDISTRIBUTION_COST_PP,
                                      
                                      CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.39*PC_LCPP)+(0.39*PDC_LCPP)
                                      WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.39*PC_LCPP)+(0.39*BC_LCPP)
                                      ELSE (0.39*PC_LCPP)
                                      END AS IB_LABOR_COST_PP,
                                      
                                      CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.61*PC_LCPP)+(0.61*PDC_LCPP)
                                      WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.61*PC_LCPP)+(0.61*BC_LCPP)
                                      ELSE (0.61*PC_LCPP)
                                      END AS OB_LABOR_COST_PP
                                      FROM", ATB_COST_MAX_SUPPLY_NAME, "A")
                  
                  ATB_COST_CAL_EXAMPLE <- dbGetQuery(con,sql_ATB_14)
                  
                  ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP <- as.character(ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP)
                  
                  dbWriteTable(conn = con,
                               name = ATB_COST_CAL_EXAMPLE_NAME ,
                               value = ATB_COST_CAL_EXAMPLE, overwrite = TRUE)
                  print("ATB-14 Done")
                  
                  sql_ATB_15 <- paste("  SELECT A.*, (IB_LABOR_COST_PP + OB_LABOR_COST_PP + AVG_LCPP + AVG_PCPP) AS ONSITE_PRCS_COST_PP,
                                      (OB_TRANS_CST_PP + IB_TRANS_CST_PP + REDISTRIBUTION_COST_PP) AS ONSITE_TRANS_COST_PER_PIECE,
                                      (TRANS_OFFSITES_PKGR*CUBIC_FT_PER_PIECE) AS OFFSITE_TRANS_COST_PP
                                      FROM",
                                      ATB_COST_CAL_EXAMPLE_NAME,  "A")
                  
                  ATB_TRANS_PROCESS_COST_EXAMPLE <- dbGetQuery(con, sql_ATB_15)
                  
                  ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE)
                  ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP)
                  
                  dbWriteTable(conn = con,
                               name = ATB_TRANS_PROCESS_COST_NAME ,
                               value = ATB_TRANS_PROCESS_COST_EXAMPLE, overwrite = TRUE)
                  print("ATB-15 Done")
                  
                  sql_ads_1 <- paste("SELECT A.*, B.MINIMUM_BUY_QTY, B.STD_PACK_QTY, B.BUY_FREQ FROM",
                                     ATB_TRANS_PROCESS_COST_NAME, "A
                                     LEFT JOIN
                                     (SELECT MTL_PART_PART_NBR, MINIMUM_BUY_QTY, STD_PACK_QTY, BUY_FREQ
                                     FROM DBO.SOURCE@EUC
                                     WHERE PRIME_SOURCE_IND = 1) B
                                     ON A.PART_NBR = B.MTL_PART_PART_NBR")
                  
                  ATB_final_ads_1 <- dbGetQuery(con, sql_ads_1)
                  
                  ATB_final_ads_1$MINIMUM_BUY_QTY <- as.character(ATB_final_ads_1$MINIMUM_BUY_QTY)
                  ATB_final_ads_1$STD_PACK_QTY <- as.character(ATB_final_ads_1$STD_PACK_QTY)
                  ATB_final_ads_1$BUY_FREQ <- as.character(ATB_final_ads_1$BUY_FREQ)
                  
                  dbWriteTable(conn = con,
                               name = ATB_final_ads_1_name,
                               value = ATB_final_ads_1, overwrite = TRUE)
                  
                  print("ATB-16 Done")
                  
                  sql_ads <- paste("SELECT A.*, B.* FROM",
                                   ATB_final_ads_1_name," A
                                   LEFT JOIN MANDATORY_RETENTION_DB B
                                   ON A.PART_NBR = B.PART_NUMBER")
                  
                  ATB_final_ads <- dbGetQuery(con, sql_ads)
                  print("ATB-17 Done")
                  
                  sql_WD_price <- paste("SELECT PART_NUMBER, WD_WHSL_DIST_PRC FROM DBO.WD_PRICES@EUC
                                        WHERE PART_NUMBER IN (SELECT PART_NBR FROM" ,PART_data_num_name, ")")
                  
                  WD_price <- dbGetQuery(con, sql_WD_price)
                  
                  sql_Inv_level <- paste("SELECT MATRL_PART_NBR, NATNL_INV AS TOTAL_INVENTORY
                                         FROM DBO.MATERIAL_PART@EUC WHERE MATRL_PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")")
                  
                  Inv_level <- dbGetQuery(con, sql_Inv_level)
                  
                  ## Pulling Sales Distribution across different markets data
                  sql_market_distribution <- paste("SELECT PART_NBR,
                                                   CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                                   WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                                   WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                                   END AS CATEGORY_CODE,
                                                   SUM(YR1_SALES) AS YR1_SALES
                                                   FROM DBO.PART_SLS_TO_DATE@EUC
                                                   WHERE PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")","
                                                   GROUP BY
                                                   PART_NBR,
                                                   CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                                   WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                                   WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                                   END")
                  
                  market_distribution <- dbGetQuery(con, sql_market_distribution)
                  
                  market_list <- c("SALES_OES", "SALES_ALLIED_EXPORT", "SALES_IAM")
                  market_list <- as.data.frame(market_list)
                  colnames(market_list) <- c("CATEGORY_CODE")
                  part_list <- PART_data
                  colnames(part_list) <- c("PART_NBR")
                  cross_join <- merge(part_list, market_list)
                  cross_join$CATEGORY_CODE <- as.character(cross_join$CATEGORY_CODE)
                  
                  market_distribution <- merge(cross_join, market_distribution, by = c("PART_NBR", "CATEGORY_CODE"), all.x = TRUE)
                  
                  spread_market_distribution <- spread(market_distribution ,key = CATEGORY_CODE,value = YR1_SALES)
                  
                  spread_market_distribution$SALES_ALLIED_EXPORT <- ifelse(is.na(spread_market_distribution$SALES_ALLIED_EXPORT), 0, (spread_market_distribution$SALES_ALLIED_EXPORT))
                  spread_market_distribution$SALES_IAM <- ifelse(is.na(spread_market_distribution$SALES_IAM), 0, (spread_market_distribution$SALES_IAM))
                  spread_market_distribution$SALES_OES <- ifelse(is.na(spread_market_distribution$SALES_OES), 0, (spread_market_distribution$SALES_OES))
                  spread_market_distribution$COMPLETE_SAALES <- spread_market_distribution$SALES_ALLIED_EXPORT + spread_market_distribution$SALES_IAM + spread_market_distribution$SALES_OES
                  spread_market_distribution$ALLIED_EXPORT_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_ALLIED_EXPORT/spread_market_distribution$COMPLETE_SAALES))
                  spread_market_distribution$IAM_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_IAM/spread_market_distribution$COMPLETE_SAALES))
                  spread_market_distribution$OES_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_OES/spread_market_distribution$COMPLETE_SAALES))
                  
                  
                  # Merging WD preice
                  ATB_final_ads <- merge(ATB_final_ads, WD_price, by.x= "PART_NBR", by.y= "PART_NUMBER", all.x= TRUE)
                  
                  # Merging Inventory Level
                  ATB_final_ads <- merge(ATB_final_ads, Inv_level, by.x= "PART_NBR", by.y= "MATRL_PART_NBR", all.x= TRUE)
                  
                  ATB_final_ads <- merge(ATB_final_ads, spread_market_distribution, by.x= "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                  
                  dbRemoveTable(con, PART_data_num_name)
                  
                  ATB_final_ads$ACTUAL_SALES_CYTD <- ifelse(is.na(ATB_final_ads$ACTUAL_SALES_CYTD), 0, ATB_final_ads$ACTUAL_SALES_CYTD)
                  ATB_final_ads$PROJECTED_SALES_CURR_YEAR <- ifelse(is.na(ATB_final_ads$PROJECTED_SALES_CURR_YEAR), 0, ATB_final_ads$PROJECTED_SALES_CURR_YEAR)
                  ATB_final_ads$TOTAL_INVENTORY <- ifelse(is.na(ATB_final_ads$TOTAL_INVENTORY), 0, ATB_final_ads$TOTAL_INVENTORY)
                  
                  ATB_final_ads$CURRENT_YEAR <- (ATB_final_ads$PROJECTED_SALES_CURR_YEAR - ATB_final_ads$ACTUAL_SALES_CYTD)
                  ATB_final_ads$CURRENT_YEAR <- ifelse(ATB_final_ads$CURRENT_YEAR < 0, 0, ATB_final_ads$CURRENT_YEAR)
                  
                  ATB_final_ads$WD_WHSL_DIST_PRC <- ifelse(is.na(ATB_final_ads$WD_WHSL_DIST_PRC), 0, ATB_final_ads$WD_WHSL_DIST_PRC)
                  
                  ATB_final_ads$PART_NBR<- str_pad(ATB_final_ads$PART_NBR, width=8, side="left", pad="0")
                  
                  ATB_final_ads$PL_SL <- paste(ATB_final_ads$LCC_PRODLINE, ATB_final_ads$LCC_SUBLINE,sep = "-")
                  
                  PL_SL_LIST <- as.data.frame(ATB_final_ads$PL_SL)
                  colnames(PL_SL_LIST) <- c("PL_SL")
                  PL_SL_LIST <- as.data.frame(unique(PL_SL_LIST$PL_SL))
                  
                  colnames(PL_SL_LIST) <- c("PL_SL")
                  PL_SL_LIST$PL_SL <- as.character(PL_SL_LIST$PL_SL)
                  ATB_final_ads$DLR_SLS <- ifelse(ATB_final_ads$DLR_CURR_DEALER_PRC ==0 & ATB_final_ads$NATL_PIECE_SLS_DLR_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_COACH_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_EXPORT_4 ==0 ,
                                                  0, 
                                                  as.numeric( ATB_final_ads$NATL_PIECE_SLS_DLR_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_COACH_4) + 
                                                    as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4) + as.numeric(ATB_final_ads$NATL_PIECE_SLS_EXPORT_4))
                  ATB_final_ads$WD_SLS <- ifelse(ATB_final_ads$DLR_SLS ==0,as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4)+as.numeric(ATB_final_ads$NATL_PIECE_SLS_WD_4) +as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4),
                                                 as.numeric( ATB_final_ads$NATL_PIECE_SLS_WD_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4))
                  
                  
                  dbWriteTable(conn = con,
                               name = PL_SL_LIST_ATB_NAME,
                               value = PL_SL_LIST, overwrite = TRUE)
                  
                  sql_discount_market <- paste("SELECT PL_SL, MARKET, SUM(T_SLS) AS TOTAL_SALES, SUM(T_DISC) AS TOTAL_DISCOUNT
                                               FROM (SELECT (LPAD(PROD_LINE,2,0) || '-' || SUB_LINE) AS PL_SL,MARKET,T_SLS,T_DISC FROM ABM_DATA.ABM_WIDE_DETAIL_NONW_PN_MV_P)
                                               WHERE PL_SL IN (SELECT PL_SL FROM", PL_SL_LIST_ATB_NAME, ")
                                               GROUP BY PL_SL, MARKET")
                  
                  discount_market <- dbGetQuery(con, sql_discount_market)
                  
                  drop_table_PL_SL_LIST_ATB <- paste("BEGIN
                                                     EXECUTE IMMEDIATE 'DROP TABLE", PL_SL_LIST_ATB_NAME,"';
                                                     EXCEPTION
                                                     WHEN OTHERS THEN NULL;
                                                     END;")
                  
                  value_PL_SL_LIST_ATB <- dbSendUpdate(con, drop_table_PL_SL_LIST_ATB)
                  
                  market_list_for_discount <- c("ALLIED/EXPORT", "INDEP AFTERMKT", "ORIG EQUIP SRVC")
                  
                  market_list_for_discount <- as.data.frame(market_list_for_discount)
                  colnames(market_list_for_discount) <- c("CATEGORY_CODE")
                  
                  cross_join_pl_sl <- merge(PL_SL_LIST, market_list_for_discount)
                  
                  cross_join_pl_sl$CATEGORY_CODE <- as.character(cross_join_pl_sl$CATEGORY_CODE)
                  colnames(cross_join_pl_sl) <- c("PL_SL", "MARKET")
                  
                  discount_market <- merge(cross_join_pl_sl, discount_market, by = c("PL_SL", "MARKET"), all.x = TRUE)
                  
                  
                  pl_sl_market_sales <- discount_market %>% select(MARKET, PL_SL, TOTAL_SALES)
                  pl_sl_market_discount <- discount_market %>% select(MARKET, PL_SL, TOTAL_DISCOUNT)
                  
                  spread_sales <- spread(pl_sl_market_sales ,key = MARKET,value = TOTAL_SALES)
                  spread_discount <- spread(pl_sl_market_discount, key = MARKET, value = TOTAL_DISCOUNT)
                  
                  spread_sales$`ALLIED/EXPORT` <- ifelse(is.na(spread_sales$`ALLIED/EXPORT`), 0, spread_sales$`ALLIED/EXPORT`)
                  spread_sales$`INDEP AFTERMKT` <- ifelse(is.na(spread_sales$`INDEP AFTERMKT`), 0, spread_sales$`INDEP AFTERMKT`)
                  spread_sales$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_sales$`ORIG EQUIP SRVC`), 0, spread_sales$`ORIG EQUIP SRVC`)
                  
                  colnames(spread_sales) <- c("PL_SL", "Sales_allied_export", "Sales_iam", "Sales_oes")
                  
                  spread_discount$`ALLIED/EXPORT` <- ifelse(is.na(spread_discount$`ALLIED/EXPORT`), 0, ( spread_discount$`ALLIED/EXPORT`))
                  spread_discount$`INDEP AFTERMKT` <- ifelse(is.na(spread_discount$`INDEP AFTERMKT`), 0, ( spread_discount$`INDEP AFTERMKT`))
                  spread_discount$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_discount$`ORIG EQUIP SRVC`), 0, ( spread_discount$`ORIG EQUIP SRVC`))
                  
                  colnames(spread_discount) <- c("PL_SL", "Discount_allied_export", "Discount_iam", "Discount_oes")
                  
                  discount_data_pl_sl_level <- merge(x = spread_sales, y = spread_discount, by.x = "PL_SL", by.y = "PL_SL", all = TRUE)
                  
                  discount_data_pl_sl_level$Discount_iam_percent <- ifelse(discount_data_pl_sl_level$Sales_iam == 0, 0, (discount_data_pl_sl_level$Discount_iam/discount_data_pl_sl_level$Sales_iam)* -100)
                  discount_data_pl_sl_level$Discount_oes_percent <- ifelse(discount_data_pl_sl_level$Sales_oes == 0, 0, (discount_data_pl_sl_level$Discount_oes/discount_data_pl_sl_level$Sales_oes)* -100)
                  discount_data_pl_sl_level$Discount_allied_export_percent <- ifelse(discount_data_pl_sl_level$Sales_allied_export == 0, 0, (discount_data_pl_sl_level$Discount_allied_export/discount_data_pl_sl_level$Sales_allied_export)* -100)
                  
                  ATB_final_ads <- merge(ATB_final_ads, discount_data_pl_sl_level, by.x = "PL_SL", by.y = "PL_SL", all.x = TRUE)
                  
                  ## Converting Back to numeric:
                  ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE <- as.numeric(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)
                  ATB_final_ads$OB_TRANS_CST_PP <- as.numeric(ATB_final_ads$OB_TRANS_CST_PP)
                  ATB_final_ads$IB_TRANS_CST_PP <- as.numeric(ATB_final_ads$IB_TRANS_CST_PP)
                  ATB_final_ads$BULK_CR_CALC_1 <- as.numeric(ATB_final_ads$BULK_CR_CALC_1)
                  ATB_final_ads$REDISTRIBUTION_COST_PP <- as.numeric(ATB_final_ads$REDISTRIBUTION_COST_PP)
                  ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE <- as.numeric(ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE)
                  ATB_final_ads$OFFSITE_TRANS_COST_PP <- as.numeric(ATB_final_ads$OFFSITE_TRANS_COST_PP)
                  ATB_final_ads$MINIMUM_BUY_QTY <- as.numeric(ATB_final_ads$MINIMUM_BUY_QTY)
                  ATB_final_ads$STD_PACK_QTY <- as.numeric(ATB_final_ads$STD_PACK_QTY)
                  ATB_final_ads$BUY_FREQ <- as.numeric(ATB_final_ads$BUY_FREQ)
                  ATB_final_ads$CAMPN_QTY <- as.numeric(ATB_final_ads$CAMPN_QTY)
                  ATB_final_ads$DECK_CD <- as.numeric(ATB_final_ads$CAMPN_QTY)
                  ATB_final_ads$LAST_COST <- as.numeric(ATB_final_ads$LAST_COST)
                  ATB_final_ads$CUBIC_FT_PER_PIECE <- as.numeric(ATB_final_ads$CUBIC_FT_PER_PIECE)
                  ATB_final_ads$ADJ_UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$ADJ_UNIT_LOAD_QTY)
                  #ATB_final_ads$MDSNG_PKG_QTY <- as.numeric(ATB_final_ads$MDSNG_PKG_QTY)
                  ATB_final_ads$MCHDG_PACK_HEIGHT <- as.numeric(ATB_final_ads$MCHDG_PACK_HEIGHT)
                  ATB_final_ads$MCHDG_PACK_LENGTH <- as.numeric(ATB_final_ads$MCHDG_PACK_LENGTH)
                  ATB_final_ads$MCHDG_PACK_WIDTH <- as.numeric(ATB_final_ads$MCHDG_PACK_WIDTH)
                  ATB_final_ads$UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$UNIT_LOAD_QTY)
                  ATB_final_ads$DLR_CURR_DEALER_PRC <- as.numeric(ATB_final_ads$DLR_CURR_DEALER_PRC)
                  ATB_final_ads$MTH_COST_PER_SQ_FT <- as.numeric(ATB_final_ads$MTH_COST_PER_SQ_FT)
                  ATB_final_ads$UL_SQ_FT <- as.numeric(ATB_final_ads$UL_SQ_FT)
                  
                  ##----
                  ATB_final_ads$DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$DLR_CURR_DEALER_PRC
                  ATB_final_ads$WD_DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$WD_WHSL_DIST_PRC
                  
                  ATB_final_ads$Dealer_Price_Allied_Export <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
                  ATB_final_ads$Dealer_Price_OES <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_oes_percent/100))
                  ATB_final_ads$Dealer_Price_IAM <- ATB_final_ads$WD_WHSL_DIST_PRC * (1 - (ATB_final_ads$Discount_iam_percent/100))
                  
                  ATB_final_ads$Proline_subline <- ATB_final_ads$PL_SL
                  ATB_final_ads$PL_SL <- NULL
                  
                  
                  incProgress(1/7, detail = "Running Calculations")
                  
                  ATB_final_ads$MINIMUM_BUY_QTY <- ifelse(is.na(ATB_final_ads$MINIMUM_BUY_QTY), 0,ATB_final_ads$MINIMUM_BUY_QTY)
                  ATB_final_ads$STD_PACK_QTY <- ifelse(is.na(ATB_final_ads$STD_PACK_QTY), 0,ATB_final_ads$STD_PACK_QTY )
                  ATB_final_ads$BUY_FREQ <- ifelse(is.na(ATB_final_ads$BUY_FREQ ), 1,ATB_final_ads$BUY_FREQ )
                  
                  ## Negative Inventory being made zero
                  ATB_final_ads$TOTAL_INVENTORY <- ifelse(ATB_final_ads$TOTAL_INVENTORY < 0, 0, ATB_final_ads$TOTAL_INVENTORY)
                  
                  ATB_final_ads$Setup_cost <- 0
                  ATB_final_ads$Additional_cost <- 0
                  
                  updated_cost_elements <- input$cost_file
                  
                  if (!is.null(updated_cost_elements))
                  {
                    updated_cost_elements_data<- read.csv(updated_cost_elements$datapath, header = input$header)
                    updated_cost_elements_data <- as.data.frame(updated_cost_elements_data)
                    updated_cost_elements_data$Part_Number <- str_pad(updated_cost_elements_data$Part_Number, width=8, side="left", pad="0")
                    ATB_final_ads <- merge(ATB_final_ads, updated_cost_elements_data, by.x= "PART_NBR", by.y= "Part_Number", all.x = TRUE)
                  }
                  
                  
                  if(("Material_cost_Scenario_1" %in% colnames(ATB_final_ads)) | ("Moq_1" %in% colnames(ATB_final_ads)) |
                     ("Standard_Pack_1" %in% colnames(ATB_final_ads)) | ("Buy_Quantity_Scenario_1" %in% colnames(ATB_final_ads)) |
                     ("Setup_Cost_Scenario_1" %in% colnames(ATB_final_ads)) | ("Additional_Cost_Scenario_1" %in% colnames(ATB_final_ads)) |
                     ("Proposed_Dealer_Price_1" %in% colnames(ATB_final_ads)) | ("Proposed_Wd_Price_1" %in% colnames(ATB_final_ads)) |
                     ("Material_cost_Scenario_2" %in% colnames(ATB_final_ads)) | ("Moq_2" %in% colnames(ATB_final_ads)) |
                     ("Standard_Pack_2" %in% colnames(ATB_final_ads)) | ("Buy_Quantity_Scenario_2" %in% colnames(ATB_final_ads)) |
                     ("Setup_Cost_Scenario_2" %in% colnames(ATB_final_ads)) | ("Additional_Cost_Scenario_2" %in% colnames(ATB_final_ads)) |
                     ("Proposed_Dealer_Price_2" %in% colnames(ATB_final_ads)) | ("Proposed_Wd_Price_2" %in% colnames(ATB_final_ads)))
                  {
                    for(i in (1 : nrow(ATB_final_ads)))
                    {
                      if(("Material_cost_Scenario_1" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Material_cost_Scenario_1[i]))
                        {
                          ATB_final_ads$Material_cost_Scenario_1[i] <- ATB_final_ads$LAST_COST[i]
                        }
                      }
                      if(("Moq_1" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Moq_1[i]))
                        {
                          ATB_final_ads$Moq_1[i] <- ATB_final_ads$MINIMUM_BUY_QTY[i]
                          
                        }
                      }
                      if(("Standard_Pack_1" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Standard_Pack_1[i]))
                        {
                          ATB_final_ads$Standard_Pack_1[i] <- ATB_final_ads$STD_PACK_QTY[i]
                        }
                      }
                      if(("Buy_Quantity_Scenario_1" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Buy_Quantity_Scenario_1[i]))
                        {
                          ATB_final_ads$Buy_Quantity_Scenario_1[i] <- "Enter Buy Qty"
                        }
                      }
                      if(("Setup_Cost_Scenario_1" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Setup_Cost_Scenario_1[i]))
                        {
                          ATB_final_ads$Setup_Cost_Scenario_1[i] <- ATB_final_ads$Setup_cost[i]
                        }
                      }
                      if(("Additional_Cost_Scenario_1" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Additional_Cost_Scenario_1[i]))
                        {
                          ATB_final_ads$Additional_Cost_Scenario_1[i] <- ATB_final_ads$Additional_cost[i]
                        }
                      }
                      if(("Proposed_Dealer_Price_1" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Proposed_Dealer_Price_1[i]))
                        {
                          ATB_final_ads$Proposed_Dealer_Price_1[i] <- ATB_final_ads$DEALER_PRICE_NO_DISCOUNT[i]
                        }
                      }
                      if(("Proposed_Wd_Price_1" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Proposed_Wd_Price_1[i]))
                        {
                          ATB_final_ads$Proposed_Wd_Price_1[i] <- ATB_final_ads$WD_DEALER_PRICE_NO_DISCOUNT[i]
                        }
                      }
                      if(("Material_cost_Scenario_2" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Material_cost_Scenario_2[i]))
                        {
                          ATB_final_ads$Material_cost_Scenario_2[i] <- ATB_final_ads$LAST_COST[i]
                        }
                      }
                      if(("Moq_2" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Moq_2[i]))
                        {
                          ATB_final_ads$Moq_2[i] <- ATB_final_ads$MINIMUM_BUY_QTY[i]
                          
                        }
                      }
                      if(("Standard_Pack_2" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Standard_Pack_2[i]))
                        {
                          ATB_final_ads$Standard_Pack_2[i] <- ATB_final_ads$STD_PACK_QTY[i]
                        }
                      }
                      if(("Buy_Quantity_Scenario_2" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Buy_Quantity_Scenario_2[i]))
                        {
                          ATB_final_ads$Buy_Quantity_Scenario_2[i] <- "Enter Buy Qty"
                        }
                      }
                      if(("Setup_Cost_Scenario_2" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Setup_Cost_Scenario_2[i]))
                        {
                          ATB_final_ads$Setup_Cost_Scenario_2[i] <- ATB_final_ads$Setup_cost[i]
                        }
                      }
                      if(("Additional_Cost_Scenario_2" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Additional_Cost_Scenario_2[i]))
                        {
                          ATB_final_ads$Additional_Cost_Scenario_2[i] <- ATB_final_ads$Additional_cost[i]
                        }
                      }
                      if(("Proposed_Dealer_Price_2" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Proposed_Dealer_Price_2[i]))
                        {
                          ATB_final_ads$Proposed_Dealer_Price_2[i] <- ATB_final_ads$DEALER_PRICE_NO_DISCOUNT[i]
                        }
                      }
                      if(("Proposed_Wd_Price_2" %in% colnames(ATB_final_ads)))
                      {
                        if(is.na(ATB_final_ads$Proposed_Wd_Price_2[i]))
                        {
                          ATB_final_ads$Proposed_Wd_Price_2[i] <- ATB_final_ads$WD_DEALER_PRICE_NO_DISCOUNT[i]
                        }
                      }
                    }
                  }
                  print(ATB_final_ads$Setup_Cost_Scenario_2)
                  ATB_final_ads$Dealer_Price_Allied_Export_1 <- ATB_final_ads$Proposed_Dealer_Price_1 * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
                  ATB_final_ads$Dealer_Price_OES_1 <- ATB_final_ads$Proposed_Dealer_Price_1 * (1 - (ATB_final_ads$Discount_oes_percent/100))
                  ATB_final_ads$Dealer_Price_IAM_1 <- ATB_final_ads$Proposed_Wd_Price_1 * (1 - (ATB_final_ads$Discount_iam_percent/100))
                  
                  ATB_final_ads$Dealer_Price_Allied_Export_2 <- ATB_final_ads$Proposed_Dealer_Price_2 * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
                  ATB_final_ads$Dealer_Price_OES_2 <- ATB_final_ads$Proposed_Dealer_Price_2 * (1 - (ATB_final_ads$Discount_oes_percent/100))
                  ATB_final_ads$Dealer_Price_IAM_2 <- ATB_final_ads$Proposed_Wd_Price_2 * (1 - (ATB_final_ads$Discount_iam_percent/100))
                  
                  ### Filtering parts with no data
                  all_part <- as.data.frame(PART_data$PART_NBR)
                  present_part <- as.data.frame(ATB_final_ads$PART_NBR)
                  colnames(all_part)[1] <- "PART_NBR"
                  colnames(present_part)[1] <- "PART_NBR"
                  
                  ATB_ads_filtered_part <- subset(all_part, !(PART_NBR %in% present_part$PART_NBR))
                  ATB_ads_filtered_part_internal <- ATB_final_ads[which((is.na(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)) | (is.na(ATB_final_ads$FORECAST_YR_1)) | (is.na(ATB_final_ads$LAST_COST))),]
                  
                  if(nrow(ATB_ads_filtered_part) > 0 & nrow(ATB_ads_filtered_part_internal) > 0)
                  {
                    ATB_ads_filtered_part$Reason <- "Forcee data not present"
                    ATB_ads_filtered_part_internal$Reason <- ifelse(is.na(ATB_ads_filtered_part_internal$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part_internal$LAST_COST), "Last Cost not present", "Forcee data not present"))
                    ATB_ads_filtered_part_internal <- ATB_ads_filtered_part_internal %>% select(PART_NBR, Reason)
                    ATB_ads_filtered_part <- rbind(ATB_ads_filtered_part, ATB_ads_filtered_part_internal)
                    
                  } else if(nrow(ATB_ads_filtered_part_internal) > 0 & nrow(ATB_ads_filtered_part) == 0)
                  {
                    ATB_ads_filtered_part_internal$Reason <- ifelse(is.na(ATB_ads_filtered_part_internal$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part_internal$LAST_COST), "Last Cost not present", "Forcee data not present"))
                    ATB_ads_filtered_part_internal <- ATB_ads_filtered_part_internal %>% select(PART_NBR, Reason)
                    ATB_ads_filtered_part <- ATB_ads_filtered_part_internal
                    
                  } else if(nrow(ATB_ads_filtered_part_internal) == 0 & nrow(ATB_ads_filtered_part) > 0)
                  {
                    ATB_ads_filtered_part$Reason <- "Forcee data not present"
                    
                  } else
                  {
                    ATB_ads_filtered_part <- data.frame()
                  }
                  
                  
                  if(nrow(ATB_ads_filtered_part) > 0)
                  {
                    
                    output$modal_table <- renderDataTable({
                      datatable(ATB_ads_filtered_part, rownames = FALSE,
                                options = list(scrollX=TRUE, scrollY='200px',
                                               lengthMenu = c(5, 25, 50),
                                               paging=FALSE, searching=FALSE))
                    })
                    
                    showModal(modalDialog(
                      title = "Summary Report",
                      DT::dataTableOutput('modal_table')
                    ))
                    
                    shinyjs::enable("download_filtered_list")
                    output$download_filtered_list <- downloadHandler(
                      filename = function() {
                        paste("Filtered_Part_List", ".csv", sep="")
                      },
                      content = function(file) {
                        abc <- ATB_ads_filtered_part
                        
                        write.csv(abc, file, row.names = FALSE)
                        
                      }
                    )
                    
                  }
                  
                  
                  ATB_final_ads$MINIMUM_BUY_QTY <- ifelse(is.na(ATB_final_ads$MINIMUM_BUY_QTY), 0,ATB_final_ads$MINIMUM_BUY_QTY)
                  ATB_final_ads$STD_PACK_QTY <- ifelse(is.na(ATB_final_ads$STD_PACK_QTY), 0,ATB_final_ads$STD_PACK_QTY )
                  ATB_final_ads$BUY_FREQ <- ifelse(is.na(ATB_final_ads$BUY_FREQ ), 1,ATB_final_ads$BUY_FREQ)
                  
                  ATB_final_ads$X <- NULL
                  
                  ## Converting characters\factors into numeric
                  
                  ATB_final_ads <- as.data.frame(ATB_final_ads)
                  
                  for(i in (4:35)){
                    ATB_final_ads[,i] <- as.numeric(ATB_final_ads[,i])
                  }
                  
                  part_ads <- ATB_final_ads
                  
                  dbRemoveTable(con, PART_data_name)
                  
                  dbRemoveTable(con, ATB_final_ads_1_name)
                  
                  if(nrow(ATB_final_ads) > 0)
                  {
                    
                    ATB_final_ads$FLAG <- 0
                    ATB_final_ads$Entered_Buy_Qty <- 0
                    ATB_final_ads$OES_FRACTION <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$OES_FRACTION)
                    ATB_final_ads$FLAG <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$FLAG)
                    ATB_final_ads[is.na(ATB_final_ads)] <- 0
                    ATB_final_ads$Buy_Quantity_Scenario_1 <- as.numeric(as.character(ATB_final_ads$Buy_Quantity_Scenario_1))
                    ATB_final_ads$Buy_Quantity_Scenario_2 <- as.numeric(as.character(ATB_final_ads$Buy_Quantity_Scenario_2))
                    
                    #write.csv(ATB_final_ads, file = "ATB_ads.csv")
                    global_ads$df_data_ads <- ATB_final_ads
                    ATB_ADS <- ATB_final_ads
                    
                    ################# 1. Code for Original Scenario: Current:
                    
                    Original_current <- Current(ATB_ADS)
                    
                    ##########################################################################################################################################################################################################################
                    
                    
                    if (!is.null(updated_cost_elements))
                    {
                      ########### 2. Code for Scenario-1 (Current)
                      Scenario_1_current <- Current_Scenario_1(ATB_ADS)
                      
                    }
                    
                    ################# 3. Code for Original Scenario- Optimal
                    Original_optimal <- Optimal(ATB_ADS)
                    
                    
                    
                    
                    if (!is.null(updated_cost_elements))
                    {
                      ################# 4. Code for Scenario-1 Optimal
                      
                      Scenario_1_optimal <- Optimal_Scenario_1(ATB_ADS)
                      
                      
                      
                      ################# 5. Code for Scenario-2 Current
                      
                      Scenario_2_current <- Current_Scenario_2(ATB_ADS)
                      
                      ################# 6. Code for Scenario-2 Optimal
                      
                      Scenario_2_optimal <- Optimal_Scenario_2(ATB_ADS)
                      
                    }
                    
                    ################# 7. Code for Selldown Calculation
                    Selldown_NPV <- Selldown(ATB_ADS)
                    
                    ################# 8. Code for Selldown Calculation Scenario-1
                    if (!is.null(updated_cost_elements))
                    {
                      
                      Selldown_NPV_Scenario_1 <- Selldown_Scenario_1(ATB_ADS)
                      
                      ################# 9. Code for Selldown Calculation Scenario-2
                      Selldown_NPV_Scenario_2 <- Selldown_Scenario_2(ATB_ADS)
                      
                      print("scenario-2 sell done")
                      
                    }
                    
                    ###creating columns from ATB_final_ads
                    ATB_ads_per_piece <- ATB_ADS %>% select(PART_NBR,DEALER_PRICE_NO_DISCOUNT,Discount_oes_percent,Discount_allied_export_percent,
                                                            Dealer_Price_OES,Dealer_Price_Allied_Export,WD_DEALER_PRICE_NO_DISCOUNT,Discount_iam_percent,Dealer_Price_IAM,
                                                            LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                            REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    
                    colnames(ATB_ads_per_piece)[1] <- "Part_Nbr"
                    
                    ATB_ads_per_piece_1 <- ATB_ADS %>% select(PART_NBR,Proposed_Dealer_Price_1,Proposed_Wd_Price_1,Material_cost_Scenario_1,
                                                              Moq_1,Standard_Pack_1,Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,MTH_SQ_FT_COST_PER_PEICE,
                                                              OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                              AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    colnames(ATB_ads_per_piece_1)[1] <- "Part_Nbr"
                    
                    ATB_ads_per_piece_2 <- ATB_ADS %>% select(PART_NBR,Proposed_Dealer_Price_2,Proposed_Wd_Price_2,Material_cost_Scenario_2,
                                                              Moq_2,Standard_Pack_2,Setup_Cost_Scenario_2,Additional_Cost_Scenario_2,MTH_SQ_FT_COST_PER_PEICE,
                                                              OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                              AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    colnames(ATB_ads_per_piece_2)[1] <- "Part_Nbr"
                    ### Creating table for cost comparison:
                    
                    orig_cost <- ATB_ADS %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC)
                    orig_cost <- orig_cost %>% mutate_at(vars(-PART_NBR),funs(round(.,2)))
                    
                    ##### Output of Cost comparison table
                    output$Cost_comp_1 <- renderHotable({
                      orig_cost <- data.frame(Part_Nbr = orig_cost[,1], paste("$", formatC(orig_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                              lapply(orig_cost[,3:4], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                              lapply(orig_cost[,5:8], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
                      
                      colnames(orig_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Setup Cost", "Additional Cost", "Dealer Price", "WD Price")
                      orig_cost
                    }, readOnly = TRUE)
                    
                    
                    if (!is.null(updated_cost_elements))
                    {
                      
                      scenario_1_cost <- ATB_ADS %>% select(PART_NBR,Material_cost_Scenario_1,Moq_1,Standard_Pack_1,Buy_Quantity_Scenario_1,
                                                            Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,Proposed_Dealer_Price_1,Proposed_Wd_Price_1)
                      scenario_1_cost <- scenario_1_cost %>% mutate_at(vars(-PART_NBR),funs(round(.,2)))
                      
                      reflect_cost_scenario_1$df_data_cost_scenario_1 <- scenario_1_cost
                      
                      scenario_2_cost <- ATB_ADS %>% select(PART_NBR, Material_cost_Scenario_2, Moq_2, Standard_Pack_2, Buy_Quantity_Scenario_2,
                                                            Setup_Cost_Scenario_2, Additional_Cost_Scenario_2, Proposed_Dealer_Price_2, Proposed_Wd_Price_2)
                      scenario_2_cost <- scenario_2_cost %>% mutate_at(vars(-PART_NBR),funs(round(.,2)))
                      
                      reflect_cost_scenario_2$df_data_cost_scenario_2 <- scenario_2_cost
                      
                      shinyjs::show("cost_sce_1")
                      shinyjs::show("cost_sce_2")
                      shinyjs::show("analysis_sce_1")
                      shinyjs::show("analysis_sce_2")
                      
                      output$cost_sce_1 <- renderHotable({
                        
                        scenario_1_cost <- scenario_1_cost %>% select(PART_NBR,Material_cost_Scenario_1,Moq_1,Standard_Pack_1, Buy_Quantity_Scenario_1,
                                                                      Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,Proposed_Dealer_Price_1,Proposed_Wd_Price_1)
                        
                        scenario_1_cost <- data.frame(PART_NBR = scenario_1_cost[,1], paste("$", formatC(scenario_1_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                                      lapply(scenario_1_cost[,3:5], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                      lapply(scenario_1_cost[,6:9], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
                        
                        colnames(scenario_1_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Buy Quantity", "Setup Cost",
                                                       "Additional Cost","Proposed Dealer Price", "Proposed WD Price")
                        
                        scenario_1_cost
                      }, readOnly = TRUE)
                      
                      output$cost_sce_2 <- renderHotable({
                        
                        scenario_2_cost <- scenario_2_cost %>% select(PART_NBR, Material_cost_Scenario_2, Moq_2, Standard_Pack_2, Buy_Quantity_Scenario_2,
                                                                      Setup_Cost_Scenario_2, Additional_Cost_Scenario_2, Proposed_Dealer_Price_2, Proposed_Wd_Price_2)
                        
                        scenario_2_cost <- data.frame(PART_NBR = scenario_2_cost[,1], paste("$", formatC(scenario_2_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                                      lapply(scenario_2_cost[,3:5], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                      lapply(scenario_2_cost[,6:9], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
                        
                        colnames(scenario_2_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Buy Quantity", "Setup Cost",
                                                       "Additional Cost","Proposed Dealer Price", "Proposed WD Price")
                        
                        scenario_2_cost
                      }, readOnly = TRUE)
                      
                    }
                    #### Creating table for Part List Analysis Result
                    #  1. Original: Original_current, Original_optimal, Selldown_NPV
                    #  2. Scenario-1: Scenario_1_current, Scenario_1_optimal, Selldown_NPV_Scenario_1
                    #  3. Scenario_2: Scenario_2_current, Scenario_2_optimal, Selldown_NPV_Scenario_2
                    
                    
                    ## Creating intermediate tables to get proper format
                    # spl- Source Part List
                    
                    spl_1 <- Original_current
                    spl_1$Part_Nbr <- str_pad(spl_1$Part_Nbr, width=8, side="left", pad="0")
                    spl_2 <- Original_optimal
                    spl_2$Part_Nbr <- str_pad(spl_2$Part_Nbr, width=8, side="left", pad="0")
                    spl_3 <- Selldown_NPV
                    spl_3$Part_Nbr <- str_pad(spl_3$Part_Nbr, width=8, side="left", pad="0")
                    
                    spl_12 <- merge(spl_1, spl_2, by = "Part_Nbr")
                    
                    spl_123 <- merge(spl_12, spl_3, by = "Part_Nbr")
                    spl_123 <- merge(spl_123, ATB_ads_per_piece, by = "Part_Nbr")
                    
                    spl_123_result <- spl_123 %>% select(Part_Nbr, NPV, Selldown_NPV, Revenue, Revenue_non_npv,Optimal_NPV,Optimal_ATB_Quantity, Total_Forecast)
                    
                    write.csv(spl_123_result, file = "spl_123_result_s1.csv", row.names = FALSE)
                    write.csv(spl_123_result, file = "spl_123_result_s2.csv", row.names = FALSE)
                    
                    
                    output$analysis_original <- renderHotable({
                      spl_123_result$Part_Nbr <- str_pad(spl_123_result$Part_Nbr, width=8, side="left", pad="0")
                      spl_123_result <- data.frame(Part_Nbr = spl_123_result[,1], lapply(spl_123_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                   lapply(spl_123_result[,7:8], function(x) formatC(x , big.mark=",", digits=0, format="f")), stringsAsFactors = FALSE)
                      
                      colnames(spl_123_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
                      
                      spl_123_result
                    })
                    
                    if (!is.null(updated_cost_elements))
                    {
                      spl_4 <- Scenario_1_current
                      spl_4$Part_Nbr <- str_pad(spl_4$Part_Nbr, width=8, side="left", pad="0")
                      spl_5 <- Scenario_1_optimal
                      spl_5$Part_Nbr <- str_pad(spl_5$Part_Nbr, width=8, side="left", pad="0")
                      spl_6 <- Selldown_NPV_Scenario_1
                      spl_6$Part_Nbr <- str_pad(spl_6$Part_Nbr, width=8, side="left", pad="0")
                      spl_7 <- Scenario_2_current
                      spl_7$Part_Nbr <- str_pad(spl_7$Part_Nbr, width=8, side="left", pad="0")
                      spl_8 <- Scenario_2_optimal
                      spl_8$Part_Nbr <- str_pad(spl_8$Part_Nbr, width=8, side="left", pad="0")
                      spl_9 <- Selldown_NPV_Scenario_2
                      spl_9$Part_Nbr <- str_pad(spl_9$Part_Nbr, width=8, side="left", pad="0")
                      print(spl_7$Setup_Cost_Scenario_2)
                      spl_45 <- merge(spl_4, spl_5, by = "Part_Nbr")
                      spl_456 <- merge(spl_45, spl_6, by = "Part_Nbr")
                      spl_456 <- merge(spl_456, ATB_ads_per_piece_1, by = "Part_Nbr")
                      
                      spl_78 <- merge(spl_7, spl_8, by = "Part_Nbr")
                      spl_789 <- merge(spl_78, spl_9, by = "Part_Nbr")
                      spl_789 <- merge(spl_789, ATB_ads_per_piece_2, by = "Part_Nbr")
                      
                      spl_123456 <- merge(spl_123, spl_456, by = "Part_Nbr")
                      spl_123456789 <- merge(spl_123456, spl_789, by = "Part_Nbr")
                      
                      
                      
                      
                      spl_456_result <- spl_456 %>% select(Part_Nbr, NPV_Scenario_1, Selldown_NPV_Scenario_1, Revenue_Scenario_1, Revenue_non_npv_Scenario_1,
                                                           Optimal_NPV_Scenario_1, Optimal_ATB_Quantity_Scenario_1,total_forecast)
                      
                      spl_789_result <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2, Selldown_NPV_Scenario_2, Revenue_Scenario_2, Revenue_non_npv_Scenario_2,
                                                           Optimal_NPV_Scenario_2, Optimal_ATB_Quantity_Scenario_2, total_forecast)
                      
                      write.csv(spl_456_result, file = "spl_456_result.csv", row.names = FALSE)
                      write.csv(spl_789_result, file = "spl_789_result.csv", row.names = FALSE)
                      
                      
                      output$analysis_sce_1 <- renderHotable({
                        spl_456_result$Part_Nbr <- str_pad(spl_456_result$Part_Nbr, width=8, side="left", pad="0")
                        
                        spl_456_result <- data.frame(Part_Nbr = spl_456_result[,1], lapply(spl_456_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                     formatC(spl_456_result[,7] , big.mark=",", digits=0, format="f"),formatC(spl_456_result[,8] , big.mark=",", digits=0, format="f"), stringsAsFactors = FALSE)
                        
                        colnames(spl_456_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
                        spl_456_result
                      }, readOnly = TRUE)
                      
                      output$analysis_sce_2 <- renderHotable({
                        spl_789_result$Part_Nbr <- str_pad(spl_789_result$Part_Nbr, width=8, side="left", pad="0")
                        
                        spl_789_result <- data.frame(Part_Nbr = spl_789_result[,1], lapply(spl_789_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                     formatC(spl_789_result[,7] , big.mark=",", digits=0, format="f"),formatC(spl_789_result[,8] , big.mark=",", digits=0, format="f"), stringsAsFactors = FALSE)
                        colnames(spl_789_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
                        
                        spl_789_result
                      }, readOnly = TRUE)
                      
                    }
                    part_ff<-global_ads$df_data_ads
                    y<-nrow(part_ff)
                    print(y)
                    ATB_ADS <- global_ads$df_data_ads
                    
                    finance_current_scenario= data.frame(matrix("",  nrow = as.numeric(y)))  
                    #finance_current_scenario<-0
                    finance_current_scenario<-as.data.frame(finance_current_scenario)
                    finance_current_scenario$matrix.....nrow...as.numeric.y..<-NULL
                    finance_current_scenario$Part_Nbr<-part_ff$PART_NBR
                    finance_current_scenario$Pb<-2
                    finance_current_scenario$Optimal_qty<-spl_2$Optimal_ATB_Quantity
                    finance_current_scenario$Discount_Rate<-15
                    finance_current_scenario$ATB_Units<-spl_1$Buy_Quantity
                    finance_current_scenario$Material_cost<-part_ff$LAST_COST
                    finance_current_scenario$Labour_cost_per_hr<-as.numeric(part_ff$AVG_LCPP)+
                      as.numeric(part_ff$OFFSITE_LCPP)+as.numeric(part_ff$IB_LABOR_COST_PP)+
                      as.numeric(part_ff$OB_LABOR_COST_PP)
                    finance_current_scenario$Storage_cost<-round(as.numeric(part_ff$MTH_SQ_FT_COST_PER_PEICE),2)
                    finance_current_scenario$Total_packaging_cost<-spl_1$Package_cost
                    finance_current_scenario$Freight_one_way<-round(as.numeric(part_ff$IB_TRANS_CST_PP)+as.numeric(part_ff$OFFSITE_TRANS_COST_PP),2)
                    finance_current_scenario$Inventory_lvl<-part_ff$INVENTORY_LVL
                    finance_current_scenario$FORECAST_YR_1<-part_ff$FORECAST_YR_1
                    finance_current_scenario$FORECAST_YR_2<-part_ff$FORECAST_YR_2
                    finance_current_scenario$FORECAST_YR_3<-part_ff$FORECAST_YR_3
                    finance_current_scenario$FORECAST_YR_4<-part_ff$FORECAST_YR_4
                    finance_current_scenario$FORECAST_YR_5<-part_ff$FORECAST_YR_5
                    finance_current_scenario$FORECAST_YR_6<-part_ff$FORECAST_YR_6
                    finance_current_scenario$FORECAST_YR_7<-part_ff$FORECAST_YR_7
                    finance_current_scenario$FORECAST_YR_8<-part_ff$FORECAST_YR_8
                    finance_current_scenario$FORECAST_YR_9<-part_ff$FORECAST_YR_9
                    finance_current_scenario$FORECAST_YR_10<-part_ff$FORECAST_YR_10
                    finance_current_scenario$FORECAST_YR_11<-part_ff$FORECAST_YR_11
                    finance_current_scenario$FORECAST_YR_12<-part_ff$FORECAST_YR_12
                    finance_current_scenario$FORECAST_YR_13<-part_ff$FORECAST_YR_13
                    finance_current_scenario$FORECAST_YR_14<-part_ff$FORECAST_YR_14
                    finance_current_scenario$FORECAST_YR_15<-part_ff$FORECAST_YR_15
                    finance_current_scenario$Historic_sales_CY<-part_ff$ACTUAL_SALES_CYTD
                    finance_current_scenario$Historic_sales_minus_1<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_1
                    finance_current_scenario$Historic_sales_minus_2<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_2
                    finance_current_scenario$Mandatory_serv_ret<-round(as.numeric(part_ff$APPLICATION_LY),0)
                    finance_current_scenario$Dealer_price<-part_ff$DEALER_PRICE_NO_DISCOUNT
                    finance_current_scenario$Dlr_sls<-part_ff$DLR_SLS
                    finance_current_scenario$WD_price<-part_ff$WD_DEALER_PRICE_NO_DISCOUNT
                    finance_current_scenario$WD_sls<-part_ff$WD_SLS	
                    finance_current_scenario$sa<-0.12
                    
                    finance_current_scenario_pb<- finance_current_scenario
                    finance_current_scenario_pb$All_time_buy<-(finance_current_scenario_pb$ATB_Units*finance_current_scenario_pb$Material_cost)+
                      finance_current_scenario_pb$Labour_cost_per_hr+finance_current_scenario_pb$Storage_cost+ finance_current_scenario_pb$Total_packaging_cost+(
                        finance_current_scenario_pb$Freight_one_way*finance_current_scenario_pb$ATB_Units)
                    finance_current_scenario_pb$sp<-ifelse((finance_current_scenario_pb$Dlr_sls + finance_current_scenario_pb$WD_sls) ==0,
                                                           ifelse(finance_current_scenario_pb$Dealer_price ==0,finance_current_scenario_pb$WD_price,
                                                                  ifelse(finance_current_scenario_pb$WD_price==0,finance_current_scenario_pb$Dealer_price,
                                                                         (as.numeric(finance_current_scenario_pb$Dealer_price)+as.numeric(finance_current_scenario_pb$WD_price))*0.5))
                                                           , finance_current_scenario_pb$Dealer_price*(finance_current_scenario_pb$Dlr_sls/
                                                                                                         (finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls))+ finance_current_scenario_pb$WD_price*
                                                             (finance_current_scenario_pb$WD_sls/(finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls)))
                    #finance_current_scenario_pb$sa<-if(x3=="GMP"){0.09}else if (x3=="ACD"){0.15}else if(x3=="-"){0.12}
                    finance_current_scenario_pb$sa<-0.12
                    finance_current_scenario_pb$Units_storage_0<-as.numeric(finance_current_scenario_pb$ATB_Units)+as.numeric(finance_current_scenario_pb$Inventory_lvl)
                    finance_current_scenario_pb$Units_storage_1<-ifelse(finance_current_scenario_pb$FORECAST_YR_1==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_1)
                    finance_current_scenario_pb$Units_storage_2<-ifelse(finance_current_scenario_pb$FORECAST_YR_2==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_2)
                    finance_current_scenario_pb$Units_storage_3<-ifelse(finance_current_scenario_pb$FORECAST_YR_3==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_3)
                    finance_current_scenario_pb$Units_storage_4<-ifelse(finance_current_scenario_pb$FORECAST_YR_4==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_4)
                    finance_current_scenario_pb$Units_storage_5<-ifelse(finance_current_scenario_pb$FORECAST_YR_5==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_5)
                    finance_current_scenario_pb$Units_storage_6<-ifelse(finance_current_scenario_pb$FORECAST_YR_6==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_6)
                    finance_current_scenario_pb$Units_storage_7<-ifelse(finance_current_scenario_pb$FORECAST_YR_7==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_7)
                    finance_current_scenario_pb$Units_storage_8<-ifelse(finance_current_scenario_pb$FORECAST_YR_8==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_8)
                    finance_current_scenario_pb$Units_storage_9<-ifelse(finance_current_scenario_pb$FORECAST_YR_9==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_9)
                    finance_current_scenario_pb$Units_storage_10<-ifelse(finance_current_scenario_pb$FORECAST_YR_10==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_10)
                    finance_current_scenario_pb$Units_storage_11<-ifelse(finance_current_scenario_pb$FORECAST_YR_11==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_11)
                    finance_current_scenario_pb$Units_storage_12<-ifelse(finance_current_scenario_pb$FORECAST_YR_12==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_12)
                    finance_current_scenario_pb$Units_storage_13<-ifelse(finance_current_scenario_pb$FORECAST_YR_13==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_13)
                    finance_current_scenario_pb$Units_storage_14<-ifelse(finance_current_scenario_pb$FORECAST_YR_14==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_14)
                    finance_current_scenario_pb$Units_storage_15<-ifelse(finance_current_scenario_pb$FORECAST_YR_15==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_15)
                    
                    finance_current_scenario_pb$Revenue_0<-0
                    finance_current_scenario_pb$Revenue_1<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_2<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_3<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_4<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_5<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_6<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_7<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_8<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_9<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_10<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_11<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_12<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_13<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_14<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_15<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    
                    
                    finance_current_scenario_pb$Total_storage_cost_0<-0
                    finance_current_scenario_pb$Total_storage_cost_1<-finance_current_scenario_pb$Units_storage_1*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_2<-finance_current_scenario_pb$Units_storage_2*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_3<-finance_current_scenario_pb$Units_storage_3*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_4<-finance_current_scenario_pb$Units_storage_4*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_5<-finance_current_scenario_pb$Units_storage_5*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_6<-finance_current_scenario_pb$Units_storage_6*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_7<-finance_current_scenario_pb$Units_storage_7*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_8<-finance_current_scenario_pb$Units_storage_8*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_9<-finance_current_scenario_pb$Units_storage_9*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_10<-finance_current_scenario_pb$Units_storage_10*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_11<-finance_current_scenario_pb$Units_storage_11*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_12<-finance_current_scenario_pb$Units_storage_12*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_13<-finance_current_scenario_pb$Units_storage_13*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_14<-finance_current_scenario_pb$Units_storage_14*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_15<-finance_current_scenario_pb$Units_storage_15*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    
                    
                    finance_current_scenario_pb$outbound_cost_1<-finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_2<-finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_3<-finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_4<-finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_5<-finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_6<-finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_7<-finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_8<-finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_9<-finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_10<-finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_11<-finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_12<-finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_13<-finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_14<-finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_15<-finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$Freight_one_way
                    
                    
                    finance_current_scenario_pb$Total_cost_0<-finance_current_scenario_pb$All_time_buy
                    finance_current_scenario_pb$Total_cost_1<-finance_current_scenario_pb$outbound_cost_1+finance_current_scenario_pb$Total_storage_cost_1
                    finance_current_scenario_pb$Total_cost_2<-finance_current_scenario_pb$outbound_cost_2+finance_current_scenario_pb$Total_storage_cost_2
                    finance_current_scenario_pb$Total_cost_3<-finance_current_scenario_pb$outbound_cost_3+finance_current_scenario_pb$Total_storage_cost_3
                    finance_current_scenario_pb$Total_cost_4<-finance_current_scenario_pb$outbound_cost_4+finance_current_scenario_pb$Total_storage_cost_4
                    finance_current_scenario_pb$Total_cost_5<-finance_current_scenario_pb$outbound_cost_5+finance_current_scenario_pb$Total_storage_cost_5
                    finance_current_scenario_pb$Total_cost_6<-finance_current_scenario_pb$outbound_cost_6+finance_current_scenario_pb$Total_storage_cost_6
                    finance_current_scenario_pb$Total_cost_7<-finance_current_scenario_pb$outbound_cost_7+finance_current_scenario_pb$Total_storage_cost_7
                    finance_current_scenario_pb$Total_cost_8<-finance_current_scenario_pb$outbound_cost_8+finance_current_scenario_pb$Total_storage_cost_8
                    finance_current_scenario_pb$Total_cost_9<-finance_current_scenario_pb$outbound_cost_9+finance_current_scenario_pb$Total_storage_cost_9
                    finance_current_scenario_pb$Total_cost_10<-finance_current_scenario_pb$outbound_cost_10+finance_current_scenario_pb$Total_storage_cost_10
                    finance_current_scenario_pb$Total_cost_11<-finance_current_scenario_pb$outbound_cost_11+finance_current_scenario_pb$Total_storage_cost_11
                    finance_current_scenario_pb$Total_cost_12<-finance_current_scenario_pb$outbound_cost_12+finance_current_scenario_pb$Total_storage_cost_12
                    finance_current_scenario_pb$Total_cost_13<-finance_current_scenario_pb$outbound_cost_13+finance_current_scenario_pb$Total_storage_cost_13
                    finance_current_scenario_pb$Total_cost_14<-finance_current_scenario_pb$outbound_cost_14+finance_current_scenario_pb$Total_storage_cost_14
                    finance_current_scenario_pb$Total_cost_15<-finance_current_scenario_pb$outbound_cost_15+finance_current_scenario_pb$Total_storage_cost_15
                    
                    
                    finance_current_scenario_pb$Net_benefit_0<-finance_current_scenario_pb$Revenue_0-finance_current_scenario_pb$Total_cost_0
                    finance_current_scenario_pb$Net_benefit_1<-finance_current_scenario_pb$Revenue_1-finance_current_scenario_pb$Total_cost_1
                    finance_current_scenario_pb$Net_benefit_2<-finance_current_scenario_pb$Revenue_2-finance_current_scenario_pb$Total_cost_2
                    finance_current_scenario_pb$Net_benefit_3<-finance_current_scenario_pb$Revenue_3-finance_current_scenario_pb$Total_cost_3
                    finance_current_scenario_pb$Net_benefit_4<-finance_current_scenario_pb$Revenue_4-finance_current_scenario_pb$Total_cost_4
                    finance_current_scenario_pb$Net_benefit_5<-finance_current_scenario_pb$Revenue_5-finance_current_scenario_pb$Total_cost_5
                    finance_current_scenario_pb$Net_benefit_6<-finance_current_scenario_pb$Revenue_6-finance_current_scenario_pb$Total_cost_6
                    finance_current_scenario_pb$Net_benefit_7<-finance_current_scenario_pb$Revenue_7-finance_current_scenario_pb$Total_cost_7
                    finance_current_scenario_pb$Net_benefit_8<-finance_current_scenario_pb$Revenue_8-finance_current_scenario_pb$Total_cost_8
                    finance_current_scenario_pb$Net_benefit_9<-finance_current_scenario_pb$Revenue_9-finance_current_scenario_pb$Total_cost_9
                    finance_current_scenario_pb$Net_benefit_10<-finance_current_scenario_pb$Revenue_10-finance_current_scenario_pb$Total_cost_10
                    finance_current_scenario_pb$Net_benefit_11<-finance_current_scenario_pb$Revenue_11-finance_current_scenario_pb$Total_cost_11
                    finance_current_scenario_pb$Net_benefit_12<-finance_current_scenario_pb$Revenue_12-finance_current_scenario_pb$Total_cost_12
                    finance_current_scenario_pb$Net_benefit_13<-finance_current_scenario_pb$Revenue_13-finance_current_scenario_pb$Total_cost_13
                    finance_current_scenario_pb$Net_benefit_14<-finance_current_scenario_pb$Revenue_14-finance_current_scenario_pb$Total_cost_14
                    finance_current_scenario_pb$Net_benefit_15<-finance_current_scenario_pb$Revenue_15-finance_current_scenario_pb$Total_cost_15
                    
                    finance_current_scenario_pb$pv_cashflow_0<-finance_current_scenario_pb$Net_benefit_0/(1.15^0)
                    finance_current_scenario_pb$pv_cashflow_1<-finance_current_scenario_pb$Net_benefit_1/(1.15^1)
                    finance_current_scenario_pb$pv_cashflow_2<-finance_current_scenario_pb$Net_benefit_2/(1.15^2)
                    finance_current_scenario_pb$pv_cashflow_3<-finance_current_scenario_pb$Net_benefit_3/(1.15^3)
                    finance_current_scenario_pb$pv_cashflow_4<-finance_current_scenario_pb$Net_benefit_4/(1.15^4)
                    finance_current_scenario_pb$pv_cashflow_5<-finance_current_scenario_pb$Net_benefit_5/(1.15^5)
                    finance_current_scenario_pb$pv_cashflow_6<-finance_current_scenario_pb$Net_benefit_6/(1.15^6)
                    finance_current_scenario_pb$pv_cashflow_7<-finance_current_scenario_pb$Net_benefit_7/(1.15^7)
                    finance_current_scenario_pb$pv_cashflow_8<-finance_current_scenario_pb$Net_benefit_8/(1.15^8)
                    finance_current_scenario_pb$pv_cashflow_9<-finance_current_scenario_pb$Net_benefit_9/(1.15^9)
                    finance_current_scenario_pb$pv_cashflow_10<-finance_current_scenario_pb$Net_benefit_10/(1.15^10)
                    finance_current_scenario_pb$pv_cashflow_11<-finance_current_scenario_pb$Net_benefit_11/(1.15^11)
                    finance_current_scenario_pb$pv_cashflow_12<-finance_current_scenario_pb$Net_benefit_12/(1.15^12)
                    finance_current_scenario_pb$pv_cashflow_13<-finance_current_scenario_pb$Net_benefit_13/(1.15^13)
                    finance_current_scenario_pb$pv_cashflow_14<-finance_current_scenario_pb$Net_benefit_14/(1.15^14)
                    finance_current_scenario_pb$pv_cashflow_15<-finance_current_scenario_pb$Net_benefit_15/(1.15^15)
                    
                    
                    finance_current_scenario_pb$pb_non_npv_0<-finance_current_scenario_pb$Net_benefit_0
                    finance_current_scenario_pb$pb_non_npv_1<-finance_current_scenario_pb$Net_benefit_1+finance_current_scenario_pb$pb_non_npv_0
                    finance_current_scenario_pb$pb_non_npv_2<-finance_current_scenario_pb$Net_benefit_2+finance_current_scenario_pb$pb_non_npv_1
                    finance_current_scenario_pb$pb_non_npv_3<-finance_current_scenario_pb$Net_benefit_3+finance_current_scenario_pb$pb_non_npv_2
                    finance_current_scenario_pb$pb_non_npv_4<-finance_current_scenario_pb$Net_benefit_4+finance_current_scenario_pb$pb_non_npv_3
                    finance_current_scenario_pb$pb_non_npv_5<-finance_current_scenario_pb$Net_benefit_5+finance_current_scenario_pb$pb_non_npv_4
                    finance_current_scenario_pb$pb_non_npv_6<-finance_current_scenario_pb$Net_benefit_6+finance_current_scenario_pb$pb_non_npv_5
                    finance_current_scenario_pb$pb_non_npv_7<-finance_current_scenario_pb$Net_benefit_7+finance_current_scenario_pb$pb_non_npv_6
                    finance_current_scenario_pb$pb_non_npv_8<-finance_current_scenario_pb$Net_benefit_8+finance_current_scenario_pb$pb_non_npv_7
                    finance_current_scenario_pb$pb_non_npv_9<-finance_current_scenario_pb$Net_benefit_9+finance_current_scenario_pb$pb_non_npv_8
                    finance_current_scenario_pb$pb_non_npv_10<-finance_current_scenario_pb$Net_benefit_10+finance_current_scenario_pb$pb_non_npv_9
                    finance_current_scenario_pb$pb_non_npv_11<-finance_current_scenario_pb$Net_benefit_11+finance_current_scenario_pb$pb_non_npv_10
                    finance_current_scenario_pb$pb_non_npv_12<-finance_current_scenario_pb$Net_benefit_12+finance_current_scenario_pb$pb_non_npv_11
                    finance_current_scenario_pb$pb_non_npv_13<-finance_current_scenario_pb$Net_benefit_13+finance_current_scenario_pb$pb_non_npv_12
                    finance_current_scenario_pb$pb_non_npv_14<-finance_current_scenario_pb$Net_benefit_14+finance_current_scenario_pb$pb_non_npv_13
                    finance_current_scenario_pb$pb_non_npv_15<-finance_current_scenario_pb$Net_benefit_15+finance_current_scenario_pb$pb_non_npv_14
                    
                    
                    finance_current_scenario_pb$pb_npv_0<-finance_current_scenario_pb$pv_cashflow_0
                    finance_current_scenario_pb$pb_npv_1<-finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pb_npv_0
                    finance_current_scenario_pb$pb_npv_2<-finance_current_scenario_pb$pv_cashflow_2+finance_current_scenario_pb$pb_npv_1
                    finance_current_scenario_pb$pb_npv_3<-finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pb_npv_2
                    finance_current_scenario_pb$pb_npv_4<-finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pb_npv_3
                    finance_current_scenario_pb$pb_npv_5<-finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pb_npv_4
                    finance_current_scenario_pb$pb_npv_6<-finance_current_scenario_pb$pv_cashflow_6+finance_current_scenario_pb$pb_npv_5
                    finance_current_scenario_pb$pb_npv_7<-finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pb_npv_6
                    finance_current_scenario_pb$pb_npv_8<-finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pb_npv_7
                    finance_current_scenario_pb$pb_npv_9<-finance_current_scenario_pb$pv_cashflow_9+finance_current_scenario_pb$pb_npv_8
                    finance_current_scenario_pb$pb_npv_10<-finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pb_npv_9
                    finance_current_scenario_pb$pb_npv_11<-finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pb_npv_10
                    finance_current_scenario_pb$pb_npv_12<-finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pb_npv_11
                    finance_current_scenario_pb$pb_npv_13<-finance_current_scenario_pb$pv_cashflow_13+finance_current_scenario_pb$pb_npv_12
                    finance_current_scenario_pb$pb_npv_14<-finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pb_npv_13
                    finance_current_scenario_pb$pb_npv_15<-finance_current_scenario_pb$pv_cashflow_15+finance_current_scenario_pb$pb_npv_14
                    
                    
                    
                    finance_current_scenario_pb$pby_non_npv_0<-ifelse(finance_current_scenario_pb$pb_non_npv_0>0,"Error",0)
                    finance_current_scenario_pb$pby_non_npv_1<-ifelse(finance_current_scenario_pb$pb_non_npv_0<0 & finance_current_scenario_pb$pb_non_npv_1>0,(1-(finance_current_scenario_pb$pb_non_npv_1/finance_current_scenario_pb$Net_benefit_1)),0)
                    finance_current_scenario_pb$pby_non_npv_2<-ifelse(finance_current_scenario_pb$pb_non_npv_1<0 & finance_current_scenario_pb$pb_non_npv_2>0,(1-(finance_current_scenario_pb$pb_non_npv_2/finance_current_scenario_pb$Net_benefit_2))+1,0)
                    finance_current_scenario_pb$pby_non_npv_3<-ifelse(finance_current_scenario_pb$pb_non_npv_2<0 & finance_current_scenario_pb$pb_non_npv_3>0,(1-(finance_current_scenario_pb$pb_non_npv_3/finance_current_scenario_pb$Net_benefit_3))+2,0)
                    finance_current_scenario_pb$pby_non_npv_4<-ifelse(finance_current_scenario_pb$pb_non_npv_3<0 & finance_current_scenario_pb$pb_non_npv_4>0,(1-(finance_current_scenario_pb$pb_non_npv_4/finance_current_scenario_pb$Net_benefit_4))+3,0)
                    finance_current_scenario_pb$pby_non_npv_5<-ifelse(finance_current_scenario_pb$pb_non_npv_4<0 & finance_current_scenario_pb$pb_non_npv_5>0,(1-(finance_current_scenario_pb$pb_non_npv_5/finance_current_scenario_pb$Net_benefit_5))+4,0)
                    finance_current_scenario_pb$pby_non_npv_6<-ifelse(finance_current_scenario_pb$pb_non_npv_5<0 & finance_current_scenario_pb$pb_non_npv_6>0,(1-(finance_current_scenario_pb$pb_non_npv_6/finance_current_scenario_pb$Net_benefit_6))+5,0)
                    finance_current_scenario_pb$pby_non_npv_7<-ifelse(finance_current_scenario_pb$pb_non_npv_6<0 & finance_current_scenario_pb$pb_non_npv_7>0,(1-(finance_current_scenario_pb$pb_non_npv_7/finance_current_scenario_pb$Net_benefit_7))+6,0)
                    finance_current_scenario_pb$pby_non_npv_8<-ifelse(finance_current_scenario_pb$pb_non_npv_7<0 & finance_current_scenario_pb$pb_non_npv_8>0,(1-(finance_current_scenario_pb$pb_non_npv_8/finance_current_scenario_pb$Net_benefit_8))+7,0)
                    finance_current_scenario_pb$pby_non_npv_9<-ifelse(finance_current_scenario_pb$pb_non_npv_8<0 & finance_current_scenario_pb$pb_non_npv_9>0,(1-(finance_current_scenario_pb$pb_non_npv_9/finance_current_scenario_pb$Net_benefit_9))+8,0)
                    finance_current_scenario_pb$pby_non_npv_10<-ifelse(finance_current_scenario_pb$pb_non_npv_9<0 & finance_current_scenario_pb$pb_non_npv_10>0,(1-(finance_current_scenario_pb$pb_non_npv_10/finance_current_scenario_pb$Net_benefit_10))+9,0)
                    finance_current_scenario_pb$pby_non_npv_11<-ifelse(finance_current_scenario_pb$pb_non_npv_10<0 & finance_current_scenario_pb$pb_non_npv_11>0,(1-(finance_current_scenario_pb$pb_non_npv_11/finance_current_scenario_pb$Net_benefit_11))+10,0)
                    finance_current_scenario_pb$pby_non_npv_12<-ifelse(finance_current_scenario_pb$pb_non_npv_11<0 & finance_current_scenario_pb$pb_non_npv_12>0,(1-(finance_current_scenario_pb$pb_non_npv_12/finance_current_scenario_pb$Net_benefit_12))+11,0)
                    finance_current_scenario_pb$pby_non_npv_13<-ifelse(finance_current_scenario_pb$pb_non_npv_12<0 & finance_current_scenario_pb$pb_non_npv_13>0,(1-(finance_current_scenario_pb$pb_non_npv_13/finance_current_scenario_pb$Net_benefit_13))+12,0)
                    finance_current_scenario_pb$pby_non_npv_14<-ifelse(finance_current_scenario_pb$pb_non_npv_13<0 & finance_current_scenario_pb$pb_non_npv_14>0,(1-(finance_current_scenario_pb$pb_non_npv_14/finance_current_scenario_pb$Net_benefit_14))+13,0)
                    finance_current_scenario_pb$pby_non_npv_15<-ifelse(finance_current_scenario_pb$pb_non_npv_14<0 & finance_current_scenario_pb$pb_non_npv_15>0,(1-(finance_current_scenario_pb$pb_non_npv_15/finance_current_scenario_pb$Net_benefit_15))+14,0)
                    
                    
                    #finance_current_scenario_pb$pby_npv_0<-ifelse(finance_current_scenario_pb$pb_npv_0>0,"Error"," ")
                    finance_current_scenario_pb$pby_npv_1<-ifelse(finance_current_scenario_pb$pb_npv_0<0 & finance_current_scenario_pb$pb_npv_1>0,1-(finance_current_scenario_pb$pb_npv_1/finance_current_scenario_pb$pv_cashflow_1),0)
                    finance_current_scenario_pb$pby_npv_2<-ifelse(finance_current_scenario_pb$pb_npv_1<0 & finance_current_scenario_pb$pb_npv_2>0,(1-(finance_current_scenario_pb$pb_npv_2/finance_current_scenario_pb$pv_cashflow_2))+1,0)
                    finance_current_scenario_pb$pby_npv_3<-ifelse(finance_current_scenario_pb$pb_npv_2<0 & finance_current_scenario_pb$pb_npv_3>0,(1-(finance_current_scenario_pb$pb_npv_3/finance_current_scenario_pb$pv_cashflow_3))+2,0)
                    finance_current_scenario_pb$pby_npv_4<-ifelse(finance_current_scenario_pb$pb_npv_3<0 & finance_current_scenario_pb$pb_npv_4>0,(1-(finance_current_scenario_pb$pb_npv_4/finance_current_scenario_pb$pv_cashflow_4))+3,0)
                    finance_current_scenario_pb$pby_npv_5<-ifelse(finance_current_scenario_pb$pb_npv_4<0 & finance_current_scenario_pb$pb_npv_5>0,(1-(finance_current_scenario_pb$pb_npv_5/finance_current_scenario_pb$pv_cashflow_5))+4,0)
                    finance_current_scenario_pb$pby_npv_6<-ifelse(finance_current_scenario_pb$pb_npv_5<0 & finance_current_scenario_pb$pb_npv_6>0,(1-(finance_current_scenario_pb$pb_npv_6/finance_current_scenario_pb$pv_cashflow_6))+5,0)
                    finance_current_scenario_pb$pby_npv_7<-ifelse(finance_current_scenario_pb$pb_npv_6<0 & finance_current_scenario_pb$pb_npv_7>0,(1-(finance_current_scenario_pb$pb_npv_7/finance_current_scenario_pb$pv_cashflow_7))+6,0)
                    finance_current_scenario_pb$pby_npv_8<-ifelse(finance_current_scenario_pb$pb_npv_7<0 & finance_current_scenario_pb$pb_npv_8>0,(1-(finance_current_scenario_pb$pb_npv_8/finance_current_scenario_pb$pv_cashflow_8))+7,0)
                    finance_current_scenario_pb$pby_npv_9<-ifelse(finance_current_scenario_pb$pb_npv_8<0 & finance_current_scenario_pb$pb_npv_9>0,(1-(finance_current_scenario_pb$pb_npv_9/finance_current_scenario_pb$pv_cashflow_9))+8,0)
                    finance_current_scenario_pb$pby_npv_10<-ifelse(finance_current_scenario_pb$pb_npv_9<0 & finance_current_scenario_pb$pb_npv_10>0,(1-(finance_current_scenario_pb$pb_npv_10/finance_current_scenario_pb$pv_cashflow_10))+9,0)
                    finance_current_scenario_pb$pby_npv_11<-ifelse(finance_current_scenario_pb$pb_npv_10<0 & finance_current_scenario_pb$pb_npv_11>0,(1-(finance_current_scenario_pb$pb_npv_11/finance_current_scenario_pb$pv_cashflow_11))+10,0)
                    finance_current_scenario_pb$pby_npv_12<-ifelse(finance_current_scenario_pb$pb_npv_11<0 & finance_current_scenario_pb$pb_npv_12>0,(1-(finance_current_scenario_pb$pb_npv_12/finance_current_scenario_pb$pv_cashflow_12))+11,0)
                    finance_current_scenario_pb$pby_npv_13<-ifelse(finance_current_scenario_pb$pb_npv_12<0 & finance_current_scenario_pb$pb_npv_13>0,(1-(finance_current_scenario_pb$pb_npv_13/finance_current_scenario_pb$pv_cashflow_13))+12,0)
                    finance_current_scenario_pb$pby_npv_14<-ifelse(finance_current_scenario_pb$pb_npv_13<0 & finance_current_scenario_pb$pb_npv_14>0,(1-(finance_current_scenario_pb$pb_npv_14/finance_current_scenario_pb$pv_cashflow_14))+13,0)
                    finance_current_scenario_pb$pby_npv_15<-ifelse(finance_current_scenario_pb$pb_npv_14<0 & finance_current_scenario_pb$pb_npv_15>0,(1-(finance_current_scenario_pb$pb_npv_15/finance_current_scenario_pb$pv_cashflow_15))+14,0)
                    
                    
                    finance_current_scenario_pb$NPV_pb<-finance_current_scenario_pb$pv_cashflow_0+finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pv_cashflow_2+
                      finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pv_cashflow_6+
                      finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pv_cashflow_9+
                      finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pv_cashflow_13+
                      finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pv_cashflow_15
                    finance_current_scenario_pb$flat_pb<-round(as.numeric(finance_current_scenario_pb$pby_non_npv_0)+as.numeric(finance_current_scenario_pb$pby_non_npv_1)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_2)+as.numeric(finance_current_scenario_pb$pby_non_npv_3)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_4)+as.numeric(finance_current_scenario_pb$pby_non_npv_5)+as.numeric(finance_current_scenario_pb$pby_non_npv_6)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_7)+as.numeric(finance_current_scenario_pb$pby_non_npv_8)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_9)+as.numeric(finance_current_scenario_pb$pby_non_npv_10)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_11)+as.numeric(finance_current_scenario_pb$pby_non_npv_12)+as.numeric(finance_current_scenario_pb$pby_non_npv_13)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_14)+as.numeric(finance_current_scenario_pb$pby_non_npv_15),2)
                    
                    finance_current_scenario_pb$disc_pb<-round(as.numeric(finance_current_scenario_pb$pby_npv_1)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_2)+as.numeric(finance_current_scenario_pb$pby_npv_3)+as.numeric(finance_current_scenario_pb$pby_npv_4)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_5)+as.numeric(finance_current_scenario_pb$pby_npv_6)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_7)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_8)+as.numeric(finance_current_scenario_pb$pby_npv_9)+as.numeric(finance_current_scenario_pb$pby_npv_10)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_11)+as.numeric(finance_current_scenario_pb$pby_npv_12)+as.numeric(finance_current_scenario_pb$pby_npv_13)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_14)+as.numeric(finance_current_scenario_pb$pby_npv_15),2)
                    write.xlsx(finance_current_scenario,"finance_current_scenario.xlsx")
                    
                    path_to_vbs_file = "test_pb.vbs"
                    print("4")
                    shell(shQuote(normalizePath(path_to_vbs_file)), "cscript", flag = "//nologo")
                    print("5")
                    print("AM I the error c??")
                    pb_excel<-read.xlsx("PB_excel.xlsm")
                    global_ads$df_data_ads_pb<-pb_excel
                    
                    global_ads$df_data_ads_pb_orig<-finance_current_scenario_pb
                    
                    #### Creating Download Report File
                    # spld- Scorce Part list dowlnoad file
                    spl_123<-merge(spl_123, finance_current_scenario_pb[ ,c("Part_Nbr","flat_pb","disc_pb")], by = "Part_Nbr")
                    
                    spl_123<-merge(spl_123, pb_excel[ ,c("Part_Nbr","ATB_Units","X210","X373")], by = "Part_Nbr")
                    
                    #### Creating Download Report File
                    # spld- Scorce Part list dowlnoad file
                    download_report <- spl_123
                    download_report$Selected_scenario <- "None"
                    download_report <- download_report %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                                  Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                                  Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                                  Selldown_Revenue,Selldown_Revenue_non_npv,
                                                                  Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                                  Total_Inventory,
                                                                  First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                                  Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                                  Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                                  Optimal_Storage_Cost,
                                                                  Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                                  Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost ,DEALER_PRICE_NO_DISCOUNT,
                                                                  Dealer_Price_OES.x,Dealer_Price_Allied_Export.x,WD_DEALER_PRICE_NO_DISCOUNT,Dealer_Price_IAM.x,Discount_oes_percent.x,Discount_allied_export_percent.x,
                                                                  Discount_iam_percent.x,LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                                  REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP, Selected_scenario,flat_pb,disc_pb,ATB_Units,X210)
                    
                    download_report_scenario_1 <-  spl_456 %>% select(Part_Nbr, NPV_Scenario_1,
                                                                      Selldown_NPV_Scenario_1,Selldown_NPV_non_npv_Scenario_1, Revenue_Scenario_1,Revenue_non_npv_Scenario_1,Part_Cost_Scenario_1,Material_cost_non_npv_Scenario_1,
                                                                      Setup_cost_Scenario_1 ,Total_transport_cost_Scenario_1,Total_transport_cost_non_npv_Scenario_1,Storage_Cost_Scenario_1,Storage_Cost_non_npv_Scenario_1,
                                                                      Total_process_cost_Scenario_1,  Total_process_cost_non_npv_Scenario_1,Package_cost_Scenario_1,Package_cost_non_npv_Scenario_1,
                                                                      Total_offsite_labor_cost_Scenario_1,Total_offsite_labor_cost_non_npv_Scenario_1,Total_offsite_transport_cost_Scenario_1,Total_offsite_transport_cost_non_npv_Scenario_1, 
                                                                      Additional_Cost_1,Selldown_Revenue_Scenario_1,Selldown_Revenue_non_npv_Scenario_1,
                                                                      Selldown_Material_cost_Scenario_1,Selldown_Material_cost_non_npv_Scenario_1,
                                                                      Selldown_Freight_cost_Scenario_1,Selldown_Freight_cost_non_npv_Scenario_1,Selldown_Storage_Cost_Scenario_1,Selldown_Storage_Cost_non_npv_Scenario_1, Selldown_Processing_Cost_Scenario_1,
                                                                      Selldown_Processing_Cost_non_npv_Scenario_1,Selldown_Packaging_Cost_Scenario_1,Selldown_Packaging_Cost_non_npv_Scenario_1,
                                                                      Total_Inventory,
                                                                      First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_1, LTB_Buy_Quantity_Scenario_1,
                                                                      Buy_Quantity_Scenario_1, Total_Forecast_Scenario_1,
                                                                      Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_Material_Cost_Scenario_1, Optimal_Setup_cost_Scenario_1,
                                                                      Optimal_Total_transport_cost_Scenario_1,
                                                                      Optimal_Total_offsite_transport_cost_Scenario_1, Optimal_Storage_Cost_Scenario_1, Optimal_Total_process_cost_Scenario_1,
                                                                      Optimal_Packaging_cost_Scenario_1,
                                                                      Optimal_Total_offsite_labor_cost_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1,
                                                                      Extended_purchase_cost_1,Proposed_Dealer_Price_1.y,Proposed_Wd_Price_1.y,Material_cost_Scenario_1,
                                                                      Moq_1,Standard_Pack_1,Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,MTH_SQ_FT_COST_PER_PEICE,
                                                                      OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                                      AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    
                    download_report_scenario_2 <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2,
                                                                     Selldown_NPV_Scenario_2,Selldown_NPV_non_npv_Scenario_2, Revenue_Scenario_2,Revenue_non_npv_Scenario_2,Part_Cost_Scenario_2,Material_cost_non_npv_Scenario_2,
                                                                     Setup_cost_Scenario_2 ,Total_transport_cost_Scenario_2,Total_transport_cost_non_npv_Scenario_2,Storage_Cost_Scenario_2,Storage_Cost_non_npv_Scenario_2,
                                                                     Total_process_cost_Scenario_2,  Total_process_cost_non_npv_Scenario_2,Package_cost_Scenario_2,Package_cost_non_npv_Scenario_2,
                                                                     Total_offsite_labor_cost_Scenario_2,Total_offsite_labor_cost_non_npv_Scenario_2,Total_offsite_transport_cost_Scenario_2,Total_offsite_transport_cost_non_npv_Scenario_2, 
                                                                     Additional_Cost_2,Selldown_Revenue_Scenario_2,Selldown_Revenue_non_npv_Scenario_2,
                                                                     Selldown_Material_cost_Scenario_2,Selldown_Material_cost_non_npv_Scenario_2,
                                                                     Selldown_Freight_cost_Scenario_2,Selldown_Freight_cost_non_npv_Scenario_2,Selldown_Storage_Cost_Scenario_2,Selldown_Storage_Cost_non_npv_Scenario_2, Selldown_Processing_Cost_Scenario_2,
                                                                     Selldown_Processing_Cost_non_npv_Scenario_2,Selldown_Packaging_Cost_Scenario_2,Selldown_Packaging_Cost_non_npv_Scenario_2,
                                                                     Total_Inventory,
                                                                     First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_2, LTB_Buy_Quantity_Scenario_2,
                                                                     Buy_Quantity_Scenario_2, Total_Forecast_Scenario_2,
                                                                     Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2,
                                                                     Optimal_Material_Cost_Scenario_2, Optimal_Setup_cost_Scenario_2,
                                                                     Optimal_Total_transport_cost_Scenario_2,
                                                                     Optimal_Total_offsite_transport_cost_Scenario_2, Optimal_Storage_Cost_Scenario_2,
                                                                     Optimal_Total_process_cost_Scenario_2,Optimal_Packaging_cost_Scenario_2, Optimal_Total_offsite_labor_cost_Scenario_2,
                                                                     Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2, Extended_purchase_cost_2,Proposed_Dealer_Price_2.y,Proposed_Wd_Price_2.y,Material_cost_Scenario_2,
                                                                     Moq_2,Standard_Pack_2,Setup_Cost_Scenario_2,Additional_Cost_Scenario_2,MTH_SQ_FT_COST_PER_PEICE,
                                                                     OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                                     AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    
                    global_current_sce_down$df_data_current <- download_report
                    global_scenario_1_down$df_data_scenario_1_down <- download_report_scenario_1
                    global_scenario_2_down$df_data_scenario_2_down <- download_report_scenario_2
                    print(Sys.time())        
                    ##### Report Download
                    output$downloadData <- downloadHandler(
                      filename = function() {
                        paste("ATB_Part_List",".xlsx", sep="")
                      },
                      content = function(file) {
                        #Downloading_function()
                        abc <- global_current_sce_down$df_data_current
                        abc <- data.frame(Part_Nbr = abc[,1],
                                          lapply(abc[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                          lapply(abc[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                          lapply(abc[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(abc[,53] , big.mark=",", digits=0, format="f"),formatC(abc[,54] , big.mark=",", digits=2, format="f"), ## change 786 
                                          lapply(abc[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                          lapply(abc[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                          paste("$", formatC(abc[,65] , big.mark=",", digits=0, format="f")),
                                          lapply(abc[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                          lapply(abc[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                          abc[,80:84], stringsAsFactors = FALSE)
                        
                        
                        colnames(abc) <- c("Part Number",
                                           "NPV", "Selldown NPV","Selldown Non NPV",
                                           "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                                           "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                                           "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                                           "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                                           "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                                           "Current Inventory",
                                           "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                                           "Total Purchase", "Total Sales", "Optimal NPV",
                                           "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                                           "Optimal Storage Cost",
                                           "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                                           "Optimal ATB Quantity","Optimal payback period", "Extended Optimal Buy Cost", "Extended Buy Qty Cost" ,"Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export",
                                           "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                                           "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                                           "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                                           "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)", "Selected Scenario","Simple payabck period","Discounted payback period","2 year payback ATB","2 year payback NPV")
                        
                        scenario_1 <- global_scenario_1_down$df_data_scenario_1_down
                        scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                                                 lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                                                 lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                                 lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 stringsAsFactors = FALSE)
                        
                        colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                                  "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                                  "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                                  "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                                  "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                                  "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                                  "Current Inventory",
                                                  "First Buy","Last Buy","Last Sale","Scrap Scenario-1", "Entered Buy Quantity Scenario-1",
                                                  "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                                  "Optimal NPV Scenario-1",
                                                  "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                                  "Optimal Offsite transport cost Scenario-1",
                                                  "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                                  "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                                  "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                                  "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
                        
                        scenario_2 <- global_scenario_2_down$df_data_scenario_2_down
                        scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],
                                                 lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                                                 lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                                 lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 stringsAsFactors = FALSE)
                        
                        colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                                  "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                                  "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                                  "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                                  "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                                  "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                                  "Current Inventory",
                                                  "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                                  "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                                  "Optimal NPV  Scenario-2",
                                                  "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                                  "Optimal Offsite transport cost Scenario-2",
                                                  "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                                  "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                                  "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                                  "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
                        
                        write.xlsx2(abc, file, sheetName="Current_Scenario", row.names=FALSE)
                        write.xlsx2(scenario_1, file , sheetName = "Scenario-1", append = TRUE, row.names = FALSE)
                        write.xlsx2(scenario_2, file , sheetName = "Scenario-2", append = TRUE, row.names = FALSE)
                        
                      }
                    )
                    
                    ##### Rendering info box to show num to parts uploaded
                    output$Total_Parts<-renderInfoBox({
                      inFile <- input$cost_file
                      if (is.null(inFile))
                        return(infoBox(
                          "Number of Parts", 0, icon = icon("cogs"),
                          color = "blue", fill = TRUE
                        ))
                      input1 <- global_ads$df_data_ads
                      
                      infoBox(
                        "Number of Parts", paste0( nrow(ATB_ADS)), icon = icon("cogs"),
                        color = "blue", fill = TRUE
                      )
                    })
                    
                    ##### Rendering ui of part number input for Part View
                    
                    output$ui <- renderUI({
                      part_info <- global_ads$df_data_ads
                      part_inform <- as.data.frame(part_info)
                      part_inform$X <- NULL
                      part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
                      selectInput("Part_Number", "Part Number", choices = as.vector(part_inform$PART_NBR))
                    })
                    
                    ## Management Report for Scenario-1
                    test <- read.csv('gm_id.csv', stringsAsFactors = FALSE)
                    management_report_1 <- global_scenario_1_down$df_data_scenario_1_down
                    management_report_1 <- management_report_1 %>% select(Part_Nbr, NPV_Scenario_1, Revenue_Scenario_1, LTB_Buy_Quantity_Scenario_1, Extended_purchase_cost_1,
                                                                          Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1)
                    
                    management_report_1 <- management_report_1[management_report_1$LTB_Buy_Quantity_Scenario_1 > 0,]
                    
                    incProgress(1/3, detail = "Preparing the tables")
                    
                    if(nrow(management_report_1) > 0)
                    {
                      
                      management_report_1$NPV_impact_1 <- as.numeric(management_report_1$Optimal_NPV_Scenario_1) - as.numeric(management_report_1$NPV_Scenario_1)
                      management_report_1$Revenue_impact_1 <- as.numeric(management_report_1$Optimal_Revenue_Scenario_1) - as.numeric(management_report_1$Revenue_Scenario_1)
                      management_report_1$Buy_impact_1 <- as.numeric(management_report_1$Extended_optimal_buy_cost_1) - as.numeric(management_report_1$Extended_purchase_cost_1)
                      colnames(management_report_1)[4] <- "Entered_Buy_Quantity_1"
                      colnames(management_report_1)[8] <- "Optimal_Quantity_Scenario_1"
                      management_report_1$Time_stamp_1 <- Sys.Date()
                      management_report_1$Day_1 <- day(Sys.Date())
                      management_report_1$Month_1 <- month(Sys.Date())
                      management_report_1$Year_1 <- year(Sys.Date())
                      
                      management_report_1$Part_Nbr <- as.character(str_pad(management_report_1$Part_Nbr, width=8, side="left", pad="0"))
                      management_report_1$Time_stamp_1 <- as.character(management_report_1$Time_stamp_1)
                      management_report_1$Day_1 <- as.character(management_report_1$Day_1)
                      management_report_1$Month_1 <- as.character(management_report_1$Month_1)
                      management_report_1$Year_1 <- as.character(management_report_1$Year_1)
                      
                      management_report_1$RAT_NUMBER <- "-"
                      management_report_1$GM_ID <-test$gm_id[1]
                      print("xx")
                      
                      dbWriteTable(conn = con,
                                   name = TEMP_MAN_REP_1_NAME,
                                   value = management_report_1, overwrite = TRUE, append = FALSE)
                      
                      dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_1 IN EXCLUSIVE MODE")
                      print("xx1")
                      sql_management_rep_1 <- paste("UPDATE MANAGEMENT_TABLE_1 A
                                                    SET (A.NPV_SCENARIO_1, A.REVENUE_SCENARIO_1, A.ENTERED_BUY_QUANTITY_1, A.EXTENDED_PURCHASE_COST_1, A.OPTIMAL_NPV_SCENARIO_1, A.OPTIMAL_REVENUE_SCENARIO_1,
                                                    A.OPTIMAL_QUANTITY_SCENARIO_1, A.EXTENDED_OPTIMAL_BUY_COST_1, A.NPV_IMPACT_1, A.REVENUE_IMPACT_1, A.BUY_IMPACT_1,
                                                    A.TIME_STAMP, A.DAY_1, A.MONTH_1, A.YEAR_1, A.RAT_NUMBER, A.GM_ID) =
                                                    (SELECT B.NPV_SCENARIO_1, B.REVENUE_SCENARIO_1, B.ENTERED_BUY_QUANTITY_1, B.EXTENDED_PURCHASE_COST_1,
                                                    B.OPTIMAL_NPV_SCENARIO_1, B.OPTIMAL_REVENUE_SCENARIO_1, B.OPTIMAL_QUANTITY_SCENARIO_1, B.EXTENDED_OPTIMAL_BUY_COST_1,
                                                    B.NPV_IMPACT_1,B.REVENUE_IMPACT_1, B.BUY_IMPACT_1, B.TIME_STAMP_1, B.DAY_1, B.MONTH_1, B.YEAR_1, B.RAT_NUMBER, B.GM_ID
                                                    FROM",
                                                    TEMP_MAN_REP_1_NAME, "B
                                                    WHERE
                                                    LPAD(A.PART_NBR, 8, '0')= LPAD(B.PART_NBR, 8, '0'))
                                                    WHERE EXISTS (SELECT NPV_SCENARIO_1
                                                    FROM",
                                                    TEMP_MAN_REP_1_NAME, "C WHERE
                                                    LPAD(C.PART_NBR, 8, '0')= LPAD(A.PART_NBR, 8, '0'))")
                      
                      value_management_rep_1 <- dbSendUpdate(con, sql_management_rep_1)
                      
                      
                      
                      dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_1 IN EXCLUSIVE MODE")
                      
                      sql_management_rep_insert_1 <- paste("INSERT INTO MANAGEMENT_TABLE_1
                                                           SELECT A.* FROM", TEMP_MAN_REP_1_NAME," A
                                                           WHERE A.PART_NBR NOT IN (SELECT DISTINCT PART_NBR FROM MANAGEMENT_TABLE_1)")
                      
                      value_management_rep_insert_1 <- dbSendUpdate(con, sql_management_rep_insert_1)
                      
                      
                      dbSendUpdate(con, paste("BEGIN
                                              EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_1_NAME , "';
                                              EXCEPTION
                                              WHEN OTHERS THEN NULL;
                                              END;"))
                      
                    }
                    print(Sys.time()) 
                    incProgress(1/3, detail = "Preparing the tables")
                    
                    ## Management Report for Scenario-2
                    management_report_2 <- global_scenario_2_down$df_data_scenario_2_down
                    management_report_2 <- management_report_2 %>% select(Part_Nbr, NPV_Scenario_2, Revenue_Scenario_2, LTB_Buy_Quantity_Scenario_2, Extended_purchase_cost_2,
                                                                          Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2, Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2)
                    
                    management_report_2 <- management_report_2[management_report_2$LTB_Buy_Quantity_Scenario_2 > 0,]
                    
                    if(nrow(management_report_2) > 0)
                    {
                      
                      management_report_2$NPV_impact_2 <- as.numeric(management_report_2$Optimal_NPV_Scenario_2) - as.numeric(management_report_2$NPV_Scenario_2)
                      management_report_2$Revenue_impact_2 <-  as.numeric(management_report_2$Optimal_Revenue_Scenario_2) -  as.numeric(management_report_2$Revenue_Scenario_2)
                      management_report_2$Buy_impact_2 <-  as.numeric(management_report_2$Extended_optimal_buy_cost_2) -  as.numeric(management_report_2$Extended_purchase_cost_2)
                      colnames(management_report_2)[4] <- "Entered_Buy_Quantity_2"
                      colnames(management_report_2)[8] <- "Optimal_Quantity_Scenario_2"
                      management_report_2$Time_stamp_2 <- Sys.Date()
                      management_report_2$Day_2 <- day(Sys.Date())
                      management_report_2$Month_2 <- month(Sys.Date())
                      management_report_2$Year_2 <- year(Sys.Date())
                      
                      management_report_2$Part_Nbr <- as.character(str_pad(management_report_2$Part_Nbr, width=8, side="left", pad="0"))
                      management_report_2$Time_stamp_2 <- as.character(management_report_2$Time_stamp_2)
                      management_report_2$Day_2 <- as.character(management_report_2$Day_2)
                      management_report_2$Month_2 <- as.character(management_report_2$Month_2)
                      management_report_2$Year_2 <- as.character(management_report_2$Year_2)
                      
                      
                      management_report_2$RAT_NUMBER <- "-"
                      management_report_2$GM_ID <- test$gm_id[1]
                      
                      dbWriteTable(conn = con,
                                   name = TEMP_MAN_REP_2_NAME,
                                   value = management_report_2, overwrite = TRUE)
                      
                      dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_2 IN EXCLUSIVE MODE")
                      
                      sql_management_rep_2 <- paste("UPDATE MANAGEMENT_TABLE_2 A
                                                    SET (A.NPV_SCENARIO_2, A.REVENUE_SCENARIO_2, A.ENTERED_BUY_QUANTITY_2, A.EXTENDED_PURCHASE_COST_2, A.OPTIMAL_NPV_SCENARIO_2, A.OPTIMAL_REVENUE_SCENARIO_2,
                                                    A.OPTIMAL_QUANTITY_SCENARIO_2, A.EXTENDED_OPTIMAL_BUY_COST_2, A.NPV_IMPACT_2, A.REVENUE_IMPACT_2, A.BUY_IMPACT_2,
                                                    A.TIME_STAMP, A.DAY_2, A.MONTH_2, A.YEAR_2, A.RAT_NUMBER, A.GM_ID) =
                                                    (SELECT B.NPV_Scenario_2, B.Revenue_Scenario_2, B.Entered_Buy_Quantity_2, B.Extended_purchase_cost_2,
                                                    B.Optimal_NPV_Scenario_2, B.Optimal_Revenue_Scenario_2, B.Optimal_Quantity_Scenario_2, B.Extended_optimal_buy_cost_2,
                                                    B.NPV_impact_2,B.Revenue_impact_2, B.Buy_impact_2, B.Time_stamp_2, B.Day_2, B.Month_2, B.Year_2, B.RAT_NUMBER, B.GM_ID
                                                    FROM",
                                                    TEMP_MAN_REP_2_NAME, "B
                                                    WHERE
                                                    LPAD(A.PART_NBR, 8, '0') = LPAD(B.Part_Nbr, 8, '0'))
                                                    WHERE EXISTS (SELECT NPV_SCENARIO_2
                                                    FROM",
                                                    TEMP_MAN_REP_2_NAME, "C WHERE
                                                    LPAD(C.PART_NBR, 8, '0')= LPAD(A.PART_NBR, 8, '0'))")
                      
                      value_management_rep_2 <- dbSendUpdate(con, sql_management_rep_2)
                      
                      dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_2 IN EXCLUSIVE MODE")
                      
                      sql_management_rep_insert_2 <- paste("INSERT INTO MANAGEMENT_TABLE_2
                                                           SELECT A.* FROM", TEMP_MAN_REP_2_NAME," A
                                                           WHERE A.PART_NBR NOT IN (SELECT DISTINCT PART_NBR FROM MANAGEMENT_TABLE_2)")
                      
                      value_management_rep_insert_2 <- dbSendUpdate(con, sql_management_rep_insert_2)
                      
                      dbSendUpdate(con, paste("BEGIN
                                              EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_2_NAME , "';
                                              EXCEPTION
                                              WHEN OTHERS THEN NULL;
                                              END;"))
                      
                    }
                    
                    print(Sys.time())    
                  }
                  ## END
                  
                  shinyjs::enable("go_list")
                  shinyjs::enable("tabBut")
                  
                    } else
                    {
                      showModal(modalDialog(
                        title = "Warning Message",
                        "Forecast data is not present for this part"
                      ))
                      shinyjs::enable("go_list")
                      dbRemoveTable(con, PART_data_name)
                      
                    }
                
                  } # close for progress bar
                  )
                  } else
                  {
                    must_be_present <- c("Part_Number", "Material_cost_Scenario_1", "Moq_1", "Standard_Pack_1", "Buy_Quantity_Scenario_1", "Setup_Cost_Scenario_1", "Additional_Cost_Scenario_1",
                                         "Proposed_Dealer_Price_1", "Proposed_Wd_Price_1", "Material_cost_Scenario_2", "Moq_2", "Standard_Pack_2", "Buy_Quantity_Scenario_2",
                                         "Setup_Cost_Scenario_2", "Additional_Cost_Scenario_2", "Proposed_Dealer_Price_2", "Proposed_Wd_Price_2")
                    
                    uploaded_file_colnames <- colnames(updated_cost_elements_data)
                    
                    columns_not_present <- must_be_present[!(must_be_present %in% uploaded_file_colnames)]
                    cols_not_present <- ""
                    
                    for( i in 1:length(columns_not_present))
                    {
                      cols_not_present <- paste(columns_not_present[i], cols_not_present, sep = ", ")
                    }
                    
                    print(columns_not_present)
                    
                    showModal(modalDialog(title="Attention!", tags$h3("The cost element file does not contain these columns or could have been spelled wrong- "), cols_not_present))
                    shinyjs::enable("go_list")
                    shinyjs::enable("tabBut")
                  }
            } else
            {
              showModal(modalDialog(title="Attention!", "Wrong input format, please select a csv"))
              shinyjs::enable("go_list")
              shinyjs::enable("tabBut")
            }
          
          } else if(is.null(updated_cost_elements))
          {
            showModal(modalDialog(
              title = "Warning Message",
              "First, upload the Cost element file and click Submit to get results"
            ))
            shinyjs::enable("go_list")
            shinyjs::enable("tabBut")
            
          }
        
        }
      if(input$sel == "Forecee_n_Cost")
      {
        shinyjs::disable("go_list")
        shinyjs::disable("tabBut")
        shinyjs::hide("hotable1")
        shinyjs::hide("cost_sce_1")
        shinyjs::hide("cost_sce_2")
        shinyjs::hide("analysis_sce_1")
        shinyjs::hide("analysis_sce_2")
        
        updated_cost_elements <- input$cost_file_all
        forecee_uploaded_file <- input$forecee_file
        
        if(!is.null(updated_cost_elements) & !is.null(forecee_uploaded_file)  )
        {
          if(((get.ext(forecee_uploaded_file$name ) %in% c(
            'text/csv',
            'text/comma-separated-values',
            'text/tab-separated-values',
            'text/plain',
            'csv',
            'tsv'
          )) & (get.ext(updated_cost_elements$name ) %in% c(
            'text/csv',
            'text/comma-separated-values',
            'text/tab-separated-values',
            'text/plain',
            'csv',
            'tsv'
          ))))
          
          {
            
            updated_cost_elements_data<- read.csv(updated_cost_elements$datapath, header = input$header)
            
            updated_cost_elements_data$part.order<-as.numeric(row.names(updated_cost_elements_data))
            global_PARTdata$cognos<-select(updated_cost_elements_data,Part_Number,part.order)
            colnames(global_PARTdata$cognos)<-c("PART_NBR","PART_ORDER")
            updated_cost_elements_data$part.order<-NULL
            
            updated_cost_elements_data <- as.data.frame(updated_cost_elements_data)
            
            forecee_uploaded_file_data<- read.csv(forecee_uploaded_file$datapath, header = input$header)
            forecee_uploaded_file_data <- as.data.frame(forecee_uploaded_file_data)
            
            if(("Part_Number" %in% colnames(updated_cost_elements_data)) & ("Material_cost_Scenario_1" %in% colnames(updated_cost_elements_data)) & ("Moq_1" %in% colnames(updated_cost_elements_data)) &
               ("Standard_Pack_1" %in% colnames(updated_cost_elements_data)) & ("Buy_Quantity_Scenario_1" %in% colnames(updated_cost_elements_data)) &
               ("Setup_Cost_Scenario_1" %in% colnames(updated_cost_elements_data)) & ("Additional_Cost_Scenario_1" %in% colnames(updated_cost_elements_data)) &
               ("Proposed_Dealer_Price_1" %in% colnames(updated_cost_elements_data)) & ("Proposed_Wd_Price_1" %in% colnames(updated_cost_elements_data)) &
               ("Material_cost_Scenario_2" %in% colnames(updated_cost_elements_data)) & ("Moq_2" %in% colnames(updated_cost_elements_data)) &
               ("Standard_Pack_2" %in% colnames(updated_cost_elements_data)) & ("Buy_Quantity_Scenario_2" %in% colnames(updated_cost_elements_data)) &
               ("Setup_Cost_Scenario_2" %in% colnames(updated_cost_elements_data)) & ("Additional_Cost_Scenario_2" %in% colnames(updated_cost_elements_data)) &
               ("Proposed_Dealer_Price_2" %in% colnames(updated_cost_elements_data)) & ("Proposed_Wd_Price_2" %in% colnames(updated_cost_elements_data)))
            {
              if("ACTUAL_SALES_CYTD" %in% colnames(forecee_uploaded_file_data) & "PROJECTED_SALES_CURR_YEAR" %in% colnames(forecee_uploaded_file_data) &
                 "FORECAST_YR_1" %in% colnames(forecee_uploaded_file_data) & "FORECAST_YR_30" %in% colnames(forecee_uploaded_file_data))
              {
                updated_cost_elements_data$Part_Number <- str_pad(updated_cost_elements_data$Part_Number, width=8, side="left", pad="0")
                names(forecee_uploaded_file_data)[names(forecee_uploaded_file_data) == 'HEAD'] <- 'PART_NBR'
                forecee_uploaded_file_data$Part_Number <- str_pad(forecee_uploaded_file_data$PART_NBR, width=8, side="left", pad="0")
                
                
                
                
                withProgress(message = 'Processing:', value = 0, {
                  
                  PART_data <- forecee_uploaded_file_data
                  Flag_PART_NBR_data <- 0
                  Flag_PART_data <- 0
                  
                  if("PART_NAME" %in% colnames(PART_data))
                  {
                    print("column present")
                  } else
                  {
                    PART_data$PART_NAME <- "Unknown"
                    PART_data$INVENTORY_LVL <- "Unknown"
                  }
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  ## Pulling Forcee Data from uploaded file
                  if("FORECAST_YR_1" %in% colnames(PART_data))
                  {
                    PART_NBR_data<- PART_data %>% filter(is.na(as.numeric(PART_data$FORECAST_YR_1)))
                    PART_NBR_data <- PART_NBR_data %>% select(PART_NBR)
                    PART_NBR_data$PART_NBR <- as.character(PART_NBR_data$PART_NBR)
                    PART_NBR_data$PART_NBR <- str_pad(PART_NBR_data$PART_NBR, width=8, side="left", pad="0")
                    
                    ## WRITING THE TABLE IN THE SERVER, THIS TABLE WILL DROPPED AT THE END OF THE PROCESSING
                    dbWriteTable(conn = con,
                                 name = PART_NBR_data_name,
                                 value = PART_NBR_data, overwrite = TRUE )
                    
                    Flag_PART_NBR_data <- 1
                    print("Uploaded")
                    
                    PART_NBR_ex <- PART_data %>% filter(!is.na(as.numeric(PART_data$FORECAST_YR_1)))
                    
                    PART_NBR_ex_forcee <- PART_NBR_ex %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                                 FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                                 FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                                 FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                                 FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                                 FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                                 FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                    
                    PART_NBR_ex_forcee$ACTUAL_SALES_CYTD[is.na(PART_NBR_ex_forcee$ACTUAL_SALES_CYTD)]<-0
                    PART_NBR_ex_forcee$PROJECTED_SALES_CURR_YEAR[is.na(PART_NBR_ex_forcee$PROJECTED_SALES_CURR_YEAR)]<-0
                    PART_NBR_ex_forcee$ACTUAL_SALES_CURR_YEAR_MINUS_2[is.na(PART_NBR_ex_forcee$ACTUAL_SALES_CURR_YEAR_MINUS_2)]<-0
                    PART_NBR_ex_forcee$ACTUAL_SALES_CURR_YEAR_MINUS_1[is.na(PART_NBR_ex_forcee$ACTUAL_SALES_CURR_YEAR_MINUS_1)]<-0
                    YR<-as.numeric(format(Sys.Date(),"%Y"))
                    data_forcee <- paste("SELECT HEAD AS PART_NBR,ACTUAL_SALES_CYTD, PROJECTED_SALES_CURR_YEAR,ACTUAL_SALES_CURR_YEAR_MINUS_2,ACTUAL_SALES_CURR_YEAR_MINUS_1
                                         FROM A_SCREAD.FORECAST_DATA@SC
                                         WHERE HEAD IN (SELECT PART_NBR FROM", PART_NBR_data_name," )")
                    
                    
                    ATB_1_Data <- dbGetQuery(con,data_forcee)
                    
                    
                    sql_atb_0_frocee<- paste("SELECT PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL,SUM(FORECAST_YR_1) AS FORECAST_YR_1,SUM(FORECAST_YR_2) AS FORECAST_YR_2 
                                          ,SUM(FORECAST_YR_3) AS FORECAST_YR_3,SUM(FORECAST_YR_4) AS FORECAST_YR_4,SUM(FORECAST_YR_5) AS FORECAST_YR_5,SUM(FORECAST_YR_6) AS FORECAST_YR_6
                                          ,SUM(FORECAST_YR_7) AS FORECAST_YR_7,SUM(FORECAST_YR_8) AS FORECAST_YR_8,SUM(FORECAST_YR_9) AS FORECAST_YR_9,SUM(FORECAST_YR_10) AS FORECAST_YR_10
                                          ,SUM(FORECAST_YR_11) AS FORECAST_YR_11,SUM(FORECAST_YR_12) AS FORECAST_YR_12,SUM(FORECAST_YR_13) AS FORECAST_YR_13,SUM(FORECAST_YR_14) AS FORECAST_YR_14
                                          ,SUM(FORECAST_YR_15) AS FORECAST_YR_15,SUM(FORECAST_YR_16) AS FORECAST_YR_16,SUM(FORECAST_YR_17) AS FORECAST_YR_17,SUM(FORECAST_YR_18) AS FORECAST_YR_18
                                          ,SUM(FORECAST_YR_19) AS FORECAST_YR_19,SUM(FORECAST_YR_20) AS FORECAST_YR_20,SUM(FORECAST_YR_21) AS FORECAST_YR_21,SUM(FORECAST_YR_22) AS FORECAST_YR_22
                                          ,SUM(FORECAST_YR_23) AS FORECAST_YR_23,SUM(FORECAST_YR_24) AS FORECAST_YR_24,SUM(FORECAST_YR_25) AS FORECAST_YR_25,SUM(FORECAST_YR_26) AS FORECAST_YR_26
                                          ,SUM(FORECAST_YR_27) AS FORECAST_YR_27,SUM(FORECAST_YR_28) AS FORECAST_YR_28,SUM(FORECAST_YR_29) AS FORECAST_YR_29,SUM(FORECAST_YR_30) AS FORECAST_YR_30 FROM 
                                          ( 
                                            SELECT P.PART_NBR,PD.PART_DESCRIPTION AS PART_NAME,PD.SVC_USE_LAST_YR AS APPLICATION_LY,PI.SALE_INV_QTY AS INVENTORY_LVL,
                                            CASE WHEN FY.YEAR=",YR+1," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_1,
                                            CASE WHEN FY.YEAR=",YR+2," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_2,
                                            CASE WHEN FY.YEAR=",YR+3," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_3,
                                            CASE WHEN FY.YEAR=",YR+4," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_4,
                                            CASE WHEN FY.YEAR=",YR+5," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_5,
                                            CASE WHEN FY.YEAR=",YR+6," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_6,
                                            CASE WHEN FY.YEAR=",YR+7," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_7,
                                            CASE WHEN FY.YEAR=",YR+8," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_8,
                                            CASE WHEN FY.YEAR=",YR+9," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_9,
                                            CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_10,
                                            CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_11,
                                            CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_12,
                                            CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_13,
                                            CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_14,
                                            CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_15,
                                            CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_16,
                                            CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_17,
                                            CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_18,
                                            CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_19,
                                            CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_20,
                                            CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_21,
                                            CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_22,
                                            CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_23,
                                            CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_24,
                                            CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_25,
                                            CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_26,
                                            CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_27,
                                            CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_28,
                                            CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_29,
                                            CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_30
                                            FROM FORECAST_DATA.PART P LEFT JOIN FORECAST_DATA.FORECAST F ON F.STD_PART_NBR = P.STD_PART_NBR
                                            LEFT JOIN FORECAST_DATA.FORECAST_YEAR FY ON FY.FORECAST_ID = F.FORECAST_ID
                                            LEFT JOIN FORECAST_DATA.PART_DETAIL PD ON PD.PART_ID = P.PART_ID
									                      		LEFT JOIN FORECAST_DATA.PART_INVENTORY PI ON PI.PART_ID = PI.PART_ID
                                            WHERE F.COUNTRY_ID='137' AND F.FORECAST_TYPE='ACTUAL' AND P.DELETE_IND='N' AND P.COUNTRY_ID='137' AND PD.DELETE_IND='N' AND PI.DELETE_IND='N'
                                            AND PART_NBR IN (SELECT PART_NBR FROM",PART_NBR_data_name,")GROUP BY P.PART_NBR,PD.PART_DESCRIPTION,PD.SVC_USE_LAST_YR,PI.SALE_INV_QTY,
                                              CASE WHEN FY.YEAR=",YR+1,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+2,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+3,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+4,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+5,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+6,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+7,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+8,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+9,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END) GROUP BY PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL")
                    PART_NBR_data_forcee_1 <- dbGetQuery(con,sql_atb_0_frocee)
                    
                    PART_NBR_data_forcee_1 <- merge(x= ATB_1_Data, y= PART_NBR_data_forcee_1, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                    
                    PART_NBR_data_forcee <- PART_NBR_data_forcee_1 %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                                              FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                                              FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                                              FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                                              FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                                              FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                                              FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                    
                    
                    ATB_1_Forcee <- rbind(PART_NBR_ex_forcee, PART_NBR_data_forcee)
                    dbRemoveTable(con, PART_NBR_data_name)
                    
                    print("if statement executed")
                    
                  } else  ## Pulling Forcee Data from server
                  {
                    print("else started")
                    
                    PART_data <- PART_data %>% select(PART_NBR)
                    dbWriteTable(conn = con,
                                 name = PART_data_name,
                                 value = PART_data,overwrite = TRUE )
                    
                    Flag_PART_data <- 1
                    YR<-as.numeric(format(Sys.Date(),"%Y"))
                    sql_atb_1_frocee<-  paste("SELECT HEAD AS PART_NBR,ACTUAL_SALES_CYTD, PROJECTED_SALES_CURR_YEAR,ACTUAL_SALES_CURR_YEAR_MINUS_2,ACTUAL_SALES_CURR_YEAR_MINUS_1
                                              FROM A_SCREAD.FORECAST_DATA@SC
                                              WHERE HEAD IN (SELECT PART_NBR FROM", PART_data_name,")")
                    
                    PART_data_num_1 <- dbGetQuery(con,sql_atb_1_frocee)
                    PART_data_num_1[is.na(PART_data_num_1)]<-0
                    dbWriteTable(conn = con,
                                 name = PART_data_num_name_1,
                                 value = PART_data_num_1, overwrite = TRUE, append = FALSE)
                    
                    sql_atb_0_frocee<- paste("SELECT PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL,SUM(FORECAST_YR_1) AS FORECAST_YR_1,SUM(FORECAST_YR_2) AS FORECAST_YR_2 
                                          ,SUM(FORECAST_YR_3) AS FORECAST_YR_3,SUM(FORECAST_YR_4) AS FORECAST_YR_4,SUM(FORECAST_YR_5) AS FORECAST_YR_5,SUM(FORECAST_YR_6) AS FORECAST_YR_6
                                          ,SUM(FORECAST_YR_7) AS FORECAST_YR_7,SUM(FORECAST_YR_8) AS FORECAST_YR_8,SUM(FORECAST_YR_9) AS FORECAST_YR_9,SUM(FORECAST_YR_10) AS FORECAST_YR_10
                                          ,SUM(FORECAST_YR_11) AS FORECAST_YR_11,SUM(FORECAST_YR_12) AS FORECAST_YR_12,SUM(FORECAST_YR_13) AS FORECAST_YR_13,SUM(FORECAST_YR_14) AS FORECAST_YR_14
                                          ,SUM(FORECAST_YR_15) AS FORECAST_YR_15,SUM(FORECAST_YR_16) AS FORECAST_YR_16,SUM(FORECAST_YR_17) AS FORECAST_YR_17,SUM(FORECAST_YR_18) AS FORECAST_YR_18
                                          ,SUM(FORECAST_YR_19) AS FORECAST_YR_19,SUM(FORECAST_YR_20) AS FORECAST_YR_20,SUM(FORECAST_YR_21) AS FORECAST_YR_21,SUM(FORECAST_YR_22) AS FORECAST_YR_22
                                          ,SUM(FORECAST_YR_23) AS FORECAST_YR_23,SUM(FORECAST_YR_24) AS FORECAST_YR_24,SUM(FORECAST_YR_25) AS FORECAST_YR_25,SUM(FORECAST_YR_26) AS FORECAST_YR_26
                                          ,SUM(FORECAST_YR_27) AS FORECAST_YR_27,SUM(FORECAST_YR_28) AS FORECAST_YR_28,SUM(FORECAST_YR_29) AS FORECAST_YR_29,SUM(FORECAST_YR_30) AS FORECAST_YR_30 FROM 
                                          ( 
                                            SELECT P.PART_NBR,PD.PART_DESCRIPTION AS PART_NAME,PD.SVC_USE_LAST_YR AS APPLICATION_LY,PI.SALE_INV_QTY AS INVENTORY_LVL,
                                            CASE WHEN FY.YEAR=",YR+1," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_1,
                                            CASE WHEN FY.YEAR=",YR+2," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_2,
                                            CASE WHEN FY.YEAR=",YR+3," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_3,
                                            CASE WHEN FY.YEAR=",YR+4," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_4,
                                            CASE WHEN FY.YEAR=",YR+5," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_5,
                                            CASE WHEN FY.YEAR=",YR+6," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_6,
                                            CASE WHEN FY.YEAR=",YR+7," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_7,
                                            CASE WHEN FY.YEAR=",YR+8," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_8,
                                            CASE WHEN FY.YEAR=",YR+9," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_9,
                                            CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_10,
                                            CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_11,
                                            CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_12,
                                            CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_13,
                                            CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_14,
                                            CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_15,
                                            CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_16,
                                            CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_17,
                                            CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_18,
                                            CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_19,
                                            CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_20,
                                            CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_21,
                                            CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_22,
                                            CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_23,
                                            CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_24,
                                            CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_25,
                                            CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_26,
                                            CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_27,
                                            CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_28,
                                            CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_29,
                                            CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_30
                                            FROM FORECAST_DATA.PART P LEFT JOIN FORECAST_DATA.FORECAST F ON F.STD_PART_NBR = P.STD_PART_NBR
                                            LEFT JOIN FORECAST_DATA.FORECAST_YEAR FY ON FY.FORECAST_ID = F.FORECAST_ID
                                            LEFT JOIN FORECAST_DATA.PART_DETAIL PD ON PD.PART_ID = P.PART_ID
										                      	LEFT JOIN FORECAST_DATA.PART_INVENTORY PI ON PI.PART_ID = P.PART_ID
                                            WHERE F.COUNTRY_ID='137' AND F.FORECAST_TYPE='ACTUAL' AND P.DELETE_IND='N' AND P.COUNTRY_ID='137' AND PD.DELETE_IND='N'
                                            AND PART_NBR IN (SELECT PART_NBR FROM",PART_data_name,")GROUP BY P.PART_NBR,PD.PART_DESCRIPTION,PD.SVC_USE_LAST_YR,PI.SALE_INV_QTY,
                                              CASE WHEN FY.YEAR=",YR+1,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+2,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+3,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+4,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+5,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+6,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+7,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+8,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+9,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END) GROUP BY PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL")
                    ATB_1_Forcee_1 <- dbGetQuery(con,sql_atb_0_frocee)
                    
                    ATB_1_Forcee_2 <- merge(x= PART_data_num_1, y= ATB_1_Forcee_1, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                    
                    ATB_1_Forcee <- ATB_1_Forcee_2 %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                              FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                              FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                              FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                              FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                              FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                              FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                    
                    ATB_1_Forcee$FORECAST_YR_1<-as.character(ATB_1_Forcee$FORECAST_YR_1)
                    ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
                  }
                  
                  if(nrow(ATB_1_Forcee) != nrow(PART_data))
                  {
                    Complete_Part_List <- PART_data %>% select(PART_NBR)
                    ATB_1_Forcee <- merge(x =  Complete_Part_List, y = ATB_1_Forcee, by.x = "PART_NBR", by.y = "PART_NBR", all.x = TRUE)
                    ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
                    print("TRUE state,ment")
                  }
                  
                  PART_data_num <- ATB_1_Forcee %>% select(PART_NBR)
                  PART_data_num$PART_NBR <- str_pad(PART_data_num$PART_NBR, width=8, side="left", pad="0")
                  PART_data_num$PART_NBR <- as.character(PART_data_num$PART_NBR)
                  
                  dbWriteTable(conn = con,
                               name = PART_data_num_name,
                               value = PART_data_num, overwrite = TRUE)
                  print("mapping last cost")
                  ## Mapping Last Cost
                  sql_atb_1_ser_mat <- paste("SELECT  PART_NBR, B.CAMPN_DTE, B.CAMPN_QTY,B.DECK_CD,
                                             B.LAST_COST,A.USB_CD, B.RB1_ALPHA_WHSE_CLASS, A.UNIT_LOAD_QTY,A.PART_REMOVAL_DT,
                                             A.PART_REINST_DT, A.MDSNG_PKG_QTY ,A.MCHDG_PACK_HEIGHT, A.MCHDG_PACK_LENGTH,A.MCHDG_PACK_WIDTH
                                             
                                             FROM
                                             DBO.SERVICE_PART@EUC A
                                             LEFT JOIN DBO.MATERIAL_PART@EUC B
                                             ON A.PART_NBR=B.MATRL_PART_NBR
                                             WHERE PART_NBR IN (SELECT LPAD(PART_NBR, 8, '0') FROM", PART_data_num_name, ")")
                  
                  
                  ATB_1_ser_mat <- dbGetQuery(con, sql_atb_1_ser_mat)
                  
                  ATB_1_1 <- ATB_1_Forcee
                  ATB_1_1$PART_NBR <- str_pad(ATB_1_1$PART_NBR, width=8, side="left", pad="0")
                  ATB_1_1$PART_NBR <- as.character(ATB_1_1$PART_NBR)
                  
                  
                  ATB_1 <- merge(x= ATB_1_1, y= ATB_1_ser_mat, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                  
                  ATB_1$PART_NBR <- str_pad(ATB_1$PART_NBR, width=8, side="left", pad="0")
                  ATB_1$PART_NBR <- as.character(ATB_1$PART_NBR)
                  
                  ATB_1$CAMPN_QTY <- as.character(ATB_1$CAMPN_QTY)
                  ATB_1$DECK_CD <- as.character(ATB_1$CAMPN_QTY)
                  ATB_1$LAST_COST <- as.character(ATB_1$LAST_COST)
                  ATB_1$MDSNG_PKG_QTY[is.na(ATB_1$MDSNG_PKG_QTY)] <- 0
                  ATB_1$MCHDG_PACK_HEIGHT[is.na(ATB_1$MCHDG_PACK_HEIGHT)] <- 0
                  ATB_1$MCHDG_PACK_LENGTH[is.na(ATB_1$MCHDG_PACK_LENGTH)] <- 0
                  ATB_1$MCHDG_PACK_WIDTH[is.na(ATB_1$MCHDG_PACK_WIDTH)] <- 0
                  ATB_1$UNIT_LOAD_QTY[is.na(ATB_1$UNIT_LOAD_QTY)] <- 0
                  
                  dbWriteTable(conn = con,
                               name = ATB_1_NAME ,
                               value = ATB_1,overwrite = TRUE)
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_2<- paste(" SELECT * FROM
                                    (
                                    SELECT A.*, NVL(B.ALPHA,'0') AS ALPHA, NVL(B.NUMERIC,'0') AS NUMERIC FROM", ATB_1_NAME, "A
                                    LEFT JOIN A_SCREAD.COMMCODE@SC B
                                    ON A.PART_NBR = B.PART
                                    ) ")

                  ATB_2 <- dbGetQuery(con, sql_ATB_2)
                  
                  dbWriteTable(conn = con,
                               name = ATB_2_NAME ,
                               value = ATB_2, overwrite = TRUE)
                  
                  print("ATB-2 Done")
                  
                  sql_ATB_3 <- paste("SELECT *
                                     FROM", ATB_2_NAME, "A
                                     
                                     LEFT JOIN
                                     
                                     (SELECT PN,
                                     (CASE WHEN CRLD IN (1,87,76,696,622,94,75,63,58,92,0) THEN CRLD
                                     ELSE 0
                                     END
                                     )AS CRLD,
                                     (CASE WHEN PROC IN (1,87,619,604,77,696,76,94,645,622,609,75,640,0,617) THEN PROC
                                     ELSE 0
                                     END
                                     )AS PROC FROM A_SCREAD.PART_DETAIL@SC
                                     )B
                                     
                                     ON A.PART_NBR=B.PN")
                  
                  ATB_3 <- dbGetQuery(con, sql_ATB_3)
                  ATB_3$PN[is.na(ATB_3$PN)] <- 0
                  ATB_3$CRLD[is.na(ATB_3$CRLD)] <- 0
                  ATB_3$PROC[is.na(ATB_3$PROC)] <- 0
                  
                  dbWriteTable(conn = con,
                               name = ATB_3_NAME ,
                               value = ATB_3, overwrite = TRUE)
                  
                  print("ATB-3 Done")
                  
                  sql_ATB_4 <- paste("SELECT * FROM
                                     (
                                     (SELECT * FROM", ATB_3_NAME, ")A
                                     LEFT JOIN
                                     (SELECT * FROM AVG_WEIGHTED_CUBE)B
                                     ON
                                     A.CRLD = B.FACILITY AND A.ALPHA = B.CCODE
                                     )")

                  ATB_4 <- dbGetQuery(con, sql_ATB_4)
                  dbWriteTable(conn = con,
                               name = ATB_4_NAME ,
                               value = ATB_4,overwrite = TRUE)
                  print("ATB-4 Done")
                  
                  sql_ATB_5 <- paste("SELECT A.*,NVL(AVG_LCPP,0) AS AVG_LCPP,NVL(AVG_PCPP,0)AS AVG_PCPP FROM
                                     (
                                     (SELECT * FROM ", ATB_4_NAME,")A
                                     LEFT JOIN
                                     (SELECT PART_NBR,FACILITY,ROUND(NVL(AVG(LABOR_COST_PER_PIECE),0),5) as AVG_LCPP ,ROUND(NVL(AVG(PACK_COST_PER_PIECE),0),5)as AVG_PCPP
                                     FROM(
                                     (SELECT PART_NBR,WHSE_NBR,STATN_CD FROM DBO.M8STACD_STANDARDS@EUC )B
                                     LEFT JOIN (SELECT * FROM PROCESSING_CPP)C
                                     ON
                                     B.WHSE_NBR = C.FACILITY
                                     AND B.STATN_CD = C.STATN_CD)
                                     WHERE C.FACILITY IS NOT NULL GROUP BY PART_NBR,FACILITY)D
                                     ON
                                     A.PART_NBR = D.PART_NBR
                                     AND A.PROC = D.FACILITY)"
                  )
                  
                  ATB_5 <- dbGetQuery(con, sql_ATB_5)
                  dbWriteTable(conn = con,
                               name = ATB_5_NAME ,
                               value = ATB_5, overwrite = TRUE)
                  print("ATB-5 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_6 <- paste("SELECT A.*, NVL(B.OVERALL_LABOR_COST_PER_PIECE,0) AS PC_LCPP, NVL(B.IB_LABOR_COST_PER_PIECE,0) AS PC_IB_LCPP, NVL(B.OB_LABOR_COST_PER_PIECE,0) AS PC_0B_LCPP
                                     --SELECT *
                                     FROM
                                     (
                                     (SELECT * FROM", ATB_5_NAME, ")A
                                     LEFT JOIN
                                     (SELECT * FROM PC_SERV_CPP)B
                                     ON
                                     A.CRLD=B.FACILITY AND A.ALPHA=B.COMMODITY_CODE
                                     )")

                  ATB_6 <- dbGetQuery(con, sql_ATB_6)
                  dbWriteTable(conn = con,
                               name = ATB_6_NAME ,
                               value = ATB_6, overwrite = TRUE)
                  print("ATB-6 Done")
                  
                  sql_ATB_7 <- paste("SELECT E.*, NVL (OFFSITE_LCPP,0) AS OFFSITE_LCPP
                                     FROM
                                     (
                                     SELECT * FROM
                                     (
                                     SELECT C.*, NVL(BC_LCPP,0) AS BC_LCPP FROM
                                     (
                                     SELECT A.*, NVL(PDC_LCPP,0) AS PDC_LCPP FROM
                                     (
                                     (SELECT * FROM", ATB_6_NAME, ") A
                                     LEFT JOIN
                                     (SELECT CC, PDC_LCPP FROM PDC_SERV_CPP)B
                                     ON A.ALPHA=B.CC
                                     )
                                     )C
                                     LEFT JOIN
                                     (SELECT CC, BC_LCPP FROM BC_SERV_CPP)D
                                     ON C.ALPHA=D.CC
                                     )
                                     )E
                                     LEFT JOIN
                                     (SELECT CC, OFFSITE_LCPP FROM OFFSITE_SERV_CPP)F
                                     ON E.ALPHA=F.CC")
                  
                  ATB_7 <- dbGetQuery(con, sql_ATB_7)
                  dbWriteTable(conn = con,
                               name = ATB_7_NAME ,
                               value = ATB_7, overwrite = TRUE)
                  print("ATB-7 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_8 <- paste("SELECT A.*, B.MTH_COST_PER_SQ_FT, B.UL_SQ_FT
                                     FROM
                                     (
                                     (SELECT * FROM", ATB_7_NAME, ")A
                                     LEFT JOIN
                                     (SELECT * FROM WAREHOUSE_COST_PER_SQFT)B
                                     ON A.CRLD=B.PLANT
                                     )")

                  ATB_8 <- dbGetQuery(con, sql_ATB_8)
                  
                  ATB_8$MTH_COST_PER_SQ_FT <- as.character(ATB_8$MTH_COST_PER_SQ_FT)
                  ATB_8$UL_SQ_FT <- as.character(ATB_8$UL_SQ_FT)
                  
                  dbWriteTable(conn = con,
                               name = ATB_8_NAME ,
                               value = ATB_8, overwrite = TRUE)
                  print("ATB-8 Done")
                  
                  
                  sql_ATB_9 <- paste("SELECT C.*, TRANSPORTATION_OFFSITES_PKGR, TRANSPORTATION_FROM_SOURCE, TRANSPORTATION_PDC_TO_DLR, TRANSPORTATION_TO_PDC, TRANSPORTATION_FACILITY_TO_DLR, TRANSPORTATION_BCARRIER_TO_DLR
                                     FROM
                                     (
                                     SELECT A.*, TRANS_OFFSITES_PKGR, TRANS_FROM_WC, MCD_TO_XDOCK, TRANS_TO_PDC, TRANS_PDC_TO_DLR, TRANS_FROM_SOURCE, XDOCK_OVERSIZE, XDOCK_STANDARD
                                     FROM
                                     (
                                     (SELECT * FROM", ATB_8_NAME, ") A
                                     LEFT JOIN
                                     (SELECT * FROM TRANS_COSTS_PER_CUBIC_FT)B
                                     ON
                                     A.CRLD = B.FACILITY
                                     )
                                     )C
                                     LEFT JOIN
                                     (SELECT * FROM TRANSPORTATION_COSTS)D
                                     ON C.CRLD=D.FACILITY AND C.ALPHA=D.CC")
                  
                  ATB_9 <- dbGetQuery(con, sql_ATB_9)
                  dbWriteTable(conn = con,
                               name = ATB_9_NAME ,
                               value = ATB_9, overwrite = TRUE)
                  print("ATB-9 Done")
                  
                  sql_ATB_10 <- paste("SELECT A.*,
                                      CASE WHEN MDSNG_PKG_QTY = 0 THEN 1
                                      ELSE MDSNG_PKG_QTY
                                      END AS ADJ_MDSNG_PKG_QTY
                                      FROM", ATB_9_NAME, "A")
                  
                  ATB_10 <- dbGetQuery(con, sql_ATB_10)
                  
                  ATB_10$PART_NBR <- as.character(ATB_10$PART_NBR)
                  ATB_10$PART_NBR <- str_pad(ATB_10$PART_NBR, width=8, side="left", pad="0")
                  
                  dbWriteTable(conn = con,
                               name = ATB_10_NAME ,
                               value = ATB_10, overwrite = TRUE)
                  print("ATB-10 Done")
                  
                  sql_ATB_11 <- paste("SELECT X.*, Y.LCC_PRODLINE,
                                      Y.LCC_SUBLINE,
                                      Y.DLR_CURR_DEALER_PRC,Y.NATL_PIECE_SLS_DLR_4, 
                                      Y.NATL_PIECE_SLS_COACH_4, Y.NATL_PIECE_SLS_OTD_4, Y.NATL_PIECE_SLS_EXPORT_4, Y.NATL_PIECE_SLS_WD_4,Y.NATL_PIECE_SLS_AFTMKT_4,Y.GMP_PART_NBR,Y.AC_DELCO
                                      FROM
                                      
                                      (
                                      SELECT B.*,
                                      (CASE WHEN UNIT_LOAD_QTY>0 THEN UNIT_LOAD_QTY
                                      ELSE 64/CUBIC_FT_PER_PIECE
                                      END) AS ADJ_UNIT_LOAD_QTY
                                      FROM
                                      (
                                      SELECT A.*,
                                      (CASE WHEN MCHDG_PACK_HEIGHT>0 AND MCHDG_PACK_LENGTH > 0 AND MCHDG_PACK_WIDTH >0
                                      THEN ROUND((MCHDG_PACK_HEIGHT*MCHDG_PACK_LENGTH*MCHDG_PACK_WIDTH/1728)/ADJ_MDSNG_PKG_QTY,12)
                                      ELSE TO_NUMBER(AVG_WEIGHT)/ADJ_MDSNG_PKG_QTY
                                      END) AS CUBIC_FT_PER_PIECE
                                      FROM", ATB_10_NAME, "A
                                      ) B
                                      ) X
                                      LEFT JOIN
                                      COMMON_WORK_NO_COST Y
                                      ON X.PART_NBR=Y.PART_NBR")
                  ATB_COST_ADS_EXAMPLE <- dbGetQuery(con, sql_ATB_11)
                  
                  ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE <- as.character(ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE)
                  ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY <- as.character(ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY)
                  ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC <- as.character(ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC)
                  
                  dbWriteTable(conn = con,
                               name = ATB_COST_ADS_EXAMPLE_NAME ,
                               value = ATB_COST_ADS_EXAMPLE, overwrite = TRUE)
                  print("ATB-11 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_12 <- paste("SELECT B.*,
                                      (CASE WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1>165 THEN 'Y'
                                      WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1<=165 THEN 'N'
                                      ELSE 'Y' END ) AS BULK_CR_FLAG
                                      FROM
                                      (SELECT A.*,
                                      ROUND((MTH_COST_PER_SQ_FT * UL_SQ_FT/ADJ_UNIT_LOAD_QTY), 10) AS MTH_SQ_FT_COST_PER_PEICE,
                                      ROUND(TRANS_PDC_TO_DLR*CUBIC_FT_PER_PIECE) AS OB_TRANS_CST_PP,
                                      
                                      (CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_FROM_WC)*CUBIC_FT_PER_PIECE)
                                      WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC!=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_OFFSITES_PKGR)*CUBIC_FT_PER_PIECE)
                                      ELSE (TRANS_FROM_SOURCE*CUBIC_FT_PER_PIECE) END )AS IB_TRANS_CST_PP,
                                      
                                      ROUND(2*(MCHDG_PACK_HEIGHT+MCHDG_PACK_WIDTH)) AS BULK_CR_CALC_1,
                                      
                                      (CASE WHEN MCHDG_PACK_HEIGHT>MCHDG_PACK_WIDTH AND MCHDG_PACK_HEIGHT>MCHDG_PACK_LENGTH THEN MCHDG_PACK_HEIGHT
                                      WHEN MCHDG_PACK_WIDTH>MCHDG_PACK_HEIGHT AND MCHDG_PACK_WIDTH>MCHDG_PACK_LENGTH THEN MCHDG_PACK_WIDTH
                                      ELSE MCHDG_PACK_LENGTH END)AS BULK_CR_CALC_2
                                      FROM", ATB_COST_ADS_EXAMPLE_NAME, "A
                                      ) B")

                  ATB_COST_ELEMENT_CAL_EXAPMLE <- dbGetQuery(con, sql_ATB_12)
                  
                  ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE)
                  ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP)
                  ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP)
                  ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1 <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1)
                  
                  dbWriteTable(conn = con,
                               name = ATB_COST_ELEMENT_NAME ,
                               value = ATB_COST_ELEMENT_CAL_EXAPMLE, overwrite = TRUE)
                  print("ATB-12 Done")
                  
                  sql_ATB_13 <- paste("SELECT X.*,
                                      (CASE WHEN USB_CD = 'U' THEN MAX_WEEKS_U
                                      ELSE MAX_WEEKS_SB
                                      END) AS MAX_WEEKS_SUPPLY
                                      FROM
                                      (
                                      SELECT P.*,NVL(Q.MWSBOS,99) AS MAX_WEEKS_U
                                      FROM
                                      (
                                      SELECT A.*,NVL(B.MWSBOS,99) AS MAX_WEEKS_SB
                                      FROM", ATB_COST_ELEMENT_NAME, "A
                                      LEFT JOIN
                                      MWS_USB_SB B
                                      ON A.ALPHA = B.ALPHA
                                      ) P
                                      LEFT JOIN MWS_USB_U Q
                                      ON P.PROC=Q.PROC
                                      ) X")

                  ATB_COST_MAX_SUPPLY_EXAMPLE <- dbGetQuery(con, sql_ATB_13)
                  dbWriteTable(conn = con,
                               name = ATB_COST_MAX_SUPPLY_NAME ,
                               value = ATB_COST_MAX_SUPPLY_EXAMPLE, overwrite = TRUE)
                  print("ATB-13 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_14 <- paste("SELECT A.*,
                                      CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' THEN 0
                                      WHEN RB1_ALPHA_WHSE_CLASS!='SP' AND BULK_CR_FLAG='Y' THEN (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_OVERSIZE)*CUBIC_FT_PER_PIECE
                                      ELSE (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_STANDARD)*CUBIC_FT_PER_PIECE
                                      END AS REDISTRIBUTION_COST_PP,
                                      
                                      CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.39*PC_LCPP)+(0.39*PDC_LCPP)
                                      WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.39*PC_LCPP)+(0.39*BC_LCPP)
                                      ELSE (0.39*PC_LCPP)
                                      END AS IB_LABOR_COST_PP,
                                      
                                      CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.61*PC_LCPP)+(0.61*PDC_LCPP)
                                      WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.61*PC_LCPP)+(0.61*BC_LCPP)
                                      ELSE (0.61*PC_LCPP)
                                      END AS OB_LABOR_COST_PP
                                      FROM", ATB_COST_MAX_SUPPLY_NAME, "A")
                  
                  ATB_COST_CAL_EXAMPLE <- dbGetQuery(con,sql_ATB_14)
                  
                  ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP <- as.character(ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP)
                  
                  dbWriteTable(conn = con,
                               name = ATB_COST_CAL_EXAMPLE_NAME ,
                               value = ATB_COST_CAL_EXAMPLE, overwrite = TRUE)
                  print("ATB-14 Done")
                  
                  sql_ATB_15 <- paste("  SELECT A.*, (IB_LABOR_COST_PP + OB_LABOR_COST_PP + AVG_LCPP + AVG_PCPP) AS ONSITE_PRCS_COST_PP,
                                      (OB_TRANS_CST_PP + IB_TRANS_CST_PP + REDISTRIBUTION_COST_PP) AS ONSITE_TRANS_COST_PER_PIECE,
                                      (TRANS_OFFSITES_PKGR*CUBIC_FT_PER_PIECE) AS OFFSITE_TRANS_COST_PP
                                      FROM",
                                      ATB_COST_CAL_EXAMPLE_NAME, "A")
                  
                  ATB_TRANS_PROCESS_COST_EXAMPLE <- dbGetQuery(con, sql_ATB_15)
                  
                  ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE)
                  ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP)
                  
                  dbWriteTable(conn = con,
                               name = ATB_TRANS_PROCESS_COST_NAME ,
                               value = ATB_TRANS_PROCESS_COST_EXAMPLE, overwrite = TRUE)
                  print("ATB-15 Done")
                  
                  sql_ads_1 <- paste("SELECT A.*, B.MINIMUM_BUY_QTY, B.STD_PACK_QTY, B.BUY_FREQ FROM",
                                     ATB_TRANS_PROCESS_COST_NAME, "A
                                     LEFT JOIN
                                     (SELECT MTL_PART_PART_NBR, MINIMUM_BUY_QTY, STD_PACK_QTY, BUY_FREQ
                                     FROM DBO.SOURCE@EUC
                                     WHERE PRIME_SOURCE_IND = 1) B
                                     ON A.PART_NBR = B.MTL_PART_PART_NBR")
                  
                  ATB_final_ads_1 <- dbGetQuery(con, sql_ads_1)
                  
                  ATB_final_ads_1$MINIMUM_BUY_QTY <- as.character(ATB_final_ads_1$MINIMUM_BUY_QTY)
                  ATB_final_ads_1$STD_PACK_QTY <- as.character(ATB_final_ads_1$STD_PACK_QTY)
                  ATB_final_ads_1$BUY_FREQ <- as.character(ATB_final_ads_1$BUY_FREQ)
                  
                  dbWriteTable(conn = con,
                               name = ATB_final_ads_1_name,
                               value = ATB_final_ads_1, overwrite = TRUE)
                  
                  print("ATB-16 Done")
                  
                  sql_ads <- paste("SELECT A.*, B.* FROM",
                                   ATB_final_ads_1_name," A
                                   LEFT JOIN MANDATORY_RETENTION_DB B
                                   ON A.PART_NBR = B.PART_NUMBER")
                  
                  ATB_final_ads <- dbGetQuery(con, sql_ads)
                  print("ATB-17 Done")
                  
                  sql_WD_price <- paste("SELECT PART_NUMBER, WD_WHSL_DIST_PRC FROM DBO.WD_PRICES@EUC
                                        WHERE PART_NUMBER IN (SELECT PART_NBR FROM" ,PART_data_num_name, ")")
                  
                  WD_price <- dbGetQuery(con, sql_WD_price)
                  
                  print("wd price taken")
                  
                  sql_Inv_level <- paste("SELECT MATRL_PART_NBR, NATNL_INV AS TOTAL_INVENTORY
                                         FROM DBO.MATERIAL_PART@EUC WHERE MATRL_PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")")
                  
                  Inv_level <- dbGetQuery(con, sql_Inv_level)
                  
                  ## Pulling Sales Distribution across different markets data
                  sql_market_distribution <- paste("SELECT PART_NBR,
                                                   CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                                   WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                                   WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                                   END AS CATEGORY_CODE,
                                                   SUM(YR1_SALES) AS YR1_SALES
                                                   FROM DBO.PART_SLS_TO_DATE@EUC
                                                   WHERE PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")","
                                                   GROUP BY
                                                   PART_NBR,
                                                   CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                                   WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                                   WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                                   END")
                  
                  market_distribution <- dbGetQuery(con, sql_market_distribution)
                  
                  market_list <- c("SALES_OES", "SALES_ALLIED_EXPORT", "SALES_IAM")
                  market_list <- as.data.frame(market_list)
                  colnames(market_list) <- c("CATEGORY_CODE")
                  part_list <- PART_data_num
                  colnames(part_list) <- c("PART_NBR")
                  cross_join <- merge(part_list, market_list)
                  cross_join$CATEGORY_CODE <- as.character(cross_join$CATEGORY_CODE)
                  
                  market_distribution <- merge(cross_join, market_distribution, by = c("PART_NBR", "CATEGORY_CODE"), all.x = TRUE)
                  
                  spread_market_distribution <- spread(market_distribution ,key = CATEGORY_CODE,value = YR1_SALES)
                  
                  spread_market_distribution$SALES_ALLIED_EXPORT <- ifelse(is.na(spread_market_distribution$SALES_ALLIED_EXPORT), 0, (spread_market_distribution$SALES_ALLIED_EXPORT))
                  spread_market_distribution$SALES_IAM <- ifelse(is.na(spread_market_distribution$SALES_IAM), 0, (spread_market_distribution$SALES_IAM))
                  spread_market_distribution$SALES_OES <- ifelse(is.na(spread_market_distribution$SALES_OES), 0, (spread_market_distribution$SALES_OES))
                  spread_market_distribution$COMPLETE_SAALES <- spread_market_distribution$SALES_ALLIED_EXPORT + spread_market_distribution$SALES_IAM + spread_market_distribution$SALES_OES
                  spread_market_distribution$ALLIED_EXPORT_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_ALLIED_EXPORT/spread_market_distribution$COMPLETE_SAALES))
                  spread_market_distribution$IAM_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_IAM/spread_market_distribution$COMPLETE_SAALES))
                  spread_market_distribution$OES_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_OES/spread_market_distribution$COMPLETE_SAALES))
                  
                  print("all data taken")
                  
                  # Merging WD preice
                  ATB_final_ads <- merge(ATB_final_ads, WD_price, by.x= "PART_NBR", by.y= "PART_NUMBER", all.x= TRUE)
                  
                  # Merging Inventory Level
                  ATB_final_ads <- merge(ATB_final_ads, Inv_level, by.x= "PART_NBR", by.y= "MATRL_PART_NBR", all.x= TRUE)
                  
                  ATB_final_ads <- merge(ATB_final_ads, spread_market_distribution, by.x= "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                  
                  print("merge done")
                  dbRemoveTable(con, PART_data_num_name)
                  
                  ATB_final_ads$ACTUAL_SALES_CYTD <- ifelse(is.na(ATB_final_ads$ACTUAL_SALES_CYTD), 0, ATB_final_ads$ACTUAL_SALES_CYTD)
                  ATB_final_ads$PROJECTED_SALES_CURR_YEAR <- ifelse(is.na(ATB_final_ads$PROJECTED_SALES_CURR_YEAR), 0, ATB_final_ads$PROJECTED_SALES_CURR_YEAR)
                  ATB_final_ads$TOTAL_INVENTORY <- ifelse(is.na(ATB_final_ads$TOTAL_INVENTORY), 0, ATB_final_ads$TOTAL_INVENTORY)
                  
                  ATB_final_ads$CURRENT_YEAR <- (ATB_final_ads$PROJECTED_SALES_CURR_YEAR - ATB_final_ads$ACTUAL_SALES_CYTD)
                  ATB_final_ads$CURRENT_YEAR <- ifelse(ATB_final_ads$CURRENT_YEAR < 0, 0, ATB_final_ads$CURRENT_YEAR)
                  
                  ATB_final_ads$WD_WHSL_DIST_PRC <- ifelse(is.na(ATB_final_ads$WD_WHSL_DIST_PRC), 0, ATB_final_ads$WD_WHSL_DIST_PRC)
                  
                  ATB_final_ads$PART_NBR<- str_pad(ATB_final_ads$PART_NBR, width=8, side="left", pad="0")
                  
                  ATB_final_ads$PL_SL <- paste(ATB_final_ads$LCC_PRODLINE, ATB_final_ads$LCC_SUBLINE,sep = "-")
                  PL_SL_LIST <- as.data.frame(ATB_final_ads$PL_SL)
                  colnames(PL_SL_LIST) <- c("PL_SL")
                  PL_SL_LIST <- as.data.frame(unique(PL_SL_LIST$PL_SL))
                  
                  colnames(PL_SL_LIST) <- c("PL_SL")
                  PL_SL_LIST$PL_SL <- as.character(PL_SL_LIST$PL_SL)
                  ATB_final_ads$DLR_SLS <- ifelse(ATB_final_ads$DLR_CURR_DEALER_PRC ==0 & ATB_final_ads$NATL_PIECE_SLS_DLR_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_COACH_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_EXPORT_4 ==0 ,
                                                  0, 
                                                  as.numeric( ATB_final_ads$NATL_PIECE_SLS_DLR_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_COACH_4) + 
                                                    as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4) + as.numeric(ATB_final_ads$NATL_PIECE_SLS_EXPORT_4))
                  ATB_final_ads$WD_SLS <- ifelse(ATB_final_ads$DLR_SLS ==0,as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4)+as.numeric(ATB_final_ads$NATL_PIECE_SLS_WD_4) +as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4),
                                                 as.numeric( ATB_final_ads$NATL_PIECE_SLS_WD_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4))
                  
                  
                  
                  dbWriteTable(conn = con,
                               name = PL_SL_LIST_ATB_NAME,
                               value = PL_SL_LIST, overwrite = TRUE, append = FALSE)
                  
                  sql_discount_market <- paste("SELECT PL_SL, MARKET, SUM(T_SLS) AS TOTAL_SALES, SUM(T_DISC) AS TOTAL_DISCOUNT
                                               FROM (SELECT (LPAD(PROD_LINE,2,0) || '-' || SUB_LINE) AS PL_SL,MARKET,T_SLS,T_DISC FROM ABM_DATA.ABM_WIDE_DETAIL_NONW_PN_MV_P)
                                               WHERE PL_SL IN (SELECT PL_SL FROM", PL_SL_LIST_ATB_NAME, ")
                                               GROUP BY PL_SL, MARKET")
                  
                  discount_market <- dbGetQuery(con, sql_discount_market)
                  
                  drop_table_PL_SL_LIST_ATB <- paste("BEGIN
                                                     EXECUTE IMMEDIATE 'DROP TABLE", PL_SL_LIST_ATB_NAME, "';
                                                     EXCEPTION
                                                     WHEN OTHERS THEN NULL;
                                                     END;")
                  
                  value_PL_SL_LIST_ATB <- dbSendUpdate(con, drop_table_PL_SL_LIST_ATB)
                  
                  market_list_for_discount <- c("ALLIED/EXPORT", "INDEP AFTERMKT", "ORIG EQUIP SRVC")
                  market_list_for_discount <- as.data.frame(market_list_for_discount)
                  colnames(market_list_for_discount) <- c("CATEGORY_CODE")
                  
                  cross_join_pl_sl <- merge(PL_SL_LIST, market_list_for_discount)
                  cross_join_pl_sl$CATEGORY_CODE <- as.character(cross_join_pl_sl$CATEGORY_CODE)
                  colnames(cross_join_pl_sl) <- c("PL_SL", "MARKET")
                  
                  discount_market <- merge(cross_join_pl_sl, discount_market, by = c("PL_SL", "MARKET"), all.x = TRUE)
                  
                  pl_sl_market_sales <- discount_market %>% select(MARKET, PL_SL, TOTAL_SALES)
                  pl_sl_market_discount <- discount_market %>% select(MARKET, PL_SL, TOTAL_DISCOUNT)
                  
                  spread_sales <- spread(pl_sl_market_sales ,key = MARKET,value = TOTAL_SALES)
                  spread_discount <- spread(pl_sl_market_discount, key = MARKET, value = TOTAL_DISCOUNT)
                  
                  spread_sales$`ALLIED/EXPORT` <- ifelse(is.na(spread_sales$`ALLIED/EXPORT`), 0, spread_sales$`ALLIED/EXPORT`)
                  spread_sales$`INDEP AFTERMKT` <- ifelse(is.na(spread_sales$`INDEP AFTERMKT`), 0, spread_sales$`INDEP AFTERMKT`)
                  spread_sales$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_sales$`ORIG EQUIP SRVC`), 0, spread_sales$`ORIG EQUIP SRVC`)
                  
                  colnames(spread_sales) <- c("PL_SL", "Sales_allied_export", "Sales_iam", "Sales_oes")
                  
                  spread_discount$`ALLIED/EXPORT` <- ifelse(is.na(spread_discount$`ALLIED/EXPORT`), 0, ( spread_discount$`ALLIED/EXPORT`))
                  spread_discount$`INDEP AFTERMKT` <- ifelse(is.na(spread_discount$`INDEP AFTERMKT`), 0, ( spread_discount$`INDEP AFTERMKT`))
                  spread_discount$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_discount$`ORIG EQUIP SRVC`), 0, ( spread_discount$`ORIG EQUIP SRVC`))
                  
                  colnames(spread_discount) <- c("PL_SL", "Discount_allied_export", "Discount_iam", "Discount_oes")
                  
                  discount_data_pl_sl_level <- merge(x = spread_sales, y = spread_discount, by.x = "PL_SL", by.y = "PL_SL", all = TRUE)
                  
                  discount_data_pl_sl_level$Discount_iam_percent <- ifelse(discount_data_pl_sl_level$Sales_iam == 0, 0, (discount_data_pl_sl_level$Discount_iam/discount_data_pl_sl_level$Sales_iam)* -100)
                  discount_data_pl_sl_level$Discount_oes_percent <- ifelse(discount_data_pl_sl_level$Sales_oes == 0, 0, (discount_data_pl_sl_level$Discount_oes/discount_data_pl_sl_level$Sales_oes)* -100)
                  discount_data_pl_sl_level$Discount_allied_export_percent <- ifelse(discount_data_pl_sl_level$Sales_allied_export == 0, 0, (discount_data_pl_sl_level$Discount_allied_export/discount_data_pl_sl_level$Sales_allied_export)* -100)
                  
                  ATB_final_ads <- merge(ATB_final_ads, discount_data_pl_sl_level, by.x = "PL_SL", by.y = "PL_SL", all.x = TRUE)
                  
                  ## Converting Back to numeric:
                  ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE <- as.numeric(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)
                  ATB_final_ads$OB_TRANS_CST_PP <- as.numeric(ATB_final_ads$OB_TRANS_CST_PP)
                  ATB_final_ads$IB_TRANS_CST_PP <- as.numeric(ATB_final_ads$IB_TRANS_CST_PP)
                  ATB_final_ads$BULK_CR_CALC_1 <- as.numeric(ATB_final_ads$BULK_CR_CALC_1)
                  ATB_final_ads$REDISTRIBUTION_COST_PP <- as.numeric(ATB_final_ads$REDISTRIBUTION_COST_PP)
                  ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE <- as.numeric(ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE)
                  ATB_final_ads$OFFSITE_TRANS_COST_PP <- as.numeric(ATB_final_ads$OFFSITE_TRANS_COST_PP)
                  ATB_final_ads$MINIMUM_BUY_QTY <- as.numeric(ATB_final_ads$MINIMUM_BUY_QTY)
                  ATB_final_ads$STD_PACK_QTY <- as.numeric(ATB_final_ads$STD_PACK_QTY)
                  ATB_final_ads$BUY_FREQ <- as.numeric(ATB_final_ads$BUY_FREQ)
                  ATB_final_ads$CAMPN_QTY <- as.numeric(ATB_final_ads$CAMPN_QTY)
                  ATB_final_ads$DECK_CD <- as.numeric(ATB_final_ads$CAMPN_QTY)
                  ATB_final_ads$LAST_COST <- as.numeric(ATB_final_ads$LAST_COST)
                  ATB_final_ads$CUBIC_FT_PER_PIECE <- as.numeric(ATB_final_ads$CUBIC_FT_PER_PIECE)
                  ATB_final_ads$ADJ_UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$ADJ_UNIT_LOAD_QTY)
                  #ATB_final_ads$MDSNG_PKG_QTY <- as.numeric(ATB_final_ads$MDSNG_PKG_QTY)
                  ATB_final_ads$MCHDG_PACK_HEIGHT <- as.numeric(ATB_final_ads$MCHDG_PACK_HEIGHT)
                  ATB_final_ads$MCHDG_PACK_LENGTH <- as.numeric(ATB_final_ads$MCHDG_PACK_LENGTH)
                  ATB_final_ads$MCHDG_PACK_WIDTH <- as.numeric(ATB_final_ads$MCHDG_PACK_WIDTH)
                  ATB_final_ads$UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$UNIT_LOAD_QTY)
                  ATB_final_ads$DLR_CURR_DEALER_PRC <- as.numeric(ATB_final_ads$DLR_CURR_DEALER_PRC)
                  ATB_final_ads$MTH_COST_PER_SQ_FT <- as.numeric(ATB_final_ads$MTH_COST_PER_SQ_FT)
                  ATB_final_ads$UL_SQ_FT <- as.numeric(ATB_final_ads$UL_SQ_FT)
                  
                  
                  ##--
                  
                  ATB_final_ads$DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$DLR_CURR_DEALER_PRC
                  ATB_final_ads$WD_DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$WD_WHSL_DIST_PRC
                  
                  ATB_final_ads$Dealer_Price_Allied_Export <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
                  ATB_final_ads$Dealer_Price_OES <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_oes_percent/100))
                  ATB_final_ads$Dealer_Price_IAM <- ATB_final_ads$WD_WHSL_DIST_PRC * (1 - (ATB_final_ads$Discount_iam_percent/100))
                  
                  ATB_final_ads$Proline_subline <- ATB_final_ads$PL_SL
                  ATB_final_ads$PL_SL <- NULL
                  
                  incProgress(1/7, detail = "Running Calculations")
                  print(nrow(ATB_final_ads))
                  if(nrow(ATB_final_ads) > 0)
                  {
                    
                    ATB_final_ads$Setup_cost <- 0
                    ATB_final_ads$Additional_cost <- 0
                    ATB_final_ads$FLAG <- 0
                    ATB_final_ads$Entered_Buy_Qty <- 0
                    ATB_final_ads$OES_FRACTION <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$OES_FRACTION)
                    ATB_final_ads$FLAG <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$FLAG)
                    
                    ATB_final_ads <- merge(ATB_final_ads, updated_cost_elements_data, by.x= "PART_NBR", by.y= "Part_Number", all.x = TRUE)
                    ATB_final_ads$MINIMUM_BUY_QTY <- ifelse(is.na(ATB_final_ads$MINIMUM_BUY_QTY), 0,ATB_final_ads$MINIMUM_BUY_QTY)
                    ATB_final_ads$STD_PACK_QTY <- ifelse(is.na(ATB_final_ads$STD_PACK_QTY), 0,ATB_final_ads$STD_PACK_QTY )
                    ATB_final_ads$BUY_FREQ <- ifelse(is.na(ATB_final_ads$BUY_FREQ ), 1,ATB_final_ads$BUY_FREQ )
                    
                    if(("Material_cost_Scenario_1" %in% colnames(ATB_final_ads)) | ("Moq_1" %in% colnames(ATB_final_ads)) |
                       ("Standard_Pack_1" %in% colnames(ATB_final_ads)) | ("Buy_Quantity_Scenario_1" %in% colnames(ATB_final_ads)) |
                       ("Setup_Cost_Scenario_1" %in% colnames(ATB_final_ads)) | ("Additional_Cost_Scenario_1" %in% colnames(ATB_final_ads)) |
                       ("Proposed_Dealer_Price_1" %in% colnames(ATB_final_ads)) | ("Proposed_Wd_Price_1" %in% colnames(ATB_final_ads)) |
                       ("Material_cost_Scenario_2" %in% colnames(ATB_final_ads)) | ("Moq_2" %in% colnames(ATB_final_ads)) |
                       ("Standard_Pack_2" %in% colnames(ATB_final_ads)) | ("Buy_Quantity_Scenario_2" %in% colnames(ATB_final_ads)) |
                       ("Setup_Cost_Scenario_2" %in% colnames(ATB_final_ads)) | ("Additional_Cost_Scenario_2" %in% colnames(ATB_final_ads)) |
                       ("Proposed_Dealer_Price_2" %in% colnames(ATB_final_ads)) | ("Proposed_Wd_Price_2" %in% colnames(ATB_final_ads)))
                    {
                      for(i in (1 : nrow(ATB_final_ads)))
                      {
                        if(("Material_cost_Scenario_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Material_cost_Scenario_1[i]))
                          {
                            ATB_final_ads$Material_cost_Scenario_1[i] <- ATB_final_ads$LAST_COST[i]
                          }
                        }
                        if(("Moq_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Moq_1[i]))
                          {
                            ATB_final_ads$Moq_1[i] <- ATB_final_ads$MINIMUM_BUY_QTY[i]
                            
                          }
                        }
                        if(("Standard_Pack_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Standard_Pack_1[i]))
                          {
                            ATB_final_ads$Standard_Pack_1[i] <- ATB_final_ads$STD_PACK_QTY[i]
                          }
                        }
                        if(("Buy_Quantity_Scenario_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Buy_Quantity_Scenario_1[i]))
                          {
                            ATB_final_ads$Buy_Quantity_Scenario_1[i] <- "Enter Buy Qty"
                          }
                        }
                        if(("Setup_Cost_Scenario_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Setup_Cost_Scenario_1[i]))
                          {
                            ATB_final_ads$Setup_Cost_Scenario_1[i] <- ATB_final_ads$Setup_cost[i]
                          }
                        }
                        if(("Additional_Cost_Scenario_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Additional_Cost_Scenario_1[i]))
                          {
                            ATB_final_ads$Additional_Cost_Scenario_1[i] <- ATB_final_ads$Additional_cost[i]
                          }
                        }
                        if(("Proposed_Dealer_Price_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Proposed_Dealer_Price_1[i]))
                          {
                            ATB_final_ads$Proposed_Dealer_Price_1[i] <- ATB_final_ads$DLR_CURR_DEALER_PRC[i]
                          }
                        }
                        if(("Proposed_Wd_Price_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Proposed_Wd_Price_1[i]))
                          {
                            ATB_final_ads$Proposed_Wd_Price_1[i] <- ATB_final_ads$WD_WHSL_DIST_PRC[i]
                          }
                        }
                        if(("Material_cost_Scenario_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Material_cost_Scenario_2[i]))
                          {
                            ATB_final_ads$Material_cost_Scenario_2[i] <- ATB_final_ads$LAST_COST[i]
                          }
                        }
                        if(("Moq_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Moq_2[i]))
                          {
                            ATB_final_ads$Moq_2[i] <- ATB_final_ads$MINIMUM_BUY_QTY[i]
                            
                          }
                        }
                        if(("Standard_Pack_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Standard_Pack_2[i]))
                          {
                            ATB_final_ads$Standard_Pack_2[i] <- ATB_final_ads$STD_PACK_QTY[i]
                          }
                        }
                        if(("Buy_Quantity_Scenario_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Buy_Quantity_Scenario_2[i]))
                          {
                            ATB_final_ads$Buy_Quantity_Scenario_2[i] <- "Enter Buy Qty"
                          }
                        }
                        if(("Setup_Cost_Scenario_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Setup_Cost_Scenario_2[i]))
                          {
                            ATB_final_ads$Setup_Cost_Scenario_2[i] <- ATB_final_ads$Setup_cost[i]
                          }
                        }
                        if(("Additional_Cost_Scenario_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Additional_Cost_Scenario_2[i]))
                          {
                            ATB_final_ads$Additional_Cost_Scenario_2[i] <- ATB_final_ads$Additional_cost[i]
                          }
                        }
                        if(("Proposed_Dealer_Price_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Proposed_Dealer_Price_2[i]))
                          {
                            ATB_final_ads$Proposed_Dealer_Price_2[i] <- ATB_final_ads$DLR_CURR_DEALER_PRC[i]
                          }
                        }
                        if(("Proposed_Wd_Price_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Proposed_Wd_Price_2[i]))
                          {
                            ATB_final_ads$Proposed_Wd_Price_2[i] <- ATB_final_ads$WD_WHSL_DIST_PRC[i]
                          }
                        }
                      }
                    }
                    
                    ATB_final_ads$Dealer_Price_Allied_Export_1 <- ATB_final_ads$Proposed_Dealer_Price_1 * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
                    ATB_final_ads$Dealer_Price_OES_1 <- ATB_final_ads$Proposed_Dealer_Price_1 * (1 - (ATB_final_ads$Discount_oes_percent/100))
                    ATB_final_ads$Dealer_Price_IAM_1 <- ATB_final_ads$Proposed_Wd_Price_1 * (1 - (ATB_final_ads$Discount_iam_percent/100))
                    
                    ATB_final_ads$Dealer_Price_Allied_Export_2 <- ATB_final_ads$Proposed_Dealer_Price_2 * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
                    ATB_final_ads$Dealer_Price_OES_2 <- ATB_final_ads$Proposed_Dealer_Price_2 * (1 - (ATB_final_ads$Discount_oes_percent/100))
                    ATB_final_ads$Dealer_Price_IAM_2 <- ATB_final_ads$Proposed_Wd_Price_2 * (1 - (ATB_final_ads$Discount_iam_percent/100))
                    
                    ### Filtering parts with no data
                    
                    all_part <- as.data.frame(PART_data$PART_NBR)
                    
                    present_part <- as.data.frame(ATB_final_ads$PART_NBR)
                    
                    colnames(all_part)[1] <- "PART_NBR"
                    colnames(present_part)[1] <- "PART_NBR"
                    all_part$PART_NBR <- str_pad(all_part$PART_NBR, width=8, side="left", pad="0")
                    present_part$PART_NBR <- str_pad(present_part$PART_NBR, width=8, side="left", pad="0")
                    
                    ATB_ads_filtered_part_internal <- subset(all_part, !(PART_NBR %in% present_part$PART_NBR))
                    
                    ATB_ads_filtered_part <- ATB_final_ads[which((is.na(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)) | (is.na(ATB_final_ads$FORECAST_YR_1)) | (is.na(ATB_final_ads$LAST_COST))),]
                    
                    if(nrow(ATB_ads_filtered_part_internal) > 0 & nrow(ATB_ads_filtered_part) > 0)
                    {
                      ATB_ads_filtered_part_internal$Reason <- "Forcee data not present"
                      ATB_ads_filtered_part$Reason <- ifelse(is.na(ATB_ads_filtered_part$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part$LAST_COST), "Last Cost not present", "Forcee data not present"))
                      ATB_ads_filtered_part <- ATB_ads_filtered_part %>% select(PART_NBR, Reason)
                      ATB_ads_filtered_part <- rbind(ATB_ads_filtered_part, ATB_ads_filtered_part_internal)
                      
                      
                    } else if(nrow(ATB_ads_filtered_part_internal) > 0 & nrow(ATB_ads_filtered_part) == 0)
                    {
                      ATB_ads_filtered_part_internal$Reason <- "Forcee data not present"
                      ATB_ads_filtered_part <- ATB_ads_filtered_part_internal
                      
                    } else if(nrow(ATB_ads_filtered_part_internal) == 0 & nrow(ATB_ads_filtered_part) > 0)
                    {
                      ATB_ads_filtered_part$Reason <- ifelse(is.na(ATB_ads_filtered_part$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part$LAST_COST), "Last Cost not present", "Forcee data not present"))
                      ATB_ads_filtered_part <- ATB_ads_filtered_part %>% select(PART_NBR, Reason)
                      
                    } else
                    {
                      ATB_ads_filtered_part <- data.frame()
                    }
                    
                    
                    if(nrow(ATB_ads_filtered_part) > 0)
                    {
                      
                      output$modal_table <- renderDataTable({
                        datatable(ATB_ads_filtered_part, rownames = FALSE,
                                  options = list(scrollX=TRUE, scrollY='200px',
                                                 lengthMenu = c(5, 25, 50),
                                                 paging=FALSE, searching=FALSE))
                      })
                      
                      showModal(modalDialog(
                        title = "Summary Report",
                        DT::dataTableOutput('modal_table')
                      ))
                      
                      shinyjs::enable("download_filtered_list")
                      output$download_filtered_list <- downloadHandler(
                        filename = function() {
                          paste("Filtered_Part_List", ".csv", sep="")
                        },
                        content = function(file) {
                          abc <- ATB_ads_filtered_part
                          
                          write.csv(abc, file, row.names = FALSE)
                          
                        }
                      )
                      
                    }
                    
                    
                    ATB_final_ads$MINIMUM_BUY_QTY <- ifelse(is.na(ATB_final_ads$MINIMUM_BUY_QTY), 0,ATB_final_ads$MINIMUM_BUY_QTY)
                    ATB_final_ads$STD_PACK_QTY <- ifelse(is.na(ATB_final_ads$STD_PACK_QTY), 0,ATB_final_ads$STD_PACK_QTY )
                    ATB_final_ads$BUY_FREQ <- ifelse(is.na(ATB_final_ads$BUY_FREQ ), 1,ATB_final_ads$BUY_FREQ )
                    
                    ## Negative Inventory being made zero
                    ATB_final_ads$TOTAL_INVENTORY <- ifelse(ATB_final_ads$TOTAL_INVENTORY < 0, 0, ATB_final_ads$TOTAL_INVENTORY)
                    
                    print("filtered")
                    ATB_final_ads$X <- NULL
                    
                    ## Converting characters\factors into numeric
                    ATB_final_ads <- as.data.frame(ATB_final_ads)
                    
                    for(i in (4:35)){
                      ATB_final_ads[,i] <- as.numeric(ATB_final_ads[,i])
                    }
                    
                    ATB_final_ads[is.na(ATB_final_ads)] <- 0
                    ATB_final_ads$Buy_Quantity_Scenario_1 <- as.numeric(as.character(ATB_final_ads$Buy_Quantity_Scenario_1))
                    ATB_final_ads$Buy_Quantity_Scenario_2 <- as.numeric(as.character(ATB_final_ads$Buy_Quantity_Scenario_2))
                    part_ads <- ATB_final_ads
                    print("lala")
                    drop_table_PART_data_name <- paste("BEGIN
                                                       EXECUTE IMMEDIATE 'DROP TABLE", PART_data_name, "';
                                                       EXCEPTION
                                                       WHEN OTHERS THEN NULL;
                                                       END;")
                    print("dropped")
                    value_PART_data_name <- dbSendUpdate(con, drop_table_PART_data_name)
                    print("updated")
                    drop_table_ATB_final_ads_1_name <- paste("BEGIN
                                                             EXECUTE IMMEDIATE 'DROP TABLE", ATB_final_ads_1_name, "';
                                                             EXCEPTION
                                                             WHEN OTHERS THEN NULL;
                                                             END;")
                    print("final table drop")
                    value_ATB_final_ads_1_name <- dbSendUpdate(con, drop_table_ATB_final_ads_1_name)
                    print("final update")
                    #write.csv(ATB_final_ads, file = "ATB_ads.csv")
                    
                    global_ads$df_data_ads <- ATB_final_ads
                    ATB_ADS <- ATB_final_ads
                    
                    ################# 1. Code for Original Scenario: Current:
                    
                    Original_current <- Current(ATB_ADS)
                    
                    ################# 2. Code for Scenario-1 Current:
                    if (!is.null(updated_cost_elements))
                    {
                      Scenario_1_current <- Current_Scenario_1(ATB_ADS)
                    }
                    
                    ################# 3. Code for Original Scenario- Optimal
                    Original_optimal <- Optimal(ATB_ADS)
                    
                    print("Original Optimal done")
                    
                    
                    if (!is.null(updated_cost_elements))
                    {
                      ################# 4. Code for Scenario-1 Optimal
                      
                      Scenario_1_optimal <- Optimal_Scenario_1(ATB_ADS)
                      
                      print("scenario-1 opt done")
                      
                      ################# 5. Code for Scenario-2 Current
                      
                      Scenario_2_current <- Current_Scenario_2(ATB_ADS)
                      
                      ################# 6. Code for Scenario-2 Optimal
                      
                      Scenario_2_optimal <- Optimal_Scenario_2(ATB_ADS)
                      
                      print("scenario-2 opt done")
                    }
                    
                    ################# 7. Code for Selldown Calculation
                    Selldown_NPV <- Selldown(ATB_ADS)
                    
                    ################# 8. Code for Selldown Calculation Scenario-1
                    if (!is.null(updated_cost_elements))
                    {
                      
                      Selldown_NPV_Scenario_1 <- Selldown_Scenario_1(ATB_ADS)
                      
                      
                      ################# 9. Code for Selldown Calculation Scenario-2
                      
                      Selldown_NPV_Scenario_2 <- Selldown_Scenario_2(ATB_ADS)
                      
                      
                    }
                    ###creating columns from ATB_final_ads
                    ATB_ads_per_piece <- ATB_ADS %>% select(PART_NBR,DEALER_PRICE_NO_DISCOUNT,Discount_oes_percent,Discount_allied_export_percent,
                                                            Dealer_Price_OES,Dealer_Price_Allied_Export,WD_DEALER_PRICE_NO_DISCOUNT,Discount_iam_percent,Dealer_Price_IAM,
                                                            LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                            REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    
                    colnames(ATB_ads_per_piece)[1] <- "Part_Nbr"
                    print("ATB_ads_per_piece")
                    
                    ATB_ads_per_piece_1 <- ATB_ADS %>% select(PART_NBR,Proposed_Dealer_Price_1,Proposed_Wd_Price_1,Material_cost_Scenario_1,
                                                              Moq_1,Standard_Pack_1,Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,MTH_SQ_FT_COST_PER_PEICE,
                                                              OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                              AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    colnames(ATB_ads_per_piece_1)[1] <- "Part_Nbr"
                    
                    ATB_ads_per_piece_2 <- ATB_ADS %>% select(PART_NBR,Proposed_Dealer_Price_2,Proposed_Wd_Price_2,Material_cost_Scenario_2,
                                                              Moq_2,Standard_Pack_2,Setup_Cost_Scenario_2,Additional_Cost_Scenario_2,MTH_SQ_FT_COST_PER_PEICE,
                                                              OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                              AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    colnames(ATB_ads_per_piece_2)[1] <- "Part_Nbr"
                    
                    ### Creating table for cost comparison:
                    orig_cost <- ATB_ADS %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC)
                    orig_cost <- orig_cost %>% mutate_at(vars(-PART_NBR),funs(round(.,2)))
                    
                    ##### Output of Cost comparison table
                    output$Cost_comp_1 <- renderHotable({
                      orig_cost <- data.frame(Part_Nbr = orig_cost[,1], paste("$", formatC(orig_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                              lapply(orig_cost[,3:4], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                              lapply(orig_cost[,5:8], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
                      
                      colnames(orig_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Setup Cost", "Additional Cost", "Dealer Price", "WD Price")
                      orig_cost
                    }, readOnly = TRUE)
                    
                    
                    if (!is.null(updated_cost_elements))
                    {
                      
                      scenario_1_cost <- ATB_ADS %>% select(PART_NBR,Material_cost_Scenario_1,Moq_1,Standard_Pack_1,Buy_Quantity_Scenario_1,
                                                            Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,Proposed_Dealer_Price_1,Proposed_Wd_Price_1)
                      scenario_1_cost <- scenario_1_cost %>% mutate_at(vars(-PART_NBR),funs(round(.,2)))
                      
                      reflect_cost_scenario_1$df_data_cost_scenario_1 <- scenario_1_cost
                      
                      scenario_2_cost <- ATB_ADS %>% select(PART_NBR, Material_cost_Scenario_2, Moq_2, Standard_Pack_2, Buy_Quantity_Scenario_2,
                                                            Setup_Cost_Scenario_2, Additional_Cost_Scenario_2, Proposed_Dealer_Price_2, Proposed_Wd_Price_2)
                      scenario_2_cost <- scenario_2_cost %>% mutate_at(vars(-PART_NBR),funs(round(.,2)))
                      
                      reflect_cost_scenario_2$df_data_cost_scenario_2 <- scenario_2_cost
                      
                      shinyjs::show("cost_sce_1")
                      shinyjs::show("cost_sce_2")
                      shinyjs::show("analysis_sce_1")
                      shinyjs::show("analysis_sce_2")
                      
                      
                      output$cost_sce_1 <- renderHotable({
                        
                        scenario_1_cost <- scenario_1_cost %>% select(PART_NBR,Material_cost_Scenario_1,Moq_1,Standard_Pack_1, Buy_Quantity_Scenario_1,
                                                                      Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,Proposed_Dealer_Price_1,Proposed_Wd_Price_1)
                        
                        scenario_1_cost <- data.frame(PART_NBR = scenario_1_cost[,1], paste("$", formatC(scenario_1_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                                      lapply(scenario_1_cost[,3:5], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                      lapply(scenario_1_cost[,6:9], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
                        
                        colnames(scenario_1_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Buy Quantity", "Setup Cost",
                                                       "Additional Cost","Proposed Dealer Price", "Proposed WD Price")
                        
                        scenario_1_cost
                      }, readOnly = TRUE)
                      
                      output$cost_sce_2 <- renderHotable({
                        
                        scenario_2_cost <- scenario_2_cost %>% select(PART_NBR, Material_cost_Scenario_2, Moq_2, Standard_Pack_2, Buy_Quantity_Scenario_2,
                                                                      Setup_Cost_Scenario_2, Additional_Cost_Scenario_2, Proposed_Dealer_Price_2, Proposed_Wd_Price_2)
                        
                        scenario_2_cost <- data.frame(PART_NBR = scenario_2_cost[,1], paste("$", formatC(scenario_2_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                                      lapply(scenario_2_cost[,3:5], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                      lapply(scenario_2_cost[,6:9], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
                        
                        colnames(scenario_2_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Buy Quantity", "Setup Cost",
                                                       "Additional Cost","Proposed Dealer Price", "Proposed WD Price")
                        
                        scenario_2_cost
                      }, readOnly = TRUE)
                      
                    }
                    
                    
                    #### Creating table for Part List Analysis Result
                    
                    #  1. Original: Original_current, Original_optimal, Selldown_NPV
                    #  2. Scenario-1: Scenario_1_current, Scenario_1_optimal, Selldown_NPV_Scenario_1
                    #  3. Scenario_2: Scenario_2_current, Scenario_2_optimal, Selldown_NPV_Scenario_2
                    
                    
                    ## Creating intermediate tables to get proper format
                    # spl- Source Part List
                    
                    spl_1 <- Original_current
                    spl_1$Part_Nbr <- str_pad(spl_1$Part_Nbr, width=8, side="left", pad="0")
                    spl_2 <- Original_optimal
                    spl_2$Part_Nbr <- str_pad(spl_2$Part_Nbr, width=8, side="left", pad="0")
                    spl_3 <- Selldown_NPV
                    spl_3$Part_Nbr <- str_pad(spl_3$Part_Nbr, width=8, side="left", pad="0")
                    
                    spl_12 <- merge(spl_1, spl_2, by = "Part_Nbr")
                    
                    spl_123 <- merge(spl_12, spl_3, by = "Part_Nbr")
                    spl_123 <- merge(spl_123, ATB_ads_per_piece, by = "Part_Nbr")
                    
                    spl_123_result <- spl_123 %>% select(Part_Nbr, NPV, Selldown_NPV, Revenue, Revenue_non_npv,Optimal_NPV,Optimal_ATB_Quantity, Total_Forecast)
                    
                    write.csv(spl_123_result, file = "spl_123_result_s1.csv", row.names = FALSE)
                    write.csv(spl_123_result, file = "spl_123_result_s2.csv", row.names = FALSE)
                    
                    
                    output$analysis_original <- renderHotable({
                      spl_123_result$Part_Nbr <- str_pad(spl_123_result$Part_Nbr, width=8, side="left", pad="0")
                      spl_123_result <- data.frame(Part_Nbr = spl_123_result[,1], lapply(spl_123_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                   formatC(spl_123_result[,7] , big.mark=",", digits=0, format="f"), formatC(spl_123_result[,8] , big.mark=",", digits=0, format="f"), stringsAsFactors = FALSE)
                      
                      colnames(spl_123_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
                      
                      spl_123_result
                    })
                    
                    
                    if (!is.null(updated_cost_elements))
                    {
                      spl_4 <- Scenario_1_current
                      spl_4$Part_Nbr <- str_pad(spl_4$Part_Nbr, width=8, side="left", pad="0")
                      spl_5 <- Scenario_1_optimal
                      spl_5$Part_Nbr <- str_pad(spl_5$Part_Nbr, width=8, side="left", pad="0")
                      spl_6 <- Selldown_NPV_Scenario_1
                      spl_6$Part_Nbr <- str_pad(spl_6$Part_Nbr, width=8, side="left", pad="0")
                      spl_7 <- Scenario_2_current
                      spl_7$Part_Nbr <- str_pad(spl_7$Part_Nbr, width=8, side="left", pad="0")
                      spl_8 <- Scenario_2_optimal
                      spl_8$Part_Nbr <- str_pad(spl_8$Part_Nbr, width=8, side="left", pad="0")
                      spl_9 <- Selldown_NPV_Scenario_2
                      spl_9$Part_Nbr <- str_pad(spl_9$Part_Nbr, width=8, side="left", pad="0")
                      
                      
                      
                      spl_45 <- merge(spl_4, spl_5, by = "Part_Nbr")
                      spl_456 <- merge(spl_45, spl_6, by = "Part_Nbr")
                      spl_456 <- merge(spl_456, ATB_ads_per_piece_1, by = "Part_Nbr")
                      
                      spl_78 <- merge(spl_7, spl_8, by = "Part_Nbr")
                      spl_789 <- merge(spl_78, spl_9, by = "Part_Nbr")
                      spl_789 <- merge(spl_789, ATB_ads_per_piece_2, by = "Part_Nbr")
                      
                      spl_123456 <- merge(spl_123, spl_456, by = "Part_Nbr")
                      spl_123456789 <- merge(spl_123456, spl_789, by = "Part_Nbr")
                      
                      spl_456_result <- spl_456 %>% select(Part_Nbr, NPV_Scenario_1, Selldown_NPV_Scenario_1, Revenue_Scenario_1, Revenue_non_npv_Scenario_1,
                                                           Optimal_NPV_Scenario_1, Optimal_ATB_Quantity_Scenario_1,total_forecast)
                      
                      spl_789_result <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2, Selldown_NPV_Scenario_2, Revenue_Scenario_2, Revenue_non_npv_Scenario_2,
                                                           Optimal_NPV_Scenario_2, Optimal_ATB_Quantity_Scenario_2, total_forecast)
                      
                      write.csv(spl_456_result, file = "spl_456_result.csv", row.names = FALSE)
                      write.csv(spl_789_result, file = "spl_789_result.csv", row.names = FALSE)
                      
                      
                      output$analysis_sce_1 <- renderHotable({
                        spl_456_result$Part_Nbr <- str_pad(spl_456_result$Part_Nbr, width=8, side="left", pad="0")
                        
                        spl_456_result <- data.frame(Part_Nbr = spl_456_result[,1], lapply(spl_456_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                     formatC(spl_456_result[,7] , big.mark=",", digits=0, format="f"),formatC(spl_456_result[,8] , big.mark=",", digits=0, format="f")  ,stringsAsFactors = FALSE)
                        
                        colnames(spl_456_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
                        spl_456_result
                      }, readOnly = TRUE)
                      
                      output$analysis_sce_2 <- renderHotable({
                        spl_789_result$Part_Nbr <- str_pad(spl_789_result$Part_Nbr, width=8, side="left", pad="0")
                        
                        spl_789_result <- data.frame(Part_Nbr = spl_789_result[,1], lapply(spl_789_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                     formatC(spl_789_result[,7] , big.mark=",", digits=0, format="f"),formatC(spl_789_result[,8] , big.mark=",", digits=0, format="f"), stringsAsFactors = FALSE)
                        
                        colnames(spl_789_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
                        
                        spl_789_result
                      }, readOnly = TRUE)
                      
                    }
                    part_ff<-global_ads$df_data_ads
                    y<-nrow(part_ff)
                    print(y)
                    ATB_ADS <- global_ads$df_data_ads
                    
                    finance_current_scenario= data.frame(matrix("",  nrow = as.numeric(y)))  
                    #finance_current_scenario<-0
                    finance_current_scenario<-as.data.frame(finance_current_scenario)
                    finance_current_scenario$matrix.....nrow...as.numeric.y..<-NULL
                    finance_current_scenario$Part_Nbr<-part_ff$PART_NBR
                    finance_current_scenario$Pb<-2
                    finance_current_scenario$Optimal_qty<-spl_2$Optimal_ATB_Quantity
                    finance_current_scenario$Discount_Rate<-15
                    finance_current_scenario$ATB_Units<-spl_1$Buy_Quantity
                    finance_current_scenario$Material_cost<-part_ff$LAST_COST
                    finance_current_scenario$Labour_cost_per_hr<-as.numeric(part_ff$AVG_LCPP)+
                      as.numeric(part_ff$OFFSITE_LCPP)+as.numeric(part_ff$IB_LABOR_COST_PP)+
                      as.numeric(part_ff$OB_LABOR_COST_PP)
                    finance_current_scenario$Storage_cost<-round(as.numeric(part_ff$MTH_SQ_FT_COST_PER_PEICE),2)
                    finance_current_scenario$Total_packaging_cost<-spl_1$Package_cost
                    finance_current_scenario$Freight_one_way<-round(as.numeric(part_ff$IB_TRANS_CST_PP)+as.numeric(part_ff$OFFSITE_TRANS_COST_PP),2)
                    finance_current_scenario$Inventory_lvl<-part_ff$INVENTORY_LVL
                    finance_current_scenario$FORECAST_YR_1<-part_ff$FORECAST_YR_1
                    finance_current_scenario$FORECAST_YR_2<-part_ff$FORECAST_YR_2
                    finance_current_scenario$FORECAST_YR_3<-part_ff$FORECAST_YR_3
                    finance_current_scenario$FORECAST_YR_4<-part_ff$FORECAST_YR_4
                    finance_current_scenario$FORECAST_YR_5<-part_ff$FORECAST_YR_5
                    finance_current_scenario$FORECAST_YR_6<-part_ff$FORECAST_YR_6
                    finance_current_scenario$FORECAST_YR_7<-part_ff$FORECAST_YR_7
                    finance_current_scenario$FORECAST_YR_8<-part_ff$FORECAST_YR_8
                    finance_current_scenario$FORECAST_YR_9<-part_ff$FORECAST_YR_9
                    finance_current_scenario$FORECAST_YR_10<-part_ff$FORECAST_YR_10
                    finance_current_scenario$FORECAST_YR_11<-part_ff$FORECAST_YR_11
                    finance_current_scenario$FORECAST_YR_12<-part_ff$FORECAST_YR_12
                    finance_current_scenario$FORECAST_YR_13<-part_ff$FORECAST_YR_13
                    finance_current_scenario$FORECAST_YR_14<-part_ff$FORECAST_YR_14
                    finance_current_scenario$FORECAST_YR_15<-part_ff$FORECAST_YR_15
                    finance_current_scenario$Historic_sales_CY<-part_ff$ACTUAL_SALES_CYTD
                    finance_current_scenario$Historic_sales_minus_1<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_1
                    finance_current_scenario$Historic_sales_minus_2<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_2
                    finance_current_scenario$Mandatory_serv_ret<-round(as.numeric(part_ff$APPLICATION_LY),0)
                    finance_current_scenario$Dealer_price<-part_ff$DEALER_PRICE_NO_DISCOUNT
                    finance_current_scenario$Dlr_sls<-part_ff$DLR_SLS
                    finance_current_scenario$WD_price<-part_ff$WD_DEALER_PRICE_NO_DISCOUNT
                    finance_current_scenario$WD_sls<-part_ff$WD_SLS	
                    finance_current_scenario$sa<-0.12
                    
                    finance_current_scenario_pb<- finance_current_scenario
                    finance_current_scenario_pb$All_time_buy<-(finance_current_scenario_pb$ATB_Units*finance_current_scenario_pb$Material_cost)+
                      finance_current_scenario_pb$Labour_cost_per_hr+finance_current_scenario_pb$Storage_cost+ finance_current_scenario_pb$Total_packaging_cost+(
                        finance_current_scenario_pb$Freight_one_way*finance_current_scenario_pb$ATB_Units)
                    finance_current_scenario_pb$sp<-ifelse((finance_current_scenario_pb$Dlr_sls + finance_current_scenario_pb$WD_sls) ==0,
                                                           ifelse(finance_current_scenario_pb$Dealer_price ==0,finance_current_scenario_pb$WD_price,
                                                                  ifelse(finance_current_scenario_pb$WD_price==0,finance_current_scenario_pb$Dealer_price,
                                                                         (as.numeric(finance_current_scenario_pb$Dealer_price)+as.numeric(finance_current_scenario_pb$WD_price))*0.5))
                                                           , finance_current_scenario_pb$Dealer_price*(finance_current_scenario_pb$Dlr_sls/
                                                                                                         (finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls))+ finance_current_scenario_pb$WD_price*
                                                             (finance_current_scenario_pb$WD_sls/(finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls)))
                    #finance_current_scenario_pb$sa<-if(x3=="GMP"){0.09}else ifelse (x3=="ACD"){0.15}else ifelse(x3=="-"){0.12}
                    finance_current_scenario_pb$sa<-0.12
                    finance_current_scenario_pb$Units_storage_0<-as.numeric(finance_current_scenario_pb$ATB_Units)+as.numeric(finance_current_scenario_pb$Inventory_lvl)
                    finance_current_scenario_pb$Units_storage_1<-ifelse(finance_current_scenario_pb$FORECAST_YR_1==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_1)
                    finance_current_scenario_pb$Units_storage_2<-ifelse(finance_current_scenario_pb$FORECAST_YR_2==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_2)
                    finance_current_scenario_pb$Units_storage_3<-ifelse(finance_current_scenario_pb$FORECAST_YR_3==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_3)
                    finance_current_scenario_pb$Units_storage_4<-ifelse(finance_current_scenario_pb$FORECAST_YR_4==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_4)
                    finance_current_scenario_pb$Units_storage_5<-ifelse(finance_current_scenario_pb$FORECAST_YR_5==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_5)
                    finance_current_scenario_pb$Units_storage_6<-ifelse(finance_current_scenario_pb$FORECAST_YR_6==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_6)
                    finance_current_scenario_pb$Units_storage_7<-ifelse(finance_current_scenario_pb$FORECAST_YR_7==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_7)
                    finance_current_scenario_pb$Units_storage_8<-ifelse(finance_current_scenario_pb$FORECAST_YR_8==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_8)
                    finance_current_scenario_pb$Units_storage_9<-ifelse(finance_current_scenario_pb$FORECAST_YR_9==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_9)
                    finance_current_scenario_pb$Units_storage_10<-ifelse(finance_current_scenario_pb$FORECAST_YR_10==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_10)
                    finance_current_scenario_pb$Units_storage_11<-ifelse(finance_current_scenario_pb$FORECAST_YR_11==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_11)
                    finance_current_scenario_pb$Units_storage_12<-ifelse(finance_current_scenario_pb$FORECAST_YR_12==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_12)
                    finance_current_scenario_pb$Units_storage_13<-ifelse(finance_current_scenario_pb$FORECAST_YR_13==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_13)
                    finance_current_scenario_pb$Units_storage_14<-ifelse(finance_current_scenario_pb$FORECAST_YR_14==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_14)
                    finance_current_scenario_pb$Units_storage_15<-ifelse(finance_current_scenario_pb$FORECAST_YR_15==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_15)
                    
                    finance_current_scenario_pb$Revenue_0<-0
                    finance_current_scenario_pb$Revenue_1<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_2<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_3<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_4<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_5<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_6<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_7<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_8<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_9<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_10<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_11<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_12<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_13<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_14<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_15<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    
                    
                    finance_current_scenario_pb$Total_storage_cost_0<-0
                    finance_current_scenario_pb$Total_storage_cost_1<-finance_current_scenario_pb$Units_storage_1*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_2<-finance_current_scenario_pb$Units_storage_2*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_3<-finance_current_scenario_pb$Units_storage_3*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_4<-finance_current_scenario_pb$Units_storage_4*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_5<-finance_current_scenario_pb$Units_storage_5*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_6<-finance_current_scenario_pb$Units_storage_6*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_7<-finance_current_scenario_pb$Units_storage_7*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_8<-finance_current_scenario_pb$Units_storage_8*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_9<-finance_current_scenario_pb$Units_storage_9*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_10<-finance_current_scenario_pb$Units_storage_10*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_11<-finance_current_scenario_pb$Units_storage_11*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_12<-finance_current_scenario_pb$Units_storage_12*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_13<-finance_current_scenario_pb$Units_storage_13*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_14<-finance_current_scenario_pb$Units_storage_14*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_15<-finance_current_scenario_pb$Units_storage_15*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    
                    
                    finance_current_scenario_pb$outbound_cost_1<-finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_2<-finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_3<-finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_4<-finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_5<-finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_6<-finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_7<-finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_8<-finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_9<-finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_10<-finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_11<-finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_12<-finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_13<-finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_14<-finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_15<-finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$Freight_one_way
                    
                    
                    finance_current_scenario_pb$Total_cost_0<-finance_current_scenario_pb$All_time_buy
                    finance_current_scenario_pb$Total_cost_1<-finance_current_scenario_pb$outbound_cost_1+finance_current_scenario_pb$Total_storage_cost_1
                    finance_current_scenario_pb$Total_cost_2<-finance_current_scenario_pb$outbound_cost_2+finance_current_scenario_pb$Total_storage_cost_2
                    finance_current_scenario_pb$Total_cost_3<-finance_current_scenario_pb$outbound_cost_3+finance_current_scenario_pb$Total_storage_cost_3
                    finance_current_scenario_pb$Total_cost_4<-finance_current_scenario_pb$outbound_cost_4+finance_current_scenario_pb$Total_storage_cost_4
                    finance_current_scenario_pb$Total_cost_5<-finance_current_scenario_pb$outbound_cost_5+finance_current_scenario_pb$Total_storage_cost_5
                    finance_current_scenario_pb$Total_cost_6<-finance_current_scenario_pb$outbound_cost_6+finance_current_scenario_pb$Total_storage_cost_6
                    finance_current_scenario_pb$Total_cost_7<-finance_current_scenario_pb$outbound_cost_7+finance_current_scenario_pb$Total_storage_cost_7
                    finance_current_scenario_pb$Total_cost_8<-finance_current_scenario_pb$outbound_cost_8+finance_current_scenario_pb$Total_storage_cost_8
                    finance_current_scenario_pb$Total_cost_9<-finance_current_scenario_pb$outbound_cost_9+finance_current_scenario_pb$Total_storage_cost_9
                    finance_current_scenario_pb$Total_cost_10<-finance_current_scenario_pb$outbound_cost_10+finance_current_scenario_pb$Total_storage_cost_10
                    finance_current_scenario_pb$Total_cost_11<-finance_current_scenario_pb$outbound_cost_11+finance_current_scenario_pb$Total_storage_cost_11
                    finance_current_scenario_pb$Total_cost_12<-finance_current_scenario_pb$outbound_cost_12+finance_current_scenario_pb$Total_storage_cost_12
                    finance_current_scenario_pb$Total_cost_13<-finance_current_scenario_pb$outbound_cost_13+finance_current_scenario_pb$Total_storage_cost_13
                    finance_current_scenario_pb$Total_cost_14<-finance_current_scenario_pb$outbound_cost_14+finance_current_scenario_pb$Total_storage_cost_14
                    finance_current_scenario_pb$Total_cost_15<-finance_current_scenario_pb$outbound_cost_15+finance_current_scenario_pb$Total_storage_cost_15
                    
                    
                    finance_current_scenario_pb$Net_benefit_0<-finance_current_scenario_pb$Revenue_0-finance_current_scenario_pb$Total_cost_0
                    finance_current_scenario_pb$Net_benefit_1<-finance_current_scenario_pb$Revenue_1-finance_current_scenario_pb$Total_cost_1
                    finance_current_scenario_pb$Net_benefit_2<-finance_current_scenario_pb$Revenue_2-finance_current_scenario_pb$Total_cost_2
                    finance_current_scenario_pb$Net_benefit_3<-finance_current_scenario_pb$Revenue_3-finance_current_scenario_pb$Total_cost_3
                    finance_current_scenario_pb$Net_benefit_4<-finance_current_scenario_pb$Revenue_4-finance_current_scenario_pb$Total_cost_4
                    finance_current_scenario_pb$Net_benefit_5<-finance_current_scenario_pb$Revenue_5-finance_current_scenario_pb$Total_cost_5
                    finance_current_scenario_pb$Net_benefit_6<-finance_current_scenario_pb$Revenue_6-finance_current_scenario_pb$Total_cost_6
                    finance_current_scenario_pb$Net_benefit_7<-finance_current_scenario_pb$Revenue_7-finance_current_scenario_pb$Total_cost_7
                    finance_current_scenario_pb$Net_benefit_8<-finance_current_scenario_pb$Revenue_8-finance_current_scenario_pb$Total_cost_8
                    finance_current_scenario_pb$Net_benefit_9<-finance_current_scenario_pb$Revenue_9-finance_current_scenario_pb$Total_cost_9
                    finance_current_scenario_pb$Net_benefit_10<-finance_current_scenario_pb$Revenue_10-finance_current_scenario_pb$Total_cost_10
                    finance_current_scenario_pb$Net_benefit_11<-finance_current_scenario_pb$Revenue_11-finance_current_scenario_pb$Total_cost_11
                    finance_current_scenario_pb$Net_benefit_12<-finance_current_scenario_pb$Revenue_12-finance_current_scenario_pb$Total_cost_12
                    finance_current_scenario_pb$Net_benefit_13<-finance_current_scenario_pb$Revenue_13-finance_current_scenario_pb$Total_cost_13
                    finance_current_scenario_pb$Net_benefit_14<-finance_current_scenario_pb$Revenue_14-finance_current_scenario_pb$Total_cost_14
                    finance_current_scenario_pb$Net_benefit_15<-finance_current_scenario_pb$Revenue_15-finance_current_scenario_pb$Total_cost_15
                    
                    finance_current_scenario_pb$pv_cashflow_0<-finance_current_scenario_pb$Net_benefit_0/(1.15^0)
                    finance_current_scenario_pb$pv_cashflow_1<-finance_current_scenario_pb$Net_benefit_1/(1.15^1)
                    finance_current_scenario_pb$pv_cashflow_2<-finance_current_scenario_pb$Net_benefit_2/(1.15^2)
                    finance_current_scenario_pb$pv_cashflow_3<-finance_current_scenario_pb$Net_benefit_3/(1.15^3)
                    finance_current_scenario_pb$pv_cashflow_4<-finance_current_scenario_pb$Net_benefit_4/(1.15^4)
                    finance_current_scenario_pb$pv_cashflow_5<-finance_current_scenario_pb$Net_benefit_5/(1.15^5)
                    finance_current_scenario_pb$pv_cashflow_6<-finance_current_scenario_pb$Net_benefit_6/(1.15^6)
                    finance_current_scenario_pb$pv_cashflow_7<-finance_current_scenario_pb$Net_benefit_7/(1.15^7)
                    finance_current_scenario_pb$pv_cashflow_8<-finance_current_scenario_pb$Net_benefit_8/(1.15^8)
                    finance_current_scenario_pb$pv_cashflow_9<-finance_current_scenario_pb$Net_benefit_9/(1.15^9)
                    finance_current_scenario_pb$pv_cashflow_10<-finance_current_scenario_pb$Net_benefit_10/(1.15^10)
                    finance_current_scenario_pb$pv_cashflow_11<-finance_current_scenario_pb$Net_benefit_11/(1.15^11)
                    finance_current_scenario_pb$pv_cashflow_12<-finance_current_scenario_pb$Net_benefit_12/(1.15^12)
                    finance_current_scenario_pb$pv_cashflow_13<-finance_current_scenario_pb$Net_benefit_13/(1.15^13)
                    finance_current_scenario_pb$pv_cashflow_14<-finance_current_scenario_pb$Net_benefit_14/(1.15^14)
                    finance_current_scenario_pb$pv_cashflow_15<-finance_current_scenario_pb$Net_benefit_15/(1.15^15)
                    
                    
                    finance_current_scenario_pb$pb_non_npv_0<-finance_current_scenario_pb$Net_benefit_0
                    finance_current_scenario_pb$pb_non_npv_1<-finance_current_scenario_pb$Net_benefit_1+finance_current_scenario_pb$pb_non_npv_0
                    finance_current_scenario_pb$pb_non_npv_2<-finance_current_scenario_pb$Net_benefit_2+finance_current_scenario_pb$pb_non_npv_1
                    finance_current_scenario_pb$pb_non_npv_3<-finance_current_scenario_pb$Net_benefit_3+finance_current_scenario_pb$pb_non_npv_2
                    finance_current_scenario_pb$pb_non_npv_4<-finance_current_scenario_pb$Net_benefit_4+finance_current_scenario_pb$pb_non_npv_3
                    finance_current_scenario_pb$pb_non_npv_5<-finance_current_scenario_pb$Net_benefit_5+finance_current_scenario_pb$pb_non_npv_4
                    finance_current_scenario_pb$pb_non_npv_6<-finance_current_scenario_pb$Net_benefit_6+finance_current_scenario_pb$pb_non_npv_5
                    finance_current_scenario_pb$pb_non_npv_7<-finance_current_scenario_pb$Net_benefit_7+finance_current_scenario_pb$pb_non_npv_6
                    finance_current_scenario_pb$pb_non_npv_8<-finance_current_scenario_pb$Net_benefit_8+finance_current_scenario_pb$pb_non_npv_7
                    finance_current_scenario_pb$pb_non_npv_9<-finance_current_scenario_pb$Net_benefit_9+finance_current_scenario_pb$pb_non_npv_8
                    finance_current_scenario_pb$pb_non_npv_10<-finance_current_scenario_pb$Net_benefit_10+finance_current_scenario_pb$pb_non_npv_9
                    finance_current_scenario_pb$pb_non_npv_11<-finance_current_scenario_pb$Net_benefit_11+finance_current_scenario_pb$pb_non_npv_10
                    finance_current_scenario_pb$pb_non_npv_12<-finance_current_scenario_pb$Net_benefit_12+finance_current_scenario_pb$pb_non_npv_11
                    finance_current_scenario_pb$pb_non_npv_13<-finance_current_scenario_pb$Net_benefit_13+finance_current_scenario_pb$pb_non_npv_12
                    finance_current_scenario_pb$pb_non_npv_14<-finance_current_scenario_pb$Net_benefit_14+finance_current_scenario_pb$pb_non_npv_13
                    finance_current_scenario_pb$pb_non_npv_15<-finance_current_scenario_pb$Net_benefit_15+finance_current_scenario_pb$pb_non_npv_14
                    
                    
                    finance_current_scenario_pb$pb_npv_0<-finance_current_scenario_pb$pv_cashflow_0
                    finance_current_scenario_pb$pb_npv_1<-finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pb_npv_0
                    finance_current_scenario_pb$pb_npv_2<-finance_current_scenario_pb$pv_cashflow_2+finance_current_scenario_pb$pb_npv_1
                    finance_current_scenario_pb$pb_npv_3<-finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pb_npv_2
                    finance_current_scenario_pb$pb_npv_4<-finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pb_npv_3
                    finance_current_scenario_pb$pb_npv_5<-finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pb_npv_4
                    finance_current_scenario_pb$pb_npv_6<-finance_current_scenario_pb$pv_cashflow_6+finance_current_scenario_pb$pb_npv_5
                    finance_current_scenario_pb$pb_npv_7<-finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pb_npv_6
                    finance_current_scenario_pb$pb_npv_8<-finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pb_npv_7
                    finance_current_scenario_pb$pb_npv_9<-finance_current_scenario_pb$pv_cashflow_9+finance_current_scenario_pb$pb_npv_8
                    finance_current_scenario_pb$pb_npv_10<-finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pb_npv_9
                    finance_current_scenario_pb$pb_npv_11<-finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pb_npv_10
                    finance_current_scenario_pb$pb_npv_12<-finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pb_npv_11
                    finance_current_scenario_pb$pb_npv_13<-finance_current_scenario_pb$pv_cashflow_13+finance_current_scenario_pb$pb_npv_12
                    finance_current_scenario_pb$pb_npv_14<-finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pb_npv_13
                    finance_current_scenario_pb$pb_npv_15<-finance_current_scenario_pb$pv_cashflow_15+finance_current_scenario_pb$pb_npv_14
                    
                    
                    
                    finance_current_scenario_pb$pby_non_npv_0<-ifelse(finance_current_scenario_pb$pb_non_npv_0>0,"Error",0)
                    finance_current_scenario_pb$pby_non_npv_1<-ifelse(finance_current_scenario_pb$pb_non_npv_0<0 & finance_current_scenario_pb$pb_non_npv_1>0,(1-(finance_current_scenario_pb$pb_non_npv_1/finance_current_scenario_pb$Net_benefit_1)),0)
                    finance_current_scenario_pb$pby_non_npv_2<-ifelse(finance_current_scenario_pb$pb_non_npv_1<0 & finance_current_scenario_pb$pb_non_npv_2>0,(1-(finance_current_scenario_pb$pb_non_npv_2/finance_current_scenario_pb$Net_benefit_2))+1,0)
                    finance_current_scenario_pb$pby_non_npv_3<-ifelse(finance_current_scenario_pb$pb_non_npv_2<0 & finance_current_scenario_pb$pb_non_npv_3>0,(1-(finance_current_scenario_pb$pb_non_npv_3/finance_current_scenario_pb$Net_benefit_3))+2,0)
                    finance_current_scenario_pb$pby_non_npv_4<-ifelse(finance_current_scenario_pb$pb_non_npv_3<0 & finance_current_scenario_pb$pb_non_npv_4>0,(1-(finance_current_scenario_pb$pb_non_npv_4/finance_current_scenario_pb$Net_benefit_4))+3,0)
                    finance_current_scenario_pb$pby_non_npv_5<-ifelse(finance_current_scenario_pb$pb_non_npv_4<0 & finance_current_scenario_pb$pb_non_npv_5>0,(1-(finance_current_scenario_pb$pb_non_npv_5/finance_current_scenario_pb$Net_benefit_5))+4,0)
                    finance_current_scenario_pb$pby_non_npv_6<-ifelse(finance_current_scenario_pb$pb_non_npv_5<0 & finance_current_scenario_pb$pb_non_npv_6>0,(1-(finance_current_scenario_pb$pb_non_npv_6/finance_current_scenario_pb$Net_benefit_6))+5,0)
                    finance_current_scenario_pb$pby_non_npv_7<-ifelse(finance_current_scenario_pb$pb_non_npv_6<0 & finance_current_scenario_pb$pb_non_npv_7>0,(1-(finance_current_scenario_pb$pb_non_npv_7/finance_current_scenario_pb$Net_benefit_7))+6,0)
                    finance_current_scenario_pb$pby_non_npv_8<-ifelse(finance_current_scenario_pb$pb_non_npv_7<0 & finance_current_scenario_pb$pb_non_npv_8>0,(1-(finance_current_scenario_pb$pb_non_npv_8/finance_current_scenario_pb$Net_benefit_8))+7,0)
                    finance_current_scenario_pb$pby_non_npv_9<-ifelse(finance_current_scenario_pb$pb_non_npv_8<0 & finance_current_scenario_pb$pb_non_npv_9>0,(1-(finance_current_scenario_pb$pb_non_npv_9/finance_current_scenario_pb$Net_benefit_9))+8,0)
                    finance_current_scenario_pb$pby_non_npv_10<-ifelse(finance_current_scenario_pb$pb_non_npv_9<0 & finance_current_scenario_pb$pb_non_npv_10>0,(1-(finance_current_scenario_pb$pb_non_npv_10/finance_current_scenario_pb$Net_benefit_10))+9,0)
                    finance_current_scenario_pb$pby_non_npv_11<-ifelse(finance_current_scenario_pb$pb_non_npv_10<0 & finance_current_scenario_pb$pb_non_npv_11>0,(1-(finance_current_scenario_pb$pb_non_npv_11/finance_current_scenario_pb$Net_benefit_11))+10,0)
                    finance_current_scenario_pb$pby_non_npv_12<-ifelse(finance_current_scenario_pb$pb_non_npv_11<0 & finance_current_scenario_pb$pb_non_npv_12>0,(1-(finance_current_scenario_pb$pb_non_npv_12/finance_current_scenario_pb$Net_benefit_12))+11,0)
                    finance_current_scenario_pb$pby_non_npv_13<-ifelse(finance_current_scenario_pb$pb_non_npv_12<0 & finance_current_scenario_pb$pb_non_npv_13>0,(1-(finance_current_scenario_pb$pb_non_npv_13/finance_current_scenario_pb$Net_benefit_13))+12,0)
                    finance_current_scenario_pb$pby_non_npv_14<-ifelse(finance_current_scenario_pb$pb_non_npv_13<0 & finance_current_scenario_pb$pb_non_npv_14>0,(1-(finance_current_scenario_pb$pb_non_npv_14/finance_current_scenario_pb$Net_benefit_14))+13,0)
                    finance_current_scenario_pb$pby_non_npv_15<-ifelse(finance_current_scenario_pb$pb_non_npv_14<0 & finance_current_scenario_pb$pb_non_npv_15>0,(1-(finance_current_scenario_pb$pb_non_npv_15/finance_current_scenario_pb$Net_benefit_15))+14,0)
                    
                    
                    #finance_current_scenario_pb$pby_npv_0<-ifelse(finance_current_scenario_pb$pb_npv_0>0,"Error"," ")
                    finance_current_scenario_pb$pby_npv_1<-ifelse(finance_current_scenario_pb$pb_npv_0<0 & finance_current_scenario_pb$pb_npv_1>0,1-(finance_current_scenario_pb$pb_npv_1/finance_current_scenario_pb$pv_cashflow_1),0)
                    finance_current_scenario_pb$pby_npv_2<-ifelse(finance_current_scenario_pb$pb_npv_1<0 & finance_current_scenario_pb$pb_npv_2>0,(1-(finance_current_scenario_pb$pb_npv_2/finance_current_scenario_pb$pv_cashflow_2))+1,0)
                    finance_current_scenario_pb$pby_npv_3<-ifelse(finance_current_scenario_pb$pb_npv_2<0 & finance_current_scenario_pb$pb_npv_3>0,(1-(finance_current_scenario_pb$pb_npv_3/finance_current_scenario_pb$pv_cashflow_3))+2,0)
                    finance_current_scenario_pb$pby_npv_4<-ifelse(finance_current_scenario_pb$pb_npv_3<0 & finance_current_scenario_pb$pb_npv_4>0,(1-(finance_current_scenario_pb$pb_npv_4/finance_current_scenario_pb$pv_cashflow_4))+3,0)
                    finance_current_scenario_pb$pby_npv_5<-ifelse(finance_current_scenario_pb$pb_npv_4<0 & finance_current_scenario_pb$pb_npv_5>0,(1-(finance_current_scenario_pb$pb_npv_5/finance_current_scenario_pb$pv_cashflow_5))+4,0)
                    finance_current_scenario_pb$pby_npv_6<-ifelse(finance_current_scenario_pb$pb_npv_5<0 & finance_current_scenario_pb$pb_npv_6>0,(1-(finance_current_scenario_pb$pb_npv_6/finance_current_scenario_pb$pv_cashflow_6))+5,0)
                    finance_current_scenario_pb$pby_npv_7<-ifelse(finance_current_scenario_pb$pb_npv_6<0 & finance_current_scenario_pb$pb_npv_7>0,(1-(finance_current_scenario_pb$pb_npv_7/finance_current_scenario_pb$pv_cashflow_7))+6,0)
                    finance_current_scenario_pb$pby_npv_8<-ifelse(finance_current_scenario_pb$pb_npv_7<0 & finance_current_scenario_pb$pb_npv_8>0,(1-(finance_current_scenario_pb$pb_npv_8/finance_current_scenario_pb$pv_cashflow_8))+7,0)
                    finance_current_scenario_pb$pby_npv_9<-ifelse(finance_current_scenario_pb$pb_npv_8<0 & finance_current_scenario_pb$pb_npv_9>0,(1-(finance_current_scenario_pb$pb_npv_9/finance_current_scenario_pb$pv_cashflow_9))+8,0)
                    finance_current_scenario_pb$pby_npv_10<-ifelse(finance_current_scenario_pb$pb_npv_9<0 & finance_current_scenario_pb$pb_npv_10>0,(1-(finance_current_scenario_pb$pb_npv_10/finance_current_scenario_pb$pv_cashflow_10))+9,0)
                    finance_current_scenario_pb$pby_npv_11<-ifelse(finance_current_scenario_pb$pb_npv_10<0 & finance_current_scenario_pb$pb_npv_11>0,(1-(finance_current_scenario_pb$pb_npv_11/finance_current_scenario_pb$pv_cashflow_11))+10,0)
                    finance_current_scenario_pb$pby_npv_12<-ifelse(finance_current_scenario_pb$pb_npv_11<0 & finance_current_scenario_pb$pb_npv_12>0,(1-(finance_current_scenario_pb$pb_npv_12/finance_current_scenario_pb$pv_cashflow_12))+11,0)
                    finance_current_scenario_pb$pby_npv_13<-ifelse(finance_current_scenario_pb$pb_npv_12<0 & finance_current_scenario_pb$pb_npv_13>0,(1-(finance_current_scenario_pb$pb_npv_13/finance_current_scenario_pb$pv_cashflow_13))+12,0)
                    finance_current_scenario_pb$pby_npv_14<-ifelse(finance_current_scenario_pb$pb_npv_13<0 & finance_current_scenario_pb$pb_npv_14>0,(1-(finance_current_scenario_pb$pb_npv_14/finance_current_scenario_pb$pv_cashflow_14))+13,0)
                    finance_current_scenario_pb$pby_npv_15<-ifelse(finance_current_scenario_pb$pb_npv_14<0 & finance_current_scenario_pb$pb_npv_15>0,(1-(finance_current_scenario_pb$pb_npv_15/finance_current_scenario_pb$pv_cashflow_15))+14,0)
                    
                    
                    finance_current_scenario_pb$NPV_pb<-finance_current_scenario_pb$pv_cashflow_0+finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pv_cashflow_2+
                      finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pv_cashflow_6+
                      finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pv_cashflow_9+
                      finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pv_cashflow_13+
                      finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pv_cashflow_15
                    finance_current_scenario_pb$flat_pb<-round(as.numeric(finance_current_scenario_pb$pby_non_npv_0)+as.numeric(finance_current_scenario_pb$pby_non_npv_1)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_2)+as.numeric(finance_current_scenario_pb$pby_non_npv_3)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_4)+as.numeric(finance_current_scenario_pb$pby_non_npv_5)+as.numeric(finance_current_scenario_pb$pby_non_npv_6)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_7)+as.numeric(finance_current_scenario_pb$pby_non_npv_8)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_9)+as.numeric(finance_current_scenario_pb$pby_non_npv_10)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_11)+as.numeric(finance_current_scenario_pb$pby_non_npv_12)+as.numeric(finance_current_scenario_pb$pby_non_npv_13)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_14)+as.numeric(finance_current_scenario_pb$pby_non_npv_15),2)
                    
                    finance_current_scenario_pb$disc_pb<-round(as.numeric(finance_current_scenario_pb$pby_npv_1)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_2)+as.numeric(finance_current_scenario_pb$pby_npv_3)+as.numeric(finance_current_scenario_pb$pby_npv_4)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_5)+as.numeric(finance_current_scenario_pb$pby_npv_6)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_7)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_8)+as.numeric(finance_current_scenario_pb$pby_npv_9)+as.numeric(finance_current_scenario_pb$pby_npv_10)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_11)+as.numeric(finance_current_scenario_pb$pby_npv_12)+as.numeric(finance_current_scenario_pb$pby_npv_13)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_14)+as.numeric(finance_current_scenario_pb$pby_npv_15),2)
                    write.xlsx(finance_current_scenario,"finance_current_scenario.xlsx")
                    
                    path_to_vbs_file = "test_pb.vbs"
                    print("4")
                    shell(shQuote(normalizePath(path_to_vbs_file)), "cscript", flag = "//nologo")
                    print("5")
                    print("AM I the error d??")
                    pb_excel<-read.xlsx("PB_excel.xlsm")
                    global_ads$df_data_ads_pb<-pb_excel
                    
                    global_ads$df_data_ads_pb_orig<-finance_current_scenario_pb
                    
                    #### Creating Download Report File
                    # spld- Scorce Part list dowlnoad file
                    spl_123<-merge(spl_123, finance_current_scenario_pb[ ,c("Part_Nbr","flat_pb","disc_pb")], by = "Part_Nbr")
                    
                    spl_123<-merge(spl_123, pb_excel[ ,c("Part_Nbr","ATB_Units","X210","X373")], by = "Part_Nbr")
                    
                    
                    #### Creating Download Report File
                    # spld- Source Part list dowlnoad file
                    #spl_123456789$Selected_scenario <- "None"
                    
                    download_report <- spl_123
                    download_report$Selected_scenario <- "None"
                    download_report <- download_report %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                                  Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                                  Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                                  Selldown_Revenue,Selldown_Revenue_non_npv,
                                                                  Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                                  Total_Inventory,
                                                                  First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                                  Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                                  Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                                  Optimal_Storage_Cost,
                                                                  Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                                  Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT, #change 786
                                                                  Dealer_Price_OES.x,Dealer_Price_Allied_Export.x,WD_DEALER_PRICE_NO_DISCOUNT,Dealer_Price_IAM.x,Discount_oes_percent.x,Discount_allied_export_percent.x,
                                                                  Discount_iam_percent.x,LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                                  REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP, Selected_scenario,flat_pb,disc_pb,ATB_Units,X210)
                    ##change
                    
                    download_report_scenario_1 <-  spl_456 %>% select(Part_Nbr, NPV_Scenario_1,
                                                                      Selldown_NPV_Scenario_1,Selldown_NPV_non_npv_Scenario_1, Revenue_Scenario_1,Revenue_non_npv_Scenario_1,Part_Cost_Scenario_1,Material_cost_non_npv_Scenario_1,
                                                                      Setup_cost_Scenario_1 ,Total_transport_cost_Scenario_1,Total_transport_cost_non_npv_Scenario_1,Storage_Cost_Scenario_1,Storage_Cost_non_npv_Scenario_1,
                                                                      Total_process_cost_Scenario_1,  Total_process_cost_non_npv_Scenario_1,Package_cost_Scenario_1,Package_cost_non_npv_Scenario_1,
                                                                      Total_offsite_labor_cost_Scenario_1,Total_offsite_labor_cost_non_npv_Scenario_1,Total_offsite_transport_cost_Scenario_1,Total_offsite_transport_cost_non_npv_Scenario_1, 
                                                                      Additional_Cost_1,Selldown_Revenue_Scenario_1,Selldown_Revenue_non_npv_Scenario_1,
                                                                      Selldown_Material_cost_Scenario_1,Selldown_Material_cost_non_npv_Scenario_1,
                                                                      Selldown_Freight_cost_Scenario_1,Selldown_Freight_cost_non_npv_Scenario_1,Selldown_Storage_Cost_Scenario_1,Selldown_Storage_Cost_non_npv_Scenario_1, Selldown_Processing_Cost_Scenario_1,
                                                                      Selldown_Processing_Cost_non_npv_Scenario_1,Selldown_Packaging_Cost_Scenario_1,Selldown_Packaging_Cost_non_npv_Scenario_1,
                                                                      Total_Inventory,
                                                                      First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_1, LTB_Buy_Quantity_Scenario_1,
                                                                      Buy_Quantity_Scenario_1, Total_Forecast_Scenario_1,
                                                                      Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_Material_Cost_Scenario_1, Optimal_Setup_cost_Scenario_1,
                                                                      Optimal_Total_transport_cost_Scenario_1,
                                                                      Optimal_Total_offsite_transport_cost_Scenario_1, Optimal_Storage_Cost_Scenario_1, Optimal_Total_process_cost_Scenario_1,
                                                                      Optimal_Packaging_cost_Scenario_1,
                                                                      Optimal_Total_offsite_labor_cost_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1,
                                                                      Extended_purchase_cost_1,Proposed_Dealer_Price_1.y,Proposed_Wd_Price_1.y,Material_cost_Scenario_1,
                                                                      Moq_1,Standard_Pack_1,Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,MTH_SQ_FT_COST_PER_PEICE,
                                                                      OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                                      AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    ##change
                    
                    download_report_scenario_2 <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2,
                                                                     Selldown_NPV_Scenario_2,Selldown_NPV_non_npv_Scenario_2, Revenue_Scenario_2,Revenue_non_npv_Scenario_2,Part_Cost_Scenario_2,Material_cost_non_npv_Scenario_2,
                                                                     Setup_cost_Scenario_2 ,Total_transport_cost_Scenario_2,Total_transport_cost_non_npv_Scenario_2,Storage_Cost_Scenario_2,Storage_Cost_non_npv_Scenario_2,
                                                                     Total_process_cost_Scenario_2,  Total_process_cost_non_npv_Scenario_2,Package_cost_Scenario_2,Package_cost_non_npv_Scenario_2,
                                                                     Total_offsite_labor_cost_Scenario_2,Total_offsite_labor_cost_non_npv_Scenario_2,Total_offsite_transport_cost_Scenario_2,Total_offsite_transport_cost_non_npv_Scenario_2, 
                                                                     Additional_Cost_2,Selldown_Revenue_Scenario_2,Selldown_Revenue_non_npv_Scenario_2,
                                                                     Selldown_Material_cost_Scenario_2,Selldown_Material_cost_non_npv_Scenario_2,
                                                                     Selldown_Freight_cost_Scenario_2,Selldown_Freight_cost_non_npv_Scenario_2,Selldown_Storage_Cost_Scenario_2,Selldown_Storage_Cost_non_npv_Scenario_2, Selldown_Processing_Cost_Scenario_2,
                                                                     Selldown_Processing_Cost_non_npv_Scenario_2,Selldown_Packaging_Cost_Scenario_2,Selldown_Packaging_Cost_non_npv_Scenario_2,
                                                                     Total_Inventory,
                                                                     First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_2, LTB_Buy_Quantity_Scenario_2,
                                                                     Buy_Quantity_Scenario_2, Total_Forecast_Scenario_2,
                                                                     Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2,
                                                                     Optimal_Material_Cost_Scenario_2, Optimal_Setup_cost_Scenario_2,
                                                                     Optimal_Total_transport_cost_Scenario_2,
                                                                     Optimal_Total_offsite_transport_cost_Scenario_2, Optimal_Storage_Cost_Scenario_2,
                                                                     Optimal_Total_process_cost_Scenario_2,Optimal_Packaging_cost_Scenario_2, Optimal_Total_offsite_labor_cost_Scenario_2,
                                                                     Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2, Extended_purchase_cost_2,Proposed_Dealer_Price_2.y,Proposed_Wd_Price_2.y,Material_cost_Scenario_2,
                                                                     Moq_2,Standard_Pack_2,Setup_Cost_Scenario_2,Additional_Cost_Scenario_2,MTH_SQ_FT_COST_PER_PEICE,
                                                                     OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                                     AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    
                    global_current_sce_down$df_data_current <- download_report
                    global_scenario_1_down$df_data_scenario_1_down <- download_report_scenario_1
                    global_scenario_2_down$df_data_scenario_2_down <- download_report_scenario_2
                    
                    
                    ##### Report Download
                    output$downloadData <- downloadHandler(
                      filename = function() {
                        paste("ATB_Part_List",".xlsx", sep="")
                      },
                      content = function(file) {
                        #Downloading_function()
                        abc <- global_current_sce_down$df_data_current
                        abc <- data.frame(Part_Nbr = abc[,1],
                                          lapply(abc[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                          lapply(abc[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                          lapply(abc[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(abc[,53] , big.mark=",", digits=0, format="f"),formatC(abc[,54] , big.mark=",", digits=2, format="f"), ## change 786 
                                          lapply(abc[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                          lapply(abc[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                          paste("$", formatC(abc[,65] , big.mark=",", digits=0, format="f")),
                                          lapply(abc[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                          lapply(abc[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                          abc[,80:84], stringsAsFactors = FALSE)
                        
                        
                        
                        colnames(abc) <- c("Part Number",
                                           "NPV", "Selldown NPV","Selldown Non NPV",
                                           "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                                           "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                                           "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                                           "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                                           "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                                           "Current Inventory",
                                           "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                                           "Total Purchase", "Total Sales", "Optimal NPV",
                                           "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                                           "Optimal Storage Cost",
                                           "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                                           "Optimal ATB Quantity","Optimal payback period", "Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export", #change 786
                                           "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                                           "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                                           "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                                           "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)", "Selected Scenario","Simple payabck period",
                                           "Discounted payback period","2 year payback ATB","2 year payback NPV")
                        
                        scenario_1 <- global_scenario_1_down$df_data_scenario_1_down
                        scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                                                 lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                                                 lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                                 lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 stringsAsFactors = FALSE)
                        
                        colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                                  "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                                  "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                                  "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                                  "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                                  "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                                  "Current Inventory",
                                                  "First Buy","Last Buy","Last Sale","Scrap Scenario-1", "Entered Buy Quantity Scenario-1",
                                                  "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                                  "Optimal NPV Scenario-1",
                                                  "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                                  "Optimal Offsite transport cost Scenario-1",
                                                  "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                                  "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                                  "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                                  "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
                        
                        scenario_2 <- global_scenario_2_down$df_data_scenario_2_down
                        scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],
                                                 lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                                                 lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                                 lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 stringsAsFactors = FALSE)
                        
                        colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                                  "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                                  "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                                  "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                                  "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                                  "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                                  "Current Inventory",
                                                  "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                                  "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                                  "Optimal NPV  Scenario-2",
                                                  "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                                  "Optimal Offsite transport cost Scenario-2",
                                                  "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                                  "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                                  "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                                  "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
                        
                        write.xlsx2(abc, file, sheetName="Current_Scenario", row.names=FALSE)
                        write.xlsx2(scenario_1, file , sheetName = "Scenario-1", append = TRUE, row.names = FALSE)
                        write.xlsx2(scenario_2, file , sheetName = "Scenario-2", append = TRUE, row.names = FALSE)
                        
                      }
                    )
                    
                    ##### Rendering info box to show num to parts uploaded
                    output$Total_Parts<-renderInfoBox({
                      
                      infoBox(
                        "Number of Parts", paste0( nrow(ATB_ADS)), icon = icon("cogs"),
                        color = "blue", fill = TRUE
                      )
                    })
                    
                    ##### Rendering ui of part number input for Part View
                    
                    output$ui <- renderUI({
                      part_info <- global_ads$df_data_ads
                      part_inform <- as.data.frame(part_info)
                      part_inform$X <- NULL
                      part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
                      selectInput("Part_Number", "Part Number", choices = as.vector(part_inform$PART_NBR))
                    })
                    
                  } else
                  {
                    
                    drop_table_PART_data_name <- paste("BEGIN
                                                       EXECUTE IMMEDIATE 'DROP TABLE", PART_data_name, "';
                                                       EXCEPTION
                                                       WHEN OTHERS THEN NULL;
                                                       END;")
                    
                    value_PART_data_name <- dbSendUpdate(con, drop_table_PART_data_name)
                    
                    drop_table_ATB_final_ads_1_name <- paste("BEGIN
                                                             EXECUTE IMMEDIATE 'DROP TABLE", ATB_final_ads_1_name, "';
                                                             EXCEPTION
                                                             WHEN OTHERS THEN NULL;
                                                             END;")
                    
                    value_ATB_final_ads_1_name <- dbSendUpdate(con, drop_table_ATB_final_ads_1_name)
                    showModal(modalDialog(
                      title = "Warning Message",
                      "Required data is not present for these part"
                    ))
                  }
                  
                  ## Management Report for Scenario-1
                  test <- read.csv('gm_id.csv', stringsAsFactors = FALSE)
                  management_report_1 <- global_scenario_1_down$df_data_scenario_1_down
                  management_report_1 <- management_report_1 %>% select(Part_Nbr, NPV_Scenario_1, Revenue_Scenario_1, LTB_Buy_Quantity_Scenario_1, Extended_purchase_cost_1,
                                                                        Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1)
                  
                  management_report_1 <- management_report_1[management_report_1$LTB_Buy_Quantity_Scenario_1 > 0,]
                  
                  incProgress(1/3, detail = "Preparing the tables")
                  
                  if(nrow(management_report_1) > 0)
                  {
                    
                    management_report_1$NPV_impact_1 <- management_report_1$Optimal_NPV_Scenario_1 - management_report_1$NPV_Scenario_1
                    management_report_1$Revenue_impact_1 <- management_report_1$Optimal_Revenue_Scenario_1 - management_report_1$Revenue_Scenario_1
                    management_report_1$Buy_impact_1 <- management_report_1$Extended_optimal_buy_cost_1 - management_report_1$Extended_purchase_cost_1
                    colnames(management_report_1)[4] <- "Entered_Buy_Quantity_1"
                    colnames(management_report_1)[8] <- "Optimal_Quantity_Scenario_1"
                    management_report_1$Time_stamp_1 <- Sys.Date()
                    management_report_1$Day_1 <- day(Sys.Date())
                    management_report_1$Month_1 <- month(Sys.Date())
                    management_report_1$Year_1 <- year(Sys.Date())
                    
                    management_report_1$Part_Nbr <- as.character(str_pad(management_report_1$Part_Nbr, width=8, side="left", pad="0"))
                    management_report_1$Time_stamp_1 <- as.character(management_report_1$Time_stamp_1)
                    management_report_1$Day_1 <- as.character(management_report_1$Day_1)
                    management_report_1$Month_1 <- as.character(management_report_1$Month_1)
                    management_report_1$Year_1 <- as.character(management_report_1$Year_1)
                    
                    management_report_1$RAT_NUMBER <- "-"
                    management_report_1$GM_ID <-test$gm_id[1]
                    
                    dbWriteTable(conn = con,
                                 name = TEMP_MAN_REP_1_NAME,
                                 value = management_report_1, overwrite = TRUE, append = FALSE)
                    
                    dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_1 IN EXCLUSIVE MODE")
                    
                    sql_management_rep_1 <- paste("UPDATE MANAGEMENT_TABLE_1 A
                                                  SET (A.NPV_SCENARIO_1, A.REVENUE_SCENARIO_1, A.ENTERED_BUY_QUANTITY_1, A.EXTENDED_PURCHASE_COST_1, A.OPTIMAL_NPV_SCENARIO_1, A.OPTIMAL_REVENUE_SCENARIO_1,
                                                  A.OPTIMAL_QUANTITY_SCENARIO_1, A.EXTENDED_OPTIMAL_BUY_COST_1, A.NPV_IMPACT_1, A.REVENUE_IMPACT_1, A.BUY_IMPACT_1,
                                                  A.TIME_STAMP, A.DAY_1, A.MONTH_1, A.YEAR_1, A.RAT_NUMBER, A.GM_ID) =
                                                  (SELECT B.NPV_SCENARIO_1, B.REVENUE_SCENARIO_1, B.ENTERED_BUY_QUANTITY_1, B.EXTENDED_PURCHASE_COST_1,
                                                  B.OPTIMAL_NPV_SCENARIO_1, B.OPTIMAL_REVENUE_SCENARIO_1, B.OPTIMAL_QUANTITY_SCENARIO_1, B.EXTENDED_OPTIMAL_BUY_COST_1,
                                                  B.NPV_IMPACT_1,B.REVENUE_IMPACT_1, B.BUY_IMPACT_1, B.TIME_STAMP_1, B.DAY_1, B.MONTH_1, B.YEAR_1, B.RAT_NUMBER, B.GM_ID
                                                  FROM",
                                                  TEMP_MAN_REP_1_NAME, "B
                                                  WHERE
                                                  LPAD(A.PART_NBR, 8, '0')= LPAD(B.PART_NBR, 8, '0'))
                                                  WHERE EXISTS (SELECT NPV_SCENARIO_1
                                                  FROM",
                                                  TEMP_MAN_REP_1_NAME, "C WHERE
                                                  LPAD(C.PART_NBR, 8, '0')= LPAD(A.PART_NBR, 8, '0'))")
                    
                    value_management_rep_1 <- dbSendUpdate(con, sql_management_rep_1)
                    
                    
                    
                    dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_1 IN EXCLUSIVE MODE")
                    
                    sql_management_rep_insert_1 <- paste("INSERT INTO MANAGEMENT_TABLE_1
                                                         SELECT A.* FROM", TEMP_MAN_REP_1_NAME," A
                                                         WHERE A.PART_NBR NOT IN (SELECT DISTINCT PART_NBR FROM MANAGEMENT_TABLE_1)")
                    
                    value_management_rep_insert_1 <- dbSendUpdate(con, sql_management_rep_insert_1)
                    
                    dbSendUpdate(con, paste("BEGIN
                                            EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_1_NAME , "';
                                            EXCEPTION
                                            WHEN OTHERS THEN NULL;
                                            END;"))
                    
                  }
                  incProgress(1/3, detail = "Preparing the tables")
                  
                  ## Management Report for Scenario-2
                  management_report_2 <- global_scenario_2_down$df_data_scenario_2_down
                  management_report_2 <- management_report_2 %>% select(Part_Nbr, NPV_Scenario_2, Revenue_Scenario_2, LTB_Buy_Quantity_Scenario_2, Extended_purchase_cost_2,
                                                                        Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2, Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2)
                  
                  management_report_2 <- management_report_2[management_report_2$LTB_Buy_Quantity_Scenario_2 > 0,]
                  
                  if(nrow(management_report_2) > 0)
                  {
                    
                    management_report_2$NPV_impact_2 <- management_report_2$Optimal_NPV_Scenario_2 - management_report_2$NPV_Scenario_2
                    management_report_2$Revenue_impact_2 <- management_report_2$Optimal_Revenue_Scenario_2 - management_report_2$Revenue_Scenario_2
                    management_report_2$Buy_impact_2 <- management_report_2$Extended_optimal_buy_cost_2 - management_report_2$Extended_purchase_cost_2
                    colnames(management_report_2)[4] <- "Entered_Buy_Quantity_2"
                    colnames(management_report_2)[8] <- "Optimal_Quantity_Scenario_2"
                    management_report_2$Time_stamp_2 <- Sys.Date()
                    management_report_2$Day_2 <- day(Sys.Date())
                    management_report_2$Month_2 <- month(Sys.Date())
                    management_report_2$Year_2 <- year(Sys.Date())
                    
                    management_report_2$Part_Nbr <- as.character(str_pad(management_report_2$Part_Nbr, width=8, side="left", pad="0"))
                    management_report_2$Time_stamp_2 <- as.character(management_report_2$Time_stamp_2)
                    management_report_2$Day_2 <- as.character(management_report_2$Day_2)
                    management_report_2$Month_2 <- as.character(management_report_2$Month_2)
                    management_report_2$Year_2 <- as.character(management_report_2$Year_2)
                    
                    
                    management_report_2$RAT_NUMBER <- "-"
                    management_report_2$GM_ID <- test$gm_id[1]
                    
                    dbWriteTable(conn = con,
                                 name = TEMP_MAN_REP_2_NAME,
                                 value = management_report_2, overwrite = TRUE, append = FALSE)
                    
                    dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_2 IN EXCLUSIVE MODE")
                    
                    sql_management_rep_2 <- paste("UPDATE MANAGEMENT_TABLE_2 A
                                                  SET (A.NPV_SCENARIO_2, A.REVENUE_SCENARIO_2, A.ENTERED_BUY_QUANTITY_2, A.EXTENDED_PURCHASE_COST_2, A.OPTIMAL_NPV_SCENARIO_2, A.OPTIMAL_REVENUE_SCENARIO_2,
                                                  A.OPTIMAL_QUANTITY_SCENARIO_2, A.EXTENDED_OPTIMAL_BUY_COST_2, A.NPV_IMPACT_2, A.REVENUE_IMPACT_2, A.BUY_IMPACT_2,
                                                  A.TIME_STAMP, A.DAY_2, A.MONTH_2, A.YEAR_2, A.RAT_NUMBER, A.GM_ID) =
                                                  (SELECT B.NPV_Scenario_2, B.Revenue_Scenario_2, B.Entered_Buy_Quantity_2, B.Extended_purchase_cost_2,
                                                  B.Optimal_NPV_Scenario_2, B.Optimal_Revenue_Scenario_2, B.Optimal_Quantity_Scenario_2, B.Extended_optimal_buy_cost_2,
                                                  B.NPV_impact_2,B.Revenue_impact_2, B.Buy_impact_2, B.Time_stamp_2, B.Day_2, B.Month_2, B.Year_2, B.RAT_NUMBER, B.GM_ID
                                                  FROM",
                                                  TEMP_MAN_REP_2_NAME, "B
                                                  WHERE
                                                  LPAD(A.PART_NBR, 8, '0') = LPAD(B.Part_Nbr, 8, '0'))
                                                  WHERE EXISTS (SELECT NPV_SCENARIO_2
                                                  FROM",
                                                  TEMP_MAN_REP_2_NAME, "C WHERE
                                                  LPAD(C.PART_NBR, 8, '0')= LPAD(A.PART_NBR, 8, '0'))")
                    
                    value_management_rep_2 <- dbSendUpdate(con, sql_management_rep_2)
                    
                    dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_2 IN EXCLUSIVE MODE")
                    
                    sql_management_rep_insert_2 <- paste("INSERT INTO MANAGEMENT_TABLE_2
                                                         SELECT A.* FROM", TEMP_MAN_REP_2_NAME," A
                                                         WHERE A.PART_NBR NOT IN (SELECT DISTINCT PART_NBR FROM MANAGEMENT_TABLE_2)")
                    
                    value_management_rep_insert_2 <- dbSendUpdate(con, sql_management_rep_insert_2)
                    
                    dbSendUpdate(con, paste("BEGIN
                                            EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_2_NAME , "';
                                            EXCEPTION
                                            WHEN OTHERS THEN NULL;
                                            END;"))
                    
                  }
                  
                  shinyjs::enable("go_list")
                  shinyjs::enable("tabBut")
                  
                }
                    )
                  } else
                  {
                    showModal(modalDialog(title="Attention!", "The Forecee File does not contain required columns"))
                    shinyjs::enable("go_list")
                    shinyjs::enable("tabBut")
                  }
                } else
                {
                  must_be_present <- c("Part_Number", "Material_cost_Scenario_1", "Moq_1", "Standard_Pack_1", "Buy_Quantity_Scenario_1", "Setup_Cost_Scenario_1", "Additional_Cost_Scenario_1",
                                       "Proposed_Dealer_Price_1", "Proposed_Wd_Price_1", "Material_cost_Scenario_2", "Moq_2", "Standard_Pack_2", "Buy_Quantity_Scenario_2",
                                       "Setup_Cost_Scenario_2", "Additional_Cost_Scenario_2", "Proposed_Dealer_Price_2", "Proposed_Wd_Price_2")
                  
                  uploaded_file_colnames <- colnames(updated_cost_elements_data)
                  
                  columns_not_present <- must_be_present[!(must_be_present %in% uploaded_file_colnames)]
                  cols_not_present <- ""
                  
                  for( i in 1:length(columns_not_present))
                  {
                    cols_not_present <- paste(columns_not_present[i], cols_not_present, sep = ", ")
                  }
                  
                  print(columns_not_present)
                  
                  showModal(modalDialog(title="Attention!", tags$h3("The cost element file does not contain these columns or could have been spelled wrong- "), cols_not_present))
                  shinyjs::enable("go_list")
                  shinyjs::enable("tabBut")
                }
            
                } else
                {
                  showModal(modalDialog(title="Attention!", "Wrong input format, please select a csv"))
                  shinyjs::enable("go_list")
                  shinyjs::enable("tabBut")
                }
            } else if(is.null(updated_cost_elements))
            {
              showModal(modalDialog(
                title = "Warning Message",
                "First, upload the Cost element file and click Submit to get results"
              ))
              shinyjs::enable("go_list")
              shinyjs::enable("tabBut")
              
            } else if(is.null(forecee_uploaded_file))
            {
              showModal(modalDialog(
                title = "Warning Message",
                "First, upload the Forecee file and click Submit to get results"
              ))
              shinyjs::enable("go_list")
              shinyjs::enable("tabBut")
            }
          }
      if(input$sel == "Cognos_n_Cost")
      {
        shinyjs::disable("go_list")
        shinyjs::disable("tabBut")
        shinyjs::hide("hotable1")
        shinyjs::hide("cost_sce_1")
        shinyjs::hide("cost_sce_2")
        shinyjs::hide("analysis_sce_1")
        shinyjs::hide("analysis_sce_2")
        
        updated_cost_elements <- input$cost_file_all
        cognos_uploaded_file <- input$cognos_file
        
        if(!is.null(updated_cost_elements) & !is.null(cognos_uploaded_file)  )
        {
          if(((get.ext(cognos_uploaded_file$name ) %in% c(
            'text/csv',
            'text/comma-separated-values',
            'text/tab-separated-values',
            'text/plain',
            'csv',
            'tsv'
          )) & (get.ext(updated_cost_elements$name ) %in% c(
            'text/csv',
            'text/comma-separated-values',
            'text/tab-separated-values',
            'text/plain',
            'csv',
            'tsv'
          ))))
          
          {
            
            updated_cost_elements_data<- read.csv(updated_cost_elements$datapath, header = input$header)
            
            updated_cost_elements_data$part.order<-as.numeric(row.names(updated_cost_elements_data))
            global_PARTdata$cognos<-select(updated_cost_elements_data,Part_Number,part.order)
            colnames(global_PARTdata$cognos)<-c("PART_NBR","PART_ORDER")
            updated_cost_elements_data$part.order<-NULL
            
            updated_cost_elements_data <- as.data.frame(updated_cost_elements_data)
            
            cognos_uploaded_file_data<- read.csv(cognos_uploaded_file$datapath, header = input$header)
            cognos_uploaded_file_data<-cognos_uploaded_file_data[-1, ]
            cognos_uploaded_file_data <- as.data.frame(cognos_uploaded_file_data)
            
            if(("Part_Number" %in% colnames(updated_cost_elements_data)) & ("Material_cost_Scenario_1" %in% colnames(updated_cost_elements_data)) & ("Moq_1" %in% colnames(updated_cost_elements_data)) &
               ("Standard_Pack_1" %in% colnames(updated_cost_elements_data)) & ("Buy_Quantity_Scenario_1" %in% colnames(updated_cost_elements_data)) &
               ("Setup_Cost_Scenario_1" %in% colnames(updated_cost_elements_data)) & ("Additional_Cost_Scenario_1" %in% colnames(updated_cost_elements_data)) &
               ("Proposed_Dealer_Price_1" %in% colnames(updated_cost_elements_data)) & ("Proposed_Wd_Price_1" %in% colnames(updated_cost_elements_data)) &
               ("Material_cost_Scenario_2" %in% colnames(updated_cost_elements_data)) & ("Moq_2" %in% colnames(updated_cost_elements_data)) &
               ("Standard_Pack_2" %in% colnames(updated_cost_elements_data)) & ("Buy_Quantity_Scenario_2" %in% colnames(updated_cost_elements_data)) &
               ("Setup_Cost_Scenario_2" %in% colnames(updated_cost_elements_data)) & ("Additional_Cost_Scenario_2" %in% colnames(updated_cost_elements_data)) &
               ("Proposed_Dealer_Price_2" %in% colnames(updated_cost_elements_data)) & ("Proposed_Wd_Price_2" %in% colnames(updated_cost_elements_data)))
            {
              if("REMAINDER" %in% colnames(cognos_uploaded_file_data) & "Retention.Modified.QTY" %in% colnames(cognos_uploaded_file_data) &
                 "X2050" %in% colnames(cognos_uploaded_file_data))
              {
                updated_cost_elements_data$Part_Number <- str_pad(updated_cost_elements_data$Part_Number, width=8, side="left", pad="0")
                
                
                #names(cognos_uploaded_file_data)[names(cognos_uploaded_file_data) == 'HEAD'] <- 'PART_NBR'
                PART_data <- cognos_uploaded_file_data
                names(PART_data)[1]<-"PART_NBR"
                ##Check the column which has header Remainder
                rem<-which(colnames(PART_data)=="REMAINDER")
                rmq<-which(colnames(PART_data)=="Retention.Modified.QTY")
                # Getting the forecast data column numbers to assign column name for further calculation
                frc_fin<-rmq+30
                frc_start<-rmq+1
                col2cvt <- c(7:rem,frc_start:frc_fin)
                ##adding order number for part numbers
                PART_data$part.order<-as.numeric(row.names(PART_data))
                global_PARTdata$cognos<-select(PART_data,'PART_NBR',part.order)
                colnames(global_PARTdata$cognos)<-c("PART_NBR","PART_ORDER")
                #  global_yeardata<-reactiveValues(prev=NULL)
                PART_data[,col2cvt] <- lapply(PART_data[,col2cvt],function(x){as.numeric(gsub(",", "", x))}) 
                colnames(PART_data)[5:7]<-c("APPLICATION_LY","PART_NAME","INVENTORY_LVL")
                ##Calculate by keeping in mind the very next naming after this comment
                hist_yr <- rem-3
                colnames(PART_data)[hist_yr:rem]<-c("ACTUAL_SALES_CURR_YEAR_MINUS_2","ACTUAL_SALES_CURR_YEAR_MINUS_1","ACTUAL_SALES_CYTD","PROJECTED_SALES_CURR_YEAR")# change 666
                colnames(PART_data)[frc_start:frc_fin]<-c("FORECAST_YR_1","FORECAST_YR_2","FORECAST_YR_3","FORECAST_YR_4","FORECAST_YR_5","FORECAST_YR_6","FORECAST_YR_7",
                                                          "FORECAST_YR_8","FORECAST_YR_9","FORECAST_YR_10",
                                                          "FORECAST_YR_11", "FORECAST_YR_12", "FORECAST_YR_13", "FORECAST_YR_14",
                                                          "FORECAST_YR_15", "FORECAST_YR_16", "FORECAST_YR_17", "FORECAST_YR_18", "FORECAST_YR_19",
                                                          "FORECAST_YR_20", "FORECAST_YR_21", "FORECAST_YR_22", "FORECAST_YR_23", "FORECAST_YR_24",
                                                          "FORECAST_YR_25", "FORECAST_YR_26", "FORECAST_YR_27", "FORECAST_YR_28", "FORECAST_YR_29", "FORECAST_YR_30")
                PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_2<-as.numeric(PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_2)
                PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_1<-as.numeric(PART_data$ACTUAL_SALES_CURR_YEAR_MINUS_1)
                PART_data$ACTUAL_SALES_CYTD<-as.numeric(PART_data$ACTUAL_SALES_CYTD)
                
                cognos_uploaded_file_data<-PART_data
                cognos_uploaded_file_data$Part_Number <- str_pad(cognos_uploaded_file_data$PART_NBR, width=8, side="left", pad="0")
                PART_data$Part_Number <- str_pad(PART_data$PART_NBR, width=8, side="left", pad="0")
                
                withProgress(message = 'Processing:', value = 0, {
                  
                  
                  Flag_PART_NBR_data <- 0
                  Flag_PART_data <- 0
                  
                  if("PART_NAME" %in% colnames(PART_data))
                  {
                    print("column present")
                  } else
                  {
                    PART_data$PART_NAME <- "Unknown"
                    PART_data$INVENTORY_LVL <- "Unknown"
                  }
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  ## Pulling Forcee Data from uploaded file
                  if("FORECAST_YR_1" %in% colnames(PART_data))
                  {
                    PART_NBR_data<- PART_data %>% filter(is.na(as.numeric(PART_data$FORECAST_YR_1)))
                    PART_NBR_data <- PART_NBR_data %>% select(PART_NBR)
                    PART_NBR_data$PART_NBR <- as.character(PART_NBR_data$PART_NBR)
                    PART_NBR_data$PART_NBR <- str_pad(PART_NBR_data$PART_NBR, width=8, side="left", pad="0")
                    
                    ## WRITING THE TABLE IN THE SERVER, THIS TABLE WILL DROPPED AT THE END OF THE PROCESSING
                    dbWriteTable(conn = con,
                                 name = PART_NBR_data_name,
                                 value = PART_NBR_data, overwrite = TRUE )
                    
                    Flag_PART_NBR_data <- 1
                    print("Uploaded")
                    
                    PART_NBR_ex <- PART_data %>% filter(!is.na(as.numeric(PART_data$FORECAST_YR_1)))
                    
                    PART_NBR_ex_forcee <- PART_NBR_ex %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                                 FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                                 FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                                 FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                                 FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                                 FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                                 FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                   
                     PART_NBR_ex_forcee$ACTUAL_SALES_CYTD[is.na(PART_NBR_ex_forcee$ACTUAL_SALES_CYTD)]<-0
                    PART_NBR_ex_forcee$PROJECTED_SALES_CURR_YEAR[is.na(PART_NBR_ex_forcee$PROJECTED_SALES_CURR_YEAR)]<-0
                    PART_NBR_ex_forcee$ACTUAL_SALES_CURR_YEAR_MINUS_2[is.na(PART_NBR_ex_forcee$ACTUAL_SALES_CURR_YEAR_MINUS_2)]<-0
                    PART_NBR_ex_forcee$ACTUAL_SALES_CURR_YEAR_MINUS_1[is.na(PART_NBR_ex_forcee$ACTUAL_SALES_CURR_YEAR_MINUS_1)]<-0
                    YR<-as.numeric(format(Sys.Date(),"%Y"))
                    data_forcee <- paste("SELECT HEAD AS PART_NBR,ACTUAL_SALES_CYTD, PROJECTED_SALES_CURR_YEAR,ACTUAL_SALES_CURR_YEAR_MINUS_2,ACTUAL_SALES_CURR_YEAR_MINUS_1
                                         FROM A_SCREAD.FORECAST_DATA@SC
                                         WHERE HEAD IN (SELECT PART_NBR FROM", PART_NBR_data_name," )")
                    
                    
                    ATB_1_Data <- dbGetQuery(con,data_forcee)
                    
                    
                    sql_atb_0_frocee<- paste("SELECT PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL,SUM(FORECAST_YR_1) AS FORECAST_YR_1,SUM(FORECAST_YR_2) AS FORECAST_YR_2 
                                          ,SUM(FORECAST_YR_3) AS FORECAST_YR_3,SUM(FORECAST_YR_4) AS FORECAST_YR_4,SUM(FORECAST_YR_5) AS FORECAST_YR_5,SUM(FORECAST_YR_6) AS FORECAST_YR_6
                                          ,SUM(FORECAST_YR_7) AS FORECAST_YR_7,SUM(FORECAST_YR_8) AS FORECAST_YR_8,SUM(FORECAST_YR_9) AS FORECAST_YR_9,SUM(FORECAST_YR_10) AS FORECAST_YR_10
                                          ,SUM(FORECAST_YR_11) AS FORECAST_YR_11,SUM(FORECAST_YR_12) AS FORECAST_YR_12,SUM(FORECAST_YR_13) AS FORECAST_YR_13,SUM(FORECAST_YR_14) AS FORECAST_YR_14
                                          ,SUM(FORECAST_YR_15) AS FORECAST_YR_15,SUM(FORECAST_YR_16) AS FORECAST_YR_16,SUM(FORECAST_YR_17) AS FORECAST_YR_17,SUM(FORECAST_YR_18) AS FORECAST_YR_18
                                          ,SUM(FORECAST_YR_19) AS FORECAST_YR_19,SUM(FORECAST_YR_20) AS FORECAST_YR_20,SUM(FORECAST_YR_21) AS FORECAST_YR_21,SUM(FORECAST_YR_22) AS FORECAST_YR_22
                                          ,SUM(FORECAST_YR_23) AS FORECAST_YR_23,SUM(FORECAST_YR_24) AS FORECAST_YR_24,SUM(FORECAST_YR_25) AS FORECAST_YR_25,SUM(FORECAST_YR_26) AS FORECAST_YR_26
                                          ,SUM(FORECAST_YR_27) AS FORECAST_YR_27,SUM(FORECAST_YR_28) AS FORECAST_YR_28,SUM(FORECAST_YR_29) AS FORECAST_YR_29,SUM(FORECAST_YR_30) AS FORECAST_YR_30 FROM 
                                          ( 
                                            SELECT P.PART_NBR,PD.PART_DESCRIPTION AS PART_NAME,PD.SVC_USE_LAST_YR AS APPLICATION_LY,PI.SALE_INV_QTY AS INVENTORY_LVL,
                                            CASE WHEN FY.YEAR=",YR+1," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_1,
                                            CASE WHEN FY.YEAR=",YR+2," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_2,
                                            CASE WHEN FY.YEAR=",YR+3," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_3,
                                            CASE WHEN FY.YEAR=",YR+4," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_4,
                                            CASE WHEN FY.YEAR=",YR+5," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_5,
                                            CASE WHEN FY.YEAR=",YR+6," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_6,
                                            CASE WHEN FY.YEAR=",YR+7," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_7,
                                            CASE WHEN FY.YEAR=",YR+8," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_8,
                                            CASE WHEN FY.YEAR=",YR+9," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_9,
                                            CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_10,
                                            CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_11,
                                            CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_12,
                                            CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_13,
                                            CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_14,
                                            CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_15,
                                            CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_16,
                                            CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_17,
                                            CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_18,
                                            CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_19,
                                            CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_20,
                                            CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_21,
                                            CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_22,
                                            CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_23,
                                            CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_24,
                                            CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_25,
                                            CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_26,
                                            CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_27,
                                            CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_28,
                                            CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_29,
                                            CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_30
                                            FROM FORECAST_DATA.PART P LEFT JOIN FORECAST_DATA.FORECAST F ON F.STD_PART_NBR = P.STD_PART_NBR
                                            LEFT JOIN FORECAST_DATA.FORECAST_YEAR FY ON FY.FORECAST_ID = F.FORECAST_ID
                                            LEFT JOIN FORECAST_DATA.PART_DETAIL PD ON PD.PART_ID = P.PART_ID
											                      LEFT JOIN FORECAST_DATA.PART_INVENTORY PI ON PI.PART_ID = PI.PART_ID
                                            WHERE F.COUNTRY_ID='137' AND F.FORECAST_TYPE='ACTUAL' AND P.DELETE_IND='N' AND P.COUNTRY_ID='137' AND PD.DELETE_IND='N' AND PI.DELETE_IND='N'
                                            AND PART_NBR IN (SELECT PART_NBR FROM",PART_NBR_data_name,")GROUP BY P.PART_NBR,PD.PART_DESCRIPTION,PD.SVC_USE_LAST_YR,PI.SALE_INV_QTY,
                                              CASE WHEN FY.YEAR=",YR+1,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+2,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+3,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+4,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+5,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+6,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+7,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+8,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+9,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END) GROUP BY PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL")
                    PART_NBR_data_forcee_1 <- dbGetQuery(con,sql_atb_0_frocee)
                    
                    PART_NBR_data_forcee_1 <- merge(x= ATB_1_Data, y= PART_NBR_data_forcee_1, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                    
                    PART_NBR_data_forcee <- PART_NBR_data_forcee_1 %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                                              FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                                              FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                                              FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                                              FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                                              FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                                              FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                    
                    
                    ATB_1_Forcee <- rbind(PART_NBR_ex_forcee, PART_NBR_data_forcee)
                    dbRemoveTable(con, PART_NBR_data_name)
                    
                    print("if statement executed cogvscost")
                    
                  } else  ## Pulling Forcee Data from server
                  {
                    print("else started")
                    
                    PART_data <- PART_data %>% select(PART_NBR)
                    dbWriteTable(conn = con,
                                 name = PART_data_name,
                                 value = PART_data,overwrite = TRUE )
                    
                    Flag_PART_data <- 1
                    YR<-as.numeric(format(Sys.Date(),"%Y"))
                    sql_atb_1_frocee<-  paste("SELECT HEAD AS PART_NBR,ACTUAL_SALES_CYTD, PROJECTED_SALES_CURR_YEAR,ACTUAL_SALES_CURR_YEAR_MINUS_2,ACTUAL_SALES_CURR_YEAR_MINUS_1
                                              FROM A_SCREAD.FORECAST_DATA@SC
                                              WHERE HEAD IN (SELECT PART_NBR FROM", PART_data_name,")")
                    
                    PART_data_num_1 <- dbGetQuery(con,sql_atb_1_frocee)
                    PART_data_num_1[is.na(PART_data_num_1)]<-0
                    dbWriteTable(conn = con,
                                 name = PART_data_num_name_1,
                                 value = PART_data_num_1, overwrite = TRUE, append = FALSE)
                    
                    sql_atb_0_frocee<- paste("SELECT PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL,SUM(FORECAST_YR_1) AS FORECAST_YR_1,SUM(FORECAST_YR_2) AS FORECAST_YR_2 
                                          ,SUM(FORECAST_YR_3) AS FORECAST_YR_3,SUM(FORECAST_YR_4) AS FORECAST_YR_4,SUM(FORECAST_YR_5) AS FORECAST_YR_5,SUM(FORECAST_YR_6) AS FORECAST_YR_6
                                          ,SUM(FORECAST_YR_7) AS FORECAST_YR_7,SUM(FORECAST_YR_8) AS FORECAST_YR_8,SUM(FORECAST_YR_9) AS FORECAST_YR_9,SUM(FORECAST_YR_10) AS FORECAST_YR_10
                                          ,SUM(FORECAST_YR_11) AS FORECAST_YR_11,SUM(FORECAST_YR_12) AS FORECAST_YR_12,SUM(FORECAST_YR_13) AS FORECAST_YR_13,SUM(FORECAST_YR_14) AS FORECAST_YR_14
                                          ,SUM(FORECAST_YR_15) AS FORECAST_YR_15,SUM(FORECAST_YR_16) AS FORECAST_YR_16,SUM(FORECAST_YR_17) AS FORECAST_YR_17,SUM(FORECAST_YR_18) AS FORECAST_YR_18
                                          ,SUM(FORECAST_YR_19) AS FORECAST_YR_19,SUM(FORECAST_YR_20) AS FORECAST_YR_20,SUM(FORECAST_YR_21) AS FORECAST_YR_21,SUM(FORECAST_YR_22) AS FORECAST_YR_22
                                          ,SUM(FORECAST_YR_23) AS FORECAST_YR_23,SUM(FORECAST_YR_24) AS FORECAST_YR_24,SUM(FORECAST_YR_25) AS FORECAST_YR_25,SUM(FORECAST_YR_26) AS FORECAST_YR_26
                                          ,SUM(FORECAST_YR_27) AS FORECAST_YR_27,SUM(FORECAST_YR_28) AS FORECAST_YR_28,SUM(FORECAST_YR_29) AS FORECAST_YR_29,SUM(FORECAST_YR_30) AS FORECAST_YR_30 FROM 
                                          ( 
                                            SELECT P.PART_NBR,PD.PART_DESCRIPTION AS PART_NAME,PD.SVC_USE_LAST_YR AS APPLICATION_LY,PI.SALE_INV_QTY AS INVENTORY_LVL,
                                            CASE WHEN FY.YEAR=",YR+1," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_1,
                                            CASE WHEN FY.YEAR=",YR+2," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_2,
                                            CASE WHEN FY.YEAR=",YR+3," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_3,
                                            CASE WHEN FY.YEAR=",YR+4," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_4,
                                            CASE WHEN FY.YEAR=",YR+5," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_5,
                                            CASE WHEN FY.YEAR=",YR+6," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_6,
                                            CASE WHEN FY.YEAR=",YR+7," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_7,
                                            CASE WHEN FY.YEAR=",YR+8," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_8,
                                            CASE WHEN FY.YEAR=",YR+9," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_9,
                                            CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_10,
                                            CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_11,
                                            CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_12,
                                            CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_13,
                                            CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_14,
                                            CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_15,
                                            CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_16,
                                            CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_17,
                                            CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_18,
                                            CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_19,
                                            CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_20,
                                            CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_21,
                                            CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_22,
                                            CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_23,
                                            CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_24,
                                            CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_25,
                                            CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_26,
                                            CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_27,
                                            CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_28,
                                            CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_29,
                                            CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END AS FORECAST_YR_30
                                            FROM FORECAST_DATA.PART P LEFT JOIN FORECAST_DATA.FORECAST F ON F.STD_PART_NBR = P.STD_PART_NBR
                                            LEFT JOIN FORECAST_DATA.FORECAST_YEAR FY ON FY.FORECAST_ID = F.FORECAST_ID
                                            LEFT JOIN FORECAST_DATA.PART_DETAIL PD ON PD.PART_ID = P.PART_ID
										                      	LEFT JOIN FORECAST_DATA.PART_INVENTORY PI ON PI.PART_ID = P.PART_ID
                                            WHERE F.COUNTRY_ID='137' AND F.FORECAST_TYPE='ACTUAL' AND P.DELETE_IND='N' AND P.COUNTRY_ID='137' AND PD.DELETE_IND='N'
                                            AND PART_NBR IN (SELECT PART_NBR FROM",PART_data_name,")GROUP BY P.PART_NBR,PD.PART_DESCRIPTION,PD.SVC_USE_LAST_YR,PI.SALE_INV_QTY,
                                              CASE WHEN FY.YEAR=",YR+1,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+2,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+3,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+4,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+5,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+6,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+7,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+8,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+9,"  THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+10," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+11," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+12," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+13," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+14," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+15," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+16," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+17," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+18," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+19," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+20," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+21," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+22," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+23," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+24," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+25," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+26," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+27," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+28," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+29," THEN FY.QUANTITY ELSE 0 END,
                                              CASE WHEN FY.YEAR=",YR+30," THEN FY.QUANTITY ELSE 0 END) GROUP BY PART_NBR,PART_NAME,APPLICATION_LY,INVENTORY_LVL")
                    ATB_1_Forcee_1 <- dbGetQuery(con,sql_atb_0_frocee)
                    
                    ATB_1_Forcee_2 <- merge(x= PART_data_num_1, y= ATB_1_Forcee_1, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                    
                    ATB_1_Forcee <- ATB_1_Forcee_2 %>% select(PART_NBR, PART_NAME, INVENTORY_LVL,ACTUAL_SALES_CYTD,PROJECTED_SALES_CURR_YEAR, FORECAST_YR_1,
                                                              FORECAST_YR_2, FORECAST_YR_3, FORECAST_YR_4, FORECAST_YR_5,
                                                              FORECAST_YR_6, FORECAST_YR_7, FORECAST_YR_8, FORECAST_YR_9, FORECAST_YR_10,
                                                              FORECAST_YR_11, FORECAST_YR_12, FORECAST_YR_13, FORECAST_YR_14,
                                                              FORECAST_YR_15, FORECAST_YR_16, FORECAST_YR_17, FORECAST_YR_18, FORECAST_YR_19,
                                                              FORECAST_YR_20, FORECAST_YR_21, FORECAST_YR_22, FORECAST_YR_23, FORECAST_YR_24,
                                                              FORECAST_YR_25, FORECAST_YR_26, FORECAST_YR_27, FORECAST_YR_28, FORECAST_YR_29, FORECAST_YR_30,APPLICATION_LY, ACTUAL_SALES_CURR_YEAR_MINUS_2, ACTUAL_SALES_CURR_YEAR_MINUS_1)
                    
                    ATB_1_Forcee$FORECAST_YR_1<-as.character(ATB_1_Forcee$FORECAST_YR_1)
                    ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
                  }
                  
                  
                  if(nrow(ATB_1_Forcee) != nrow(PART_data))
                  {
                    Complete_Part_List <- PART_data %>% select(PART_NBR)
                    ATB_1_Forcee <- merge(x =  Complete_Part_List, y = ATB_1_Forcee, by.x = "PART_NBR", by.y = "PART_NBR", all.x = TRUE)
                    ATB_1_Forcee[is.na(ATB_1_Forcee)] <- 0
                    print("TRUE state,ment,")
                  }
                  
                  PART_data_num <- ATB_1_Forcee %>% select(PART_NBR)
                  PART_data_num$PART_NBR <- str_pad(PART_data_num$PART_NBR, width=8, side="left", pad="0")
                  PART_data_num$PART_NBR <- as.character(PART_data_num$PART_NBR)
                  
                  dbWriteTable(conn = con,
                               name = PART_data_num_name,
                               value = PART_data_num, overwrite = TRUE)
                  
                  ## Mapping Last Cost
                  sql_atb_1_ser_mat <- paste("SELECT  PART_NBR, B.CAMPN_DTE, B.CAMPN_QTY,B.DECK_CD,
                                             B.LAST_COST,A.USB_CD, B.RB1_ALPHA_WHSE_CLASS, A.UNIT_LOAD_QTY,A.PART_REMOVAL_DT,
                                             A.PART_REINST_DT, A.MDSNG_PKG_QTY ,A.MCHDG_PACK_HEIGHT, A.MCHDG_PACK_LENGTH,A.MCHDG_PACK_WIDTH
                                             
                                             FROM
                                             DBO.SERVICE_PART@EUC A
                                             LEFT JOIN DBO.MATERIAL_PART@EUC B
                                             ON A.PART_NBR=B.MATRL_PART_NBR
                                             WHERE PART_NBR IN (SELECT LPAD(PART_NBR, 8, '0') FROM", PART_data_num_name, ")")
                  
                  
                  ATB_1_ser_mat <- dbGetQuery(con, sql_atb_1_ser_mat)
                  
                  ATB_1_1 <- ATB_1_Forcee
                  ATB_1_1$PART_NBR <- str_pad(ATB_1_1$PART_NBR, width=8, side="left", pad="0")
                  ATB_1_1$PART_NBR <- as.character(ATB_1_1$PART_NBR)
                  
                  
                  ATB_1 <- merge(x= ATB_1_1, y= ATB_1_ser_mat, by.x = "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                  
                  ATB_1$PART_NBR <- str_pad(ATB_1$PART_NBR, width=8, side="left", pad="0")
                  ATB_1$PART_NBR <- as.character(ATB_1$PART_NBR)
                  
                  ATB_1$CAMPN_QTY <- as.character(ATB_1$CAMPN_QTY)
                  ATB_1$DECK_CD <- as.character(ATB_1$CAMPN_QTY)
                  ATB_1$LAST_COST <- as.character(ATB_1$LAST_COST)
                  ATB_1$MDSNG_PKG_QTY[is.na(ATB_1$MDSNG_PKG_QTY)] <- 0
                  ATB_1$MCHDG_PACK_HEIGHT[is.na(ATB_1$MCHDG_PACK_HEIGHT)] <- 0
                  ATB_1$MCHDG_PACK_LENGTH[is.na(ATB_1$MCHDG_PACK_LENGTH)] <- 0
                  ATB_1$MCHDG_PACK_WIDTH[is.na(ATB_1$MCHDG_PACK_WIDTH)] <- 0
                  ATB_1$UNIT_LOAD_QTY[is.na(ATB_1$UNIT_LOAD_QTY)] <- 0
                  ATB_1[is.na(ATB_1)]<-0
                  dbWriteTable(conn = con,
                               name = ATB_1_NAME ,
                               value = ATB_1,overwrite = TRUE)
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_2<- paste(" SELECT * FROM
                                    (
                                    SELECT A.*, NVL(B.ALPHA,'0') AS ALPHA, NVL(B.NUMERIC,'0') AS NUMERIC FROM", ATB_1_NAME, "A
                                    LEFT JOIN A_SCREAD.COMMCODE@SC B
                                    ON A.PART_NBR = B.PART
                                    ) ")
                  
                  ATB_2 <- dbGetQuery(con, sql_ATB_2)
                  
                  dbWriteTable(conn = con,
                               name = ATB_2_NAME ,
                               value = ATB_2, overwrite = TRUE)
                  
                  print("ATB-2 Done")
                  
                  sql_ATB_3 <- paste("SELECT *
                                     FROM", ATB_2_NAME, "A
                                     
                                     LEFT JOIN
                                     
                                     (SELECT PN,
                                     (CASE WHEN CRLD IN (1,87,76,696,622,94,75,63,58,92,0) THEN CRLD
                                     ELSE 0
                                     END
                                     )AS CRLD,
                                     (CASE WHEN PROC IN (1,87,619,604,77,696,76,94,645,622,609,75,640,0,617) THEN PROC
                                     ELSE 0
                                     END
                                     )AS PROC FROM A_SCREAD.PART_DETAIL@SC
                                     )B
                                     
                                     ON A.PART_NBR=B.PN")
                  
                  ATB_3 <- dbGetQuery(con, sql_ATB_3)
                  ATB_3$PN[is.na(ATB_3$PN)] <- 0
                  ATB_3$CRLD[is.na(ATB_3$CRLD)] <- 0
                  ATB_3$PROC[is.na(ATB_3$PROC)] <- 0
                  
                  dbWriteTable(conn = con,
                               name = ATB_3_NAME ,
                               value = ATB_3, overwrite = TRUE)
                  
                  print("ATB-3 Done")
                  
                  sql_ATB_4 <- paste("SELECT * FROM
                                     (
                                     (SELECT * FROM", ATB_3_NAME, ")A
                                     LEFT JOIN
                                     (SELECT * FROM AVG_WEIGHTED_CUBE)B
                                     ON
                                     A.CRLD = B.FACILITY AND A.ALPHA = B.CCODE
                                     )")
                  
                  ATB_4 <- dbGetQuery(con, sql_ATB_4)
                  dbWriteTable(conn = con,
                               name = ATB_4_NAME ,
                               value = ATB_4,overwrite = TRUE)
                  print("ATB-4 Done")
                  
                  sql_ATB_5 <- paste("SELECT A.*,NVL(AVG_LCPP,0) AS AVG_LCPP,NVL(AVG_PCPP,0)AS AVG_PCPP FROM
                                     (
                                     (SELECT * FROM ", ATB_4_NAME,")A
                                     LEFT JOIN
                                     (SELECT PART_NBR,FACILITY,ROUND(NVL(AVG(LABOR_COST_PER_PIECE),0),5) as AVG_LCPP ,ROUND(NVL(AVG(PACK_COST_PER_PIECE),0),5)as AVG_PCPP
                                     FROM(
                                     (SELECT PART_NBR,WHSE_NBR,STATN_CD FROM DBO.M8STACD_STANDARDS@EUC )B
                                     LEFT JOIN (SELECT * FROM PROCESSING_CPP)C
                                     ON
                                     B.WHSE_NBR = C.FACILITY
                                     AND B.STATN_CD = C.STATN_CD)
                                     WHERE C.FACILITY IS NOT NULL GROUP BY PART_NBR,FACILITY)D
                                     ON
                                     A.PART_NBR = D.PART_NBR
                                     AND A.PROC = D.FACILITY)"
                  )
                  
                  ATB_5 <- dbGetQuery(con, sql_ATB_5)
                  dbWriteTable(conn = con,
                               name = ATB_5_NAME ,
                               value = ATB_5, overwrite = TRUE)
                  print("ATB-5 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_6 <- paste("SELECT A.*, NVL(B.OVERALL_LABOR_COST_PER_PIECE,0) AS PC_LCPP, NVL(B.IB_LABOR_COST_PER_PIECE,0) AS PC_IB_LCPP, NVL(B.OB_LABOR_COST_PER_PIECE,0) AS PC_0B_LCPP
                                     --SELECT *
                                     FROM
                                     (
                                     (SELECT * FROM", ATB_5_NAME, ")A
                                     LEFT JOIN
                                     (SELECT * FROM PC_SERV_CPP)B
                                     ON
                                     A.CRLD=B.FACILITY AND A.ALPHA=B.COMMODITY_CODE
                                     )")
                  
                  ATB_6 <- dbGetQuery(con, sql_ATB_6)
                  dbWriteTable(conn = con,
                               name = ATB_6_NAME ,
                               value = ATB_6, overwrite = TRUE)
                  print("ATB-6 Done")
                  
                  sql_ATB_7 <- paste("SELECT E.*, NVL (OFFSITE_LCPP,0) AS OFFSITE_LCPP
                                     FROM
                                     (
                                     SELECT * FROM
                                     (
                                     SELECT C.*, NVL(BC_LCPP,0) AS BC_LCPP FROM
                                     (
                                     SELECT A.*, NVL(PDC_LCPP,0) AS PDC_LCPP FROM
                                     (
                                     (SELECT * FROM", ATB_6_NAME, ") A
                                     LEFT JOIN
                                     (SELECT CC, PDC_LCPP FROM PDC_SERV_CPP)B
                                     ON A.ALPHA=B.CC
                                     )
                                     )C
                                     LEFT JOIN
                                     (SELECT CC, BC_LCPP FROM BC_SERV_CPP)D
                                     ON C.ALPHA=D.CC
                                     )
                                     )E
                                     LEFT JOIN
                                     (SELECT CC, OFFSITE_LCPP FROM OFFSITE_SERV_CPP)F
                                     ON E.ALPHA=F.CC")
                  
                  ATB_7 <- dbGetQuery(con, sql_ATB_7)
                  dbWriteTable(conn = con,
                               name = ATB_7_NAME ,
                               value = ATB_7, overwrite = TRUE)
                  print("ATB-7 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_8 <- paste("SELECT A.*, B.MTH_COST_PER_SQ_FT, B.UL_SQ_FT
                                     FROM
                                     (
                                     (SELECT * FROM", ATB_7_NAME, ")A
                                     LEFT JOIN
                                     (SELECT * FROM WAREHOUSE_COST_PER_SQFT)B
                                     ON A.CRLD=B.PLANT
                                     )")
                  
                  ATB_8 <- dbGetQuery(con, sql_ATB_8)
                  
                  ATB_8$MTH_COST_PER_SQ_FT <- as.character(ATB_8$MTH_COST_PER_SQ_FT)
                  ATB_8$UL_SQ_FT <- as.character(ATB_8$UL_SQ_FT)
                  
                  dbWriteTable(conn = con,
                               name = ATB_8_NAME ,
                               value = ATB_8, overwrite = TRUE)
                  print("ATB-8 Done")
                  
                  
                  sql_ATB_9 <- paste("SELECT C.*, TRANSPORTATION_OFFSITES_PKGR, TRANSPORTATION_FROM_SOURCE, TRANSPORTATION_PDC_TO_DLR, TRANSPORTATION_TO_PDC, TRANSPORTATION_FACILITY_TO_DLR, TRANSPORTATION_BCARRIER_TO_DLR
                                     FROM
                                     (
                                     SELECT A.*, TRANS_OFFSITES_PKGR, TRANS_FROM_WC, MCD_TO_XDOCK, TRANS_TO_PDC, TRANS_PDC_TO_DLR, TRANS_FROM_SOURCE, XDOCK_OVERSIZE, XDOCK_STANDARD
                                     FROM
                                     (
                                     (SELECT * FROM", ATB_8_NAME, ") A
                                     LEFT JOIN
                                     (SELECT * FROM TRANS_COSTS_PER_CUBIC_FT)B
                                     ON
                                     A.CRLD = B.FACILITY
                                     )
                                     )C
                                     LEFT JOIN
                                     (SELECT * FROM TRANSPORTATION_COSTS)D
                                     ON C.CRLD=D.FACILITY AND C.ALPHA=D.CC")
                  
                  ATB_9 <- dbGetQuery(con, sql_ATB_9)
                  dbWriteTable(conn = con,
                               name = ATB_9_NAME ,
                               value = ATB_9, overwrite = TRUE)
                  print("ATB-9 Done")
                  
                  sql_ATB_10 <- paste("SELECT A.*,
                                      CASE WHEN MDSNG_PKG_QTY = 0 THEN 1
                                      ELSE MDSNG_PKG_QTY
                                      END AS ADJ_MDSNG_PKG_QTY
                                      FROM", ATB_9_NAME, "A")
                  
                  ATB_10 <- dbGetQuery(con, sql_ATB_10)
                  
                  ATB_10$PART_NBR <- as.character(ATB_10$PART_NBR)
                  ATB_10$PART_NBR <- str_pad(ATB_10$PART_NBR, width=8, side="left", pad="0")
                  
                  dbWriteTable(conn = con,
                               name = ATB_10_NAME ,
                               value = ATB_10, overwrite = TRUE)
                  print("ATB-10 Done")
                  
                  sql_ATB_11 <- paste("SELECT X.*, Y.LCC_PRODLINE,
                                      Y.LCC_SUBLINE,
                                      Y.DLR_CURR_DEALER_PRC,Y.NATL_PIECE_SLS_DLR_4, 
                                      Y.NATL_PIECE_SLS_COACH_4, Y.NATL_PIECE_SLS_OTD_4, Y.NATL_PIECE_SLS_EXPORT_4, Y.NATL_PIECE_SLS_WD_4,Y.NATL_PIECE_SLS_AFTMKT_4,Y.GMP_PART_NBR,Y.AC_DELCO
                                      FROM
                                      
                                      (
                                      SELECT B.*,
                                      (CASE WHEN UNIT_LOAD_QTY>0 THEN UNIT_LOAD_QTY
                                      ELSE 64/CUBIC_FT_PER_PIECE
                                      END) AS ADJ_UNIT_LOAD_QTY
                                      FROM
                                      (
                                      SELECT A.*,
                                      (CASE WHEN MCHDG_PACK_HEIGHT>0 AND MCHDG_PACK_LENGTH > 0 AND MCHDG_PACK_WIDTH >0
                                      THEN ROUND((MCHDG_PACK_HEIGHT*MCHDG_PACK_LENGTH*MCHDG_PACK_WIDTH/1728)/ADJ_MDSNG_PKG_QTY,12)
                                      ELSE TO_NUMBER(AVG_WEIGHT)/ADJ_MDSNG_PKG_QTY
                                      END) AS CUBIC_FT_PER_PIECE
                                      FROM", ATB_10_NAME, "A
                                      ) B
                                      ) X
                                      LEFT JOIN
                                      COMMON_WORK_NO_COST Y
                                      ON X.PART_NBR=Y.PART_NBR")
                  ATB_COST_ADS_EXAMPLE <- dbGetQuery(con, sql_ATB_11)
                  
                  ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE <- as.character(ATB_COST_ADS_EXAMPLE$CUBIC_FT_PER_PIECE)
                  ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY <- as.character(ATB_COST_ADS_EXAMPLE$ADJ_UNIT_LOAD_QTY)
                  ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC <- as.character(ATB_COST_ADS_EXAMPLE$DLR_CURR_DEALER_PRC)
                  
                  dbWriteTable(conn = con,
                               name = ATB_COST_ADS_EXAMPLE_NAME ,
                               value = ATB_COST_ADS_EXAMPLE, overwrite = TRUE)
                  print("ATB-11 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_12 <- paste("SELECT B.*,
                                      (CASE WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1>165 THEN 'Y'
                                      WHEN BULK_CR_CALC_2<119 AND BULK_CR_CALC_1<=165 THEN 'N'
                                      ELSE 'Y' END ) AS BULK_CR_FLAG
                                      FROM
                                      (SELECT A.*,
                                      ROUND((MTH_COST_PER_SQ_FT * UL_SQ_FT/ADJ_UNIT_LOAD_QTY), 10) AS MTH_SQ_FT_COST_PER_PEICE,
                                      ROUND(TRANS_PDC_TO_DLR*CUBIC_FT_PER_PIECE) AS OB_TRANS_CST_PP,
                                      
                                      (CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_FROM_WC)*CUBIC_FT_PER_PIECE)
                                      WHEN RB1_ALPHA_WHSE_CLASS='SP' AND PROC!=94 THEN ((TRANS_TO_PDC+TRANS_FROM_SOURCE+TRANS_OFFSITES_PKGR)*CUBIC_FT_PER_PIECE)
                                      ELSE (TRANS_FROM_SOURCE*CUBIC_FT_PER_PIECE) END )AS IB_TRANS_CST_PP,
                                      
                                      ROUND(2*(MCHDG_PACK_HEIGHT+MCHDG_PACK_WIDTH)) AS BULK_CR_CALC_1,
                                      
                                      (CASE WHEN MCHDG_PACK_HEIGHT>MCHDG_PACK_WIDTH AND MCHDG_PACK_HEIGHT>MCHDG_PACK_LENGTH THEN MCHDG_PACK_HEIGHT
                                      WHEN MCHDG_PACK_WIDTH>MCHDG_PACK_HEIGHT AND MCHDG_PACK_WIDTH>MCHDG_PACK_LENGTH THEN MCHDG_PACK_WIDTH
                                      ELSE MCHDG_PACK_LENGTH END)AS BULK_CR_CALC_2
                                      FROM", ATB_COST_ADS_EXAMPLE_NAME, "A
                                      ) B")
                  
                  ATB_COST_ELEMENT_CAL_EXAPMLE <- dbGetQuery(con, sql_ATB_12)
                  
                  ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$MTH_SQ_FT_COST_PER_PEICE)
                  ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$OB_TRANS_CST_PP)
                  ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$IB_TRANS_CST_PP)
                  ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1 <- as.character(ATB_COST_ELEMENT_CAL_EXAPMLE$BULK_CR_CALC_1)
                  
                  dbWriteTable(conn = con,
                               name = ATB_COST_ELEMENT_NAME ,
                               value = ATB_COST_ELEMENT_CAL_EXAPMLE, overwrite = TRUE)
                  print("ATB-12 Done")
                  
                  sql_ATB_13 <- paste("SELECT X.*,
                                      (CASE WHEN USB_CD = 'U' THEN MAX_WEEKS_U
                                      ELSE MAX_WEEKS_SB
                                      END) AS MAX_WEEKS_SUPPLY
                                      FROM
                                      (
                                      SELECT P.*,NVL(Q.MWSBOS,99) AS MAX_WEEKS_U
                                      FROM
                                      (
                                      SELECT A.*,NVL(B.MWSBOS,99) AS MAX_WEEKS_SB
                                      FROM", ATB_COST_ELEMENT_NAME, "A
                                      LEFT JOIN
                                      MWS_USB_SB B
                                      ON A.ALPHA = B.ALPHA
                                      ) P
                                      LEFT JOIN MWS_USB_U Q
                                      ON P.PROC=Q.PROC
                                      ) X")
                  
                  ATB_COST_MAX_SUPPLY_EXAMPLE <- dbGetQuery(con, sql_ATB_13)
                  dbWriteTable(conn = con,
                               name = ATB_COST_MAX_SUPPLY_NAME ,
                               value = ATB_COST_MAX_SUPPLY_EXAMPLE, overwrite = TRUE)
                  print("ATB-13 Done")
                  
                  incProgress(1/7, detail = "Pulling Data")
                  
                  sql_ATB_14 <- paste("SELECT A.*,
                                      CASE WHEN RB1_ALPHA_WHSE_CLASS='SP' THEN 0
                                      WHEN RB1_ALPHA_WHSE_CLASS!='SP' AND BULK_CR_FLAG='Y' THEN (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_OVERSIZE)*CUBIC_FT_PER_PIECE
                                      ELSE (TRANS_OFFSITES_PKGR + MCD_TO_XDOCK + XDOCK_STANDARD)*CUBIC_FT_PER_PIECE
                                      END AS REDISTRIBUTION_COST_PP,
                                      
                                      CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.39*PC_LCPP)+(0.39*PDC_LCPP)
                                      WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.39*PC_LCPP)+(0.39*BC_LCPP)
                                      ELSE (0.39*PC_LCPP)
                                      END AS IB_LABOR_COST_PP,
                                      
                                      CASE WHEN RB1_ALPHA_WHSE_CLASS = 'SP' THEN (0.61*PC_LCPP)+(0.61*PDC_LCPP)
                                      WHEN RB1_ALPHA_WHSE_CLASS = 'BP' THEN (0.61*PC_LCPP)+(0.61*BC_LCPP)
                                      ELSE (0.61*PC_LCPP)
                                      END AS OB_LABOR_COST_PP
                                      FROM", ATB_COST_MAX_SUPPLY_NAME, "A")
                  
                  ATB_COST_CAL_EXAMPLE <- dbGetQuery(con,sql_ATB_14)
                  
                  ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP <- as.character(ATB_COST_CAL_EXAMPLE$REDISTRIBUTION_COST_PP)
                  
                  dbWriteTable(conn = con,
                               name = ATB_COST_CAL_EXAMPLE_NAME ,
                               value = ATB_COST_CAL_EXAMPLE, overwrite = TRUE)
                  print("ATB-14 Done")
                  
                  sql_ATB_15 <- paste("  SELECT A.*, (IB_LABOR_COST_PP + OB_LABOR_COST_PP + AVG_LCPP + AVG_PCPP) AS ONSITE_PRCS_COST_PP,
                                      (OB_TRANS_CST_PP + IB_TRANS_CST_PP + REDISTRIBUTION_COST_PP) AS ONSITE_TRANS_COST_PER_PIECE,
                                      (TRANS_OFFSITES_PKGR*CUBIC_FT_PER_PIECE) AS OFFSITE_TRANS_COST_PP
                                      FROM",
                                      ATB_COST_CAL_EXAMPLE_NAME, "A")
                  
                  ATB_TRANS_PROCESS_COST_EXAMPLE <- dbGetQuery(con, sql_ATB_15)
                  
                  ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$ONSITE_TRANS_COST_PER_PIECE)
                  ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP <- as.character(ATB_TRANS_PROCESS_COST_EXAMPLE$OFFSITE_TRANS_COST_PP)
                  
                  dbWriteTable(conn = con,
                               name = ATB_TRANS_PROCESS_COST_NAME ,
                               value = ATB_TRANS_PROCESS_COST_EXAMPLE, overwrite = TRUE)
                  print("ATB-15 Done")
                  
                  sql_ads_1 <- paste("SELECT A.*, B.MINIMUM_BUY_QTY, B.STD_PACK_QTY, B.BUY_FREQ FROM",
                                     ATB_TRANS_PROCESS_COST_NAME, "A
                                     LEFT JOIN
                                     (SELECT MTL_PART_PART_NBR, MINIMUM_BUY_QTY, STD_PACK_QTY, BUY_FREQ
                                     FROM DBO.SOURCE@EUC
                                     WHERE PRIME_SOURCE_IND = 1) B
                                     ON A.PART_NBR = B.MTL_PART_PART_NBR")
                  
                  ATB_final_ads_1 <- dbGetQuery(con, sql_ads_1)
                  
                  ATB_final_ads_1$MINIMUM_BUY_QTY <- as.character(ATB_final_ads_1$MINIMUM_BUY_QTY)
                  ATB_final_ads_1$STD_PACK_QTY <- as.character(ATB_final_ads_1$STD_PACK_QTY)
                  ATB_final_ads_1$BUY_FREQ <- as.character(ATB_final_ads_1$BUY_FREQ)
                  
                  dbWriteTable(conn = con,
                               name = ATB_final_ads_1_name,
                               value = ATB_final_ads_1, overwrite = TRUE)
                  
                  print("ATB-16 Done")
                  
                  sql_ads <- paste("SELECT A.*, B.* FROM",
                                   ATB_final_ads_1_name," A
                                   LEFT JOIN MANDATORY_RETENTION_DB B
                                   ON A.PART_NBR = B.PART_NUMBER")
                  
                  ATB_final_ads <- dbGetQuery(con, sql_ads)
                  print("ATB-17 Done")
                  
                  sql_WD_price <- paste("SELECT PART_NUMBER, WD_WHSL_DIST_PRC FROM DBO.WD_PRICES@EUC
                                        WHERE PART_NUMBER IN (SELECT PART_NBR FROM" ,PART_data_num_name, ")")
                  
                  WD_price <- dbGetQuery(con, sql_WD_price)
                  
                  print("wd price taken")
                  
                  sql_Inv_level <- paste("SELECT MATRL_PART_NBR, NATNL_INV AS TOTAL_INVENTORY
                                         FROM DBO.MATERIAL_PART@EUC WHERE MATRL_PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")")
                  
                  Inv_level <- dbGetQuery(con, sql_Inv_level)
                  
                  ## Pulling Sales Distribution across different markets data
                  sql_market_distribution <- paste("SELECT PART_NBR,
                                                   CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                                   WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                                   WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                                   END AS CATEGORY_CODE,
                                                   SUM(YR1_SALES) AS YR1_SALES
                                                   FROM DBO.PART_SLS_TO_DATE@EUC
                                                   WHERE PART_NBR IN (SELECT PART_NBR FROM", PART_data_num_name,")","
                                                   GROUP BY
                                                   PART_NBR,
                                                   CASE WHEN CTG_CD IN ('15', '16') THEN 'SALES_ALLIED_EXPORT'
                                                   WHEN CTG_CD IN ('04', '10') THEN 'SALES_IAM'
                                                   WHEN CTG_CD IN ('01','06','08') THEN 'SALES_OES'
                                                   END")
                  
                  market_distribution <- dbGetQuery(con, sql_market_distribution)
                  
                  market_list <- c("SALES_OES", "SALES_ALLIED_EXPORT", "SALES_IAM")
                  market_list <- as.data.frame(market_list)
                  colnames(market_list) <- c("CATEGORY_CODE")
                  part_list <- PART_data_num
                  colnames(part_list) <- c("PART_NBR")
                  cross_join <- merge(part_list, market_list)
                  cross_join$CATEGORY_CODE <- as.character(cross_join$CATEGORY_CODE)
                  
                  market_distribution <- merge(cross_join, market_distribution, by = c("PART_NBR", "CATEGORY_CODE"), all.x = TRUE)
                  
                  spread_market_distribution <- spread(market_distribution ,key = CATEGORY_CODE,value = YR1_SALES)
                  
                  spread_market_distribution$SALES_ALLIED_EXPORT <- ifelse(is.na(spread_market_distribution$SALES_ALLIED_EXPORT), 0, (spread_market_distribution$SALES_ALLIED_EXPORT))
                  spread_market_distribution$SALES_IAM <- ifelse(is.na(spread_market_distribution$SALES_IAM), 0, (spread_market_distribution$SALES_IAM))
                  spread_market_distribution$SALES_OES <- ifelse(is.na(spread_market_distribution$SALES_OES), 0, (spread_market_distribution$SALES_OES))
                  spread_market_distribution$COMPLETE_SAALES <- spread_market_distribution$SALES_ALLIED_EXPORT + spread_market_distribution$SALES_IAM + spread_market_distribution$SALES_OES
                  spread_market_distribution$ALLIED_EXPORT_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_ALLIED_EXPORT/spread_market_distribution$COMPLETE_SAALES))
                  spread_market_distribution$IAM_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_IAM/spread_market_distribution$COMPLETE_SAALES))
                  spread_market_distribution$OES_FRACTION <- ifelse(spread_market_distribution$COMPLETE_SAALES == 0, 0, (spread_market_distribution$SALES_OES/spread_market_distribution$COMPLETE_SAALES))
                  
                  print("all data taken")
                  
                  # Merging WD preice
                  ATB_final_ads <- merge(ATB_final_ads, WD_price, by.x= "PART_NBR", by.y= "PART_NUMBER", all.x= TRUE)
                  
                  # Merging Inventory Level
                  ATB_final_ads <- merge(ATB_final_ads, Inv_level, by.x= "PART_NBR", by.y= "MATRL_PART_NBR", all.x= TRUE)
                  
                  ATB_final_ads <- merge(ATB_final_ads, spread_market_distribution, by.x= "PART_NBR", by.y= "PART_NBR", all.x= TRUE)
                  
                  print("merge done")
                  dbRemoveTable(con, PART_data_num_name)
                  
                  ATB_final_ads$ACTUAL_SALES_CYTD <- ifelse(is.na(ATB_final_ads$ACTUAL_SALES_CYTD), 0, ATB_final_ads$ACTUAL_SALES_CYTD)
                  ATB_final_ads$PROJECTED_SALES_CURR_YEAR <- ifelse(is.na(ATB_final_ads$PROJECTED_SALES_CURR_YEAR), 0, ATB_final_ads$PROJECTED_SALES_CURR_YEAR)
                  ATB_final_ads$TOTAL_INVENTORY <- ifelse(is.na(ATB_final_ads$TOTAL_INVENTORY), 0, ATB_final_ads$TOTAL_INVENTORY)
                  
                  #ATB_final_ads$CURRENT_YEAR <- (ATB_final_ads$PROJECTED_SALES_CURR_YEAR - ATB_final_ads$ACTUAL_SALES_CYTD)
                  ATB_final_ads$CURRENT_YEAR <- (ATB_final_ads$PROJECTED_SALES_CURR_YEAR)
                  ATB_final_ads$CURRENT_YEAR <- ifelse(ATB_final_ads$CURRENT_YEAR < 0, 0, ATB_final_ads$CURRENT_YEAR)
                  
                  ATB_final_ads$WD_WHSL_DIST_PRC <- ifelse(is.na(ATB_final_ads$WD_WHSL_DIST_PRC), 0, ATB_final_ads$WD_WHSL_DIST_PRC)
                  
                  ATB_final_ads$PART_NBR<- str_pad(ATB_final_ads$PART_NBR, width=8, side="left", pad="0")
                  
                  ATB_final_ads$PL_SL <- paste(ATB_final_ads$LCC_PRODLINE, ATB_final_ads$LCC_SUBLINE,sep = "-")
                  PL_SL_LIST <- as.data.frame(ATB_final_ads$PL_SL)
                  colnames(PL_SL_LIST) <- c("PL_SL")
                  PL_SL_LIST <- as.data.frame(unique(PL_SL_LIST$PL_SL))
                  
                  colnames(PL_SL_LIST) <- c("PL_SL")
                  PL_SL_LIST$PL_SL <- as.character(PL_SL_LIST$PL_SL)
                  ATB_final_ads$DLR_SLS <- ifelse(ATB_final_ads$DLR_CURR_DEALER_PRC ==0 & ATB_final_ads$NATL_PIECE_SLS_DLR_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_COACH_4 ==0 & ATB_final_ads$NATL_PIECE_SLS_EXPORT_4 ==0 ,
                                                  0, 
                                                  as.numeric( ATB_final_ads$NATL_PIECE_SLS_DLR_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_COACH_4) + 
                                                    as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4) + as.numeric(ATB_final_ads$NATL_PIECE_SLS_EXPORT_4))
                  ATB_final_ads$WD_SLS <- ifelse(ATB_final_ads$DLR_SLS ==0,as.numeric(ATB_final_ads$NATL_PIECE_SLS_OTD_4)+as.numeric(ATB_final_ads$NATL_PIECE_SLS_WD_4) +as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4),
                                                 as.numeric( ATB_final_ads$NATL_PIECE_SLS_WD_4 )+ as.numeric(ATB_final_ads$NATL_PIECE_SLS_AFTMKT_4))
                  
                  
                  
                  dbWriteTable(conn = con,
                               name = PL_SL_LIST_ATB_NAME,
                               value = PL_SL_LIST, overwrite = TRUE, append = FALSE)
                  
                  sql_discount_market <- paste("SELECT PL_SL, MARKET, SUM(T_SLS) AS TOTAL_SALES, SUM(T_DISC) AS TOTAL_DISCOUNT
                                               FROM (SELECT (LPAD(PROD_LINE,2,0) || '-' || SUB_LINE) AS PL_SL,MARKET,T_SLS,T_DISC FROM ABM_DATA.ABM_WIDE_DETAIL_NONW_PN_MV_P)
                                               WHERE PL_SL IN (SELECT PL_SL FROM", PL_SL_LIST_ATB_NAME, ")
                                               GROUP BY PL_SL, MARKET")
                  
                  discount_market <- dbGetQuery(con, sql_discount_market)
                  
                  drop_table_PL_SL_LIST_ATB <- paste("BEGIN
                                                     EXECUTE IMMEDIATE 'DROP TABLE", PL_SL_LIST_ATB_NAME, "';
                                                     EXCEPTION
                                                     WHEN OTHERS THEN NULL;
                                                     END;")
                  
                  value_PL_SL_LIST_ATB <- dbSendUpdate(con, drop_table_PL_SL_LIST_ATB)
                  
                  market_list_for_discount <- c("ALLIED/EXPORT", "INDEP AFTERMKT", "ORIG EQUIP SRVC")
                  market_list_for_discount <- as.data.frame(market_list_for_discount)
                  colnames(market_list_for_discount) <- c("CATEGORY_CODE")
                  
                  cross_join_pl_sl <- merge(PL_SL_LIST, market_list_for_discount)
                  cross_join_pl_sl$CATEGORY_CODE <- as.character(cross_join_pl_sl$CATEGORY_CODE)
                  colnames(cross_join_pl_sl) <- c("PL_SL", "MARKET")
                  
                  discount_market <- merge(cross_join_pl_sl, discount_market, by = c("PL_SL", "MARKET"), all.x = TRUE)
                  
                  pl_sl_market_sales <- discount_market %>% select(MARKET, PL_SL, TOTAL_SALES)
                  pl_sl_market_discount <- discount_market %>% select(MARKET, PL_SL, TOTAL_DISCOUNT)
                  
                  spread_sales <- spread(pl_sl_market_sales ,key = MARKET,value = TOTAL_SALES)
                  spread_discount <- spread(pl_sl_market_discount, key = MARKET, value = TOTAL_DISCOUNT)
                  
                  spread_sales$`ALLIED/EXPORT` <- ifelse(is.na(spread_sales$`ALLIED/EXPORT`), 0, spread_sales$`ALLIED/EXPORT`)
                  spread_sales$`INDEP AFTERMKT` <- ifelse(is.na(spread_sales$`INDEP AFTERMKT`), 0, spread_sales$`INDEP AFTERMKT`)
                  spread_sales$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_sales$`ORIG EQUIP SRVC`), 0, spread_sales$`ORIG EQUIP SRVC`)
                  
                  colnames(spread_sales) <- c("PL_SL", "Sales_allied_export", "Sales_iam", "Sales_oes")
                  
                  spread_discount$`ALLIED/EXPORT` <- ifelse(is.na(spread_discount$`ALLIED/EXPORT`), 0, ( spread_discount$`ALLIED/EXPORT`))
                  spread_discount$`INDEP AFTERMKT` <- ifelse(is.na(spread_discount$`INDEP AFTERMKT`), 0, ( spread_discount$`INDEP AFTERMKT`))
                  spread_discount$`ORIG EQUIP SRVC` <- ifelse(is.na(spread_discount$`ORIG EQUIP SRVC`), 0, ( spread_discount$`ORIG EQUIP SRVC`))
                  
                  colnames(spread_discount) <- c("PL_SL", "Discount_allied_export", "Discount_iam", "Discount_oes")
                  
                  discount_data_pl_sl_level <- merge(x = spread_sales, y = spread_discount, by.x = "PL_SL", by.y = "PL_SL", all = TRUE)
                  
                  discount_data_pl_sl_level$Discount_iam_percent <- ifelse(discount_data_pl_sl_level$Sales_iam == 0, 0, (discount_data_pl_sl_level$Discount_iam/discount_data_pl_sl_level$Sales_iam)* -100)
                  discount_data_pl_sl_level$Discount_oes_percent <- ifelse(discount_data_pl_sl_level$Sales_oes == 0, 0, (discount_data_pl_sl_level$Discount_oes/discount_data_pl_sl_level$Sales_oes)* -100)
                  discount_data_pl_sl_level$Discount_allied_export_percent <- ifelse(discount_data_pl_sl_level$Sales_allied_export == 0, 0, (discount_data_pl_sl_level$Discount_allied_export/discount_data_pl_sl_level$Sales_allied_export)* -100)
                  
                  ATB_final_ads <- merge(ATB_final_ads, discount_data_pl_sl_level, by.x = "PL_SL", by.y = "PL_SL", all.x = TRUE)
                  
                  ## Converting Back to numeric:
                  ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE <- as.numeric(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)
                  ATB_final_ads$OB_TRANS_CST_PP <- as.numeric(ATB_final_ads$OB_TRANS_CST_PP)
                  ATB_final_ads$IB_TRANS_CST_PP <- as.numeric(ATB_final_ads$IB_TRANS_CST_PP)
                  ATB_final_ads$BULK_CR_CALC_1 <- as.numeric(ATB_final_ads$BULK_CR_CALC_1)
                  ATB_final_ads$REDISTRIBUTION_COST_PP <- as.numeric(ATB_final_ads$REDISTRIBUTION_COST_PP)
                  ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE <- as.numeric(ATB_final_ads$ONSITE_TRANS_COST_PER_PIECE)
                  ATB_final_ads$OFFSITE_TRANS_COST_PP <- as.numeric(ATB_final_ads$OFFSITE_TRANS_COST_PP)
                  ATB_final_ads$MINIMUM_BUY_QTY <- as.numeric(ATB_final_ads$MINIMUM_BUY_QTY)
                  ATB_final_ads$STD_PACK_QTY <- as.numeric(ATB_final_ads$STD_PACK_QTY)
                  ATB_final_ads$BUY_FREQ <- as.numeric(ATB_final_ads$BUY_FREQ)
                  ATB_final_ads$CAMPN_QTY <- as.numeric(ATB_final_ads$CAMPN_QTY)
                  ATB_final_ads$DECK_CD <- as.numeric(ATB_final_ads$CAMPN_QTY)
                  ATB_final_ads$LAST_COST <- as.numeric(ATB_final_ads$LAST_COST)
                  ATB_final_ads$CUBIC_FT_PER_PIECE <- as.numeric(ATB_final_ads$CUBIC_FT_PER_PIECE)
                  ATB_final_ads$ADJ_UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$ADJ_UNIT_LOAD_QTY)
                  #ATB_final_ads$MDSNG_PKG_QTY <- as.numeric(ATB_final_ads$MDSNG_PKG_QTY)
                  ATB_final_ads$MCHDG_PACK_HEIGHT <- as.numeric(ATB_final_ads$MCHDG_PACK_HEIGHT)
                  ATB_final_ads$MCHDG_PACK_LENGTH <- as.numeric(ATB_final_ads$MCHDG_PACK_LENGTH)
                  ATB_final_ads$MCHDG_PACK_WIDTH <- as.numeric(ATB_final_ads$MCHDG_PACK_WIDTH)
                  ATB_final_ads$UNIT_LOAD_QTY <- as.numeric(ATB_final_ads$UNIT_LOAD_QTY)
                  ATB_final_ads$DLR_CURR_DEALER_PRC <- as.numeric(ATB_final_ads$DLR_CURR_DEALER_PRC)
                  ATB_final_ads$MTH_COST_PER_SQ_FT <- as.numeric(ATB_final_ads$MTH_COST_PER_SQ_FT)
                  ATB_final_ads$UL_SQ_FT <- as.numeric(ATB_final_ads$UL_SQ_FT)
                  
                  
                  ##--
                  
                  ATB_final_ads$DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$DLR_CURR_DEALER_PRC
                  ATB_final_ads$WD_DEALER_PRICE_NO_DISCOUNT <- ATB_final_ads$WD_WHSL_DIST_PRC
                  
                  ATB_final_ads$Dealer_Price_Allied_Export <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
                  ATB_final_ads$Dealer_Price_OES <- ATB_final_ads$DLR_CURR_DEALER_PRC * (1 - (ATB_final_ads$Discount_oes_percent/100))
                  ATB_final_ads$Dealer_Price_IAM <- ATB_final_ads$WD_WHSL_DIST_PRC * (1 - (ATB_final_ads$Discount_iam_percent/100))
                  
                  ATB_final_ads$Proline_subline <- ATB_final_ads$PL_SL
                  ATB_final_ads$PL_SL <- NULL
                  
                  incProgress(1/7, detail = "Running Calculations")
                  print(nrow(ATB_final_ads))
                  if(nrow(ATB_final_ads) > 0)
                  {
                    
                    ATB_final_ads$Setup_cost <- 0
                    ATB_final_ads$Additional_cost <- 0
                    ATB_final_ads$FLAG <- 0
                    ATB_final_ads$Entered_Buy_Qty <- 0
                    ATB_final_ads$OES_FRACTION <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$OES_FRACTION)
                    ATB_final_ads$FLAG <- ifelse(ATB_final_ads$OES_FRACTION == 0 & ATB_final_ads$IAM_FRACTION == 0 & ATB_final_ads$ALLIED_EXPORT_FRACTION == 0, 1, ATB_final_ads$FLAG)
                    
                    ATB_final_ads <- merge(ATB_final_ads, updated_cost_elements_data, by.x= "PART_NBR", by.y= "Part_Number", all.x = TRUE)
                    ATB_final_ads$MINIMUM_BUY_QTY <- ifelse(is.na(ATB_final_ads$MINIMUM_BUY_QTY), 0,ATB_final_ads$MINIMUM_BUY_QTY)
                    ATB_final_ads$STD_PACK_QTY <- ifelse(is.na(ATB_final_ads$STD_PACK_QTY), 0,ATB_final_ads$STD_PACK_QTY )
                    ATB_final_ads$BUY_FREQ <- ifelse(is.na(ATB_final_ads$BUY_FREQ ), 1,ATB_final_ads$BUY_FREQ )
                    
                    if(("Material_cost_Scenario_1" %in% colnames(ATB_final_ads)) | ("Moq_1" %in% colnames(ATB_final_ads)) |
                       ("Standard_Pack_1" %in% colnames(ATB_final_ads)) | ("Buy_Quantity_Scenario_1" %in% colnames(ATB_final_ads)) |
                       ("Setup_Cost_Scenario_1" %in% colnames(ATB_final_ads)) | ("Additional_Cost_Scenario_1" %in% colnames(ATB_final_ads)) |
                       ("Proposed_Dealer_Price_1" %in% colnames(ATB_final_ads)) | ("Proposed_Wd_Price_1" %in% colnames(ATB_final_ads)) |
                       ("Material_cost_Scenario_2" %in% colnames(ATB_final_ads)) | ("Moq_2" %in% colnames(ATB_final_ads)) |
                       ("Standard_Pack_2" %in% colnames(ATB_final_ads)) | ("Buy_Quantity_Scenario_2" %in% colnames(ATB_final_ads)) |
                       ("Setup_Cost_Scenario_2" %in% colnames(ATB_final_ads)) | ("Additional_Cost_Scenario_2" %in% colnames(ATB_final_ads)) |
                       ("Proposed_Dealer_Price_2" %in% colnames(ATB_final_ads)) | ("Proposed_Wd_Price_2" %in% colnames(ATB_final_ads)))
                    {
                      for(i in (1 : nrow(ATB_final_ads)))
                      {
                        if(("Material_cost_Scenario_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Material_cost_Scenario_1[i]))
                          {
                            ATB_final_ads$Material_cost_Scenario_1[i] <- ATB_final_ads$LAST_COST[i]
                          }
                        }
                        if(("Moq_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Moq_1[i]))
                          {
                            ATB_final_ads$Moq_1[i] <- ATB_final_ads$MINIMUM_BUY_QTY[i]
                            
                          }
                        }
                        if(("Standard_Pack_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Standard_Pack_1[i]))
                          {
                            ATB_final_ads$Standard_Pack_1[i] <- ATB_final_ads$STD_PACK_QTY[i]
                          }
                        }
                        if(("Buy_Quantity_Scenario_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Buy_Quantity_Scenario_1[i]))
                          {
                            ATB_final_ads$Buy_Quantity_Scenario_1[i] <- "Enter Buy Qty"
                          }
                        }
                        if(("Setup_Cost_Scenario_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Setup_Cost_Scenario_1[i]))
                          {
                            ATB_final_ads$Setup_Cost_Scenario_1[i] <- ATB_final_ads$Setup_cost[i]
                          }
                        }
                        if(("Additional_Cost_Scenario_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Additional_Cost_Scenario_1[i]))
                          {
                            ATB_final_ads$Additional_Cost_Scenario_1[i] <- ATB_final_ads$Additional_cost[i]
                          }
                        }
                        if(("Proposed_Dealer_Price_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Proposed_Dealer_Price_1[i]))
                          {
                            ATB_final_ads$Proposed_Dealer_Price_1[i] <- ATB_final_ads$DLR_CURR_DEALER_PRC[i]
                          }
                        }
                        if(("Proposed_Wd_Price_1" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Proposed_Wd_Price_1[i]))
                          {
                            ATB_final_ads$Proposed_Wd_Price_1[i] <- ATB_final_ads$WD_WHSL_DIST_PRC[i]
                          }
                        }
                        if(("Material_cost_Scenario_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Material_cost_Scenario_2[i]))
                          {
                            ATB_final_ads$Material_cost_Scenario_2[i] <- ATB_final_ads$LAST_COST[i]
                          }
                        }
                        if(("Moq_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Moq_2[i]))
                          {
                            ATB_final_ads$Moq_2[i] <- ATB_final_ads$MINIMUM_BUY_QTY[i]
                            
                          }
                        }
                        if(("Standard_Pack_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Standard_Pack_2[i]))
                          {
                            ATB_final_ads$Standard_Pack_2[i] <- ATB_final_ads$STD_PACK_QTY[i]
                          }
                        }
                        if(("Buy_Quantity_Scenario_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Buy_Quantity_Scenario_2[i]))
                          {
                            ATB_final_ads$Buy_Quantity_Scenario_2[i] <- "Enter Buy Qty"
                          }
                        }
                        if(("Setup_Cost_Scenario_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Setup_Cost_Scenario_2[i]))
                          {
                            ATB_final_ads$Setup_Cost_Scenario_2[i] <- ATB_final_ads$Setup_cost[i]
                          }
                        }
                        if(("Additional_Cost_Scenario_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Additional_Cost_Scenario_2[i]))
                          {
                            ATB_final_ads$Additional_Cost_Scenario_2[i] <- ATB_final_ads$Additional_cost[i]
                          }
                        }
                        if(("Proposed_Dealer_Price_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Proposed_Dealer_Price_2[i]))
                          {
                            ATB_final_ads$Proposed_Dealer_Price_2[i] <- ATB_final_ads$DLR_CURR_DEALER_PRC[i]
                          }
                        }
                        if(("Proposed_Wd_Price_2" %in% colnames(ATB_final_ads)))
                        {
                          if(is.na(ATB_final_ads$Proposed_Wd_Price_2[i]))
                          {
                            ATB_final_ads$Proposed_Wd_Price_2[i] <- ATB_final_ads$WD_WHSL_DIST_PRC[i]
                          }
                        }
                      }
                    }
                    
                    ATB_final_ads$Dealer_Price_Allied_Export_1 <- ATB_final_ads$Proposed_Dealer_Price_1 * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
                    ATB_final_ads$Dealer_Price_OES_1 <- ATB_final_ads$Proposed_Dealer_Price_1 * (1 - (ATB_final_ads$Discount_oes_percent/100))
                    ATB_final_ads$Dealer_Price_IAM_1 <- ATB_final_ads$Proposed_Wd_Price_1 * (1 - (ATB_final_ads$Discount_iam_percent/100))
                    
                    ATB_final_ads$Dealer_Price_Allied_Export_2 <- ATB_final_ads$Proposed_Dealer_Price_2 * (1 - (ATB_final_ads$Discount_allied_export_percent/100))
                    ATB_final_ads$Dealer_Price_OES_2 <- ATB_final_ads$Proposed_Dealer_Price_2 * (1 - (ATB_final_ads$Discount_oes_percent/100))
                    ATB_final_ads$Dealer_Price_IAM_2 <- ATB_final_ads$Proposed_Wd_Price_2 * (1 - (ATB_final_ads$Discount_iam_percent/100))
                    
                    ### Filtering parts with no data
                    
                    all_part <- as.data.frame(PART_data$PART_NBR)
                    
                    present_part <- as.data.frame(ATB_final_ads$PART_NBR)
                    
                    colnames(all_part)[1] <- "PART_NBR"
                    colnames(present_part)[1] <- "PART_NBR"
                    all_part$PART_NBR <- str_pad(all_part$PART_NBR, width=8, side="left", pad="0")
                    present_part$PART_NBR <- str_pad(present_part$PART_NBR, width=8, side="left", pad="0")
                    
                    ATB_ads_filtered_part_internal <- subset(all_part, !(PART_NBR %in% present_part$PART_NBR))
                    
                    ATB_ads_filtered_part <- ATB_final_ads[which((is.na(ATB_final_ads$MTH_SQ_FT_COST_PER_PEICE)) | (is.na(ATB_final_ads$FORECAST_YR_1)) | (is.na(ATB_final_ads$LAST_COST))),]
                    
                    if(nrow(ATB_ads_filtered_part_internal) > 0 & nrow(ATB_ads_filtered_part) > 0)
                    {
                      ATB_ads_filtered_part_internal$Reason <- "Forcee data not present"
                      ATB_ads_filtered_part$Reason <- ifelse(is.na(ATB_ads_filtered_part$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part$LAST_COST), "Last Cost not present", "Forcee data not present"))
                      ATB_ads_filtered_part <- ATB_ads_filtered_part %>% select(PART_NBR, Reason)
                      ATB_ads_filtered_part <- rbind(ATB_ads_filtered_part, ATB_ads_filtered_part_internal)
                      
                      
                    } else if(nrow(ATB_ads_filtered_part_internal) > 0 & nrow(ATB_ads_filtered_part) == 0)
                    {
                      ATB_ads_filtered_part_internal$Reason <- "Forcee data not present"
                      ATB_ads_filtered_part <- ATB_ads_filtered_part_internal
                      
                    } else if(nrow(ATB_ads_filtered_part_internal) == 0 & nrow(ATB_ads_filtered_part) > 0)
                    {
                      ATB_ads_filtered_part$Reason <- ifelse(is.na(ATB_ads_filtered_part$MTH_SQ_FT_COST_PER_PEICE),"Monthly Square feet cost not present", ifelse(is.na(ATB_ads_filtered_part$LAST_COST), "Last Cost not present", "Forcee data not present"))
                      ATB_ads_filtered_part <- ATB_ads_filtered_part %>% select(PART_NBR, Reason)
                      
                    } else
                    {
                      ATB_ads_filtered_part <- data.frame()
                    }
                    
                    
                    if(nrow(ATB_ads_filtered_part) > 0)
                    {
                      
                      output$modal_table <- renderDataTable({
                        datatable(ATB_ads_filtered_part, rownames = FALSE,
                                  options = list(scrollX=TRUE, scrollY='200px',
                                                 lengthMenu = c(5, 25, 50),
                                                 paging=FALSE, searching=FALSE))
                      })
                      
                      showModal(modalDialog(
                        title = "Summary Report",
                        DT::dataTableOutput('modal_table')
                      ))
                      
                      shinyjs::enable("download_filtered_list")
                      output$download_filtered_list <- downloadHandler(
                        filename = function() {
                          paste("Filtered_Part_List", ".csv", sep="")
                        },
                        content = function(file) {
                          abc <- ATB_ads_filtered_part
                          
                          write.csv(abc, file, row.names = FALSE)
                          
                        }
                      )
                      
                    }
                    
                    
                    ATB_final_ads$MINIMUM_BUY_QTY <- ifelse(is.na(ATB_final_ads$MINIMUM_BUY_QTY), 0,ATB_final_ads$MINIMUM_BUY_QTY)
                    ATB_final_ads$STD_PACK_QTY <- ifelse(is.na(ATB_final_ads$STD_PACK_QTY), 0,ATB_final_ads$STD_PACK_QTY )
                    ATB_final_ads$BUY_FREQ <- ifelse(is.na(ATB_final_ads$BUY_FREQ ), 1,ATB_final_ads$BUY_FREQ )
                    
                    ## Negative Inventory being made zero
                    ATB_final_ads$TOTAL_INVENTORY <- ifelse(ATB_final_ads$TOTAL_INVENTORY < 0, 0, ATB_final_ads$TOTAL_INVENTORY)
                    
                    print("filtered")
                    ATB_final_ads$X <- NULL
                    
                    ## Converting characters\factors into numeric
                    ATB_final_ads <- as.data.frame(ATB_final_ads)
                    
                    for(i in (4:35)){
                      ATB_final_ads[,i] <- as.numeric(ATB_final_ads[,i])
                    }
                    
                    ATB_final_ads[is.na(ATB_final_ads)] <- 0
                    ATB_final_ads$Buy_Quantity_Scenario_1 <- as.numeric(as.character(ATB_final_ads$Buy_Quantity_Scenario_1))
                    ATB_final_ads$Buy_Quantity_Scenario_2 <- as.numeric(as.character(ATB_final_ads$Buy_Quantity_Scenario_2))
                    part_ads <- ATB_final_ads
                    print("lala")
                    drop_table_PART_data_name <- paste("BEGIN
                                                       EXECUTE IMMEDIATE 'DROP TABLE", PART_data_name, "';
                                                       EXCEPTION
                                                       WHEN OTHERS THEN NULL;
                                                       END;")
                    print("dropped")
                    value_PART_data_name <- dbSendUpdate(con, drop_table_PART_data_name)
                    print("updated")
                    drop_table_ATB_final_ads_1_name <- paste("BEGIN
                                                             EXECUTE IMMEDIATE 'DROP TABLE", ATB_final_ads_1_name, "';
                                                             EXCEPTION
                                                             WHEN OTHERS THEN NULL;
                                                             END;")
                    print("final table drop")
                    value_ATB_final_ads_1_name <- dbSendUpdate(con, drop_table_ATB_final_ads_1_name)
                    print("final update")
                    #write.csv(ATB_final_ads, file = "ATB_ads.csv")
                    
                    global_ads$df_data_ads <- ATB_final_ads
                    ATB_ADS <- ATB_final_ads
                    
                    ################# 1. Code for Original Scenario: Current:
                    
                    Original_current <- Current(ATB_ADS)
                    
                    ################# 2. Code for Scenario-1 Current:
                    if (!is.null(updated_cost_elements))
                    {
                      Scenario_1_current <- Current_Scenario_1(ATB_ADS)
                    }
                    
                    ################# 3. Code for Original Scenario- Optimal
                    Original_optimal <- Optimal(ATB_ADS)
                    
                    print("Original Optimal done")
                    
                    
                    if (!is.null(updated_cost_elements))
                    {
                      ################# 4. Code for Scenario-1 Optimal
                      
                      Scenario_1_optimal <- Optimal_Scenario_1(ATB_ADS)
                      
                      print("scenario-1 opt done")
                      
                      ################# 5. Code for Scenario-2 Current
                      
                      Scenario_2_current <- Current_Scenario_2(ATB_ADS)
                      
                      ################# 6. Code for Scenario-2 Optimal
                      
                      Scenario_2_optimal <- Optimal_Scenario_2(ATB_ADS)
                      
                      print("scenario-2 opt done")
                    }
                    
                    ################# 7. Code for Selldown Calculation
                    Selldown_NPV <- Selldown(ATB_ADS)
                    
                    ################# 8. Code for Selldown Calculation Scenario-1
                    if (!is.null(updated_cost_elements))
                    {
                      
                      Selldown_NPV_Scenario_1 <- Selldown_Scenario_1(ATB_ADS)
                      
                      
                      ################# 9. Code for Selldown Calculation Scenario-2
                      
                      Selldown_NPV_Scenario_2 <- Selldown_Scenario_2(ATB_ADS)
                      
                      
                    }
                    ###creating columns from ATB_final_ads
                    ATB_ads_per_piece <- ATB_ADS %>% select(PART_NBR,DEALER_PRICE_NO_DISCOUNT,Discount_oes_percent,Discount_allied_export_percent,
                                                            Dealer_Price_OES,Dealer_Price_Allied_Export,WD_DEALER_PRICE_NO_DISCOUNT,Discount_iam_percent,Dealer_Price_IAM,
                                                            LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                            REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    
                    colnames(ATB_ads_per_piece)[1] <- "Part_Nbr"
                    print("ATB_ads_per_piece")
                    
                    ATB_ads_per_piece_1 <- ATB_ADS %>% select(PART_NBR,Proposed_Dealer_Price_1,Proposed_Wd_Price_1,Material_cost_Scenario_1,
                                                              Moq_1,Standard_Pack_1,Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,MTH_SQ_FT_COST_PER_PEICE,
                                                              OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                              AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    colnames(ATB_ads_per_piece_1)[1] <- "Part_Nbr"
                    
                    ATB_ads_per_piece_2 <- ATB_ADS %>% select(PART_NBR,Proposed_Dealer_Price_2,Proposed_Wd_Price_2,Material_cost_Scenario_2,
                                                              Moq_2,Standard_Pack_2,Setup_Cost_Scenario_2,Additional_Cost_Scenario_2,MTH_SQ_FT_COST_PER_PEICE,
                                                              OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                              AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    colnames(ATB_ads_per_piece_2)[1] <- "Part_Nbr"
                    
                    ### Creating table for cost comparison:
                    orig_cost <- ATB_ADS %>% select(PART_NBR, LAST_COST, MINIMUM_BUY_QTY, STD_PACK_QTY, Setup_cost, Additional_cost, DLR_CURR_DEALER_PRC, WD_WHSL_DIST_PRC)
                    orig_cost <- orig_cost %>% mutate_at(vars(-PART_NBR),funs(round(.,2)))
                    
                    ##### Output of Cost comparison table
                    output$Cost_comp_1 <- renderHotable({
                      orig_cost <- data.frame(Part_Nbr = orig_cost[,1], paste("$", formatC(orig_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                              lapply(orig_cost[,3:4], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                              lapply(orig_cost[,5:8], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
                      
                      colnames(orig_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Setup Cost", "Additional Cost", "Dealer Price", "WD Price")
                      orig_cost
                    }, readOnly = TRUE)
                    
                    
                    if (!is.null(updated_cost_elements))
                    {
                      
                      scenario_1_cost <- ATB_ADS %>% select(PART_NBR,Material_cost_Scenario_1,Moq_1,Standard_Pack_1,Buy_Quantity_Scenario_1,
                                                            Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,Proposed_Dealer_Price_1,Proposed_Wd_Price_1)
                      scenario_1_cost <- scenario_1_cost %>% mutate_at(vars(-PART_NBR),funs(round(.,2)))
                      
                      reflect_cost_scenario_1$df_data_cost_scenario_1 <- scenario_1_cost
                      
                      scenario_2_cost <- ATB_ADS %>% select(PART_NBR, Material_cost_Scenario_2, Moq_2, Standard_Pack_2, Buy_Quantity_Scenario_2,
                                                            Setup_Cost_Scenario_2, Additional_Cost_Scenario_2, Proposed_Dealer_Price_2, Proposed_Wd_Price_2)
                      scenario_2_cost <- scenario_2_cost %>% mutate_at(vars(-PART_NBR),funs(round(.,2)))
                      
                      reflect_cost_scenario_2$df_data_cost_scenario_2 <- scenario_2_cost
                      
                      shinyjs::show("cost_sce_1")
                      shinyjs::show("cost_sce_2")
                      shinyjs::show("analysis_sce_1")
                      shinyjs::show("analysis_sce_2")
                      
                      
                      output$cost_sce_1 <- renderHotable({
                        
                        scenario_1_cost <- scenario_1_cost %>% select(PART_NBR,Material_cost_Scenario_1,Moq_1,Standard_Pack_1, Buy_Quantity_Scenario_1,
                                                                      Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,Proposed_Dealer_Price_1,Proposed_Wd_Price_1)
                        
                        scenario_1_cost <- data.frame(PART_NBR = scenario_1_cost[,1], paste("$", formatC(scenario_1_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                                      lapply(scenario_1_cost[,3:5], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                      lapply(scenario_1_cost[,6:9], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
                        
                        colnames(scenario_1_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Buy Quantity", "Setup Cost",
                                                       "Additional Cost","Proposed Dealer Price", "Proposed WD Price")
                        
                        scenario_1_cost
                      }, readOnly = TRUE)
                      
                      output$cost_sce_2 <- renderHotable({
                        
                        scenario_2_cost <- scenario_2_cost %>% select(PART_NBR, Material_cost_Scenario_2, Moq_2, Standard_Pack_2, Buy_Quantity_Scenario_2,
                                                                      Setup_Cost_Scenario_2, Additional_Cost_Scenario_2, Proposed_Dealer_Price_2, Proposed_Wd_Price_2)
                        
                        scenario_2_cost <- data.frame(PART_NBR = scenario_2_cost[,1], paste("$", formatC(scenario_2_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                                      lapply(scenario_2_cost[,3:5], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                      lapply(scenario_2_cost[,6:9], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
                        
                        colnames(scenario_2_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Buy Quantity", "Setup Cost",
                                                       "Additional Cost","Proposed Dealer Price", "Proposed WD Price")
                        
                        scenario_2_cost
                      }, readOnly = TRUE)
                      
                    }
                    
                    
                    #### Creating table for Part List Analysis Result
                    
                    #  1. Original: Original_current, Original_optimal, Selldown_NPV
                    #  2. Scenario-1: Scenario_1_current, Scenario_1_optimal, Selldown_NPV_Scenario_1
                    #  3. Scenario_2: Scenario_2_current, Scenario_2_optimal, Selldown_NPV_Scenario_2
                    
                    
                    ## Creating intermediate tables to get proper format
                    # spl- Source Part List
                    
                    spl_1 <- Original_current
                    spl_1$Part_Nbr <- str_pad(spl_1$Part_Nbr, width=8, side="left", pad="0")
                    spl_2 <- Original_optimal
                    spl_2$Part_Nbr <- str_pad(spl_2$Part_Nbr, width=8, side="left", pad="0")
                    spl_3 <- Selldown_NPV
                    spl_3$Part_Nbr <- str_pad(spl_3$Part_Nbr, width=8, side="left", pad="0")
                    
                    spl_12 <- merge(spl_1, spl_2, by = "Part_Nbr")
                    
                    spl_123 <- merge(spl_12, spl_3, by = "Part_Nbr")
                    spl_123 <- merge(spl_123, ATB_ads_per_piece, by = "Part_Nbr")
                    
                    spl_123_result <- spl_123 %>% select(Part_Nbr, NPV, Selldown_NPV, Revenue, Revenue_non_npv,Optimal_NPV,Optimal_ATB_Quantity, Total_Forecast)
                    
                    write.csv(spl_123_result, file = "spl_123_result_s1.csv", row.names = FALSE)
                    write.csv(spl_123_result, file = "spl_123_result_s2.csv", row.names = FALSE)
                    
                    
                    output$analysis_original <- renderHotable({
                      spl_123_result$Part_Nbr <- str_pad(spl_123_result$Part_Nbr, width=8, side="left", pad="0")
                      spl_123_result <- data.frame(Part_Nbr = spl_123_result[,1], lapply(spl_123_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                   formatC(spl_123_result[,7] , big.mark=",", digits=0, format="f"), formatC(spl_123_result[,8] , big.mark=",", digits=0, format="f"), stringsAsFactors = FALSE)
                      
                      colnames(spl_123_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
                      
                      spl_123_result
                    })
                    
                    
                    if (!is.null(updated_cost_elements))
                    {
                      spl_4 <- Scenario_1_current
                      spl_4$Part_Nbr <- str_pad(spl_4$Part_Nbr, width=8, side="left", pad="0")
                      spl_5 <- Scenario_1_optimal
                      spl_5$Part_Nbr <- str_pad(spl_5$Part_Nbr, width=8, side="left", pad="0")
                      spl_6 <- Selldown_NPV_Scenario_1
                      spl_6$Part_Nbr <- str_pad(spl_6$Part_Nbr, width=8, side="left", pad="0")
                      spl_7 <- Scenario_2_current
                      spl_7$Part_Nbr <- str_pad(spl_7$Part_Nbr, width=8, side="left", pad="0")
                      spl_8 <- Scenario_2_optimal
                      spl_8$Part_Nbr <- str_pad(spl_8$Part_Nbr, width=8, side="left", pad="0")
                      spl_9 <- Selldown_NPV_Scenario_2
                      spl_9$Part_Nbr <- str_pad(spl_9$Part_Nbr, width=8, side="left", pad="0")
                      
                      
                      
                      spl_45 <- merge(spl_4, spl_5, by = "Part_Nbr")
                      spl_456 <- merge(spl_45, spl_6, by = "Part_Nbr")
                      spl_456 <- merge(spl_456, ATB_ads_per_piece_1, by = "Part_Nbr")
                      
                      spl_78 <- merge(spl_7, spl_8, by = "Part_Nbr")
                      spl_789 <- merge(spl_78, spl_9, by = "Part_Nbr")
                      spl_789 <- merge(spl_789, ATB_ads_per_piece_2, by = "Part_Nbr")
                      
                      spl_123456 <- merge(spl_123, spl_456, by = "Part_Nbr")
                      spl_123456789 <- merge(spl_123456, spl_789, by = "Part_Nbr")
                      
                      spl_456_result <- spl_456 %>% select(Part_Nbr, NPV_Scenario_1, Selldown_NPV_Scenario_1, Revenue_Scenario_1, Revenue_non_npv_Scenario_1,
                                                           Optimal_NPV_Scenario_1, Optimal_ATB_Quantity_Scenario_1,total_forecast)
                      
                      spl_789_result <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2, Selldown_NPV_Scenario_2, Revenue_Scenario_2, Revenue_non_npv_Scenario_2,
                                                           Optimal_NPV_Scenario_2, Optimal_ATB_Quantity_Scenario_2, total_forecast)
                      
                      write.csv(spl_456_result, file = "spl_456_result.csv", row.names = FALSE)
                      write.csv(spl_789_result, file = "spl_789_result.csv", row.names = FALSE)
                      
                      
                      output$analysis_sce_1 <- renderHotable({
                        spl_456_result$Part_Nbr <- str_pad(spl_456_result$Part_Nbr, width=8, side="left", pad="0")
                        
                        spl_456_result <- data.frame(Part_Nbr = spl_456_result[,1], lapply(spl_456_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                     formatC(spl_456_result[,7] , big.mark=",", digits=0, format="f"),formatC(spl_456_result[,8] , big.mark=",", digits=0, format="f")  ,stringsAsFactors = FALSE)
                        
                        colnames(spl_456_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
                        spl_456_result
                      }, readOnly = TRUE)
                      
                      output$analysis_sce_2 <- renderHotable({
                        spl_789_result$Part_Nbr <- str_pad(spl_789_result$Part_Nbr, width=8, side="left", pad="0")
                        
                        spl_789_result <- data.frame(Part_Nbr = spl_789_result[,1], lapply(spl_789_result[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                     formatC(spl_789_result[,7] , big.mark=",", digits=0, format="f"),formatC(spl_789_result[,8] , big.mark=",", digits=0, format="f"), stringsAsFactors = FALSE)
                        
                        colnames(spl_789_result) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
                        
                        spl_789_result
                      }, readOnly = TRUE)
                      
                    }
                    part_ff<-global_ads$df_data_ads
                    y<-nrow(part_ff)
                    print(y)
                    ATB_ADS <- global_ads$df_data_ads
                    
                    finance_current_scenario= data.frame(matrix("",  nrow = as.numeric(y)))  
                    #finance_current_scenario<-0
                    finance_current_scenario<-as.data.frame(finance_current_scenario)
                    finance_current_scenario$matrix.....nrow...as.numeric.y..<-NULL
                    finance_current_scenario$Part_Nbr<-part_ff$PART_NBR
                    finance_current_scenario$Pb<-2
                    finance_current_scenario$Optimal_qty<-spl_2$Optimal_ATB_Quantity
                    finance_current_scenario$Discount_Rate<-15
                    finance_current_scenario$ATB_Units<-spl_1$Buy_Quantity
                    finance_current_scenario$Material_cost<-part_ff$LAST_COST
                    finance_current_scenario$Labour_cost_per_hr<-as.numeric(part_ff$AVG_LCPP)+
                      as.numeric(part_ff$OFFSITE_LCPP)+as.numeric(part_ff$IB_LABOR_COST_PP)+
                      as.numeric(part_ff$OB_LABOR_COST_PP)
                    finance_current_scenario$Storage_cost<-round(as.numeric(part_ff$MTH_SQ_FT_COST_PER_PEICE),2)
                    finance_current_scenario$Total_packaging_cost<-spl_1$Package_cost
                    finance_current_scenario$Freight_one_way<-round(as.numeric(part_ff$IB_TRANS_CST_PP)+as.numeric(part_ff$OFFSITE_TRANS_COST_PP),2)
                    finance_current_scenario$Inventory_lvl<-part_ff$INVENTORY_LVL
                    finance_current_scenario$FORECAST_YR_1<-part_ff$FORECAST_YR_1
                    finance_current_scenario$FORECAST_YR_2<-part_ff$FORECAST_YR_2
                    finance_current_scenario$FORECAST_YR_3<-part_ff$FORECAST_YR_3
                    finance_current_scenario$FORECAST_YR_4<-part_ff$FORECAST_YR_4
                    finance_current_scenario$FORECAST_YR_5<-part_ff$FORECAST_YR_5
                    finance_current_scenario$FORECAST_YR_6<-part_ff$FORECAST_YR_6
                    finance_current_scenario$FORECAST_YR_7<-part_ff$FORECAST_YR_7
                    finance_current_scenario$FORECAST_YR_8<-part_ff$FORECAST_YR_8
                    finance_current_scenario$FORECAST_YR_9<-part_ff$FORECAST_YR_9
                    finance_current_scenario$FORECAST_YR_10<-part_ff$FORECAST_YR_10
                    finance_current_scenario$FORECAST_YR_11<-part_ff$FORECAST_YR_11
                    finance_current_scenario$FORECAST_YR_12<-part_ff$FORECAST_YR_12
                    finance_current_scenario$FORECAST_YR_13<-part_ff$FORECAST_YR_13
                    finance_current_scenario$FORECAST_YR_14<-part_ff$FORECAST_YR_14
                    finance_current_scenario$FORECAST_YR_15<-part_ff$FORECAST_YR_15
                    finance_current_scenario$Historic_sales_CY<-part_ff$ACTUAL_SALES_CYTD
                    finance_current_scenario$Historic_sales_minus_1<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_1
                    finance_current_scenario$Historic_sales_minus_2<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_2
                    finance_current_scenario$Mandatory_serv_ret<-round(as.numeric(part_ff$APPLICATION_LY),0)
                    finance_current_scenario$Dealer_price<-part_ff$DEALER_PRICE_NO_DISCOUNT
                    finance_current_scenario$Dlr_sls<-part_ff$DLR_SLS
                    finance_current_scenario$WD_price<-part_ff$WD_DEALER_PRICE_NO_DISCOUNT
                    finance_current_scenario$WD_sls<-part_ff$WD_SLS	
                    finance_current_scenario$sa<-0.12
                    
                    finance_current_scenario_pb<- finance_current_scenario
                    finance_current_scenario_pb$All_time_buy<-(finance_current_scenario_pb$ATB_Units*finance_current_scenario_pb$Material_cost)+
                      finance_current_scenario_pb$Labour_cost_per_hr+finance_current_scenario_pb$Storage_cost+ finance_current_scenario_pb$Total_packaging_cost+(
                        finance_current_scenario_pb$Freight_one_way*finance_current_scenario_pb$ATB_Units)
                    finance_current_scenario_pb$sp<-ifelse((finance_current_scenario_pb$Dlr_sls + finance_current_scenario_pb$WD_sls) ==0,
                                                           ifelse(finance_current_scenario_pb$Dealer_price ==0,finance_current_scenario_pb$WD_price,
                                                                  ifelse(finance_current_scenario_pb$WD_price==0,finance_current_scenario_pb$Dealer_price,
                                                                         (as.numeric(finance_current_scenario_pb$Dealer_price)+as.numeric(finance_current_scenario_pb$WD_price))*0.5))
                                                           , finance_current_scenario_pb$Dealer_price*(finance_current_scenario_pb$Dlr_sls/
                                                                                                         (finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls))+ finance_current_scenario_pb$WD_price*
                                                             (finance_current_scenario_pb$WD_sls/(finance_current_scenario_pb$Dlr_sls+finance_current_scenario_pb$WD_sls)))
                    #finance_current_scenario_pb$sa<-if(x3=="GMP"){0.09}else ifelse (x3=="ACD"){0.15}else ifelse(x3=="-"){0.12}
                    finance_current_scenario_pb$sa<-0.12
                    finance_current_scenario_pb$Units_storage_0<-as.numeric(finance_current_scenario_pb$ATB_Units)+as.numeric(finance_current_scenario_pb$Inventory_lvl)
                    finance_current_scenario_pb$Units_storage_1<-ifelse(finance_current_scenario_pb$FORECAST_YR_1==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_1)
                    finance_current_scenario_pb$Units_storage_2<-ifelse(finance_current_scenario_pb$FORECAST_YR_2==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_2)
                    finance_current_scenario_pb$Units_storage_3<-ifelse(finance_current_scenario_pb$FORECAST_YR_3==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_3)
                    finance_current_scenario_pb$Units_storage_4<-ifelse(finance_current_scenario_pb$FORECAST_YR_4==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_4)
                    finance_current_scenario_pb$Units_storage_5<-ifelse(finance_current_scenario_pb$FORECAST_YR_5==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_5)
                    finance_current_scenario_pb$Units_storage_6<-ifelse(finance_current_scenario_pb$FORECAST_YR_6==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_6)
                    finance_current_scenario_pb$Units_storage_7<-ifelse(finance_current_scenario_pb$FORECAST_YR_7==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_7)
                    finance_current_scenario_pb$Units_storage_8<-ifelse(finance_current_scenario_pb$FORECAST_YR_8==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_8)
                    finance_current_scenario_pb$Units_storage_9<-ifelse(finance_current_scenario_pb$FORECAST_YR_9==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_9)
                    finance_current_scenario_pb$Units_storage_10<-ifelse(finance_current_scenario_pb$FORECAST_YR_10==0,0,	finance_current_scenario_pb$Units_storage_3-finance_current_scenario_pb$FORECAST_YR_10)
                    finance_current_scenario_pb$Units_storage_11<-ifelse(finance_current_scenario_pb$FORECAST_YR_11==0,0,	finance_current_scenario_pb$Units_storage_4-finance_current_scenario_pb$FORECAST_YR_11)
                    finance_current_scenario_pb$Units_storage_12<-ifelse(finance_current_scenario_pb$FORECAST_YR_12==0,0,	finance_current_scenario_pb$Units_storage_5-finance_current_scenario_pb$FORECAST_YR_12)
                    finance_current_scenario_pb$Units_storage_13<-ifelse(finance_current_scenario_pb$FORECAST_YR_13==0,0,	finance_current_scenario_pb$Units_storage_0-finance_current_scenario_pb$FORECAST_YR_13)
                    finance_current_scenario_pb$Units_storage_14<-ifelse(finance_current_scenario_pb$FORECAST_YR_14==0,0,	finance_current_scenario_pb$Units_storage_1-finance_current_scenario_pb$FORECAST_YR_14)
                    finance_current_scenario_pb$Units_storage_15<-ifelse(finance_current_scenario_pb$FORECAST_YR_15==0,0,	finance_current_scenario_pb$Units_storage_2-finance_current_scenario_pb$FORECAST_YR_15)
                    
                    finance_current_scenario_pb$Revenue_0<-0
                    finance_current_scenario_pb$Revenue_1<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_2<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_3<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_4<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_5<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_6<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_7<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_8<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_9<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_10<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_11<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_12<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_13<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_14<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    finance_current_scenario_pb$Revenue_15<-ifelse(finance_current_scenario_pb$ATB_Units==0,0,finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$sp*(1-finance_current_scenario_pb$sa))
                    
                    
                    finance_current_scenario_pb$Total_storage_cost_0<-0
                    finance_current_scenario_pb$Total_storage_cost_1<-finance_current_scenario_pb$Units_storage_1*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_2<-finance_current_scenario_pb$Units_storage_2*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_3<-finance_current_scenario_pb$Units_storage_3*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_4<-finance_current_scenario_pb$Units_storage_4*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_5<-finance_current_scenario_pb$Units_storage_5*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_6<-finance_current_scenario_pb$Units_storage_6*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_7<-finance_current_scenario_pb$Units_storage_7*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_8<-finance_current_scenario_pb$Units_storage_8*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_9<-finance_current_scenario_pb$Units_storage_9*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_10<-finance_current_scenario_pb$Units_storage_10*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_11<-finance_current_scenario_pb$Units_storage_11*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_12<-finance_current_scenario_pb$Units_storage_12*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_13<-finance_current_scenario_pb$Units_storage_13*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_14<-finance_current_scenario_pb$Units_storage_14*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    finance_current_scenario_pb$Total_storage_cost_15<-finance_current_scenario_pb$Units_storage_15*finance_current_scenario_pb$Storage_cost*finance_current_scenario_pb$Material_cost
                    
                    
                    finance_current_scenario_pb$outbound_cost_1<-finance_current_scenario_pb$FORECAST_YR_1*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_2<-finance_current_scenario_pb$FORECAST_YR_2*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_3<-finance_current_scenario_pb$FORECAST_YR_3*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_4<-finance_current_scenario_pb$FORECAST_YR_4*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_5<-finance_current_scenario_pb$FORECAST_YR_5*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_6<-finance_current_scenario_pb$FORECAST_YR_6*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_7<-finance_current_scenario_pb$FORECAST_YR_7*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_8<-finance_current_scenario_pb$FORECAST_YR_8*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_9<-finance_current_scenario_pb$FORECAST_YR_9*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_10<-finance_current_scenario_pb$FORECAST_YR_10*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_11<-finance_current_scenario_pb$FORECAST_YR_11*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_12<-finance_current_scenario_pb$FORECAST_YR_12*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_13<-finance_current_scenario_pb$FORECAST_YR_13*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_14<-finance_current_scenario_pb$FORECAST_YR_14*finance_current_scenario_pb$Freight_one_way
                    finance_current_scenario_pb$outbound_cost_15<-finance_current_scenario_pb$FORECAST_YR_15*finance_current_scenario_pb$Freight_one_way
                    
                    
                    finance_current_scenario_pb$Total_cost_0<-finance_current_scenario_pb$All_time_buy
                    finance_current_scenario_pb$Total_cost_1<-finance_current_scenario_pb$outbound_cost_1+finance_current_scenario_pb$Total_storage_cost_1
                    finance_current_scenario_pb$Total_cost_2<-finance_current_scenario_pb$outbound_cost_2+finance_current_scenario_pb$Total_storage_cost_2
                    finance_current_scenario_pb$Total_cost_3<-finance_current_scenario_pb$outbound_cost_3+finance_current_scenario_pb$Total_storage_cost_3
                    finance_current_scenario_pb$Total_cost_4<-finance_current_scenario_pb$outbound_cost_4+finance_current_scenario_pb$Total_storage_cost_4
                    finance_current_scenario_pb$Total_cost_5<-finance_current_scenario_pb$outbound_cost_5+finance_current_scenario_pb$Total_storage_cost_5
                    finance_current_scenario_pb$Total_cost_6<-finance_current_scenario_pb$outbound_cost_6+finance_current_scenario_pb$Total_storage_cost_6
                    finance_current_scenario_pb$Total_cost_7<-finance_current_scenario_pb$outbound_cost_7+finance_current_scenario_pb$Total_storage_cost_7
                    finance_current_scenario_pb$Total_cost_8<-finance_current_scenario_pb$outbound_cost_8+finance_current_scenario_pb$Total_storage_cost_8
                    finance_current_scenario_pb$Total_cost_9<-finance_current_scenario_pb$outbound_cost_9+finance_current_scenario_pb$Total_storage_cost_9
                    finance_current_scenario_pb$Total_cost_10<-finance_current_scenario_pb$outbound_cost_10+finance_current_scenario_pb$Total_storage_cost_10
                    finance_current_scenario_pb$Total_cost_11<-finance_current_scenario_pb$outbound_cost_11+finance_current_scenario_pb$Total_storage_cost_11
                    finance_current_scenario_pb$Total_cost_12<-finance_current_scenario_pb$outbound_cost_12+finance_current_scenario_pb$Total_storage_cost_12
                    finance_current_scenario_pb$Total_cost_13<-finance_current_scenario_pb$outbound_cost_13+finance_current_scenario_pb$Total_storage_cost_13
                    finance_current_scenario_pb$Total_cost_14<-finance_current_scenario_pb$outbound_cost_14+finance_current_scenario_pb$Total_storage_cost_14
                    finance_current_scenario_pb$Total_cost_15<-finance_current_scenario_pb$outbound_cost_15+finance_current_scenario_pb$Total_storage_cost_15
                    
                    
                    finance_current_scenario_pb$Net_benefit_0<-finance_current_scenario_pb$Revenue_0-finance_current_scenario_pb$Total_cost_0
                    finance_current_scenario_pb$Net_benefit_1<-finance_current_scenario_pb$Revenue_1-finance_current_scenario_pb$Total_cost_1
                    finance_current_scenario_pb$Net_benefit_2<-finance_current_scenario_pb$Revenue_2-finance_current_scenario_pb$Total_cost_2
                    finance_current_scenario_pb$Net_benefit_3<-finance_current_scenario_pb$Revenue_3-finance_current_scenario_pb$Total_cost_3
                    finance_current_scenario_pb$Net_benefit_4<-finance_current_scenario_pb$Revenue_4-finance_current_scenario_pb$Total_cost_4
                    finance_current_scenario_pb$Net_benefit_5<-finance_current_scenario_pb$Revenue_5-finance_current_scenario_pb$Total_cost_5
                    finance_current_scenario_pb$Net_benefit_6<-finance_current_scenario_pb$Revenue_6-finance_current_scenario_pb$Total_cost_6
                    finance_current_scenario_pb$Net_benefit_7<-finance_current_scenario_pb$Revenue_7-finance_current_scenario_pb$Total_cost_7
                    finance_current_scenario_pb$Net_benefit_8<-finance_current_scenario_pb$Revenue_8-finance_current_scenario_pb$Total_cost_8
                    finance_current_scenario_pb$Net_benefit_9<-finance_current_scenario_pb$Revenue_9-finance_current_scenario_pb$Total_cost_9
                    finance_current_scenario_pb$Net_benefit_10<-finance_current_scenario_pb$Revenue_10-finance_current_scenario_pb$Total_cost_10
                    finance_current_scenario_pb$Net_benefit_11<-finance_current_scenario_pb$Revenue_11-finance_current_scenario_pb$Total_cost_11
                    finance_current_scenario_pb$Net_benefit_12<-finance_current_scenario_pb$Revenue_12-finance_current_scenario_pb$Total_cost_12
                    finance_current_scenario_pb$Net_benefit_13<-finance_current_scenario_pb$Revenue_13-finance_current_scenario_pb$Total_cost_13
                    finance_current_scenario_pb$Net_benefit_14<-finance_current_scenario_pb$Revenue_14-finance_current_scenario_pb$Total_cost_14
                    finance_current_scenario_pb$Net_benefit_15<-finance_current_scenario_pb$Revenue_15-finance_current_scenario_pb$Total_cost_15
                    
                    finance_current_scenario_pb$pv_cashflow_0<-finance_current_scenario_pb$Net_benefit_0/(1.15^0)
                    finance_current_scenario_pb$pv_cashflow_1<-finance_current_scenario_pb$Net_benefit_1/(1.15^1)
                    finance_current_scenario_pb$pv_cashflow_2<-finance_current_scenario_pb$Net_benefit_2/(1.15^2)
                    finance_current_scenario_pb$pv_cashflow_3<-finance_current_scenario_pb$Net_benefit_3/(1.15^3)
                    finance_current_scenario_pb$pv_cashflow_4<-finance_current_scenario_pb$Net_benefit_4/(1.15^4)
                    finance_current_scenario_pb$pv_cashflow_5<-finance_current_scenario_pb$Net_benefit_5/(1.15^5)
                    finance_current_scenario_pb$pv_cashflow_6<-finance_current_scenario_pb$Net_benefit_6/(1.15^6)
                    finance_current_scenario_pb$pv_cashflow_7<-finance_current_scenario_pb$Net_benefit_7/(1.15^7)
                    finance_current_scenario_pb$pv_cashflow_8<-finance_current_scenario_pb$Net_benefit_8/(1.15^8)
                    finance_current_scenario_pb$pv_cashflow_9<-finance_current_scenario_pb$Net_benefit_9/(1.15^9)
                    finance_current_scenario_pb$pv_cashflow_10<-finance_current_scenario_pb$Net_benefit_10/(1.15^10)
                    finance_current_scenario_pb$pv_cashflow_11<-finance_current_scenario_pb$Net_benefit_11/(1.15^11)
                    finance_current_scenario_pb$pv_cashflow_12<-finance_current_scenario_pb$Net_benefit_12/(1.15^12)
                    finance_current_scenario_pb$pv_cashflow_13<-finance_current_scenario_pb$Net_benefit_13/(1.15^13)
                    finance_current_scenario_pb$pv_cashflow_14<-finance_current_scenario_pb$Net_benefit_14/(1.15^14)
                    finance_current_scenario_pb$pv_cashflow_15<-finance_current_scenario_pb$Net_benefit_15/(1.15^15)
                    
                    
                    finance_current_scenario_pb$pb_non_npv_0<-finance_current_scenario_pb$Net_benefit_0
                    finance_current_scenario_pb$pb_non_npv_1<-finance_current_scenario_pb$Net_benefit_1+finance_current_scenario_pb$pb_non_npv_0
                    finance_current_scenario_pb$pb_non_npv_2<-finance_current_scenario_pb$Net_benefit_2+finance_current_scenario_pb$pb_non_npv_1
                    finance_current_scenario_pb$pb_non_npv_3<-finance_current_scenario_pb$Net_benefit_3+finance_current_scenario_pb$pb_non_npv_2
                    finance_current_scenario_pb$pb_non_npv_4<-finance_current_scenario_pb$Net_benefit_4+finance_current_scenario_pb$pb_non_npv_3
                    finance_current_scenario_pb$pb_non_npv_5<-finance_current_scenario_pb$Net_benefit_5+finance_current_scenario_pb$pb_non_npv_4
                    finance_current_scenario_pb$pb_non_npv_6<-finance_current_scenario_pb$Net_benefit_6+finance_current_scenario_pb$pb_non_npv_5
                    finance_current_scenario_pb$pb_non_npv_7<-finance_current_scenario_pb$Net_benefit_7+finance_current_scenario_pb$pb_non_npv_6
                    finance_current_scenario_pb$pb_non_npv_8<-finance_current_scenario_pb$Net_benefit_8+finance_current_scenario_pb$pb_non_npv_7
                    finance_current_scenario_pb$pb_non_npv_9<-finance_current_scenario_pb$Net_benefit_9+finance_current_scenario_pb$pb_non_npv_8
                    finance_current_scenario_pb$pb_non_npv_10<-finance_current_scenario_pb$Net_benefit_10+finance_current_scenario_pb$pb_non_npv_9
                    finance_current_scenario_pb$pb_non_npv_11<-finance_current_scenario_pb$Net_benefit_11+finance_current_scenario_pb$pb_non_npv_10
                    finance_current_scenario_pb$pb_non_npv_12<-finance_current_scenario_pb$Net_benefit_12+finance_current_scenario_pb$pb_non_npv_11
                    finance_current_scenario_pb$pb_non_npv_13<-finance_current_scenario_pb$Net_benefit_13+finance_current_scenario_pb$pb_non_npv_12
                    finance_current_scenario_pb$pb_non_npv_14<-finance_current_scenario_pb$Net_benefit_14+finance_current_scenario_pb$pb_non_npv_13
                    finance_current_scenario_pb$pb_non_npv_15<-finance_current_scenario_pb$Net_benefit_15+finance_current_scenario_pb$pb_non_npv_14
                    
                    
                    finance_current_scenario_pb$pb_npv_0<-finance_current_scenario_pb$pv_cashflow_0
                    finance_current_scenario_pb$pb_npv_1<-finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pb_npv_0
                    finance_current_scenario_pb$pb_npv_2<-finance_current_scenario_pb$pv_cashflow_2+finance_current_scenario_pb$pb_npv_1
                    finance_current_scenario_pb$pb_npv_3<-finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pb_npv_2
                    finance_current_scenario_pb$pb_npv_4<-finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pb_npv_3
                    finance_current_scenario_pb$pb_npv_5<-finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pb_npv_4
                    finance_current_scenario_pb$pb_npv_6<-finance_current_scenario_pb$pv_cashflow_6+finance_current_scenario_pb$pb_npv_5
                    finance_current_scenario_pb$pb_npv_7<-finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pb_npv_6
                    finance_current_scenario_pb$pb_npv_8<-finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pb_npv_7
                    finance_current_scenario_pb$pb_npv_9<-finance_current_scenario_pb$pv_cashflow_9+finance_current_scenario_pb$pb_npv_8
                    finance_current_scenario_pb$pb_npv_10<-finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pb_npv_9
                    finance_current_scenario_pb$pb_npv_11<-finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pb_npv_10
                    finance_current_scenario_pb$pb_npv_12<-finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pb_npv_11
                    finance_current_scenario_pb$pb_npv_13<-finance_current_scenario_pb$pv_cashflow_13+finance_current_scenario_pb$pb_npv_12
                    finance_current_scenario_pb$pb_npv_14<-finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pb_npv_13
                    finance_current_scenario_pb$pb_npv_15<-finance_current_scenario_pb$pv_cashflow_15+finance_current_scenario_pb$pb_npv_14
                    
                    
                    
                    finance_current_scenario_pb$pby_non_npv_0<-ifelse(finance_current_scenario_pb$pb_non_npv_0>0,"Error",0)
                    finance_current_scenario_pb$pby_non_npv_1<-ifelse(finance_current_scenario_pb$pb_non_npv_0<0 & finance_current_scenario_pb$pb_non_npv_1>0,(1-(finance_current_scenario_pb$pb_non_npv_1/finance_current_scenario_pb$Net_benefit_1)),0)
                    finance_current_scenario_pb$pby_non_npv_2<-ifelse(finance_current_scenario_pb$pb_non_npv_1<0 & finance_current_scenario_pb$pb_non_npv_2>0,(1-(finance_current_scenario_pb$pb_non_npv_2/finance_current_scenario_pb$Net_benefit_2))+1,0)
                    finance_current_scenario_pb$pby_non_npv_3<-ifelse(finance_current_scenario_pb$pb_non_npv_2<0 & finance_current_scenario_pb$pb_non_npv_3>0,(1-(finance_current_scenario_pb$pb_non_npv_3/finance_current_scenario_pb$Net_benefit_3))+2,0)
                    finance_current_scenario_pb$pby_non_npv_4<-ifelse(finance_current_scenario_pb$pb_non_npv_3<0 & finance_current_scenario_pb$pb_non_npv_4>0,(1-(finance_current_scenario_pb$pb_non_npv_4/finance_current_scenario_pb$Net_benefit_4))+3,0)
                    finance_current_scenario_pb$pby_non_npv_5<-ifelse(finance_current_scenario_pb$pb_non_npv_4<0 & finance_current_scenario_pb$pb_non_npv_5>0,(1-(finance_current_scenario_pb$pb_non_npv_5/finance_current_scenario_pb$Net_benefit_5))+4,0)
                    finance_current_scenario_pb$pby_non_npv_6<-ifelse(finance_current_scenario_pb$pb_non_npv_5<0 & finance_current_scenario_pb$pb_non_npv_6>0,(1-(finance_current_scenario_pb$pb_non_npv_6/finance_current_scenario_pb$Net_benefit_6))+5,0)
                    finance_current_scenario_pb$pby_non_npv_7<-ifelse(finance_current_scenario_pb$pb_non_npv_6<0 & finance_current_scenario_pb$pb_non_npv_7>0,(1-(finance_current_scenario_pb$pb_non_npv_7/finance_current_scenario_pb$Net_benefit_7))+6,0)
                    finance_current_scenario_pb$pby_non_npv_8<-ifelse(finance_current_scenario_pb$pb_non_npv_7<0 & finance_current_scenario_pb$pb_non_npv_8>0,(1-(finance_current_scenario_pb$pb_non_npv_8/finance_current_scenario_pb$Net_benefit_8))+7,0)
                    finance_current_scenario_pb$pby_non_npv_9<-ifelse(finance_current_scenario_pb$pb_non_npv_8<0 & finance_current_scenario_pb$pb_non_npv_9>0,(1-(finance_current_scenario_pb$pb_non_npv_9/finance_current_scenario_pb$Net_benefit_9))+8,0)
                    finance_current_scenario_pb$pby_non_npv_10<-ifelse(finance_current_scenario_pb$pb_non_npv_9<0 & finance_current_scenario_pb$pb_non_npv_10>0,(1-(finance_current_scenario_pb$pb_non_npv_10/finance_current_scenario_pb$Net_benefit_10))+9,0)
                    finance_current_scenario_pb$pby_non_npv_11<-ifelse(finance_current_scenario_pb$pb_non_npv_10<0 & finance_current_scenario_pb$pb_non_npv_11>0,(1-(finance_current_scenario_pb$pb_non_npv_11/finance_current_scenario_pb$Net_benefit_11))+10,0)
                    finance_current_scenario_pb$pby_non_npv_12<-ifelse(finance_current_scenario_pb$pb_non_npv_11<0 & finance_current_scenario_pb$pb_non_npv_12>0,(1-(finance_current_scenario_pb$pb_non_npv_12/finance_current_scenario_pb$Net_benefit_12))+11,0)
                    finance_current_scenario_pb$pby_non_npv_13<-ifelse(finance_current_scenario_pb$pb_non_npv_12<0 & finance_current_scenario_pb$pb_non_npv_13>0,(1-(finance_current_scenario_pb$pb_non_npv_13/finance_current_scenario_pb$Net_benefit_13))+12,0)
                    finance_current_scenario_pb$pby_non_npv_14<-ifelse(finance_current_scenario_pb$pb_non_npv_13<0 & finance_current_scenario_pb$pb_non_npv_14>0,(1-(finance_current_scenario_pb$pb_non_npv_14/finance_current_scenario_pb$Net_benefit_14))+13,0)
                    finance_current_scenario_pb$pby_non_npv_15<-ifelse(finance_current_scenario_pb$pb_non_npv_14<0 & finance_current_scenario_pb$pb_non_npv_15>0,(1-(finance_current_scenario_pb$pb_non_npv_15/finance_current_scenario_pb$Net_benefit_15))+14,0)
                    
                    
                    #finance_current_scenario_pb$pby_npv_0<-ifelse(finance_current_scenario_pb$pb_npv_0>0,"Error"," ")
                    finance_current_scenario_pb$pby_npv_1<-ifelse(finance_current_scenario_pb$pb_npv_0<0 & finance_current_scenario_pb$pb_npv_1>0,1-(finance_current_scenario_pb$pb_npv_1/finance_current_scenario_pb$pv_cashflow_1),0)
                    finance_current_scenario_pb$pby_npv_2<-ifelse(finance_current_scenario_pb$pb_npv_1<0 & finance_current_scenario_pb$pb_npv_2>0,(1-(finance_current_scenario_pb$pb_npv_2/finance_current_scenario_pb$pv_cashflow_2))+1,0)
                    finance_current_scenario_pb$pby_npv_3<-ifelse(finance_current_scenario_pb$pb_npv_2<0 & finance_current_scenario_pb$pb_npv_3>0,(1-(finance_current_scenario_pb$pb_npv_3/finance_current_scenario_pb$pv_cashflow_3))+2,0)
                    finance_current_scenario_pb$pby_npv_4<-ifelse(finance_current_scenario_pb$pb_npv_3<0 & finance_current_scenario_pb$pb_npv_4>0,(1-(finance_current_scenario_pb$pb_npv_4/finance_current_scenario_pb$pv_cashflow_4))+3,0)
                    finance_current_scenario_pb$pby_npv_5<-ifelse(finance_current_scenario_pb$pb_npv_4<0 & finance_current_scenario_pb$pb_npv_5>0,(1-(finance_current_scenario_pb$pb_npv_5/finance_current_scenario_pb$pv_cashflow_5))+4,0)
                    finance_current_scenario_pb$pby_npv_6<-ifelse(finance_current_scenario_pb$pb_npv_5<0 & finance_current_scenario_pb$pb_npv_6>0,(1-(finance_current_scenario_pb$pb_npv_6/finance_current_scenario_pb$pv_cashflow_6))+5,0)
                    finance_current_scenario_pb$pby_npv_7<-ifelse(finance_current_scenario_pb$pb_npv_6<0 & finance_current_scenario_pb$pb_npv_7>0,(1-(finance_current_scenario_pb$pb_npv_7/finance_current_scenario_pb$pv_cashflow_7))+6,0)
                    finance_current_scenario_pb$pby_npv_8<-ifelse(finance_current_scenario_pb$pb_npv_7<0 & finance_current_scenario_pb$pb_npv_8>0,(1-(finance_current_scenario_pb$pb_npv_8/finance_current_scenario_pb$pv_cashflow_8))+7,0)
                    finance_current_scenario_pb$pby_npv_9<-ifelse(finance_current_scenario_pb$pb_npv_8<0 & finance_current_scenario_pb$pb_npv_9>0,(1-(finance_current_scenario_pb$pb_npv_9/finance_current_scenario_pb$pv_cashflow_9))+8,0)
                    finance_current_scenario_pb$pby_npv_10<-ifelse(finance_current_scenario_pb$pb_npv_9<0 & finance_current_scenario_pb$pb_npv_10>0,(1-(finance_current_scenario_pb$pb_npv_10/finance_current_scenario_pb$pv_cashflow_10))+9,0)
                    finance_current_scenario_pb$pby_npv_11<-ifelse(finance_current_scenario_pb$pb_npv_10<0 & finance_current_scenario_pb$pb_npv_11>0,(1-(finance_current_scenario_pb$pb_npv_11/finance_current_scenario_pb$pv_cashflow_11))+10,0)
                    finance_current_scenario_pb$pby_npv_12<-ifelse(finance_current_scenario_pb$pb_npv_11<0 & finance_current_scenario_pb$pb_npv_12>0,(1-(finance_current_scenario_pb$pb_npv_12/finance_current_scenario_pb$pv_cashflow_12))+11,0)
                    finance_current_scenario_pb$pby_npv_13<-ifelse(finance_current_scenario_pb$pb_npv_12<0 & finance_current_scenario_pb$pb_npv_13>0,(1-(finance_current_scenario_pb$pb_npv_13/finance_current_scenario_pb$pv_cashflow_13))+12,0)
                    finance_current_scenario_pb$pby_npv_14<-ifelse(finance_current_scenario_pb$pb_npv_13<0 & finance_current_scenario_pb$pb_npv_14>0,(1-(finance_current_scenario_pb$pb_npv_14/finance_current_scenario_pb$pv_cashflow_14))+13,0)
                    finance_current_scenario_pb$pby_npv_15<-ifelse(finance_current_scenario_pb$pb_npv_14<0 & finance_current_scenario_pb$pb_npv_15>0,(1-(finance_current_scenario_pb$pb_npv_15/finance_current_scenario_pb$pv_cashflow_15))+14,0)
                    
                    
                    finance_current_scenario_pb$NPV_pb<-finance_current_scenario_pb$pv_cashflow_0+finance_current_scenario_pb$pv_cashflow_1+finance_current_scenario_pb$pv_cashflow_2+
                      finance_current_scenario_pb$pv_cashflow_3+finance_current_scenario_pb$pv_cashflow_4+finance_current_scenario_pb$pv_cashflow_5+finance_current_scenario_pb$pv_cashflow_6+
                      finance_current_scenario_pb$pv_cashflow_7+finance_current_scenario_pb$pv_cashflow_8+finance_current_scenario_pb$pv_cashflow_9+
                      finance_current_scenario_pb$pv_cashflow_10+finance_current_scenario_pb$pv_cashflow_11+finance_current_scenario_pb$pv_cashflow_12+finance_current_scenario_pb$pv_cashflow_13+
                      finance_current_scenario_pb$pv_cashflow_14+finance_current_scenario_pb$pv_cashflow_15
                    finance_current_scenario_pb$flat_pb<-round(as.numeric(finance_current_scenario_pb$pby_non_npv_0)+as.numeric(finance_current_scenario_pb$pby_non_npv_1)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_2)+as.numeric(finance_current_scenario_pb$pby_non_npv_3)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_4)+as.numeric(finance_current_scenario_pb$pby_non_npv_5)+as.numeric(finance_current_scenario_pb$pby_non_npv_6)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_7)+as.numeric(finance_current_scenario_pb$pby_non_npv_8)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_9)+as.numeric(finance_current_scenario_pb$pby_non_npv_10)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_11)+as.numeric(finance_current_scenario_pb$pby_non_npv_12)+as.numeric(finance_current_scenario_pb$pby_non_npv_13)+
                                                                 as.numeric(finance_current_scenario_pb$pby_non_npv_14)+as.numeric(finance_current_scenario_pb$pby_non_npv_15),2)
                    
                    finance_current_scenario_pb$disc_pb<-round(as.numeric(finance_current_scenario_pb$pby_npv_1)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_2)+as.numeric(finance_current_scenario_pb$pby_npv_3)+as.numeric(finance_current_scenario_pb$pby_npv_4)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_5)+as.numeric(finance_current_scenario_pb$pby_npv_6)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_7)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_8)+as.numeric(finance_current_scenario_pb$pby_npv_9)+as.numeric(finance_current_scenario_pb$pby_npv_10)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_11)+as.numeric(finance_current_scenario_pb$pby_npv_12)+as.numeric(finance_current_scenario_pb$pby_npv_13)+
                                                                 as.numeric(finance_current_scenario_pb$pby_npv_14)+as.numeric(finance_current_scenario_pb$pby_npv_15),2)
                    write.xlsx(finance_current_scenario,"finance_current_scenario.xlsx")
                    
                    path_to_vbs_file = "test_pb.vbs"
                    print("4")
                    shell(shQuote(normalizePath(path_to_vbs_file)), "cscript", flag = "//nologo")
                    print("5")
                    print("AM I the error d-a??")
                    pb_excel<-read.xlsx("PB_excel.xlsm")
                    global_ads$df_data_ads_pb<-pb_excel
                    
                    global_ads$df_data_ads_pb_orig<-finance_current_scenario_pb
                    
                    #### Creating Download Report File
                    # spld- Scorce Part list dowlnoad file
                    spl_123<-merge(spl_123, finance_current_scenario_pb[ ,c("Part_Nbr","flat_pb","disc_pb")], by = "Part_Nbr")
                    
                    spl_123<-merge(spl_123, pb_excel[ ,c("Part_Nbr","ATB_Units","X210","X373")], by = "Part_Nbr")
                    
                    
                    #### Creating Download Report File
                    # spld- Source Part list dowlnoad file
                    #spl_123456789$Selected_scenario <- "None"
                    
                    download_report <- spl_123
                    download_report$Selected_scenario <- "None"
                    download_report <- download_report %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                                  Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost.x, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                                  Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                                  Selldown_Revenue,Selldown_Revenue_non_npv,
                                                                  Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                                  Total_Inventory,
                                                                  First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                                  Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                                  Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                                  Optimal_Storage_Cost,
                                                                  Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                                  Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost,DEALER_PRICE_NO_DISCOUNT, #change 786
                                                                  Dealer_Price_OES.x,Dealer_Price_Allied_Export.x,WD_DEALER_PRICE_NO_DISCOUNT,Dealer_Price_IAM.x,Discount_oes_percent.x,Discount_allied_export_percent.x,
                                                                  Discount_iam_percent.x,LAST_COST,MINIMUM_BUY_QTY,STD_PACK_QTY,Setup_cost.y,Additional_cost,MTH_SQ_FT_COST_PER_PEICE,OFFSITE_TRANS_COST_PP,
                                                                  REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP, Selected_scenario,flat_pb,disc_pb,ATB_Units,X210)
                    ##change
                    
                    download_report_scenario_1 <-  spl_456 %>% select(Part_Nbr, NPV_Scenario_1,
                                                                      Selldown_NPV_Scenario_1,Selldown_NPV_non_npv_Scenario_1, Revenue_Scenario_1,Revenue_non_npv_Scenario_1,Part_Cost_Scenario_1,Material_cost_non_npv_Scenario_1,
                                                                      Setup_cost_Scenario_1 ,Total_transport_cost_Scenario_1,Total_transport_cost_non_npv_Scenario_1,Storage_Cost_Scenario_1,Storage_Cost_non_npv_Scenario_1,
                                                                      Total_process_cost_Scenario_1,  Total_process_cost_non_npv_Scenario_1,Package_cost_Scenario_1,Package_cost_non_npv_Scenario_1,
                                                                      Total_offsite_labor_cost_Scenario_1,Total_offsite_labor_cost_non_npv_Scenario_1,Total_offsite_transport_cost_Scenario_1,Total_offsite_transport_cost_non_npv_Scenario_1, 
                                                                      Additional_Cost_1,Selldown_Revenue_Scenario_1,Selldown_Revenue_non_npv_Scenario_1,
                                                                      Selldown_Material_cost_Scenario_1,Selldown_Material_cost_non_npv_Scenario_1,
                                                                      Selldown_Freight_cost_Scenario_1,Selldown_Freight_cost_non_npv_Scenario_1,Selldown_Storage_Cost_Scenario_1,Selldown_Storage_Cost_non_npv_Scenario_1, Selldown_Processing_Cost_Scenario_1,
                                                                      Selldown_Processing_Cost_non_npv_Scenario_1,Selldown_Packaging_Cost_Scenario_1,Selldown_Packaging_Cost_non_npv_Scenario_1,
                                                                      Total_Inventory,
                                                                      First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_1, LTB_Buy_Quantity_Scenario_1,
                                                                      Buy_Quantity_Scenario_1, Total_Forecast_Scenario_1,
                                                                      Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_Material_Cost_Scenario_1, Optimal_Setup_cost_Scenario_1,
                                                                      Optimal_Total_transport_cost_Scenario_1,
                                                                      Optimal_Total_offsite_transport_cost_Scenario_1, Optimal_Storage_Cost_Scenario_1, Optimal_Total_process_cost_Scenario_1,
                                                                      Optimal_Packaging_cost_Scenario_1,
                                                                      Optimal_Total_offsite_labor_cost_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1,
                                                                      Extended_purchase_cost_1,Proposed_Dealer_Price_1.y,Proposed_Wd_Price_1.y,Material_cost_Scenario_1,
                                                                      Moq_1,Standard_Pack_1,Setup_Cost_Scenario_1,Additional_Cost_Scenario_1,MTH_SQ_FT_COST_PER_PEICE,
                                                                      OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                                      AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    ##change
                    
                    download_report_scenario_2 <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2,
                                                                     Selldown_NPV_Scenario_2,Selldown_NPV_non_npv_Scenario_2, Revenue_Scenario_2,Revenue_non_npv_Scenario_2,Part_Cost_Scenario_2,Material_cost_non_npv_Scenario_2,
                                                                     Setup_cost_Scenario_2 ,Total_transport_cost_Scenario_2,Total_transport_cost_non_npv_Scenario_2,Storage_Cost_Scenario_2,Storage_Cost_non_npv_Scenario_2,
                                                                     Total_process_cost_Scenario_2,  Total_process_cost_non_npv_Scenario_2,Package_cost_Scenario_2,Package_cost_non_npv_Scenario_2,
                                                                     Total_offsite_labor_cost_Scenario_2,Total_offsite_labor_cost_non_npv_Scenario_2,Total_offsite_transport_cost_Scenario_2,Total_offsite_transport_cost_non_npv_Scenario_2, 
                                                                     Additional_Cost_2,Selldown_Revenue_Scenario_2,Selldown_Revenue_non_npv_Scenario_2,
                                                                     Selldown_Material_cost_Scenario_2,Selldown_Material_cost_non_npv_Scenario_2,
                                                                     Selldown_Freight_cost_Scenario_2,Selldown_Freight_cost_non_npv_Scenario_2,Selldown_Storage_Cost_Scenario_2,Selldown_Storage_Cost_non_npv_Scenario_2, Selldown_Processing_Cost_Scenario_2,
                                                                     Selldown_Processing_Cost_non_npv_Scenario_2,Selldown_Packaging_Cost_Scenario_2,Selldown_Packaging_Cost_non_npv_Scenario_2,
                                                                     Total_Inventory,
                                                                     First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_2, LTB_Buy_Quantity_Scenario_2,
                                                                     Buy_Quantity_Scenario_2, Total_Forecast_Scenario_2,
                                                                     Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2,
                                                                     Optimal_Material_Cost_Scenario_2, Optimal_Setup_cost_Scenario_2,
                                                                     Optimal_Total_transport_cost_Scenario_2,
                                                                     Optimal_Total_offsite_transport_cost_Scenario_2, Optimal_Storage_Cost_Scenario_2,
                                                                     Optimal_Total_process_cost_Scenario_2,Optimal_Packaging_cost_Scenario_2, Optimal_Total_offsite_labor_cost_Scenario_2,
                                                                     Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2, Extended_purchase_cost_2,Proposed_Dealer_Price_2.y,Proposed_Wd_Price_2.y,Material_cost_Scenario_2,
                                                                     Moq_2,Standard_Pack_2,Setup_Cost_Scenario_2,Additional_Cost_Scenario_2,MTH_SQ_FT_COST_PER_PEICE,
                                                                     OFFSITE_TRANS_COST_PP,REDISTRIBUTION_COST_PP,OFFSITE_LCPP,IB_LABOR_COST_PP,OB_LABOR_COST_PP,
                                                                     AVG_LCPP,AVG_PCPP,IB_TRANS_CST_PP,OB_TRANS_CST_PP)
                    
                    global_current_sce_down$df_data_current <- download_report
                    global_scenario_1_down$df_data_scenario_1_down <- download_report_scenario_1
                    global_scenario_2_down$df_data_scenario_2_down <- download_report_scenario_2
                    
                    
                    ##### Report Download
                    output$downloadData <- downloadHandler(
                      filename = function() {
                        paste("ATB_Part_List",".xlsx", sep="")
                      },
                      content = function(file) {
                        #Downloading_function()
                        abc <- global_current_sce_down$df_data_current
                        abc <- data.frame(Part_Nbr = abc[,1],
                                          lapply(abc[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                          lapply(abc[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                          lapply(abc[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(abc[,53] , big.mark=",", digits=0, format="f"),formatC(abc[,54] , big.mark=",", digits=2, format="f"), ## change 786 
                                          lapply(abc[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                          lapply(abc[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                          paste("$", formatC(abc[,65] , big.mark=",", digits=0, format="f")),
                                          lapply(abc[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                          lapply(abc[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                          abc[,80:84], stringsAsFactors = FALSE)
                        
                        
                        
                        colnames(abc) <- c("Part Number",
                                           "NPV", "Selldown NPV","Selldown Non NPV",
                                           "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                                           "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                                           "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                                           "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                                           "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                                           "Current Inventory",
                                           "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                                           "Total Purchase", "Total Sales", "Optimal NPV",
                                           "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                                           "Optimal Storage Cost",
                                           "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                                           "Optimal ATB Quantity","Optimal payback period", "Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export", #change 786
                                           "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                                           "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                                           "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                                           "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)", "Selected Scenario","Simple payabck period",
                                           "Discounted payback period","2 year payback ATB","2 year payback NPV")
                        
                        scenario_1 <- global_scenario_1_down$df_data_scenario_1_down
                        scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                                                 lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                                                 lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                                 lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 stringsAsFactors = FALSE)
                        
                        colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                                  "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                                  "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                                  "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                                  "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                                  "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                                  "Current Inventory",
                                                  "First Buy","Last Buy","Last Sale","Scrap Scenario-1", "Entered Buy Quantity Scenario-1",
                                                  "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                                  "Optimal NPV Scenario-1",
                                                  "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                                  "Optimal Offsite transport cost Scenario-1",
                                                  "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                                  "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                                  "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                                  "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
                        
                        scenario_2 <- global_scenario_2_down$df_data_scenario_2_down
                        scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],
                                                 lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                                                 lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                                 lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                                 lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                                 lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                                 stringsAsFactors = FALSE)
                        
                        colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                                  "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                                  "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                                  "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                                  "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                                  "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                                  "Current Inventory",
                                                  "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                                  "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                                  "Optimal NPV  Scenario-2",
                                                  "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                                  "Optimal Offsite transport cost Scenario-2",
                                                  "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                                  "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                                  "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                                  "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
                        
                        write.xlsx2(abc, file, sheetName="Current_Scenario", row.names=FALSE)
                        write.xlsx2(scenario_1, file , sheetName = "Scenario-1", append = TRUE, row.names = FALSE)
                        write.xlsx2(scenario_2, file , sheetName = "Scenario-2", append = TRUE, row.names = FALSE)
                        
                      }
                    )
                    
                    ##### Rendering info box to show num to parts uploaded
                    output$Total_Parts<-renderInfoBox({
                      
                      infoBox(
                        "Number of Parts", paste0( nrow(ATB_ADS)), icon = icon("cogs"),
                        color = "blue", fill = TRUE
                      )
                    })
                    
                    ##### Rendering ui of part number input for Part View
                    
                    output$ui <- renderUI({
                      part_info <- global_ads$df_data_ads
                      part_inform <- as.data.frame(part_info)
                      part_inform$X <- NULL
                      part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
                      selectInput("Part_Number", "Part Number", choices = as.vector(part_inform$PART_NBR))
                    })
                    
                  } else
                  {
                    
                    drop_table_PART_data_name <- paste("BEGIN
                                                       EXECUTE IMMEDIATE 'DROP TABLE", PART_data_name, "';
                                                       EXCEPTION
                                                       WHEN OTHERS THEN NULL;
                                                       END;")
                    
                    value_PART_data_name <- dbSendUpdate(con, drop_table_PART_data_name)
                    
                    drop_table_ATB_final_ads_1_name <- paste("BEGIN
                                                             EXECUTE IMMEDIATE 'DROP TABLE", ATB_final_ads_1_name, "';
                                                             EXCEPTION
                                                             WHEN OTHERS THEN NULL;
                                                             END;")
                    
                    value_ATB_final_ads_1_name <- dbSendUpdate(con, drop_table_ATB_final_ads_1_name)
                    showModal(modalDialog(
                      title = "Warning Message",
                      "Required data is not present for these part"
                    ))
                  }
                  
                  ## Management Report for Scenario-1
                  test <- read.csv('gm_id.csv', stringsAsFactors = FALSE)
                  management_report_1 <- global_scenario_1_down$df_data_scenario_1_down
                  management_report_1 <- management_report_1 %>% select(Part_Nbr, NPV_Scenario_1, Revenue_Scenario_1, LTB_Buy_Quantity_Scenario_1, Extended_purchase_cost_1,
                                                                        Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1)
                  
                  management_report_1 <- management_report_1[management_report_1$LTB_Buy_Quantity_Scenario_1 > 0,]
                  
                  incProgress(1/3, detail = "Preparing the tables")
                  
                  if(nrow(management_report_1) > 0)
                  {
                    
                    management_report_1$NPV_impact_1 <- management_report_1$Optimal_NPV_Scenario_1 - management_report_1$NPV_Scenario_1
                    management_report_1$Revenue_impact_1 <- management_report_1$Optimal_Revenue_Scenario_1 - management_report_1$Revenue_Scenario_1
                    management_report_1$Buy_impact_1 <- management_report_1$Extended_optimal_buy_cost_1 - management_report_1$Extended_purchase_cost_1
                    colnames(management_report_1)[4] <- "Entered_Buy_Quantity_1"
                    colnames(management_report_1)[8] <- "Optimal_Quantity_Scenario_1"
                    management_report_1$Time_stamp_1 <- Sys.Date()
                    management_report_1$Day_1 <- day(Sys.Date())
                    management_report_1$Month_1 <- month(Sys.Date())
                    management_report_1$Year_1 <- year(Sys.Date())
                    
                    management_report_1$Part_Nbr <- as.character(str_pad(management_report_1$Part_Nbr, width=8, side="left", pad="0"))
                    management_report_1$Time_stamp_1 <- as.character(management_report_1$Time_stamp_1)
                    management_report_1$Day_1 <- as.character(management_report_1$Day_1)
                    management_report_1$Month_1 <- as.character(management_report_1$Month_1)
                    management_report_1$Year_1 <- as.character(management_report_1$Year_1)
                    
                    management_report_1$RAT_NUMBER <- "-"
                    management_report_1$GM_ID <-test$gm_id[1]
                    
                    dbWriteTable(conn = con,
                                 name = TEMP_MAN_REP_1_NAME,
                                 value = management_report_1, overwrite = TRUE, append = FALSE)
                    
                    dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_1 IN EXCLUSIVE MODE")
                    
                    sql_management_rep_1 <- paste("UPDATE MANAGEMENT_TABLE_1 A
                                                  SET (A.NPV_SCENARIO_1, A.REVENUE_SCENARIO_1, A.ENTERED_BUY_QUANTITY_1, A.EXTENDED_PURCHASE_COST_1, A.OPTIMAL_NPV_SCENARIO_1, A.OPTIMAL_REVENUE_SCENARIO_1,
                                                  A.OPTIMAL_QUANTITY_SCENARIO_1, A.EXTENDED_OPTIMAL_BUY_COST_1, A.NPV_IMPACT_1, A.REVENUE_IMPACT_1, A.BUY_IMPACT_1,
                                                  A.TIME_STAMP, A.DAY_1, A.MONTH_1, A.YEAR_1, A.RAT_NUMBER, A.GM_ID) =
                                                  (SELECT B.NPV_SCENARIO_1, B.REVENUE_SCENARIO_1, B.ENTERED_BUY_QUANTITY_1, B.EXTENDED_PURCHASE_COST_1,
                                                  B.OPTIMAL_NPV_SCENARIO_1, B.OPTIMAL_REVENUE_SCENARIO_1, B.OPTIMAL_QUANTITY_SCENARIO_1, B.EXTENDED_OPTIMAL_BUY_COST_1,
                                                  B.NPV_IMPACT_1,B.REVENUE_IMPACT_1, B.BUY_IMPACT_1, B.TIME_STAMP_1, B.DAY_1, B.MONTH_1, B.YEAR_1, B.RAT_NUMBER, B.GM_ID
                                                  FROM",
                                                  TEMP_MAN_REP_1_NAME, "B
                                                  WHERE
                                                  LPAD(A.PART_NBR, 8, '0')= LPAD(B.PART_NBR, 8, '0'))
                                                  WHERE EXISTS (SELECT NPV_SCENARIO_1
                                                  FROM",
                                                  TEMP_MAN_REP_1_NAME, "C WHERE
                                                  LPAD(C.PART_NBR, 8, '0')= LPAD(A.PART_NBR, 8, '0'))")
                    
                    value_management_rep_1 <- dbSendUpdate(con, sql_management_rep_1)
                    
                    
                    
                    dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_1 IN EXCLUSIVE MODE")
                    
                    sql_management_rep_insert_1 <- paste("INSERT INTO MANAGEMENT_TABLE_1
                                                         SELECT A.* FROM", TEMP_MAN_REP_1_NAME," A
                                                         WHERE A.PART_NBR NOT IN (SELECT DISTINCT PART_NBR FROM MANAGEMENT_TABLE_1)")
                    
                    value_management_rep_insert_1 <- dbSendUpdate(con, sql_management_rep_insert_1)
                    
                    dbSendUpdate(con, paste("BEGIN
                                            EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_1_NAME , "';
                                            EXCEPTION
                                            WHEN OTHERS THEN NULL;
                                            END;"))
                    
                  }
                  incProgress(1/3, detail = "Preparing the tables")
                  
                  ## Management Report for Scenario-2
                  management_report_2 <- global_scenario_2_down$df_data_scenario_2_down
                  management_report_2 <- management_report_2 %>% select(Part_Nbr, NPV_Scenario_2, Revenue_Scenario_2, LTB_Buy_Quantity_Scenario_2, Extended_purchase_cost_2,
                                                                        Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2, Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2)
                  
                  management_report_2 <- management_report_2[management_report_2$LTB_Buy_Quantity_Scenario_2 > 0,]
                  
                  if(nrow(management_report_2) > 0)
                  {
                    
                    management_report_2$NPV_impact_2 <- management_report_2$Optimal_NPV_Scenario_2 - management_report_2$NPV_Scenario_2
                    management_report_2$Revenue_impact_2 <- management_report_2$Optimal_Revenue_Scenario_2 - management_report_2$Revenue_Scenario_2
                    management_report_2$Buy_impact_2 <- management_report_2$Extended_optimal_buy_cost_2 - management_report_2$Extended_purchase_cost_2
                    colnames(management_report_2)[4] <- "Entered_Buy_Quantity_2"
                    colnames(management_report_2)[8] <- "Optimal_Quantity_Scenario_2"
                    management_report_2$Time_stamp_2 <- Sys.Date()
                    management_report_2$Day_2 <- day(Sys.Date())
                    management_report_2$Month_2 <- month(Sys.Date())
                    management_report_2$Year_2 <- year(Sys.Date())
                    
                    management_report_2$Part_Nbr <- as.character(str_pad(management_report_2$Part_Nbr, width=8, side="left", pad="0"))
                    management_report_2$Time_stamp_2 <- as.character(management_report_2$Time_stamp_2)
                    management_report_2$Day_2 <- as.character(management_report_2$Day_2)
                    management_report_2$Month_2 <- as.character(management_report_2$Month_2)
                    management_report_2$Year_2 <- as.character(management_report_2$Year_2)
                    
                    
                    management_report_2$RAT_NUMBER <- "-"
                    management_report_2$GM_ID <- test$gm_id[1]
                    
                    dbWriteTable(conn = con,
                                 name = TEMP_MAN_REP_2_NAME,
                                 value = management_report_2, overwrite = TRUE, append = FALSE)
                    
                    dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_2 IN EXCLUSIVE MODE")
                    
                    sql_management_rep_2 <- paste("UPDATE MANAGEMENT_TABLE_2 A
                                                  SET (A.NPV_SCENARIO_2, A.REVENUE_SCENARIO_2, A.ENTERED_BUY_QUANTITY_2, A.EXTENDED_PURCHASE_COST_2, A.OPTIMAL_NPV_SCENARIO_2, A.OPTIMAL_REVENUE_SCENARIO_2,
                                                  A.OPTIMAL_QUANTITY_SCENARIO_2, A.EXTENDED_OPTIMAL_BUY_COST_2, A.NPV_IMPACT_2, A.REVENUE_IMPACT_2, A.BUY_IMPACT_2,
                                                  A.TIME_STAMP, A.DAY_2, A.MONTH_2, A.YEAR_2, A.RAT_NUMBER, A.GM_ID) =
                                                  (SELECT B.NPV_Scenario_2, B.Revenue_Scenario_2, B.Entered_Buy_Quantity_2, B.Extended_purchase_cost_2,
                                                  B.Optimal_NPV_Scenario_2, B.Optimal_Revenue_Scenario_2, B.Optimal_Quantity_Scenario_2, B.Extended_optimal_buy_cost_2,
                                                  B.NPV_impact_2,B.Revenue_impact_2, B.Buy_impact_2, B.Time_stamp_2, B.Day_2, B.Month_2, B.Year_2, B.RAT_NUMBER, B.GM_ID
                                                  FROM",
                                                  TEMP_MAN_REP_2_NAME, "B
                                                  WHERE
                                                  LPAD(A.PART_NBR, 8, '0') = LPAD(B.Part_Nbr, 8, '0'))
                                                  WHERE EXISTS (SELECT NPV_SCENARIO_2
                                                  FROM",
                                                  TEMP_MAN_REP_2_NAME, "C WHERE
                                                  LPAD(C.PART_NBR, 8, '0')= LPAD(A.PART_NBR, 8, '0'))")
                    
                    value_management_rep_2 <- dbSendUpdate(con, sql_management_rep_2)
                    
                    dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_2 IN EXCLUSIVE MODE")
                    
                    sql_management_rep_insert_2 <- paste("INSERT INTO MANAGEMENT_TABLE_2
                                                         SELECT A.* FROM", TEMP_MAN_REP_2_NAME," A
                                                         WHERE A.PART_NBR NOT IN (SELECT DISTINCT PART_NBR FROM MANAGEMENT_TABLE_2)")
                    
                    value_management_rep_insert_2 <- dbSendUpdate(con, sql_management_rep_insert_2)
                    
                    dbSendUpdate(con, paste("BEGIN
                                            EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_2_NAME , "';
                                            EXCEPTION
                                            WHEN OTHERS THEN NULL;
                                            END;"))
                    
                  }
                  
                  shinyjs::enable("go_list")
                  shinyjs::enable("tabBut")
                  
                }
                )
              } else
              {
                showModal(modalDialog(title="Attention!", "The Forecee File does not contain required columns"))
                shinyjs::enable("go_list")
                shinyjs::enable("tabBut")
              }
            } else
            {
              must_be_present <- c("Part_Number", "Material_cost_Scenario_1", "Moq_1", "Standard_Pack_1", "Buy_Quantity_Scenario_1", "Setup_Cost_Scenario_1", "Additional_Cost_Scenario_1",
                                   "Proposed_Dealer_Price_1", "Proposed_Wd_Price_1", "Material_cost_Scenario_2", "Moq_2", "Standard_Pack_2", "Buy_Quantity_Scenario_2",
                                   "Setup_Cost_Scenario_2", "Additional_Cost_Scenario_2", "Proposed_Dealer_Price_2", "Proposed_Wd_Price_2")
              
              uploaded_file_colnames <- colnames(updated_cost_elements_data)
              
              columns_not_present <- must_be_present[!(must_be_present %in% uploaded_file_colnames)]
              cols_not_present <- ""
              
              for( i in 1:length(columns_not_present))
              {
                cols_not_present <- paste(columns_not_present[i], cols_not_present, sep = ", ")
              }
              
              print(columns_not_present)
              
              showModal(modalDialog(title="Attention!", tags$h3("The cost element file does not contain these columns or could have been spelled wrong- "), cols_not_present))
              shinyjs::enable("go_list")
              shinyjs::enable("tabBut")
            }
            
          } else
          {
            showModal(modalDialog(title="Attention!", "Wrong input format, please select a csv"))
            shinyjs::enable("go_list")
            shinyjs::enable("tabBut")
          }
        } else if(is.null(updated_cost_elements))
        {
          showModal(modalDialog(
            title = "Warning Message",
            "First, upload the Cost element file and click Submit to get results"
          ))
          shinyjs::enable("go_list")
          shinyjs::enable("tabBut")
          
        } else if(is.null(forecee_uploaded_file))
        {
          showModal(modalDialog(
            title = "Warning Message",
            "First, upload the Forecee file and click Submit to get results"
          ))
          shinyjs::enable("go_list")
          shinyjs::enable("tabBut")
        }
      }
      
      shinyjs::enable("approve_rat")
      }
        } )
  ###Changes for the 15 years in the finance view   
  #output table		
  ##### Rendering ui of part number input for Finance View
  output$uio <- renderUI({
    
    part_info <- global_ads$df_data_ads
    
    part_info<-merge(part_info,global_PARTdata$cognos,by="PART_NBR",all=TRUE)
    part_info<-part_info[order(part_info$PART_ORDER),]
    
    part_inform <- as.data.frame(part_info)
    part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
    
    selectInput("Part_Num", "Part Number", choices = as.vector(part_inform$PART_NBR))
  })	 
 
  
  
  observeEvent({input$macro},{
    part_ff<-global_ads$df_data_ads
    
    part_info1 <- global_ads$df_data_ads
    part_inform1 <- as.data.frame(part_info1)
    part_inform1$PART_NBR<- str_pad(part_inform1$PART_NBR, width=8, side="left", pad="0")
    
    part_f1 <- part_inform1
    
    
    
    y<-nrow(part_ff)
    
    print(y)
    ATB_ADS <- global_ads$df_data_ads
    
    
    Original_current <- Current(ATB_ADS)
    spl_1 <- Original_current
    
    finance_current_scenario= data.frame(matrix("",  nrow = as.numeric(y)))  
    #finance_current_scenario<-0
    finance_current_scenario<-as.data.frame(finance_current_scenario)
    finance_current_scenario$matrix.....nrow...as.numeric.y..<-NULL
    finance_current_scenario$Part_nbr<-part_ff$PART_NBR
    finance_current_scenario$PL<-part_ff$LCC_PRODLINE
    finance_current_scenario$SL<-part_ff$LCC_SUBLINE
    finance_current_scenario$Discount_Rate<-15
    finance_current_scenario$ATB_Units<-spl_1$Buy_Quantity
    finance_current_scenario$Material_cost<-part_ff$LAST_COST
    finance_current_scenario$Labour_cost_per_hr<-as.numeric(part_ff$AVG_LCPP)+
      as.numeric(part_ff$OFFSITE_LCPP)+as.numeric(part_ff$IB_LABOR_COST_PP)+
      as.numeric(part_ff$OB_LABOR_COST_PP)
    finance_current_scenario$Storage_cost<-round(as.numeric(part_ff$MTH_SQ_FT_COST_PER_PEICE),2)
    finance_current_scenario$Total_packaging_cost<-spl_1$Package_cost
    finance_current_scenario$Freight_one_way<-round(as.numeric(part_ff$IB_TRANS_CST_PP)+as.numeric(part_ff$OFFSITE_TRANS_COST_PP),2)
    finance_current_scenario$Inventory_lvl<-part_ff$INVENTORY_LVL
    finance_current_scenario$FORECAST_YR_1<-part_ff$FORECAST_YR_1
    finance_current_scenario$FORECAST_YR_2<-part_ff$FORECAST_YR_2
    finance_current_scenario$FORECAST_YR_3<-part_ff$FORECAST_YR_3
    finance_current_scenario$FORECAST_YR_4<-part_ff$FORECAST_YR_4
    finance_current_scenario$FORECAST_YR_5<-part_ff$FORECAST_YR_5
    finance_current_scenario$FORECAST_YR_6<-part_ff$FORECAST_YR_6 
    finance_current_scenario$FORECAST_YR_7<-part_ff$FORECAST_YR_7 #7
    finance_current_scenario$FORECAST_YR_8<-part_ff$FORECAST_YR_8 #8 
    finance_current_scenario$FORECAST_YR_9<-part_ff$FORECAST_YR_9 # 9
    finance_current_scenario$FORECAST_YR_10<-part_ff$FORECAST_YR_10 #10 
    finance_current_scenario$FORECAST_YR_11<-part_ff$FORECAST_YR_11 # 11
    finance_current_scenario$FORECAST_YR_12<-part_ff$FORECAST_YR_12 #12 
    finance_current_scenario$FORECAST_YR_13<-part_ff$FORECAST_YR_13 #13
    finance_current_scenario$FORECAST_YR_14<-part_ff$FORECAST_YR_14 #14 
    finance_current_scenario$FORECAST_YR_15<-part_ff$FORECAST_YR_15 # 15 
    finance_current_scenario$Historic_sales_CY<-part_ff$ACTUAL_SALES_CYTD
    finance_current_scenario$Historic_sales_minus_1<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_1
    finance_current_scenario$Historic_sales_minus_2<-part_ff$ACTUAL_SALES_CURR_YEAR_MINUS_2
    finance_current_scenario$Mandatory_serv_ret<- part_f1$SBR_LAST_MANDATORY_YEAR
    # finance_current_scenario$Mandatory_serv_ret<- max(part_f1$SBR_LAST_MANDATORY_YEAR, part_f1$SBR_LAST_MANDATORY_YEAR_MEX, na.rm = TRUE)
    
    # finance_current_scenario$Mandatory_serv_ret<-round(as.numeric(part_ff$APPLICATION_LY),0) ##needs to change 
    finance_current_scenario$Dealer_price<-part_ff$DEALER_PRICE_NO_DISCOUNT
    finance_current_scenario$Dlr_sls<-part_ff$DLR_SLS
    finance_current_scenario$WD_price<-part_ff$WD_DEALER_PRICE_NO_DISCOUNT
    finance_current_scenario$WD_sls<-part_ff$WD_SLS	
    finance_current_scenario$All_time_buy<-(finance_current_scenario$ATB_Units*finance_current_scenario$Material_cost)+
      finance_current_scenario$Labour_cost_per_hr+finance_current_scenario$Storage_cost+ finance_current_scenario$Total_packaging_cost+(
        finance_current_scenario$Freight_one_way*finance_current_scenario$ATB_Units)
    finance_current_scenario<-finance_current_scenario[with(finance_current_scenario,order(-All_time_buy)), ]
    #finance_current_scenario <- finance_current_scenario[order(-ATB_Units,-Material_cost,-Total_packaging_cost,Storage_cost,-Freight_one_way),] 
    
    finance_current_scenario<-merge(finance_current_scenario,global_PARTdata$cognos,by.x="Part_nbr",by.y="PART_NBR",all=TRUE)
    finance_current_scenario<-finance_current_scenario[order(finance_current_scenario$PART_ORDER),]
    finance_current_scenario$PART_ORDER<-NULL
    
    
    wb = loadWorkbook("finance_list.xlsx")
    print("1")
    writeData(wb, sheet = "Sheet1", finance_current_scenario) 
    print("2")
    saveWorkbook(wb, file =  "finance_list_new.xlsx", overwrite = TRUE)
    print("3")
    path_to_vbs_file = "test_vba.vbs"
    print("4")
    shell(shQuote(normalizePath(path_to_vbs_file)), "cscript", flag = "//nologo")
    print("5")
    print("AM I the error e??")
  })
  

  
  
  observeEvent({
    input$submit_finance
    
  }, {
    
    if(!is.null(input$Part_Num))
    {
      part_info <- global_ads$df_data_ads
      finance <- dollar_format(negative_parens = TRUE)
      part_inform <- as.data.frame(part_info)
      part_inform$X <- NULL
      part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
      part_f<- part_inform[which(part_inform$PART_NBR == isolate(input$Part_Num)), ]
      
      ATB_ADS <- global_ads$df_data_ads
      Original_current <- Current(ATB_ADS)
      spl_1 <- Original_current
      i<-which(part_inform$PART_NBR == isolate(input$Part_Num))
      
      
      output$Part_details <- renderTable({
        part_f1<- 0
        part_f1<- as.data.frame(part_f1)
        part_f1$Fields<- "Part Number"
        part_f1$part_f1<- NULL
        part_f1[2,1] <-"Product Line"
        part_f1[3,1] <-"Sub Line"
        part_f1$Attributes <- part_f[1,1]
        part_f1[2,2] <- as.character(part_f$LCC_PRODLINE[1])
        part_f1[3,2] <- as.character(part_f$LCC_SUBLINE[1])
        
        part_f1
      })
      
      shinyjs::show("Part_details")
      
      
      output$material_f <- renderHotable({
        part_f1_22 <- as.character(spl_1$Buy_Quantity[i])  
        material_cost_f <- c(1:4)
        material_cost_f <- as.data.frame(material_cost_f)
        
        material_cost_f$Input_Fields <- c("Material Cost/Unit(ATB)","ATB Labour Hours","Part Type","# Units in ATB") #change 777
        material_cost_f$material_cost_f<-NULL 
        material_cost_f$Values <- c(round(part_f$LAST_COST[1],2),1,"-",part_f1_22)
        material_cost_f
      }, readOnly = TRUE)
      
      shinyjs::show("material_f")
      
      
      output$cost_details <- renderHotable({
        material_cost_ff <- hot.to.df(input$material_f)
        x1<-round(as.numeric(material_cost_ff$Value[1]),2)
        x2<-round(as.numeric(material_cost_ff$Value[2]),2)
        part_f1<- 0
        part_f1<- as.data.frame(part_f1)
        part_f1$Fields<- "Discount Rate %"
        part_f1$part_f1<- NULL
        part_f1[2,1] <-"Material Cost/Unit(All Parts in reference)"
        part_f1[3,1] <- "Total Material Cost"
        part_f1[4,1] <-"Labour cost/Hr "
        part_f1[5,1] <- "Total Labour Cost"
        part_f1[6,1] <- "Storage Cost"
        part_f1[7,1] <- "Total Packaging Cost"
        part_f1[8,1] <- "Freight One way"
        part_f1[9,1] <- "Inbound Freight Cost"
        part_f1[10,1] <- "Total All Time Buy Cost"
        part_f1$Values <- 15
        
        
        part_f1_22 <- as.character(spl_1$Buy_Quantity[i])
        part_f1_32 <- round(as.numeric(part_f$LAST_COST[1]),2)
        part_f1_42 <- round(as.numeric(part_f$LAST_COST[1]),2)*spl_1$Buy_Quantity[i]
        part_f1_52 <- as.numeric(part_f$AVG_LCPP[1])+as.numeric(part_f$OFFSITE_LCPP[1])+as.numeric(part_f$IB_LABOR_COST_PP[1])+as.numeric(part_f$OB_LABOR_COST_PP[1])
        part_f1_62 <- as.numeric(part_f1_52)
        part_f1_72 <- round(as.numeric(part_f$MTH_SQ_FT_COST_PER_PEICE),2)
        part_f1_82 <- spl_1$Package_cost[i]
        part_f1_92 <- round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2)
        part_f1_102 <- as.numeric(part_f1_92)*as.numeric(part_f1_22)
        part_f1_112 <-as.numeric(part_f1_102)+ as.numeric(part_f1_82)+as.numeric(part_f1_62)+as.numeric(part_f1_42)
        
        # part_f1[2,2]<-part_f1_22
        part_f1[2,2]<-finance(part_f1_32)
        part_f1[3,2]<-finance(part_f1_42)
        part_f1[4,2]<-finance(part_f1_52)
        part_f1[5,2]<-finance(part_f1_62)
        part_f1[6,2]<-finance(part_f1_72)
        part_f1[7,2]<-finance(part_f1_82)
        part_f1[8,2]<-finance(part_f1_92)
        part_f1[9,2]<- finance(part_f1_102)
        part_f1[10,2]<- finance(part_f1_112)
        
        part_f1
      },readOnly = TRUE)
      
      shinyjs::show("cost_details")
      
      output$other_assum <- renderHotable({
        material_cost_ff <- hot.to.df(input$material_f)
        part_f1<- 0
        part_f1<- as.data.frame(part_f1)
        part_f1$Fields<- "Selling Price"
        part_f1$part_f1<- NULL
        part_f1[2,1] <-"Sales Allowance %"
        i<-which(part_inform$PART_NBR == isolate(input$Part_Num)) 
        part_f1_Values <- ifelse((ATB_ADS$DLR_SLS[i] + ATB_ADS$WD_SLS[i]) ==0,
                                 ifelse(ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i] ==0,ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i],
                                        ifelse(ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i]==0,ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i],(as.numeric(ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i])+as.numeric(ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i]))*0.5))
                                 , ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i]*(ATB_ADS$DLR_SLS[i]/(ATB_ADS$DLR_SLS[i]+ATB_ADS$WD_SLS[i]))+ ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i]*(ATB_ADS$WD_SLS[i]/(ATB_ADS$DLR_SLS[i]+ATB_ADS$WD_SLS[i])))
        
        part_f1$Values<-finance(part_f1_Values)
        # part_f1[2,2] <- if(x3=="GMP"){0.09}else if (x3=="ACD"){0.15}else if(x3=="-"){0.12}
        part_f1[2,2] <- as.numeric(0.12)
        part_f1
      },readOnly = TRUE)
      
      shinyjs::show("other_assum")
      
      part_info <- global_ads$df_data_ads
      
      finance <- dollar_format(negative_parens = TRUE)
      part_inform <- as.data.frame(part_info)
      part_inform$X <- NULL
      part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
      part_f<- part_inform[which(part_inform$PART_NBR == isolate(input$Part_Num)), ]
      
      ATB_ADS <- global_ads$df_data_ads
      Original_current <- Current(ATB_ADS)
      spl_1 <- Original_current
      i<-which(part_inform$PART_NBR == isolate(input$Part_Num))
      material_cost_ff <- hot.to.df(input$material_f)
      x1<-round(as.numeric(material_cost_ff$Value[1]),2)
      x2<-round(as.numeric(material_cost_ff$Value[2]),2)
      x3<-as.character(material_cost_ff$Value[3])
      x4 <- as.numeric(0.15)
      
      
      
      
      
      
      
      output$op_details <- renderHotable({
        part_info <- global_ads$df_data_ads
        other_assum_ff <- hot.to.df(input$other_assum)
        part_inform <- as.data.frame(part_info)
        part_inform$X <- NULL
        part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
        part_f<- part_inform[which(part_inform$PART_NBR == isolate(input$Part_Num)), ]
        
        ATB_ADS <- global_ads$df_data_ads
        Original_current <- Current(ATB_ADS)
        spl_1 <- Original_current
        i<-which(part_inform$PART_NBR == isolate(input$Part_Num))
        #print(spl_1)
        material_cost_ff <- hot.to.df(input$material_f)
        #other_assum_f<-data.frame()
        other_assum_f_1<-ifelse((ATB_ADS$DLR_SLS[i] + ATB_ADS$WD_SLS[i]) ==0,
                                ifelse(ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i] ==0,ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i],
                                       ifelse(ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i]==0,ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i],(as.numeric(ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i])+as.numeric(ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i]))*0.5))
                                , ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i]*(ATB_ADS$DLR_SLS[i]/(ATB_ADS$DLR_SLS[i]+ATB_ADS$WD_SLS[i]))+ 
                                  ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i]*(ATB_ADS$WD_SLS[i]/(ATB_ADS$DLR_SLS[i]+ATB_ADS$WD_SLS[i])))
        
        
        ## part_fx<- c(1:9)
        ##  part_fx<- as.data.frame(1:9, 1:9)
        part_fx<- as.data.frame(1:9,)
        #part_fx[1,1]<- "Year"
        #part_fx$part_fx<- NULL
        part_fx[1,1] <-"Annual Units Sold"
        part_fx[2,1] <-"# Units in Storage"
        part_fx[3,1] <- "Revenue"
        part_fx[4,1]<- "All Time Buy Cost"
        part_fx[5,1] <-"Total Storage Cost"
        part_fx[6,1] <-"Outbound Freight Costs"
        part_fx[7,1] <- "Miscellaneous Costs *"
        part_fx[8,1] <- "Total Cost"
        part_fx[9,1] <- "Net Benefit"
        part_fx[10,1] <- "Present Value of Cashflow"
        finance <- dollar_format(negative_parens = TRUE)			 
        
        
        ##1. Forecast values 
        
        part_fx[1,2]<- "-"
        part_fx[1,3]<-part_f$FORECAST_YR_1[1]
        part_fx[1,4]<-part_f$FORECAST_YR_2[1]
        part_fx[1,5]<-part_f$FORECAST_YR_3[1]
        part_fx[1,6]<-part_f$FORECAST_YR_4[1]
        part_fx[1,7]<-part_f$FORECAST_YR_5[1]
        part_fx[1,8]<-part_f$FORECAST_YR_6[1]
        part_fx[1,9]<-part_f$FORECAST_YR_7[1] 
        part_fx[1,10]<-part_f$FORECAST_YR_8[1]
        part_fx[1,11]<-part_f$FORECAST_YR_9[1]
        part_fx[1,12]<-part_f$FORECAST_YR_10[1]
        part_fx[1,13]<-part_f$FORECAST_YR_11[1]
        part_fx[1,14]<-part_f$FORECAST_YR_12[1]
        part_fx[1,15]<-part_f$FORECAST_YR_13[1]
        part_fx[1,16]<-part_f$FORECAST_YR_14[1]
        part_fx[1,17]<-part_f$FORECAST_YR_15[1]
        part_fx[1,18]<-as.numeric(part_fx[1,3])+as.numeric(part_fx[1,4])+as.numeric(part_fx[1,5])+as.numeric(part_fx[1,6])+
          as.numeric(part_fx[1,7])+as.numeric(part_fx[1,8])+ as.numeric(part_fx[1,9])+ as.numeric(part_fx[1,10])+as.numeric(part_fx[1,11]) + as.numeric(part_fx[1,12]) +
          as.numeric(part_fx[1,13]) + as.numeric(part_fx[1,14]) + as.numeric(part_fx[1,15]) + as.numeric(part_fx[1,16]) + as.numeric(part_fx[1,17])
        
        
        ##2. Inventory 
        part_fx[2,2]<- as.numeric(spl_1$Buy_Quantity[i])+as.numeric(part_f$INVENTORY_LVL[1])
        part_fx[2,3]<-as.numeric(part_fx[2,2])-part_fx[1,3]
        part_fx[2,4]<-part_fx[2,3]-part_fx[1,4]
        part_fx[2,5]<-part_fx[2,4]-part_fx[1,5]
        part_fx[2,6]<-part_fx[2,5]-part_fx[1,6]
        part_fx[2,7]<-part_fx[2,6]-part_fx[1,7]
        part_fx[2,8]<-part_fx[2,7]-part_fx[1,8]
        part_fx[2,9]<-part_fx[2,8]-part_fx[1,9]
        part_fx[2,10]<-part_fx[2,9]-part_fx[1,10]
        part_fx[2,11]<-part_fx[2,10]-part_fx[1,11]
        part_fx[2,12]<-part_fx[2,11]-part_fx[1,12]
        part_fx[2,13]<-part_fx[2,12]-part_fx[1,13]
        part_fx[2,14]<-part_fx[2,13]-part_fx[1,14]
        part_fx[2,15]<-part_fx[2,14]-part_fx[1,15]
        part_fx[2,16]<-part_fx[2,15]-part_fx[1,16]
        part_fx[2,17]<-part_fx[2,16]-part_fx[1,17]
        part_fx[2,18]<-part_fx[2,17]
        
        ##.3 
        
        part_fx_42 <-0
        part_fx_43 <-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,3])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fx_44 <-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,4])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fx_45 <-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,5])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fx_46 <-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,6])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fx_47 <-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,7])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fx_48 <-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,8])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fx_49 <-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,9])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2])))) #7
        part_fx_50<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,10])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2])))) #8
        part_fx_51<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,11])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2])))) #9
        part_fx_52<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,12])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2])))) #10
        part_fx_53<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,13])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2])))) #11
        part_fx_54<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,14])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2])))) #12
        part_fx_55<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,15])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2])))) #13
        part_fx_56<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,16])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2])))) #14
        part_fx_57<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx[1,17])*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2])))) #15
        
        part_fx_58 <-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,as.numeric(part_fx_42)+as.numeric(part_fx_43)+as.numeric(part_fx_44)+
                              as.numeric(part_fx_45)+as.numeric(part_fx_46)+as.numeric(part_fx_47)+as.numeric(part_fx_48) + as.numeric(part_fx_49) + as.numeric(part_fx_50) + as.numeric(part_fx_51) +
                              as.numeric(part_fx_52) + as.numeric(part_fx_53) + as.numeric(part_fx_54) + as.numeric(part_fx_55) + as.numeric(part_fx_56) + as.numeric(part_fx_57) ) 
        part_fx[3,2]<- finance(round(part_fx_42,0))
        part_fx[3,3]<- finance(round(part_fx_43,0))
        part_fx[3,4]<- finance(round(part_fx_44,0))
        part_fx[3,5]<- finance(round(part_fx_45,0))
        part_fx[3,6]<- finance(round(part_fx_46,0))
        part_fx[3,7]<- finance(round(part_fx_47,0))
        part_fx[3,8]<- finance(round(part_fx_48,0))
        part_fx[3,9]<- finance(round(part_fx_49,0))#7
        part_fx[3,10]<- finance(round(part_fx_50,0))#8
        part_fx[3,11]<- finance(round(part_fx_51,0))#9
        part_fx[3,12]<- finance(round(part_fx_52,0))#10
        part_fx[3,13]<- finance(round(part_fx_53,0))#11
        part_fx[3,14]<- finance(round(part_fx_54,0))#12
        part_fx[3,15]<- finance(round(part_fx_55,0))#13
        part_fx[3,16]<- finance(round(part_fx_56,0))#14
        part_fx[3,17]<- finance(round(part_fx_57,0))#15
        
        part_fx[3,18]<- finance(round(part_fx_58,0))
        
        
        
        ###4. 
        Labour_cost<-as.numeric(part_f$AVG_LCPP[1])+as.numeric(part_f$OFFSITE_LCPP[1])+as.numeric(part_f$IB_LABOR_COST_PP[1])+as.numeric(part_f$OB_LABOR_COST_PP[1])
        ##labor cost per piece + offisite lcpp + inbound + ob labor cost ##No change  
        
        part_fx_59<- -(as.numeric(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2)*
                                    as.numeric(spl_1$Buy_Quantity[i]))+spl_1$Package_cost[i]+
                         (as.numeric(Labour_cost)*as.numeric(1))+
                         (round(as.numeric(part_f$LAST_COST[1]),2)*spl_1$Buy_Quantity[i])) ##No change is made here 
        
        part_fx[4,2]<-finance(round(part_fx_59,0))
        part_fx_60<-0
        part_fx_61<-0
        part_fx_62<-0
        part_fx_63<-0
        part_fx_64<-0
        part_fx_65<-0
        part_fx_66<-0#7
        part_fx_67<-0#8
        part_fx_68<-0#9
        part_fx_69<-0#10
        part_fx_70<-0#11
        part_fx_71<-0#12
        part_fx_72<-0#13
        part_fx_73<-0#14
        part_fx_74<-0#15
        
        
        part_fx_75<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,round((as.numeric(part_fx_59)+as.numeric(part_fx_60)+as.numeric(part_fx_61)+
                                                                           as.numeric(part_fx_62)+as.numeric(part_fx_63)+as.numeric(part_fx_64)+as.numeric(part_fx_65) + as.numeric(part_fx_66) + as.numeric(part_fx_67) + as.numeric(part_fx_68) + 
                                                                           as.numeric(part_fx_69) + as.numeric(part_fx_70) + as.numeric(part_fx_71) + as.numeric(part_fx_72) + as.numeric(part_fx_73) + as.numeric(part_fx_74)),2) ) 
        
        
        part_fx[4,3] <- finance(part_fx_60)
        part_fx[4,4] <- finance(part_fx_61)
        part_fx[4,5] <- finance(part_fx_62)
        part_fx[4,6] <- finance(part_fx_63)
        part_fx[4,7] <- finance(part_fx_64)
        part_fx[4,8] <- finance(part_fx_65)
        part_fx[4,9] <- finance(part_fx_66) #7
        part_fx[4,10] <- finance(part_fx_67) #8 
        part_fx[4,11] <- finance(part_fx_68) #9
        part_fx[4,12] <- finance(part_fx_69) #10
        part_fx[4,13] <- finance(part_fx_70) #11
        part_fx[4,14] <- finance(part_fx_71) #12
        part_fx[4,15] <- finance(part_fx_72) #13
        part_fx[4,16] <- finance(part_fx_73) #14 
        part_fx[4,17] <- finance(part_fx_74) #15 
        
        
        part_fx[4,18] <- finance(part_fx_75)
        
        
        
        ## 5.
        
        part_fx_76 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,3]) #1
        part_fx_77 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,4]) #2
        part_fx_78 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,5]) #3
        part_fx_79 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,6]) #4
        part_fx_80 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,7]) #5
        part_fx_81 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,8]) #6
        part_fx_82 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,9]) #7
        part_fx_83 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,10]) #8
        part_fx_84 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,11]) #9
        part_fx_85 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,12]) #10
        part_fx_86 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,13]) #11
        part_fx_87 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,14]) #12
        part_fx_88 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,15]) #13
        part_fx_89 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,16]) #14
        part_fx_90 <-as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,3))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fx[2,17]) #15
        
        part_fx_91 <-round((as.numeric(part_fx_90)+as.numeric(part_fx_76)+as.numeric(part_fx_77)+as.numeric(part_fx_78)+as.numeric(part_fx_79)
                            +as.numeric(part_fx_80) + as.numeric(part_fx_81) + as.numeric(part_fx_82) + as.numeric(part_fx_83) + as.numeric(part_fx_84) + 
                              as.numeric(part_fx_85) + as.numeric(part_fx_86) + as.numeric(part_fx_87) + as.numeric(part_fx_88) + as.numeric(part_fx_89) ),2)
        
        part_fx[5,2]<- " "
        part_fx[5,3]<-finance(round(part_fx_76,0)) # 1 
        part_fx[5,4]<-finance(round(part_fx_77,0)) # 2 
        part_fx[5,5]<-finance(round(part_fx_78,0))	# 3
        part_fx[5,6]<-finance(round(part_fx_79,0)) # 4 
        part_fx[5,7]<-finance(round(part_fx_80,0))	# 5
        part_fx[5,8]<-finance(round(part_fx_81,0)) # 6
        part_fx[5,9]<-finance(round(part_fx_82,0)) # 7
        part_fx[5,10]<-finance(round(part_fx_83,0)) # 8
        part_fx[5,11]<-finance(round(part_fx_84,0)) # 9
        part_fx[5,12]<-finance(round(part_fx_85,0)) # 10
        part_fx[5,13]<-finance(round(part_fx_86,0)) # 11
        part_fx[5,14]<-finance(round(part_fx_87,0)) # 12 
        part_fx[5,15]<-finance(round(part_fx_88,0)) # 13
        part_fx[5,16]<-finance(round(part_fx_89,0)) # 14 
        part_fx[5,17]<-finance(round(part_fx_90,0)) # 15
        
        part_fx[5,18]<-finance(round(part_fx_91,0)) 
        
        ## 6 Outbound freight
        
        part_fx_92 <- (round(as.numeric(part_f$FORECAST_YR_1[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #1 
        part_fx_93 <- (round(as.numeric(part_f$FORECAST_YR_2[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #2
        part_fx_94 <- (round(as.numeric(part_f$FORECAST_YR_3[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #3
        part_fx_95 <- (round(as.numeric(part_f$FORECAST_YR_4[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #4
        part_fx_96 <- (round(as.numeric(part_f$FORECAST_YR_5[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #5
        part_fx_97 <- (round(as.numeric(part_f$FORECAST_YR_6[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #6
        part_fx_98 <- (round(as.numeric(part_f$FORECAST_YR_7[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #7
        part_fx_99 <- (round(as.numeric(part_f$FORECAST_YR_8[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #8
        part_fx_100 <- (round(as.numeric(part_f$FORECAST_YR_9[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #9 
        part_fx_101 <- (round(as.numeric(part_f$FORECAST_YR_10[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #10
        part_fx_102 <- (round(as.numeric(part_f$FORECAST_YR_11[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #11
        part_fx_103 <- (round(as.numeric(part_f$FORECAST_YR_12[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #12
        part_fx_104 <- (round(as.numeric(part_f$FORECAST_YR_13[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #13
        part_fx_105 <- (round(as.numeric(part_f$FORECAST_YR_14[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #14
        part_fx_106 <- (round(as.numeric(part_f$FORECAST_YR_15[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0)) #15
        
        
        part_fx_107  <- as.numeric(part_fx_106)+as.numeric(part_fx_92)+as.numeric(part_fx_93)+as.numeric(part_fx_94)+as.numeric(part_fx_95)+as.numeric(part_fx_96) +
          as.numeric(part_fx_97)+as.numeric(part_fx_98)+as.numeric(part_fx_99)+as.numeric(part_fx_100)+as.numeric(part_fx_101)+as.numeric(part_fx_102)
        +as.numeric(part_fx_103)+as.numeric(part_fx_104)+as.numeric(part_fx_105)
        
        
        part_fx[6,2]<- " "
        part_fx[6,3]<-finance(part_fx_92) #1 
        part_fx[6,4]<-finance(part_fx_93) #2
        part_fx[6,5]<-finance(part_fx_94) #3
        part_fx[6,6]<-finance(part_fx_95) #4
        part_fx[6,7]<-finance(part_fx_96) #5
        part_fx[6,8]<-finance(part_fx_97) #6 
        part_fx[6,9]<-finance(part_fx_98) #7
        part_fx[6,10]<-finance(part_fx_99) #8
        part_fx[6,11]<-finance(part_fx_100) #9
        part_fx[6,12]<-finance(part_fx_101) #10
        part_fx[6,13]<-finance(part_fx_102) #11
        part_fx[6,14]<-finance(part_fx_103) #12
        part_fx[6,15]<-finance(part_fx_104) #13
        part_fx[6,16]<-finance(part_fx_105) #14
        part_fx[6,17]<-finance(part_fx_106) #15
        
        part_fx[6,18]<-finance(part_fx_107) 
        
        
        
        
        ## 7 Miscellaneous
        
        
        part_fx_108<- " "
        part_fx_109<- as.numeric(0) #1
        part_fx_110<- as.numeric(0) #2
        part_fx_111<- as.numeric(0) #3
        part_fx_112<- as.numeric(0) #4
        part_fx_113<- as.numeric(0) #5
        part_fx_114<- as.numeric(0) #6
        part_fx_115<- as.numeric(0) #7
        part_fx_116<- as.numeric(0) #8
        part_fx_117<- as.numeric(0) #9
        part_fx_118<- as.numeric(0) #10
        part_fx_119<- as.numeric(0) #11
        part_fx_120<- as.numeric(0) #12
        part_fx_121<- as.numeric(0) #13
        part_fx_122<- as.numeric(0) #14
        part_fx_123<- as.numeric(0) #15
        
        part_fx_124<-as.numeric(part_fx_109)+as.numeric(part_fx_110)+as.numeric(part_fx_111)+as.numeric(part_fx_112)+as.numeric(part_fx_113)+as.numeric(part_fx_114)+
          as.numeric(part_fx_115)+as.numeric(part_fx_116)+as.numeric(part_fx_117)+as.numeric(part_fx_118) + as.numeric(part_fx_119) + as.numeric(part_fx_120) +
          as.numeric(part_fx_121)+as.numeric(part_fx_122)+as.numeric(part_fx_123)
        
        
        
        part_fx[7,2]<- part_fx_108
        part_fx[7,3]<- finance(part_fx_109) #1
        part_fx[7,4]<- finance(part_fx_110) #2
        part_fx[7,5]<- finance(part_fx_111) #3
        part_fx[7,6]<- finance(part_fx_112) #4
        part_fx[7,7]<- finance(part_fx_113) #5
        part_fx[7,8]<- finance(part_fx_114) #6
        part_fx[7,9]<- finance(part_fx_115) #7
        part_fx[7,10]<- finance(part_fx_116) #8
        part_fx[7,11]<- finance(part_fx_117) #9
        part_fx[7,12]<- finance(part_fx_118) #10
        part_fx[7,13]<- finance(part_fx_119) #11
        part_fx[7,14]<- finance(part_fx_120) #12
        part_fx[7,15]<- finance(part_fx_121) #13
        part_fx[7,16]<- finance(part_fx_122) #14
        part_fx[7,17]<- finance(part_fx_123) #15
        
        
        
        
        
        part_fx[7,18]<- finance(part_fx_124)
        
        ## 8. Total
        
        part_fx_125<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,round(as.numeric(part_fx_59),0))
        part_fx_126<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_60)+as.numeric(part_fx_76)+as.numeric(part_fx_92)+as.numeric(part_fx_109)),0)) #1
        part_fx_127<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_61)+as.numeric(part_fx_77)+as.numeric(part_fx_93)+as.numeric(part_fx_110)),0)) #2
        part_fx_128<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_62)+as.numeric(part_fx_78)+as.numeric(part_fx_94)+as.numeric(part_fx_111)),0)) #3 
        part_fx_129<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_63)+as.numeric(part_fx_79)+as.numeric(part_fx_95)+as.numeric(part_fx_112)),0)) #4 
        part_fx_130<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_64)+as.numeric(part_fx_80)+as.numeric(part_fx_96)+as.numeric(part_fx_113)),0))  #5
        part_fx_131<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_65)+as.numeric(part_fx_81)+as.numeric(part_fx_97)+as.numeric(part_fx_114)),0))  #6
        part_fx_132<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_66)+as.numeric(part_fx_82)+as.numeric(part_fx_98)+as.numeric(part_fx_115)),0))  #7
        part_fx_133<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_67)+as.numeric(part_fx_83)+as.numeric(part_fx_99)+as.numeric(part_fx_116)),0))  #8
        part_fx_134<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_68)+as.numeric(part_fx_84)+as.numeric(part_fx_100)+as.numeric(part_fx_117)),0))  #9
        part_fx_135<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_69)+as.numeric(part_fx_85)+as.numeric(part_fx_101)+as.numeric(part_fx_118)),0))  #10
        part_fx_136<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_70)+as.numeric(part_fx_86)+as.numeric(part_fx_102)+as.numeric(part_fx_119)),0))  #11
        part_fx_137<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_71)+as.numeric(part_fx_87)+as.numeric(part_fx_103)+as.numeric(part_fx_120)),0))  #12
        part_fx_138<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_72)+as.numeric(part_fx_88)+as.numeric(part_fx_104)+as.numeric(part_fx_121)),0))  #13
        part_fx_139<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_73)+as.numeric(part_fx_89)+as.numeric(part_fx_105)+as.numeric(part_fx_122)),0))  #14
        part_fx_140<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-round((as.numeric(part_fx_74)+as.numeric(part_fx_90)+as.numeric(part_fx_106)+as.numeric(part_fx_123)),0))  #15
        
        
        
        
        part_fx_141<-(as.numeric(part_fx_125)+as.numeric(part_fx_126)+as.numeric(part_fx_127)+
                        as.numeric(part_fx_128)+as.numeric(part_fx_129)+as.numeric(part_fx_130)+as.numeric(part_fx_131) + as.numeric(part_fx_132) + as.numeric(part_fx_133) + as.numeric(part_fx_134)+
                        as.numeric(part_fx_135) + as.numeric(part_fx_136) + as.numeric(part_fx_137) + as.numeric(part_fx_138) + as.numeric(part_fx_139) + as.numeric(part_fx_140)) 
        
        
        part_fx[8,2]<- finance(round(part_fx_125,0))
        part_fx[8,3]<- finance(round(part_fx_126,0)) #1
        part_fx[8,4]<- finance(round(part_fx_127,0)) #2
        part_fx[8,5]<- finance(round(part_fx_128,0)) #3
        part_fx[8,6]<- finance(round(part_fx_129,0)) #4
        part_fx[8,7]<- finance(round(part_fx_130,0)) #5
        part_fx[8,8]<- finance(round(part_fx_131,0)) #6
        part_fx[8,9]<- finance(round(part_fx_132,0)) #7
        part_fx[8,10]<- finance(round(part_fx_133,0)) #8
        part_fx[8,11]<- finance(round(part_fx_134,0)) #9
        part_fx[8,12]<- finance(round(part_fx_135,0)) #10
        part_fx[8,13]<- finance(round(part_fx_136,0)) #11
        part_fx[8,14]<- finance(round(part_fx_137,0)) #12
        part_fx[8,15]<- finance(round(part_fx_138,0)) #13
        part_fx[8,16]<- finance(round(part_fx_139,0)) #14
        part_fx[8,17]<- finance(round(part_fx_140,0)) #15
        
        
        
        
        part_fx[8,18]<-finance(round(part_fx_141,0))
        
        ## 9 Net benefit
        
        part_fx_142<-as.numeric(part_fx_42)+ as.numeric(part_fx_125)
        part_fx_143<-as.numeric(part_fx_43)+ as.numeric(part_fx_126)#1
        part_fx_144<-as.numeric(part_fx_44)+ as.numeric(part_fx_127)#2
        part_fx_145<-as.numeric(part_fx_45)+ as.numeric(part_fx_128)#3
        part_fx_146<-as.numeric(part_fx_46)+ as.numeric(part_fx_129)#4
        part_fx_147<-as.numeric(part_fx_47)+ as.numeric(part_fx_130)#5
        part_fx_148<-as.numeric(part_fx_48)+ as.numeric(part_fx_131)#6
        part_fx_149<-as.numeric(part_fx_49)+ as.numeric(part_fx_132)#7
        part_fx_150<-as.numeric(part_fx_50)+ as.numeric(part_fx_133)#8
        part_fx_151<-as.numeric(part_fx_51)+ as.numeric(part_fx_134)#9
        part_fx_152<-as.numeric(part_fx_52)+ as.numeric(part_fx_135)#10
        part_fx_153<-as.numeric(part_fx_53)+ as.numeric(part_fx_136)#11
        part_fx_154<-as.numeric(part_fx_54)+ as.numeric(part_fx_137)#12
        part_fx_155<-as.numeric(part_fx_55)+ as.numeric(part_fx_138)#13
        part_fx_156<-as.numeric(part_fx_56)+ as.numeric(part_fx_139)#14
        part_fx_157<-as.numeric(part_fx_57)+ as.numeric(part_fx_140)#15
        
        
        
        part_fx_158<-round((as.numeric(part_fx_142)+as.numeric(part_fx_143)+as.numeric(part_fx_144)+as.numeric(part_fx_145)+as.numeric(part_fx_146)+as.numeric(part_fx_147)+
                              as.numeric(part_fx_148)+as.numeric(part_fx_149)+as.numeric(part_fx_150)+as.numeric(part_fx_151) + as.numeric(part_fx_152) + 
                              as.numeric(part_fx_153) + as.numeric(part_fx_154) + as.numeric(part_fx_155)+ as.numeric(part_fx_156) + as.numeric(part_fx_157)),2)
        
        
        
        part_fx[9,2]<- finance(round(part_fx_142,0))
        part_fx[9,3]<-finance(round(part_fx_143,0)) 
        part_fx[9,4]<- finance(round(part_fx_144,0))
        part_fx[9,5]<- finance(round(part_fx_145,0))
        part_fx[9,6]<- finance(round(part_fx_146,0))
        part_fx[9,7]<- finance(round(part_fx_147,0))
        part_fx[9,8]<- finance(round(part_fx_148,0))
        part_fx[9,9]<- finance(round(part_fx_149,0))#7
        part_fx[9,10]<- finance(round(part_fx_150,0))#8
        part_fx[9,11]<- finance(round(part_fx_151,0))#9
        part_fx[9,12]<- finance(round(part_fx_152,0))#10
        part_fx[9,13]<- finance(round(part_fx_153,0))#11
        part_fx[9,14]<- finance(round(part_fx_154,0))#12
        part_fx[9,15]<- finance(round(part_fx_155,0))#13
        part_fx[9,16]<- finance(round(part_fx_156,0))#14
        part_fx[9,17]<- finance(round(part_fx_157,0))#15
        
        
        part_fx[9,18]<-finance(round(part_fx_158,0))
        
        
        ## 10 
        part_fx_159<-as.numeric(part_fx_142)/((1+0.15)^as.numeric(0))
        part_fx_160<-as.numeric(part_fx_143)/((1+0.15)^as.numeric(1))
        part_fx_161<-as.numeric(part_fx_144)/((1+0.15)^as.numeric(2))
        part_fx_162<-as.numeric(part_fx_145)/((1+0.15)^as.numeric(3))
        part_fx_163<-as.numeric(part_fx_146)/((1+0.15)^as.numeric(4))
        part_fx_164<-as.numeric(part_fx_147)/((1+0.15)^as.numeric(5))
        part_fx_165<-as.numeric(part_fx_148)/((1+0.15)^as.numeric(6)) #6
        part_fx_166<-as.numeric(part_fx_149)/((1+0.15)^as.numeric(7)) #7
        part_fx_167<-as.numeric(part_fx_150)/((1+0.15)^as.numeric(8)) #8
        part_fx_168<-as.numeric(part_fx_151)/((1+0.15)^as.numeric(9)) #9
        part_fx_169<-as.numeric(part_fx_152)/((1+0.15)^as.numeric(10)) #10
        part_fx_170<-as.numeric(part_fx_153)/((1+0.15)^as.numeric(11)) #11
        part_fx_171<-as.numeric(part_fx_154)/((1+0.15)^as.numeric(12)) #12
        part_fx_172<-as.numeric(part_fx_155)/((1+0.15)^as.numeric(13)) #13
        part_fx_173<-as.numeric(part_fx_156)/((1+0.15)^as.numeric(14)) #14
        part_fx_174<-as.numeric(part_fx_157)/((1+0.15)^as.numeric(15)) #15
        
        
        
        part_fx_175<-round((as.numeric(part_fx_159)+as.numeric(part_fx_160)+as.numeric(part_fx_161)+
                              as.numeric(part_fx_162)+as.numeric(part_fx_163)+as.numeric(part_fx_164)+as.numeric(part_fx_165) +as.numeric(part_fx_166) +
                              as.numeric(part_fx_167)+as.numeric(part_fx_168) +as.numeric(part_fx_169) +as.numeric(part_fx_170)+as.numeric(part_fx_171) +
                              as.numeric(part_fx_172)+as.numeric(part_fx_173) +as.numeric(part_fx_174)  ),2) 
        
        part_fx[10,2] <-finance(round(part_fx_159,0))
        part_fx[10,3] <-finance(round(part_fx_160,0))
        part_fx[10,4] <-finance(round(part_fx_161,0))
        part_fx[10,5] <-finance(round(part_fx_162,0))
        part_fx[10,6] <-finance(round(part_fx_163,0))
        part_fx[10,7] <-finance(round(part_fx_164,0))
        part_fx[10,8] <-finance(round(part_fx_165,0))
        part_fx[10,9] <-finance(round(part_fx_166,0)) #7
        part_fx[10,10] <-finance(round(part_fx_167,0)) #8
        part_fx[10,11] <-finance(round(part_fx_168,0)) #9
        part_fx[10,12] <-finance(round(part_fx_169,0)) #10
        part_fx[10,13] <-finance(round(part_fx_170,0)) #11
        part_fx[10,14] <-finance(round(part_fx_171,0)) #12
        part_fx[10,15] <-finance(round(part_fx_172,0)) #13
        part_fx[10,16] <-finance(round(part_fx_173,0)) #14
        part_fx[10,17] <-finance(round(part_fx_174,0)) #15
        
        
        part_fx[10,18] <-finance(round(part_fx_175,0))
        
        
        
        #print(part_fx)
        colnames(part_fx)<-c("Year","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","Total")
        part_fx
        
        
        
      },readOnly=TRUE)
      
      shinyjs::show("op_details")
      
      output$npv_table <-renderHotable({
        part_fn<- c(1:3)
        part_fn<- as.data.frame(part_fn)
        
        other_assum_ff <- hot.to.df(input$other_assum)
        
        other_assum_f_1<-ifelse((ATB_ADS$DLR_SLS[i] + ATB_ADS$WD_SLS[i]) ==0,
                                ifelse(ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i] ==0,ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i],
                                       ifelse(ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i]==0,ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i],(as.numeric(ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i])+as.numeric(ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i]))*0.5))
                                , ATB_ADS$DEALER_PRICE_NO_DISCOUNT[i]*(ATB_ADS$DLR_SLS[i]/(ATB_ADS$DLR_SLS[i]+ATB_ADS$WD_SLS[i]))+ 
                                  ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[i]*(ATB_ADS$WD_SLS[i]/(ATB_ADS$DLR_SLS[i]+ATB_ADS$WD_SLS[i]))) 
        
        
        z<-0
        z<-as.data.frame(z)
        z[1,1]<- as.numeric(0)
        z[1,2]<-as.numeric(0)
        z[1,3]<-as.numeric(0)
        z[1,4]<-as.numeric(0)
        z[1,5]<-as.numeric(0)
        z[1,6]<-as.numeric(0)
        z[1,7]<-as.numeric(0)
        z[1,8]<-as.numeric(0)
        
        part_fo<- c(1:9)
        part_fo<- as.data.frame(part_fo)
        part_fo[1,1]<- "Year"
        #part_fo$part_fo<- NULL
        part_fo[2,1] <-"Annual Units Sold"
        part_fo[3,1] <-"# Units in Storage"
        part_fo[4,1] <- "Revenue"
        part_fo[5,1]<- "All Time Buy Cost"
        part_fo[6,1] <-"Total Storage Cost"
        part_fo[7,1] <-"Outbound Freight Costs"
        part_fo[8,1] <- "Miscellaneous Costs"
        part_fo[9,1] <- "Total Cost"
        part_fo[10,1] <- "Net Benefit"
        part_fo[11,1] <- "Present Value of Cashflow"
        
        part_fo[1,2] <- round(as.numeric(0),0)
        part_fo[1,3] <- round(as.numeric(1),0)
        part_fo[1,4] <- round(as.numeric(2),0)
        part_fo[1,5] <- round(as.numeric(3),0)
        part_fo[1,6] <- round(as.numeric(4),0)
        part_fo[1,7] <- round(as.numeric(5),0)
        part_fo[1,8] <- round(as.numeric(6),0)
        part_fo[1,9] <- "Total"
        
        part_fo[2,2]<- "-"
        part_fo[2,3]<-part_f$FORECAST_YR_1[1]
        part_fo[2,4]<-part_f$FORECAST_YR_2[1]
        part_fo[2,5]<-part_f$FORECAST_YR_3[1]
        part_fo[2,6]<-part_f$FORECAST_YR_4[1]
        part_fo[2,7]<-part_f$FORECAST_YR_5[1]
        part_fo[2,8]<-part_f$FORECAST_YR_6[1]
        part_fo[2,9]<-as.numeric(part_fo[2,3])+as.numeric(part_fo[2,4])+as.numeric(part_fo[2,5])+as.numeric(part_fo[2,6])+as.numeric(part_fo[2,7])+as.numeric(part_fo[2,8])
        
        part_fo[3,2]<- as.numeric(spl_1$Buy_Quantity[i])+as.numeric(part_f$INVENTORY_LVL)
        part_fo[3,3]<-as.numeric(part_fo[3,2])-part_fo[2,3]
        part_fo[3,4]<-part_fo[3,3]-part_fo[2,4]
        part_fo[3,5]<-part_fo[3,4]-part_fo[2,5]
        part_fo[3,6]<-part_fo[3,5]-part_fo[2,6]
        part_fo[3,7]<-part_fo[3,6]-part_fo[2,7]
        part_fo[3,8]<-part_fo[3,7]-part_fo[2,8]
        part_fo[3,9]<-part_fo[3,8]
        
        part_fo[4,2]<- 0
        part_fo[4,3]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,part_fo[2,3]*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fo[4,4]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,part_fo[2,4]*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fo[4,5]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,part_fo[2,5]*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fo[4,6]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,part_fo[2,6]*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fo[4,7]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,part_fo[2,7]*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fo[4,8]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,part_fo[2,8]*(as.numeric(other_assum_f_1)*(1-as.numeric(other_assum_ff$Values[2]))))
        part_fo[4,9]<-round((as.numeric(part_fo[4,2])+as.numeric(part_fo[4,3])+as.numeric(part_fo[4,4])+
                               as.numeric(part_fo[4,5])+as.numeric(part_fo[4,6])+as.numeric(part_fo[4,7])+as.numeric(part_fo[4,8])),2)
        
        Labour_cost<-as.numeric(part_f$AVG_LCPP[1])+as.numeric(part_f$OFFSITE_LCPP[1])+as.numeric(part_f$IB_LABOR_COST_PP[1])+as.numeric(part_f$OB_LABOR_COST_PP[1])	  
        
        
        
        
        part_fo[5,2] <- 	-as.numeric((round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2)*
                                        as.numeric(spl_1$Buy_Quantity[i]))+spl_1$Package_cost[i]+
                                       (as.numeric(Labour_cost)*as.numeric(1))+
                                       (round(as.numeric(part_f$LAST_COST[1]),2)*spl_1$Buy_Quantity[i]))
        
        part_fo[5,3] <- 0
        part_fo[5,4] <- 0
        part_fo[5,5] <- 0
        part_fo[5,6] <- 0
        part_fo[5,7] <- 0
        part_fo[5,8] <- 0
        part_fo[5,9] <- as.numeric(part_fo[5,2])+as.numeric(part_fo[5,3])+as.numeric(part_fo[5,4])+as.numeric(part_fo[5,5])+as.numeric(part_fo[5,6])+as.numeric(part_fo[5,7])+as.numeric(part_fo[5,8])
        
        part_fo[6,2]<- " "
        part_fo[6,3] <-round(as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,2))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fo[3,3]),0)
        part_fo[6,4] <-round(as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,2))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fo[3,4]),0)
        part_fo[6,5] <-round(as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,2))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fo[3,5]),0)
        part_fo[6,6] <-round(as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,2))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fo[3,6]),0)
        part_fo[6,7] <-round(as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,2))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fo[3,7]),0)
        part_fo[6,8] <-round(as.numeric(round(part_f$MTH_SQ_FT_COST_PER_PEICE,2))*as.numeric(part_f$LAST_COST[1])*as.numeric(part_fo[3,8]),0)
        part_fo[6,9]<-round((as.numeric(part_fo[6,3])+as.numeric(part_fo[6,4])+as.numeric(part_fo[6,5])+as.numeric(part_fo[6,6])+as.numeric(part_fo[6,7])+as.numeric(part_fo[6,8])),2)
        
        part_fo[7,2]<- " "
        part_fo[7,3]<-(round(as.numeric(part_f$FORECAST_YR_1[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0))
        part_fo[7,4]<-(round(as.numeric(part_f$FORECAST_YR_2[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0))
        part_fo[7,5]<-(round(as.numeric(part_f$FORECAST_YR_3[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0))
        part_fo[7,6]<-(round(as.numeric(part_f$FORECAST_YR_4[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0))
        part_fo[7,7]<-(round(as.numeric(part_f$FORECAST_YR_5[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0))
        part_fo[7,8]<-(round(as.numeric(part_f$FORECAST_YR_6[1]*(round(as.numeric(part_f$IB_TRANS_CST_PP[1])+as.numeric(part_f$OFFSITE_TRANS_COST_PP[1]),2))),0))
        part_fo[7,9]<-as.numeric(part_fo[7,3])+as.numeric(part_fo[7,4])+as.numeric(part_fo[7,5])+as.numeric(part_fo[7,6])+as.numeric(part_fo[7,7])+as.numeric(part_fo[7,8])
        
        part_fo[8,2]<- z[1,1]
        part_fo[8,3]<- as.numeric(z[1,2])
        part_fo[8,4]<- as.numeric(z[1,3])
        part_fo[8,5]<- as.numeric(z[1,4])
        part_fo[8,6]<- as.numeric(z[1,5])
        part_fo[8,7]<- as.numeric(z[1,6])
        part_fo[8,8]<- as.numeric(z[1,7])
        part_fo[8,9]<-as.numeric(part_fo[8,3])+as.numeric(part_fo[8,4])+
          as.numeric(part_fo[8,5])+as.numeric(part_fo[8,6])+as.numeric(part_fo[8,7])+as.numeric(part_fo[8,8])
        
        part_fo[9,2]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,(as.numeric(part_fo[5,2])))
        part_fo[9,3]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-(as.numeric(part_fo[5,3])+as.numeric(part_fo[6,3])+as.numeric(part_fo[7,3])+as.numeric(part_fo[8,3])))
        part_fo[9,4]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-(as.numeric(part_fo[5,4])+as.numeric(part_fo[6,4])+as.numeric(part_fo[7,4])+as.numeric(part_fo[8,4])))
        part_fo[9,5]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-(as.numeric(part_fo[5,5])+as.numeric(part_fo[6,5])+as.numeric(part_fo[7,5])+as.numeric(part_fo[8,5])))
        part_fo[9,6]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-(as.numeric(part_fo[5,6])+as.numeric(part_fo[6,6])+as.numeric(part_fo[7,6])+as.numeric(part_fo[8,6])))
        part_fo[9,7]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-(as.numeric(part_fo[5,7])+as.numeric(part_fo[6,7])+as.numeric(part_fo[7,7])+as.numeric(part_fo[8,7])))
        part_fo[9,8]<- ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,-(as.numeric(part_fo[5,8])+as.numeric(part_fo[6,8])+as.numeric(part_fo[7,8])+as.numeric(part_fo[8,8])))
        part_fo[9,9]<-round((as.numeric(part_fo[9,2])+as.numeric(part_fo[9,3])+as.numeric(part_fo[9,4])+
                               as.numeric(part_fo[9,5])+as.numeric(part_fo[9,6])+as.numeric(part_fo[9,7])+as.numeric(part_fo[9,8])),2)
        
        part_fo[10,2]<- as.numeric(part_fo[4,2])+ as.numeric(part_fo[9,2])
        part_fo[10,3]<- as.numeric(part_fo[4,3])+ as.numeric(part_fo[9,3])
        part_fo[10,4]<- as.numeric(part_fo[4,4])+ as.numeric(part_fo[9,4])
        part_fo[10,5]<- as.numeric(part_fo[4,5])+ as.numeric(part_fo[9,5])
        part_fo[10,6]<- as.numeric(part_fo[4,6])+ as.numeric(part_fo[9,6])
        part_fo[10,7]<- as.numeric(part_fo[4,7])+ as.numeric(part_fo[9,7])
        part_fo[10,8]<- as.numeric(part_fo[4,8])+ as.numeric(part_fo[9,8])
        part_fo[10,9]<-round((as.numeric(part_fo[10,2])+as.numeric(part_fo[10,3])+as.numeric(part_fo[10,4])+
                                as.numeric(part_fo[10,5])+as.numeric(part_fo[10,6])+as.numeric(part_fo[10,7])+as.numeric(part_fo[10,8])),2)
        
        part_fo[11,2] <-as.numeric(part_fo[10,2])/((1+0.15)^as.numeric(part_fo[1,2]))
        part_fo[11,3] <-as.numeric(part_fo[10,3])/((1+0.15)^as.numeric(part_fo[1,3]))
        part_fo[11,4] <-as.numeric(part_fo[10,4])/((1+0.15)^as.numeric(part_fo[1,4]))
        part_fo[11,5] <-as.numeric(part_fo[10,5])/((1+0.15)^as.numeric(part_fo[1,5]))
        part_fo[11,6] <-as.numeric(part_fo[10,6])/((1+0.15)^as.numeric(part_fo[1,6]))
        part_fo[11,7] <-as.numeric(part_fo[10,7])/((1+0.15)^as.numeric(part_fo[1,7]))
        part_fo[11,8] <-as.numeric(part_fo[10,8])/((1+0.15)^as.numeric(part_fo[1,8]))
        part_fo[11,9] <- round((as.numeric(part_fo[11,2])+as.numeric(part_fo[11,3])+as.numeric(part_fo[11,4])+
                                  as.numeric(part_fo[11,5])+as.numeric(part_fo[11,6])+as.numeric(part_fo[11,7])+as.numeric(part_fo[11,8])),2) 
        
        ###########Pay back table
        
        part_fp <-c(1:4)
        part_fp<-as.data.frame(part_fp)
        part_fp[1,1]<-"Payback Period Non PV"
        part_fp[2,1]<-"Payback Period PV"
        part_fp[3,1]<-"Payback Year Non PV"
        part_fp[4,1]<-"Payback Year PV"
        
        part_fp[1,2]<- as.numeric(part_fo[10,2])
        part_fp[1,3]<- as.numeric(part_fo[10,3])+as.numeric(part_fp[1,2])
        part_fp[1,4]<- as.numeric(part_fo[10,4])+as.numeric(part_fp[1,3])
        part_fp[1,5]<- as.numeric(part_fo[10,5])+as.numeric(part_fp[1,4])
        part_fp[1,6]<- as.numeric(part_fo[10,6])+as.numeric(part_fp[1,5])
        part_fp[1,7]<- as.numeric(part_fo[10,7])+as.numeric(part_fp[1,6])
        part_fp[1,8]<- as.numeric(part_fo[10,8])+as.numeric(part_fp[1,7])
        part_fp[1,9]<- " "
        
        part_fp[2,2]<- as.numeric(part_fo[11,2])
        part_fp[2,3]<- as.numeric(part_fo[11,3])+ as.numeric(part_fp[2,2])
        part_fp[2,4]<- as.numeric(part_fo[11,4])+ as.numeric(part_fp[2,3])
        part_fp[2,5]<- as.numeric(part_fo[11,5])+ as.numeric(part_fp[2,4])
        part_fp[2,6]<- as.numeric(part_fo[11,6])+ as.numeric(part_fp[2,5])
        part_fp[2,7]<- as.numeric(part_fo[11,7])+ as.numeric(part_fp[2,6])
        part_fp[2,8]<- as.numeric(part_fo[11,8])+ as.numeric(part_fp[2,7])
        part_fp[2,9]<- " "
        
        part_fp[3,2]<- ifelse(part_fp[1,2]>0,"ERROR",0)
        part_fp[3,3]<- ifelse((part_fp[1,2]<0 & part_fp[1,3]>0),(1- as.numeric(part_fp[1,3])/as.numeric(part_fo[10,3]))+(1-1), 0)
        part_fp[3,4]<- ifelse((part_fp[1,3]<0 & part_fp[1,4]>0),(1- as.numeric(part_fp[1,4])/as.numeric(part_fo[10,4]))+(2-1), 0)
        part_fp[3,5]<- ifelse((part_fp[1,4]<0 & part_fp[1,5]>0),(1- as.numeric(part_fp[1,5])/as.numeric(part_fo[10,5]))+(3-1), 0)
        part_fp[3,6]<- ifelse((part_fp[1,5]<0 & part_fp[1,6]>0),(1- as.numeric(part_fp[1,6])/as.numeric(part_fo[10,6]))+(4-1), 0)
        part_fp[3,7]<- ifelse((part_fp[1,6]<0 & part_fp[1,7]>0),(1- as.numeric(part_fp[1,7])/as.numeric(part_fo[10,7]))+(5-1), 0)
        part_fp[3,8]<- ifelse((part_fp[1,7]<0 & part_fp[1,8]>0),(1- as.numeric(part_fp[1,8])/as.numeric(part_fo[10,8]))+(6-1), 0)
        part_fp[3,9]<- ifelse(as.numeric(part_fp[3,2])+as.numeric(part_fp[3,3])+as.numeric(part_fp[3,4])+as.numeric(part_fp[3,5])+as.numeric(part_fp[3,6])
                              +as.numeric(part_fp[3,7])+as.numeric(part_fp[3,8])==0,"N/A",round(as.numeric(part_fp[3,2])+as.numeric(part_fp[3,3])+as.numeric(part_fp[3,4])+as.numeric(part_fp[3,5])+as.numeric(part_fp[3,6])
                                                                                                +as.numeric(part_fp[3,7])+as.numeric(part_fp[3,8]),2))
        
        
        part_fp[4,2]<- ifelse(part_fp[2,2]>0,"ERROR",0)
        part_fp[4,3]<- ifelse((part_fp[2,2]<0 & part_fp[2,3]>0),(1- as.numeric(part_fp[2,3])/as.numeric(part_fo[11,3]))+(1-1), 0)
        part_fp[4,4]<- ifelse((part_fp[2,3]<0 & part_fp[2,4]>0),(1- as.numeric(part_fp[2,4])/as.numeric(part_fo[11,4]))+(2-1), 0)
        part_fp[4,5]<- ifelse((part_fp[2,4]<0 & part_fp[2,5]>0),(1- as.numeric(part_fp[2,5])/as.numeric(part_fo[11,5]))+(3-1), 0)
        part_fp[4,6]<- ifelse((part_fp[2,5]<0 & part_fp[2,6]>0),(1- as.numeric(part_fp[2,6])/as.numeric(part_fo[11,6]))+(4-1), 0)
        part_fp[4,7]<- ifelse((part_fp[2,6]<0 & part_fp[2,7]>0),(1- as.numeric(part_fp[2,7])/as.numeric(part_fo[11,7]))+(5-1), 0)
        part_fp[4,8]<- ifelse((part_fp[2,7]<0 & part_fp[2,8]>0),(1- as.numeric(part_fp[2,8])/as.numeric(part_fo[11,8]))+(6-1), 0)
        part_fp[4,9]<- ifelse(sum(as.numeric(part_fp[4,2]),as.numeric(part_fp[4,3]),as.numeric(part_fp[4,4]),as.numeric(part_fp[4,5]),as.numeric(part_fp[4,6])
                                  ,as.numeric(part_fp[4,7]),as.numeric(part_fp[4,8]))==0,"N/A",round(sum(as.numeric(part_fp[4,2]),as.numeric(part_fp[4,3]),as.numeric(part_fp[4,4]),as.numeric(part_fp[4,5]),as.numeric(part_fp[4,6])
                                                                                                         ,as.numeric(part_fp[4,7]),as.numeric(part_fp[4,8])),2))
        
        
        ##################### 
        
        
        finance <- dollar_format(negative_parens = TRUE)
        part_fn[1,1] <- "NPV"
        part_fn[2,1] <- "Flat Payback Period"
        part_fn[3,1] <- "Discounted Payback Period"
        part_fn_12<-ifelse(as.numeric(spl_1$Buy_Quantity[i])==0,0,round(as.numeric(part_fo[11,9]),0)) 
        part_fn[1,2]<-finance(part_fn_12)
        part_fn[2,2] <- part_fp[3,9]
        part_fn[3,2] <-part_fp[4,9]
        colnames(part_fn)<-c("Fields","Values")
        part_fn
      })
      
      shinyjs::show("npv_table")
      
      output$serv_ret<-renderHotable({
        
        part_fs <-c(1:5)
        part_fs <- as.data.frame(part_fs)
        part_fs[1,1] <- "Inventory"
        part_fs[2,1] <- "Historic Sales   YTD"
        part_fs[3,1] <- "Current Year - 1"
        part_fs[4,1] <- "Current Year - 2"
        part_fs[5,1] <- "Mandatory Serv Retention"
        #part_f$ACTUAL_SALES_CYTD<-round(part_f$ACTUAL_SALES_CYTD,0)
        #part_f$ACTUAL_SALES_CURR_YEAR_MINUS_1<-round(as.numeric(part_f$ACTUAL_SALES_CURR_YEAR_MINUS_1),0)
        #part_f$ACTUAL_SALES_CURR_YEAR_MINUS_2<-round(as.numeric(part_f$ACTUAL_SALES_CURR_YEAR_MINUS_2),0)
        #part_f$APPLICATION_LY<-round(as.numeric(part_f$APPLICATION_LY),0)
        part_fs[1,2] <- round(as.numeric(part_f$INVENTORY_LVL),0)
        part_fs[2,2] <- paste(formatC(part_f$ACTUAL_SALES_CYTD, big.mark=",", digits=0, format="f"), sep = " ")
        part_fs[3,2] <- paste(formatC(part_f$ACTUAL_SALES_CURR_YEAR_MINUS_1, big.mark=",", digits=0, format="f"), sep = " ")
        part_fs[4,2] <- paste(formatC(part_f$ACTUAL_SALES_CURR_YEAR_MINUS_2, big.mark=",", digits=0, format="f"), sep = " ")
        part_fs[5,2] <- max(part_f$SBR_LAST_MANDATORY_YEAR[1], part_f$SBR_LAST_MANDATORY_YEAR_MEX[1], na.rm = TRUE)  ##copied 
        # part_fs[5,2] <- round(as.numeric(part_f$APPLICATION_LY),0)
        colnames(part_fs)<-c("Fields","Units")
        
        part_fs
        
        
      })
      
      shinyjs::show("serv_ret")
      print(part_f$APPLICATION_LY)
      print(part_f$PART_NBR)
      
      
    }

  }) 
		  
  
  ################  
  
  
  observeEvent({
    input$submit_current
    
  }, {
    if(!is.null(input$Part_Number))
    {
      shinyjs::hide("Scen_1")
      shinyjs::hide("Scen_2")
      shinyjs::hide("line_1")
      shinyjs::hide("line_2")
      shinyjs::disable("download_all_scenario")
      shinyjs::disable("downloadData_s_1")
      shinyjs::disable("downloadData_s_2")
      shinyjs::disable("download_income_report_s_1")
      shinyjs::disable("download_income_report_s_2")
      
      global_scenario_1$df_data_sce_1 <- data.frame(NULL)
      global_scenario_2$df_data_sce_2 <- data.frame(NULL)
      
      output$scenario_selector <- renderUI({
        radioButtons("selected_scenario", "Choose the best scenario for this part",
                     c("None" = "None",
                       "Scenario-1" = "Scenario_1",
                       "Scenario-2" = "Scenario_2"),
                     selected = "None", inline = TRUE
        )
      })
      
      p_info <- global_ads$df_data_ads
      p_info <- as.data.frame(p_info)
      p_info$PART_NBR<- str_pad(p_info$PART_NBR, width=8, side="left", pad="0")
      p_info <- p_info[which(p_info$PART_NBR == input$Part_Number),]
      p_info$X <- NULL
      selected_part$data <- input$Part_Number
      #payback_2year<- read.xlsx("finance_list_new.xlsx")
      #payback_2year<-payback_2year[which(payback_2year$Part_nbr == input$Part_Number),]
      
      #wb1_sh<-readWorkbook(wb1, sheet = "ATB Template", rows = 10, cols = 4)
      pb_info <- global_ads$df_data_ads_pb
      pb_inform <- as.data.frame(pb_info)
      pb_inform$X <- NULL
      pb_inform$Part_Nbr<- str_pad(pb_inform$Part_Nbr, width=8, side="left", pad="0")
      ATB_ADS_pb<-pb_inform[which(pb_inform$Part_Nbr == input$Part_Number),]
      
      
      pb_orig_info <- global_ads$df_data_ads_pb_orig
      pb_orig_inform <- as.data.frame(pb_orig_info)
      pb_orig_inform$X <- NULL
      pb_orig_inform$Part_Nbr<- str_pad(pb_orig_inform$Part_Nbr, width=8, side="left", pad="0")
      ATB_ADS_pb_orig<-pb_orig_inform[which(pb_orig_inform$Part_Nbr == input$Part_Number),]
      
      
      
      if(input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
      {
        output$Buy_qty_s1 <- renderUI({
          textInput("Buy_qty_s11", "Buy Qty", value = as.character(p_info$Buy_Quantity_Scenario_1[1]) )
        })
        
        output$Buy_qty_s2 <- renderUI({
          textInput("Buy_qty_s22", "Buy Qty", value = as.character(p_info$Buy_Quantity_Scenario_2[1]) )
        })
      } else
      {
        
        output$Buy_qty_s1 <- renderUI({
          textInput("Buy_qty_s11", "Buy Qty", value = "Enter Buy Quantity" )
        })
        
        output$Buy_qty_s2 <- renderUI({
          textInput("Buy_qty_s22", "Buy Qty", value = "Enter Buy Quantity" )
        })
        
      }
      
      part_info <- global_ads$df_data_ads
      
      
      part_inform <- as.data.frame(part_info)
      part_inform$X <- NULL
      part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
      
      withProgress(message = 'Processing:', value = 0, {
        
        ATB_ADS <- part_inform[which(part_inform$PART_NBR == input$Part_Number),]
        
        forecast_data <- 0
        forecast_data <- as.data.frame(forecast_data)
        forecast_data$forecast_data <- NULL
        forecast_data$Range <- "Year: 1-10"
        forecast_data[2,1] <- "Year: 11-20"
        forecast_data[3,1] <- "Year: 21-30"
        
        forecast_data$"1" <- c((ATB_ADS$FORECAST_YR_1[1] + ATB_ADS$CURRENT_YEAR[1]), ATB_ADS$FORECAST_YR_11[1], ATB_ADS$FORECAST_YR_21[1])
        forecast_data$"2" <- c(ATB_ADS$FORECAST_YR_2[1], ATB_ADS$FORECAST_YR_12[1], ATB_ADS$FORECAST_YR_22[1])
        forecast_data$"3" <- c(ATB_ADS$FORECAST_YR_3[1], ATB_ADS$FORECAST_YR_13[1], ATB_ADS$FORECAST_YR_23[1])
        forecast_data$"4" <- c(ATB_ADS$FORECAST_YR_4[1], ATB_ADS$FORECAST_YR_14[1], ATB_ADS$FORECAST_YR_24[1])
        forecast_data$"5" <- c(ATB_ADS$FORECAST_YR_5[1], ATB_ADS$FORECAST_YR_15[1], ATB_ADS$FORECAST_YR_25[1])
        forecast_data$"6" <- c(ATB_ADS$FORECAST_YR_6[1], ATB_ADS$FORECAST_YR_16[1], ATB_ADS$FORECAST_YR_26[1])
        forecast_data$"7" <- c(ATB_ADS$FORECAST_YR_7[1], ATB_ADS$FORECAST_YR_17[1], ATB_ADS$FORECAST_YR_27[1])
        forecast_data$"8" <- c(ATB_ADS$FORECAST_YR_8[1], ATB_ADS$FORECAST_YR_18[1], ATB_ADS$FORECAST_YR_28[1])
        forecast_data$"9" <- c(ATB_ADS$FORECAST_YR_9[1], ATB_ADS$FORECAST_YR_19[1], ATB_ADS$FORECAST_YR_29[1])
        forecast_data$"10" <- c(ATB_ADS$FORECAST_YR_10[1], ATB_ADS$FORECAST_YR_20[1], ATB_ADS$FORECAST_YR_30[1])
        
        shinyjs::show("fore_dem")
        output$fore_dem <- renderHotable({
          forecast_data
        }, readOnly = FALSE)
        
        output$Total_Forecast <- renderInfoBox({
          total_forcast <- sum(ATB_ADS$FORECAST_YR_1[1] + ATB_ADS$CURRENT_YEAR[1] + ATB_ADS$FORECAST_YR_2[1] + ATB_ADS$FORECAST_YR_3[1] + ATB_ADS$FORECAST_YR_4[1] +
                                 ATB_ADS$FORECAST_YR_5[1] + ATB_ADS$FORECAST_YR_6[1] + ATB_ADS$FORECAST_YR_7[1] + ATB_ADS$FORECAST_YR_8[1] + ATB_ADS$FORECAST_YR_9[1] +
                                 ATB_ADS$FORECAST_YR_10[1] + ATB_ADS$FORECAST_YR_11[1] + ATB_ADS$FORECAST_YR_12[1] + ATB_ADS$FORECAST_YR_13[1] + ATB_ADS$FORECAST_YR_14[1] +
                                 ATB_ADS$FORECAST_YR_15[1] + ATB_ADS$FORECAST_YR_16[1] + ATB_ADS$FORECAST_YR_17[1] + ATB_ADS$FORECAST_YR_18[1] + ATB_ADS$FORECAST_YR_19[1] +
                                 ATB_ADS$FORECAST_YR_20[1] + ATB_ADS$FORECAST_YR_21[1] + ATB_ADS$FORECAST_YR_22[1] + ATB_ADS$FORECAST_YR_23[1] + ATB_ADS$FORECAST_YR_24[1] +
                                 ATB_ADS$FORECAST_YR_25[1] + ATB_ADS$FORECAST_YR_26[1] + ATB_ADS$FORECAST_YR_27[1] + ATB_ADS$FORECAST_YR_28[1] + ATB_ADS$FORECAST_YR_29[1] + 
                                 ATB_ADS$FORECAST_YR_30[1])
          
          infoBox(
            "Total Forecast", paste0( total_forcast), icon = icon("cogs"),
            color = "blue", fill = TRUE
          )
        })
        
        shinyjs::show("Part_det")
        output$Part_det <- renderTable({
          
          part<- part_inform[which(part_inform$PART_NBR == isolate(input$Part_Number)), ]
          part1<- 0
          part1<- as.data.frame(part1)
          part1$Fields<- "Part Number"
          part1$part1<- NULL
          part1[2,1] <-"Part Name"
          part1[3,1] <-"USB Code"
          part1[4,1] <-"Unit Load Qty"
          part1[5,1] <-"Last Cost($)"
          part1[6,1] <-"Alpha Warehouse Class"
          part1[7,1] <-"Mandatory Year Retention"
          part1[8,1] <-"Country"
          part1[9,1] <- "% OES Sales"
          part1[10,1] <- "% Allied Export Sales"
          part1[11,1] <- "% IAM Sales"
          
          part1$Attributes <- part[1,1]
          part1[2,2] <- as.character(part[1,2])
          part1[3,2] <- as.character(part$USB_CD[1])
          part1[4,2] <- part$UNIT_LOAD_QTY[1]
          part1[5,2] <- part$LAST_COST[1]
          part1[6,2] <- as.character(part$RB1_ALPHA_WHSE_CLASS[1])
          part1[7,2] <- max(part$SBR_LAST_MANDATORY_YEAR[1], part$SBR_LAST_MANDATORY_YEAR_MEX[1], na.rm = TRUE)
          part1[9,2] <- round((part$OES_FRACTION[1] * 100), 2)
          part1[10,2] <- round((part$ALLIED_EXPORT_FRACTION[1] * 100), 2)
          part1[11,2] <- round((part$IAM_FRACTION[1] * 100), 2)
          
          if(part1[7,2] == part$SBR_LAST_MANDATORY_YEAR[1])
          {
            part1[8,2]<- "USA"
          } else
          {
            part1[8,2] <- "Mexico"
          }
          
          part1
          
        })
        
        ##### Giving values for Scenario- 1
        scenario_1 <- c(1:18)
        scenario_1 <- as.data.frame(scenario_1)
        
        scenario_1$Fields <- c("Proposed Dealer Price($)", "Proposed WD Price($)", "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                               "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                               "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)", "National Inventory")
        scenario_1$scenario_1 <- NULL
        
        if (input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
        {
          scenario_1$Values <- c(p_info$Proposed_Dealer_Price_1[1], p_info$Proposed_Wd_Price_1[1], p_info$Material_cost_Scenario_1[1],p_info$Moq_1[1],p_info$Standard_Pack_1[1],
                                 p_info$Setup_Cost_Scenario_1[1], p_info$Additional_Cost_Scenario_1[1],
                                 round(as.numeric(as.character(p_info$MTH_SQ_FT_COST_PER_PEICE[1])),5),
                                 round(as.numeric(as.character(p_info$OFFSITE_TRANS_COST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$REDISTRIBUTION_COST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$OFFSITE_LCPP[1])), 5),
                                 round(as.numeric(as.character(p_info$IB_LABOR_COST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$OB_LABOR_COST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$AVG_LCPP[1])), 5), 
                                 round(as.numeric(as.character(p_info$AVG_PCPP[1])), 5),
                                 round(as.numeric(as.character(p_info$IB_TRANS_CST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$OB_TRANS_CST_PP[1])), 5), p_info$TOTAL_INVENTORY[1])
          print("This is true")
          t_scenario_1<- transpose(scenario_1)
          colnames(t_scenario_1) <- scenario_1$Fields
          
          t_scenario_1$Part_Nbr<-input$Part_Number
          t_scenario_1 <- t_scenario_1[-c(1), ]
          rownames(t_scenario_1) <- NULL
          colnames(t_scenario_1)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s1","Additional_Cost_s1","Monthly_square_feet_cpp",
                                     "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                     "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                     "National_Inventory","Part_Nbr")
          
          
        } else
        {
          scenario_1$Values <- c(p_info$DEALER_PRICE_NO_DISCOUNT[1], p_info$WD_DEALER_PRICE_NO_DISCOUNT[1], p_info$LAST_COST[1],
                                 p_info$MINIMUM_BUY_QTY[1],p_info$STD_PACK_QTY[1],p_info$Setup_cost[1],
                                 p_info$Additional_cost[1], 
                                 round(as.numeric(as.character(p_info$MTH_SQ_FT_COST_PER_PEICE[1])), 5), 
                                 round(as.numeric(as.character(p_info$OFFSITE_TRANS_COST_PP[1])), 5),
                                 round(as.numeric(as.character(p_info$REDISTRIBUTION_COST_PP[1])), 5),
                                 round(as.numeric(as.character(p_info$OFFSITE_LCPP[1])), 5), 
                                 round(as.numeric(as.character(p_info$IB_LABOR_COST_PP[1])), 5),
                                 round(as.numeric(as.character(p_info$OB_LABOR_COST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$AVG_LCPP[1])),5),
                                 round(as.numeric(as.character(p_info$AVG_PCPP[1])), 5),
                                 round(as.numeric(as.character(p_info$IB_TRANS_CST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$OB_TRANS_CST_PP[1])), 5), 
                                 p_info$TOTAL_INVENTORY[1])
          t_scenario_1<- transpose(scenario_1)
          colnames(t_scenario_1) <- scenario_1$Fields
          
          t_scenario_1$Part_Nbr<-input$Part_Number
          t_scenario_1 <- t_scenario_1[-c(1), ]
          rownames(t_scenario_1) <- NULL
          colnames(t_scenario_1)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s1","Additional_Cost_s1","Monthly_square_feet_cpp",
                                     "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                     "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                     "National_Inventory","Part_Nbr")
          
          
        }
        
        output$hotable_sce1 <- renderHotable({
          scenario_1
        }, readOnly = FALSE)
        
        ##### Giving values for Current Scenario
        scenario_curr <- c(1:25)
        scenario_curr <- as.data.frame(scenario_curr)
        print(ATB_ADS_pb$Pb)
        print("1")
        print(pb_inform$Pb)
        print("2")
        print(pb_inform$Pb[1])
        scenario_curr$Fields <- c("Dealer Price($)", "Discount Percent(%): OES", "Discount Percent(%): Allied/Export", "Dealer Price($): OES", "Dealer Price($): Allied/Export",
                                  "WD Price($)", "Discount Percent(%): IAM", "Dealer Price($): IAM",
                                  "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                                  "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                                  "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)",
                                  "National Inventory","Payback period")
        scenario_curr$scenario_curr <- NULL
        scenario_curr$Values <- c(p_info$DEALER_PRICE_NO_DISCOUNT[1], 
                                  round(as.numeric(as.character(p_info$Discount_oes_percent[1])),2) , 
                                  round(as.numeric(as.character(p_info$Discount_allied_export_percent[1])),2), 
                                  round(as.numeric(as.character(p_info$Dealer_Price_OES[1])), 2), 
                                  round(as.numeric(as.character(p_info$Dealer_Price_Allied_Export[1])), 2), 
                                  p_info$WD_DEALER_PRICE_NO_DISCOUNT[1], 
                                  round((as.numeric(as.character(p_info$Discount_iam_percent[1]))),2),
                                  round(as.numeric(as.character(p_info$Dealer_Price_IAM[1])), 2), 
                                  p_info$LAST_COST[1],p_info$MINIMUM_BUY_QTY[1],p_info$STD_PACK_QTY[1],p_info$Setup_cost[1],
                                  p_info$Additional_cost[1],
                                  round(as.numeric(as.character(p_info$MTH_SQ_FT_COST_PER_PEICE[1])), 5), 
                                  round(as.numeric(as.character(p_info$OFFSITE_TRANS_COST_PP[1])), 5), 
                                  round(as.numeric(as.character(p_info$REDISTRIBUTION_COST_PP[1])), 5),
                                  round(as.numeric(as.character(p_info$OFFSITE_LCPP[1])), 5), 
                                  round(as.numeric(as.character(p_info$IB_LABOR_COST_PP[1])), 5), 
                                  round(as.numeric(as.character(p_info$OB_LABOR_COST_PP[1])), 5),
                                  round(as.numeric(as.character(p_info$AVG_LCPP[1])),5),
                                  round(as.numeric(as.character(p_info$AVG_PCPP[1])), 5),
                                  round(as.numeric(as.character(p_info$IB_TRANS_CST_PP[1])), 5), 
                                  round(as.numeric(as.character(p_info$OB_TRANS_CST_PP[1])), 5), p_info$TOTAL_INVENTORY[1],pb_inform$Pb[1])
        
        shinyjs::show("hotable_curr")
        output$hotable_curr <- renderHotable({
          scenario_curr
        }, readOnly = FALSE)
        t_scenario_curr<- transpose(scenario_curr)
        colnames(t_scenario_curr) <- scenario_curr$Fields
        t_scenario_curr$Part_Nbr<-input$Part_Number
        t_scenario_curr <- t_scenario_curr[-c(1), ]
        rownames(t_scenario_curr) <- NULL
        colnames(t_scenario_curr)<- c("Dealer_Price", "Discount_Percent_OES", "Discount_Percent_Allied_Export", "Dealer_OES_Price", "Dealer_Allied_Export_Price",
                                      "WD_Price", "Discount_Percent_IAM", "Dealer_IAM_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_curr","Additional_Cost_curr","Monthly_square_feet_cpp",
                                      "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                      "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                      "National_Inventory","Payback","Part_Nbr")
        
        
        ##### Giving values for Scenario- 2
        scenario_2 <- c(1:18)
        scenario_2 <- as.data.frame(scenario_2)
        
        scenario_2$Fields <- c("Proposed Dealer Price($)", "Proposed WD Price($)", "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                               "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                               "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)",
                               "National Inventory")
        scenario_2$scenario_2 <- NULL
        
        if (input$sel == "Cost" | input$sel =="Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
        {
          
          scenario_2$Values <- c(p_info$Proposed_Dealer_Price_2[1], p_info$Proposed_Wd_Price_2[1], p_info$Material_cost_Scenario_2[1],p_info$Moq_2[1],p_info$Standard_Pack_2[1],
                                 p_info$Setup_Cost_Scenario_2[1], p_info$Additional_Cost_Scenario_2[1],
                                 round(as.numeric(as.character(p_info$MTH_SQ_FT_COST_PER_PEICE[1])),5),
                                 round(as.numeric(as.character(p_info$OFFSITE_TRANS_COST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$REDISTRIBUTION_COST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$OFFSITE_LCPP[1])), 5),
                                 round(as.numeric(as.character(p_info$IB_LABOR_COST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$OB_LABOR_COST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$AVG_LCPP[1])), 5), 
                                 round(as.numeric(as.character(p_info$AVG_PCPP[1])), 5),
                                 round(as.numeric(as.character(p_info$IB_TRANS_CST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$OB_TRANS_CST_PP[1])), 5), p_info$TOTAL_INVENTORY[1])
          t_scenario_2<- transpose(scenario_2)
          colnames(t_scenario_2) <- scenario_2$Fields
          t_scenario_2$Part_Nbr<-input$Part_Number
          t_scenario_2 <- t_scenario_2[-c(1), ]
          rownames(t_scenario_2) <- NULL
          colnames(t_scenario_2)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s2","Additional_Cost_s2","Monthly_square_feet_cpp",
                                     "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                     "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                     "National_Inventory","Part_Nbr")   
          
        } else
        {
          
          scenario_2$Values <- c(p_info$DEALER_PRICE_NO_DISCOUNT[1], p_info$WD_DEALER_PRICE_NO_DISCOUNT[1], p_info$LAST_COST[1],
                                 p_info$MINIMUM_BUY_QTY[1],p_info$STD_PACK_QTY[1],p_info$Setup_cost[1],
                                 p_info$Additional_cost[1], 
                                 round(as.numeric(as.character(p_info$MTH_SQ_FT_COST_PER_PEICE[1])), 5), 
                                 round(as.numeric(as.character(p_info$OFFSITE_TRANS_COST_PP[1])), 5),
                                 round(as.numeric(as.character(p_info$REDISTRIBUTION_COST_PP[1])), 5),
                                 round(as.numeric(as.character(p_info$OFFSITE_LCPP[1])), 5), 
                                 round(as.numeric(as.character(p_info$IB_LABOR_COST_PP[1])), 5),
                                 round(as.numeric(as.character(p_info$OB_LABOR_COST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$AVG_LCPP[1])),5),
                                 round(as.numeric(as.character(p_info$AVG_PCPP[1])), 5),
                                 round(as.numeric(as.character(p_info$IB_TRANS_CST_PP[1])), 5), 
                                 round(as.numeric(as.character(p_info$OB_TRANS_CST_PP[1])), 5), 
                                 p_info$TOTAL_INVENTORY[1])
          t_scenario_2<- transpose(scenario_2)
          colnames(t_scenario_2) <- scenario_2$Fields
          t_scenario_2$Part_Nbr<-input$Part_Number
          t_scenario_2 <- t_scenario_2[-c(1), ]
          rownames(t_scenario_2) <- NULL
          colnames(t_scenario_2)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s2","Additional_Cost_s2","Monthly_square_feet_cpp",
                                     "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                     "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                     "National_Inventory","Part_Nbr")
          
        }
        
        output$hotable_sce2 <- renderHotable({
          scenario_2
        }, readOnly = FALSE)
        
        incProgress(1/5, detail = "Running Calculations")
        
        
        ############## Code for Scenario- Optimal
        Original_optimal <- data.frame()
        print("Original optimal")
        
        for (jj in (1:nrow(ATB_ADS))) {
          
          cat("\nPart Number: ",jj," : ", ATB_ADS[jj,1])
          final_NPV_list <- 0
          Optimal_year_count_list <- 1
          LTBQ_list <- 0
          Year_list <- c()
          FCST_list <- c()
          NPV_CR_list <- c()
          Revenue_CR_list <- c()
          Revenue_list <- c()
          Expense_list <- c()
          Storage_cost_CR_list <- c()
          Freight_cost_CR_list <- c()
          Processing_cost_CR_list <- c()
          
          transport_cost <- c()
          offsite_transport_cost <- c()
          offsite_labor_cost <- c()
          process_cost <- c()
          packaging_cost <- c()
          
          Material_cost_CR_list <- c()
          Material_cost_list_non_npv <- c()
          Buy_quantity_list <- c()
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          
          for(nn in (1:30)){
            FCST_list[nn] <- ATB_ADS[jj,(YI-1+nn)]
          }
          
          
          
          FCST_list[1] <- FCST_list[1] + ATB_ADS$CURRENT_YEAR[jj]
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1") # change 999
          FCST_list1 <- c()
          for(nn in (1:30)){
            FCST_list1[nn] <- ATB_ADS[jj,(YI-1+nn)]
          }
          
          
          FCST_list1[1] <- FCST_list1[1] + ATB_ADS$CURRENT_YEAR[jj] + ATB_ADS$PROJECTED_SALES_CURR_YEAR[jj]  
          
          
          
          
          
          ###########
          Sum_Forecast <- sum(FCST_list)
          
          iam_weight <- ATB_ADS$IAM_FRACTION[jj]
          oes_weight <- ATB_ADS$OES_FRACTION[jj]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[jj]
          
          FCST_iam <- round(FCST_list * iam_weight, digits = 0)
          FCST_oes <- round(FCST_list * oes_weight, digits = 0)
          FCST_allied <- round(FCST_list * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Sum_Forecast
          
          if(Sum_Forecast > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          for(i in 1:30)
          {
            FCST_list[i] <- FCST_allied[i] + FCST_iam[i] + FCST_oes[i]
          }
          ###########
          
          for (nn in (1:30)) {
            Sum_Forecast_list <- sum(FCST_list[1:nn])
            BQ_list <- Sum_Forecast_list
            qty_list <- 0
            yr_qty_list <- c()
            
            if(nn > 1){
              for (ii in (1:(nn-1))) {
                ss <- ((BQ_list - sum(FCST_list[1:ii])) + (BQ_list - sum(FCST_list[1:(1+ii)])))/2
                qty_list <- qty_list + ss 
                yr_qty_list[ii+1] <- ss
              }
            }
            yr_qty_list[1] <- (2*BQ_list - FCST_list[1])/2        
            
            Total_storage_qty_list <- sum(yr_qty_list)
            
            Storage_Cost_list <- 0
            revenue_list <- 0
            revenue_list_non_npv <- 0
            revenue_iam <- 0
            revenue_oes <- 0
            revenue_allied <- 0
            
            for(kk in (1: (nn) ))
            {
              CR <- ((1-(0.15/12))^(kk*12))
              revenue_list <- revenue_list + (FCST_list[kk] * CR *((ATB_ADS$Dealer_Price_Allied_Export[jj] * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (ATB_ADS$Dealer_Price_OES[jj] * ATB_ADS$OES_FRACTION[jj]) + (ATB_ADS$Dealer_Price_IAM[jj] * ATB_ADS$IAM_FRACTION[jj]))) 
              
              revenue_iam <- revenue_iam + (FCST_iam[kk] * CR * (ATB_ADS$Dealer_Price_IAM[jj]))
              revenue_oes <- revenue_oes + (FCST_oes[kk] * CR * (ATB_ADS$Dealer_Price_OES[jj]))
              revenue_allied <- revenue_allied + (FCST_allied[kk] * CR * (ATB_ADS$Dealer_Price_Allied_Export[jj]))
              
              revenue_list_non_npv <- revenue_list_non_npv + ((FCST_list[kk]) * ((ATB_ADS$Dealer_Price_Allied_Export[jj] * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (ATB_ADS$Dealer_Price_OES[jj] * ATB_ADS$OES_FRACTION[jj]) + (ATB_ADS$Dealer_Price_IAM[jj] * ATB_ADS$IAM_FRACTION[jj])))
              Storage_Cost_list <- Storage_Cost_list + ((yr_qty_list[kk])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[jj] * CR)
              
            }
            
            offsite_quantity <- ifelse((BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))) > 0, (BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))), 0)
            
            Offsite_trans_cost_list <- ATB_ADS$OFFSITE_TRANS_COST_PP[jj] * offsite_quantity
            Freight_cost_list <- ((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[jj] * BQ_list) + Offsite_trans_cost_list) * (1-(0.15/12))
            Offsite_labour_cost_list <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[jj])
            Total_Processing_cost_list <- ((ATB_ADS$ONSITE_PRCS_COST_PP[jj] * BQ_list) + Offsite_labour_cost_list) * (1-(0.15/12))
            
            Material_cost_list <- (ATB_ADS$LAST_COST[jj]*BQ_list)*(1-(0.15/12))
            
            Total_transport_cost <- (ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[jj] * BQ_list) * (1-(0.15/12))
            Total_offsite_transport_cost <- Offsite_trans_cost_list * (1-(0.15/12))
            Total_offsite_labor_cost <- Offsite_labour_cost_list * (1-(0.15/12))
            Total_process_cost<- ((ATB_ADS$ONSITE_PRCS_COST_PP[jj] - ATB_ADS$AVG_PCPP[jj]) * BQ_list) * (1-(0.15/12))
            Total_package_cost <- ATB_ADS$AVG_PCPP[jj] * BQ_list * (1-(0.15/12))
            
            Material_cost_list_non <- (ATB_ADS$LAST_COST[jj]*BQ_list)
            
            Total_Expense_list <- Storage_Cost_list + Freight_cost_list + Total_Processing_cost_list + Material_cost_list + ATB_ADS$Setup_cost[jj] + ATB_ADS$Additional_cost[jj]
            revenue_list <- revenue_iam + revenue_oes + revenue_allied
            
            NPV_with_capital_rate_list <- revenue_list - Total_Expense_list
            Year_list[nn] <- nn
            NPV_CR_list[nn] <- NPV_with_capital_rate_list
            Expense_list[nn] <- Total_Expense_list
            Revenue_CR_list[nn] <- revenue_list
            Revenue_list[nn] <- revenue_list_non_npv
            Storage_cost_CR_list[nn] <- Storage_Cost_list
            Freight_cost_CR_list[nn] <- Freight_cost_list
            Processing_cost_CR_list[nn] <- Total_Processing_cost_list
            Material_cost_CR_list[nn] <- Material_cost_list
            Material_cost_list_non_npv[nn] <- Material_cost_list_non
            Buy_quantity_list[nn] <- BQ_list
            
            transport_cost[nn] <- Total_transport_cost
            offsite_transport_cost[nn] <- Total_offsite_transport_cost
            offsite_labor_cost[nn] <- Total_offsite_labor_cost
            process_cost[nn] <- Total_process_cost
            packaging_cost[nn] <- Total_package_cost
            
            if(NPV_with_capital_rate_list>0) {
              if(final_NPV_list<NPV_with_capital_rate_list){
                final_NPV_list <- NPV_with_capital_rate_list
                Optimal_year_count_list <- nn
                LTBQ_list <- BQ_list
                Total_Expense_NPV_list <- Total_Expense_list
                Revenue_NPV_list <- revenue_list
                Revenue_non_NPV_list <- revenue_list_non_npv
                Storage_cost_NPV_list <- Storage_Cost_list
                Freight_cost_NPV_list <- Freight_cost_list
                Processing_cost_NPV_list <- Total_Processing_cost_list
                Material_cost_NPV_list <- Material_cost_list
                Material_cost_NPV_list_non_npv <- Material_cost_list_non
                transport_cost_list <- Total_transport_cost
                offsite_transport_cost_list <- Total_offsite_transport_cost
                offsite_labor_cost_list <- Total_offsite_labor_cost
                process_cost_list <- Total_process_cost
                package_cost_list <- Total_package_cost
                
              }
            } else if((nn==1) && (NPV_with_capital_rate_list<=0)) {
              Optimal_year_count_list <- 0
              Total_Expense_NPV_list <- Expense_list[1]
              Revenue_NPV_list <- Revenue_CR_list[1]
              Revenue_non_NPV_list <- Revenue_list[1]
              Storage_cost_NPV_list <- Storage_cost_CR_list[1]
              Freight_cost_NPV_list <- Freight_cost_CR_list[1]
              Processing_cost_NPV_list <- Processing_cost_CR_list[1]
              Material_cost_NPV_list <- Material_cost_CR_list[1]
              Material_cost_NPV_list_non_npv <- Material_cost_list_non_npv[1]
              
              transport_cost_list <- transport_cost[1]
              offsite_transport_cost_list <- offsite_transport_cost[1]
              offsite_labor_cost_list <- offsite_labor_cost[1]
              process_cost_list <- process_cost[1]
              package_cost_list <- packaging_cost[1]
              
            }
          }
          
          if(offsite_transport_cost_list < 0 )
          {
            offsite_transport_cost_list <- 0
          }
          if(offsite_labor_cost_list < 0)
          {
            offsite_labor_cost_list <- 0
          }
          
          LTBQ_list <- LTBQ_list - ATB_ADS$TOTAL_INVENTORY[jj]
          
          if(LTBQ_list <= 0)
          {
            LTBQ_list = 0
          }
          Extended_optimal_buy_cost <- LTBQ_list * ATB_ADS$LAST_COST[jj]
          
          Original_optimal <- data.frame(lapply(Original_optimal, as.character), stringsAsFactors=FALSE)
          Original_optimal <- rbind(Original_optimal, c(ATB_ADS[jj,1],Storage_cost_NPV_list,Freight_cost_NPV_list,Processing_cost_NPV_list,
                                                        Material_cost_NPV_list,Total_Expense_NPV_list,Revenue_NPV_list,final_NPV_list,
                                                        Optimal_year_count_list,LTBQ_list, Revenue_non_NPV_list, Material_cost_NPV_list_non_npv,
                                                        transport_cost_list, offsite_transport_cost_list, offsite_labor_cost_list, process_cost_list,
                                                        package_cost_list, ATB_ADS$Setup_cost[jj], Extended_optimal_buy_cost))
        }
        colnames(Original_optimal) <- c("Part_Nbr","Optimal_Storage_Cost","Optimal_Transportation_Cost","Optimal_Processing_Cost",
                                        "Optimal_Material_Cost","Optimal_Expense","Optimal_Revenue","Optimal_NPV",
                                        "Optimal_year_count","Optimal_ATB_Quantity", 
                                        "Optimal_Revenue_non_npv", "Optimal_Material_cost_non_npv", "Optimal_Total_transport_cost",
                                        "Optimal_Total_offsite_transport_cost","Optimal_Total_offsite_labor_cost",
                                        "Optimal_Total_process_cost", "Optimal_Packaging_cost", "Optimal_Setup_cost", "Extended_optimal_buy_cost")
        
        Original_optimal <- data.frame(lapply(Original_optimal, as.character), stringsAsFactors=FALSE)
        Original_optimal <- data.frame(lapply(Original_optimal, as.numeric), stringsAsFactors=FALSE)
        Original_optimal <- Original_optimal %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        #Original_optimal[,2:19] <- 0
        
        
        FCST_demand <- FCST_list
        FCST_demand1 <- FCST_list1 
        
        Year_demand <- Year_list
        
        
        print("Original Optimal done")
        
        incProgress(1/5, detail = "Running Calculations")
        
        ################# Code for Scenario- Current    
        Original_current <- data.frame()
        
        for(j in (1:nrow(ATB_ADS)))
        {
          cat("\nPart Number: ",j," : ", ATB_ADS[j,1])
          FCST <- c()
          FCST_iam <- c()
          FCST_oes <- c()
          FCST_allied <- c()
          
          Curr_Inv <- ATB_ADS$TOTAL_INVENTORY[j]
          
          Revenue <- c()
          Revenue_Allied <- c()
          Revenue_OES <- c()
          Revenue_IAM <- c()
          
          ATB_ADS$STD_PACK_QTY[j] <- ifelse(ATB_ADS$STD_PACK_QTY[j] == 0, 1, ATB_ADS$STD_PACK_QTY[j])
          
          Revenue_non_npv <- c()
          Revenue_non_npv_Allied <- c()
          Revenue_non_npv_OES <- c()
          Revenue_non_npv_IAM <- c()
          
          AMD <- c()
          AMD_iam <- c()
          AMD_oes <- c()
          AMD_allied <- c()
          
          First_buy <- 0
          Last_sale <- 0
          Last_buy <- 0
          flag <- 0
          flag_last_buy <- 0
          
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
            Revenue[n] <- 0
            Revenue_Allied[n] <- 0
            Revenue_OES[n] <- 0
            Revenue_IAM[n] <- 0
            
            Revenue_non_npv[n] <- 0
            Revenue_non_npv_Allied[n] <- 0
            Revenue_non_npv_OES[n] <- 0
            Revenue_non_npv_IAM[n] <- 0
            
          }
          
          FCST[1] <- ATB_ADS$CURRENT_YEAR[j] + FCST[1]
          Total_FCST <- sum(FCST)
          
          if(FCST[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          ###########          
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam <- round(FCST * iam_weight, digits = 0)
          FCST_oes <- round(FCST * oes_weight, digits = 0)
          FCST_allied <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Total_FCST
          
          
          if(Total_FCST > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          ###########          
          for(n in (1:30)){
            AMD[n] <- FCST[n]/12
            AMD_oes[n] <- FCST_oes[n] / 12
            AMD_iam[n] <- FCST_iam[n] / 12
            AMD_allied[n] <- FCST_allied[n] / 12
          }
          
          for(k in 1:30)
          {
            CR <- ((1-(0.15/12))^(k*12))
            Revenue[k] <- Revenue[k] + (FCST[k] * CR * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j])))
            
            Revenue_Allied[k] <- Revenue_Allied[k] + (FCST_allied[k] * CR * (ATB_ADS$Dealer_Price_Allied_Export[j]))
            Revenue_OES[k] <- Revenue_OES[k] + (FCST_oes[k] * CR * (ATB_ADS$Dealer_Price_OES[j]))
            Revenue_IAM[k] <- Revenue_IAM[k] + (FCST_iam[k] * CR * (ATB_ADS$Dealer_Price_IAM[j]))
            
            Revenue_non_npv[k] <- Revenue_non_npv[k] + (FCST[k] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j])))
            Revenue_non_npv_Allied[k] <- Revenue_non_npv_Allied[k] + (FCST_allied[k] * (ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
            Revenue_non_npv_OES[k] <- Revenue_non_npv_OES[k] + (FCST_oes[k] * (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]))
            Revenue_non_npv_IAM[k] <- Revenue_non_npv_IAM[k] + (FCST_iam[k] * (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))
            
          }
          
          Revenue_OES_non_npv_no_discount <- sum(FCST_oes) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
          Revenue_IAM_non_npv_no_discount <- sum(FCST_iam) * ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[j]
          Revenue_Allied_non_npv_no_discount <- sum(FCST_allied) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
          
          Revenue_OES_non_npv_discount <- sum(FCST_oes) * ATB_ADS$Dealer_Price_OES[j] 
          Revenue_IAM_non_npv_discount <- sum(FCST_iam) * ATB_ADS$Dealer_Price_IAM[j] 
          Revenue_Allied_non_npv_discount <- sum(FCST_allied) * ATB_ADS$Dealer_Price_Allied_Export[j]
          
          Revenue_Allied_discount <- sum(Revenue_Allied)
          Revenue_OES_discount <- sum(Revenue_OES)
          Revenue_IAM_discount <- sum(Revenue_IAM)
          
          year <- 0
          month <- 0
          get_demand <- 0
          
          for(i in 1:30)
          {
            get_demand = get_demand + FCST[i]
            if(Curr_Inv > get_demand)
            {
              year = year + 1
            } else if(Curr_Inv <= FCST[1])
            {
              remain = Curr_Inv
              
              year_remain = FCST[1] - remain
              
              month = 1
              demand_for_break_year = 0
              for(i in 1:12)
              {
                demand_for_break_year = demand_for_break_year + (FCST[1] / 12)
                if(remain > demand_for_break_year)
                {
                  month = month + 1
                }
              }
              
              FCST[year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(year+1)])
              break()
            }
          }
          
          ###
          if(Curr_Inv > FCST[1] & year < 30)
          {
            remain <- Curr_Inv - sum(FCST[1:year])
            
            year_remain <- FCST[(year+1)] - remain
            
            month = 1
            demand_for_break_year = 0
            for(i in 1:12)
            {
              demand_for_break_year = demand_for_break_year + (FCST[year+1] / 12)
              if(remain > demand_for_break_year)
              {
                month = month+1
              }
            }
            
            FCST[year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(year+1)])
          } else if(year >= 30)
          {
            remain <- Curr_Inv - sum(FCST[1:year])
            FCST[year+1] <- 0
            year_remain <- 0
            Sum_Forecast <- sum(FCST[1:(year + 1)])
            month <- 0
          }
          
          
          BQ <- ceiling(Curr_Inv)
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(year))) {
            storage_qty <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + storage_qty
            yr_qty[i+1] <- storage_qty
          }
          
          yr_qty[1] <- (2*BQ - FCST[1])/2        
          yr_qty[year + 2] <- 0
          
          Storage_Cost_Curr_Inv <- 0
          Storage_Cost_Curr_Inv_non_npv <- 0
          
          
          for(k in (1 : (year + 1)))
          {
            CR <- ((1-(0.15/12))^(k*12))
            Storage_Cost_Curr_Inv <- Storage_Cost_Curr_Inv + ((yr_qty[k])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
            Storage_Cost_Curr_Inv_non_npv <- Storage_Cost_Curr_Inv_non_npv + (yr_qty[k])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j]
            
          }
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost_curr_inv <- ATB_ADS$OFFSITE_TRANS_COST_PP[j] * offsite_quantity
          transport_cost_curr_inv <- ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ * (1-(0.15/12))
          
          transport_cost_curr_inv_non_npv <- ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ 
          
          Freight_cost_curr_inv <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost_curr_inv) * (1-(0.15/12))
          Freight_cost_curr_inv_non_npv <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost_curr_inv)
          
          Offsite_labour_cost_curr_inv <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[j]) * (1-(0.15/12))
          Offsite_labour_cost_curr_inv_non_npv <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[j])
          
          process_cost_curr_inv <- (ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ * (1-(0.15/12))
          process_cost_curr_inv_non_npv <- (ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ
          
          package_cost_curr_inv <- ATB_ADS$AVG_PCPP[j] * BQ * (1-(0.15/12))  
          package_cost_curr_inv_non_npv <- ATB_ADS$AVG_PCPP[j] * BQ
          
          Total_Processing_cost_curr_inv <- (((ATB_ADS$ONSITE_PRCS_COST_PP[j]) * BQ) + Offsite_labour_cost_curr_inv) * (1-(0.15/12)) 
          Material_cost_curr_inv <- BQ * ATB_ADS$LAST_COST[j] * (1-(0.15/12)) 
          Material_cost_curr_inv_non_npv <- BQ * ATB_ADS$LAST_COST[j] 
          
          
          FCST[year+1] <- year_remain
          
          Adj_Dem <- c()
          BF_BQ <- c()
          Curr_Inv <- c()
          BQ <- c()
          Purchase_times <- c()
          Yearly_BQ <- c()
          Storage_Cost <- c()
          Storage_Cost_non_npv <- c()
          Offsite_Qty <- c()
          Freight_cost <- c()
          Freight_cost_non_npv <- c()
          transport_cost <- c()
          offsite_transport_cost <- c()
          transport_cost_non_npv <- c()
          offsite_transport_cost_non_npv <- c()
          Processing_cost <- c()
          offsite_labor_cost <- c()
          offsite_labor_cost_non_npv <- c()
          process_cost <- c()
          process_cost_non_npv <- c()
          package_cost <- c()
          package_cost_non_npv <- c()
          Material_cost <- c()
          Material_cost_non_npv <- c()
          All_Expense <- c()
          
          for(i in 1:year)
          {
            Adj_Dem[i] = 0
            BF_BQ[i] = 0
            Curr_Inv[i] = 0
            BQ[i] = 0
            Purchase_times[i] = 0
            Yearly_BQ[i] = 0
            Storage_Cost[i] = 0
            Storage_Cost_non_npv[i] = 0
            Offsite_Qty[i] = 0
            Freight_cost[i] = 0
            Freight_cost_non_npv[i] = 0
            transport_cost[i] = 0
            offsite_transport_cost[i] = 0
            transport_cost_non_npv[i] = 0
            offsite_transport_cost_non_npv[i] = 0
            Processing_cost[i] = 0
            offsite_labor_cost[i] = 0
            offsite_labor_cost_non_npv[i] = 0
            process_cost[i] = 0
            process_cost_non_npv[i] = 0
            package_cost[i] = 0
            package_cost_non_npv[i] = 0
            Material_cost[i] = 0
            Material_cost_non_npv[i] = 0
            All_Expense[i] = 0
          }
          
          Total_BQ <- 0
          
          if((year + 1) < 31)
          {
            Curr_Inv[(year + 1)] <- 0
            for(k in ((year + 1) : 30)){
              Adj_Dem[k] <- (FCST[k] - Curr_Inv[k])
              BF_BQ[k] <- ifelse(k == (year + 1),((ATB_ADS$BUY_FREQ[j]*(AMD[k]/4.33)) * (12-month)/12),(ATB_ADS$BUY_FREQ[j]*(((Adj_Dem[k])/12)/4.33)))
              
              BQ[k] <- ceiling(ifelse((Curr_Inv[k] < Adj_Dem[k]),(max(ATB_ADS$MINIMUM_BUY_QTY[j],ATB_ADS$STD_PACK_QTY[j],BF_BQ[k])), 0))
              Purchase_times[k] <- ifelse((BQ[k]!=0),(ceiling(Adj_Dem[k]/BQ[k])),0)
              Yearly_BQ[k] <- BQ[k] * Purchase_times[k]
              Curr_Inv[k+1] <- Yearly_BQ[k] - Adj_Dem[k]
              Storage_Cost[k] <- 0
              Storage_Cost_non_npv[k] <- 0
            }
            
            Total_BQ <- ceiling(sum(Yearly_BQ))
            scrap_amount <- ATB_ADS$TOTAL_INVENTORY[j] + Total_BQ - Total_FCST
            adjusment_factor <- Total_BQ%%ATB_ADS$STD_PACK_QTY[j]
            
            if(adjusment_factor > scrap_amount)
            {
              Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] + (ATB_ADS$STD_PACK_QTY[j] - Total_BQ%%ATB_ADS$STD_PACK_QTY[j])
              Total_BQ <- Total_BQ + (ATB_ADS$STD_PACK_QTY[j] - Total_BQ%%ATB_ADS$STD_PACK_QTY[j])
              
              BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
            } else if(adjusment_factor <= scrap_amount)
            {
              Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] - Total_BQ%%ATB_ADS$STD_PACK_QTY[j]
              Total_BQ <- Total_BQ - Total_BQ%%ATB_ADS$STD_PACK_QTY[j]
              
              BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
            }
            
            
            for(i in ((year + 1):30))
            {
              if(Yearly_BQ[i] == 0 & flag_last_buy != 1)
              {
                if(i != (year + 1))
                {
                  Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                  flag_last_buy = 1
                } else
                {
                  Last_buy <- 0
                  flag_last_buy = 1
                }
              } 
            }
            if(flag_last_buy != 1)
            {
              Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
            }
            
            
            for(k in ((year + 1):30))
            {
              CR <- ((1-(0.15/12))^(k*12))
              Storage_Cost[k] <- Storage_Cost[k] + ((BQ[k]*6) * ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
              Storage_Cost_non_npv[k] <- Storage_Cost_non_npv[k] + (BQ[k]*6 * ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j])
              
            }
            
            for(k in ((year + 1):30)){
              
              CR <- (1-(0.15/12))^(k*12)
              Offsite_Qty[k] <- ifelse((BQ[k] > (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),(BQ[k] - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),0)
              Freight_cost[k] <- ((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) + (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])) * Purchase_times[k] * CR
              Freight_cost_non_npv[k] <- ((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) + (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])) * Purchase_times[k]
              
              transport_cost[k] <- (ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) * Purchase_times[k] * CR
              offsite_transport_cost[k] <- (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])* Purchase_times[k] * CR
              transport_cost_non_npv[k] <- (ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) * Purchase_times[k] 
              offsite_transport_cost_non_npv[k] <- (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])* Purchase_times[k] 
              
              Processing_cost[k] <- ((ATB_ADS$ONSITE_PRCS_COST_PP[j] * BQ[k]) + (Offsite_Qty[k] * as.numeric(ATB_ADS$OFFSITE_LCPP[j]))) * Purchase_times[k] * CR
              
              offsite_labor_cost[k] <- (Offsite_Qty[k] * as.numeric(ATB_ADS$OFFSITE_LCPP[j])) * Purchase_times[k] * CR
              offsite_labor_cost_non_npv[k] <- (Offsite_Qty[k] * as.numeric(ATB_ADS$OFFSITE_LCPP[j])) * Purchase_times[k]
              
              process_cost[k] <- ((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ[k]) * Purchase_times[k] * CR
              process_cost_non_npv[k] <- ((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ[k]) * Purchase_times[k]
              
              package_cost[k] <- ATB_ADS$AVG_PCPP[j] * BQ[k] * CR * Purchase_times[k]
              package_cost_non_npv[k] <- ATB_ADS$AVG_PCPP[j] * BQ[k] * Purchase_times[k]
              
              Material_cost[k] <- (ATB_ADS$LAST_COST[j] * BQ[k]) * Purchase_times[k] * CR
              Material_cost_non_npv[k] <- (ATB_ADS$LAST_COST[j] * BQ[k]) * Purchase_times[k]
              All_Expense[k] <- Storage_Cost[k] + Freight_cost[k] + Processing_cost[k] + Material_cost[k]
              
            }
          } else
          {
            Last_buy <- 0
          }
          
          scrap_amount <- ATB_ADS$TOTAL_INVENTORY[j] + Total_BQ - Total_FCST
          
          Total_Storage_Cost_current <- sum(Storage_Cost) + Storage_Cost_Curr_Inv
          Total_Storage_Cost_current_non_npv <- sum(Storage_Cost_non_npv) + Storage_Cost_Curr_Inv_non_npv
          Total_Freight_cost_current <- sum(Freight_cost) + Freight_cost_curr_inv
          Total_Freight_cost_current_non_npv <- sum(Freight_cost_non_npv) + Freight_cost_curr_inv_non_npv
          Total_Processing_cost_current <-sum(Processing_cost) + Total_Processing_cost_curr_inv
          Total_Material_cost_current <- sum(Material_cost) + Material_cost_curr_inv
          Total_Material_cost_non_npv_current <- sum(Material_cost_non_npv) + Material_cost_curr_inv_non_npv
          Total_Revenue_current <- Revenue_OES_discount + Revenue_IAM_discount + Revenue_Allied_discount
          
          Total_Revenue_non_npv_current <- Revenue_OES_non_npv_discount + Revenue_IAM_non_npv_discount + Revenue_Allied_non_npv_discount
          
          Total_transport_cost <- sum(transport_cost) + transport_cost_curr_inv
          Total_offsite_transport_cost <- sum(offsite_transport_cost) + Offsite_trans_cost_curr_inv
          Total_transport_cost_non_npv <- sum(transport_cost_non_npv) + transport_cost_curr_inv_non_npv
          Total_offsite_transport_cost_non_npv <- sum(offsite_transport_cost_non_npv) + Offsite_trans_cost_curr_inv
          
          Total_offsite_labor_cost <- sum(offsite_labor_cost) + Offsite_labour_cost_curr_inv
          Total_offsite_labor_cost_non_npv <- sum(offsite_labor_cost_non_npv) + Offsite_labour_cost_curr_inv_non_npv
          
          Total_process_cost <- sum(process_cost) + process_cost_curr_inv
          Total_process_cost_non_npv <- sum(process_cost_non_npv) + process_cost_curr_inv_non_npv
          Total_package_cost <- sum(package_cost) + package_cost_curr_inv
          Total_package_cost_non_npv <- sum(package_cost_non_npv) + package_cost_curr_inv_non_npv
          
          Total_Expense_current <- Total_Storage_Cost_current + Total_Freight_cost_current + Total_process_cost + Total_package_cost + Total_offsite_labor_cost + Total_Material_cost_current  + ATB_ADS$Setup_cost[j] + ATB_ADS$Additional_cost[j]
          Total_Expense_current_non_npv <- Total_Storage_Cost_current_non_npv + Total_Freight_cost_current_non_npv + Total_Material_cost_non_npv_current + Total_offsite_labor_cost_non_npv + Total_package_cost_non_npv + Total_process_cost_non_npv + ATB_ADS$Setup_cost[j] + ATB_ADS$Additional_cost[j]
          
          Total_NPV <- Total_Revenue_current - Total_Expense_current
          Total_NPV_non_npv <-  Total_Revenue_non_npv_current - Total_Expense_current_non_npv
          Extended_purchase_cost <- ATB_ADS$Entered_Buy_Qty[j] * ATB_ADS$LAST_COST[j]
          
          Original_current <- data.frame(lapply(Original_current, as.character), stringsAsFactors=FALSE)
          
          Original_current <- rbind(Original_current, c(ATB_ADS[j,1],Total_Storage_Cost_current,Total_Storage_Cost_current_non_npv, Total_Freight_cost_current, 
                                                        Total_Freight_cost_current_non_npv, Total_Processing_cost_current,
                                                        Total_Material_cost_current,Total_Expense_current,Total_Expense_current_non_npv, Total_Revenue_current,
                                                        Total_NPV,Total_NPV_non_npv, Total_BQ,Total_FCST, 
                                                        Total_Material_cost_non_npv_current, Total_Revenue_non_npv_current, Total_transport_cost, Total_offsite_transport_cost,Total_transport_cost_non_npv, Total_offsite_transport_cost_non_npv,
                                                        Total_offsite_labor_cost, Total_offsite_labor_cost_non_npv, Total_process_cost,Total_process_cost_non_npv,
                                                        ATB_ADS$Setup_cost[j], First_buy, Last_sale,
                                                        Last_buy, Total_package_cost, Total_package_cost_non_npv, scrap_amount, ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j],
                                                        ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[j],
                                                        ATB_ADS$Discount_iam_percent[j], ATB_ADS$Discount_oes_percent[j] ,ATB_ADS$Discount_allied_export_percent[j],
                                                        ATB_ADS$Dealer_Price_IAM[j], ATB_ADS$Dealer_Price_OES[j], ATB_ADS$Dealer_Price_Allied_Export[j],
                                                        Revenue_OES_non_npv_no_discount, Revenue_IAM_non_npv_no_discount, Revenue_Allied_non_npv_no_discount,
                                                        Revenue_OES_non_npv_discount, Revenue_IAM_non_npv_discount, Revenue_Allied_non_npv_discount, Revenue_Allied_discount,
                                                        Revenue_OES_discount, Revenue_IAM_discount, ATB_ADS$Entered_Buy_Qty[j], Extended_purchase_cost,
                                                        ATB_ADS$Additional_cost[j]))
          
        }
        
        colnames(Original_current) <- c("Part_Nbr","Storage_Cost","Storage_Cost_non_npv", "Transportation_cost", "Transportation_cost_non_npv",
                                        "Processing_cost","Part_cost","Expense", "Expense_non_npv", "Revenue", "NPV", "Profit_Non_NPV",
                                        "Buy_Quantity","Total_Forecast", "Material_cost_non_npv", "Revenue_non_npv","Total_transport_cost", "Total_offsite_transport_cost",
                                        "Total_transport_cost_non_npv","Total_offsite_transport_cost_non_npv","Total_offsite_labor_cost", "Total_offsite_labor_cost_non_npv", 
                                        "Total_process_cost", "Total_process_cost_non_npv", "Setup_cost", "First_buy",
                                        "Last_sale", "Last_buy", "Package_cost", "Package_cost_non_npv", "Scrap_amount", "Dealer_price", "WD_dealer_price", 
                                        "Discount_iam_percent", "Discount_oes_percent", "Discount_allied_export_percent",
                                        "Dealer_Price_IAM","Dealer_Price_OES", "Dealer_Price_Allied_Export", 'Revenue_OES_non_npv_no_discount', 
                                        'Revenue_IAM_non_npv_no_discount', 'Revenue_Allied_non_npv_no_discount',
                                        'Revenue_OES_non_npv_discount', 'Revenue_IAM_non_npv_discount', 'Revenue_Allied_non_npv_discount',
                                        'Revenue_Allied_discount', 'Revenue_OES_discount', 'Revenue_IAM_discount', "Entered_Buy_Quantity",
                                        "Extended_purchase_cost", "Additional_Cost")
        
        
        Original_current <- data.frame(lapply(Original_current, as.character), stringsAsFactors=FALSE)
        Original_current <- data.frame(lapply(Original_current, as.numeric), stringsAsFactors=FALSE)
        Original_current <- Original_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        
        incProgress(1/5, detail = "Running Calculations")
        print("Original current done")
        ########## Code for Selldown Calculation (Current)
        Selldown_NPV <- data.frame()
        
        
        for (j in (1:nrow(ATB_ADS))) {
          
          cat("\nPart Number: ",j," : ", ATB_ADS[j,1])
          final_NPV <- 0
          Optimal_year_count <- 1
          LTBQ <- 0
          Year <- c()
          FCST <- c()
          NPV_CR <- c()
          Revenue_CR <- c()
          Expense <- c()
          Storage_cost_CR <- c()
          Freight_cost_CR <- c()
          Processing_cost_CR <- c()
          Buy_quantity <- c()
          Buy_Qty <- ATB_ADS$TOTAL_INVENTORY[j]
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
          }
          
          FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
          
          p_to_get_year = 0
          q_to_get_demand = 0
          
          for(i in 1:30)
          {
            q_to_get_demand = q_to_get_demand + FCST[i]
            if(Buy_Qty > q_to_get_demand)
            {
              p_to_get_year = p_to_get_year + 1
            } else if(Buy_Qty <= FCST[1])
            {
              remain <- Buy_Qty
              c = 1
              d = 0
              for(i in 1:12)
              {
                d = d + (FCST[p_to_get_year+1] / 12)
                if(remain > d)
                {
                  c = c+1
                }
              }
              
              FCST[p_to_get_year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
              break()
            }
          }
          
          if(Buy_Qty > FCST[1] & p_to_get_year < 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
          } else if(p_to_get_year >= 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            FCST[p_to_get_year+1] <- 0
            Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
            c <- 0
          }
          
          if(p_to_get_year < 29)
          {
            for(i in ((p_to_get_year + 2) : 30))
            {
              FCST[i] <- 0
            }
          }
          
          ###########
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam_selldown <- round(FCST * iam_weight, digits = 0)
          FCST_oes_selldown <- round(FCST * oes_weight, digits = 0)
          FCST_allied_selldown <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam_selldown) + sum(FCST_oes_selldown) + sum(FCST_allied_selldown)
          
          Diff_FCST <- Sum_FCST - Sum_Forecast
          
          
          if(Buy_Qty > 0 & Sum_Forecast > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes_selldown!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam_selldown!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied_selldown!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes_selldown[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam_selldown[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied_selldown[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes_selldown[index] < FCST_iam_selldown[index] & FCST_oes_selldown[index] < FCST_allied_selldown[index] & oes_weight != 0)
          {
            FCST_oes_selldown[index] <- FCST_oes_selldown[index] - Diff_FCST
            
          } else if(FCST_iam_selldown[index] <= FCST_oes_selldown[index] & FCST_iam_selldown[index] <= FCST_allied_selldown[index] & iam_weight != 0)
          {
            FCST_iam_selldown[index] <- FCST_iam_selldown[index] - Diff_FCST
            
          } else if(FCST_allied_selldown[index] <= FCST_oes_selldown[index] & FCST_allied_selldown[index] <= FCST_iam_selldown[index] & allied_weight != 0)
          {
            FCST_allied_selldown[index] <- FCST_allied_selldown[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes_selldown[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam_selldown[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied_selldown[index] <- 0
          }
          
          ###########
          
          BQ <- Buy_Qty
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(p_to_get_year))) {
            s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + s
            yr_qty[i+1] <- s
          }
          
          yr_qty[1] <- (2*BQ - FCST[1])/2       
          yr_qty[p_to_get_year + 2] <- 0
          
          Total_storage_qty <- sum(yr_qty)
          
          Storage_Cost <- 0
          Storage_Cost_non_npv <- 0
          revenue <- 0
          revenue_iam <- 0
          revenue_oes <- 0
          revenue_allied <- 0
          
          revenue_non_npv <- 0
          revenue_non_npv_iam <- 0
          revenue_non_npv_oes <- 0
          revenue_non_npv_allied <- 0
          
          if(p_to_get_year > 0)
          {
            
            for(k in 1 : (p_to_get_year + 1))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + (FCST[k] * CR * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_iam <- revenue_iam + (FCST_iam_selldown[k] * CR * (ATB_ADS$Dealer_Price_IAM[j]))
              revenue_oes <- revenue_oes + (FCST_oes_selldown[k] * CR * (ATB_ADS$Dealer_Price_OES[j]))
              revenue_allied <- revenue_allied + (FCST_allied_selldown[k] * CR * (ATB_ADS$Dealer_Price_Allied_Export[j]))
              
              ##revenue_non_npv <- revenue_non_npv + (FCST[k] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_non_npv_iam <- revenue_non_npv_iam + (FCST_iam_selldown[k] * (ATB_ADS$Dealer_Price_IAM[j]))
              revenue_non_npv_oes <- revenue_non_npv_oes + (FCST_oes_selldown[k] * (ATB_ADS$Dealer_Price_OES[j]))
              revenue_non_npv_allied <- revenue_non_npv_allied + (FCST_allied_selldown[k] * (ATB_ADS$Dealer_Price_Allied_Export[j]))
              revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
              Storage_Cost <- Storage_Cost + (yr_qty[k]*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + (yr_qty[k]*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] )
              
              
            }
          }
          
          if(p_to_get_year == 0)
          {
            
            for(k in (1:1))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + ((FCST[1]) * CR * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_iam <- revenue_iam + (FCST_iam_selldown[1] * CR * (ATB_ADS$Dealer_Price_IAM[j]))
              revenue_oes <- revenue_oes + (FCST_oes_selldown[1] * CR * (ATB_ADS$Dealer_Price_OES[j]))
              revenue_allied <- revenue_allied + (FCST_allied_selldown[1] * CR * (ATB_ADS$Dealer_Price_Allied_Export[j]))
              
              ##revenue_non_npv <- revenue_non_npv + (FCST[1] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_non_npv_iam <- revenue_non_npv_iam + (FCST_iam_selldown[1] * (ATB_ADS$Dealer_Price_IAM[j]))
              revenue_non_npv_oes <- revenue_non_npv_oes + (FCST_oes_selldown[1] * (ATB_ADS$Dealer_Price_OES[j]))
              revenue_non_npv_allied <- revenue_non_npv_allied + (FCST_allied_selldown[1] * (ATB_ADS$Dealer_Price_Allied_Export[j]))
              revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
              
              Storage_Cost <- Storage_Cost + ((yr_qty[1]) * ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j])
              
            }
          }
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost <- ATB_ADS$OFFSITE_TRANS_COST_PP[j] * offsite_quantity
          Freight_cost <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost) * (1-(0.15/12))
          Freight_cost_non_npv <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost)
          
          Offsite_labour_cost <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[j])
          Total_Processing_cost <- (((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
          Total_Processing_cost_non_npv <- (((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ) + Offsite_labour_cost)
          
          Packaging_cost <- ATB_ADS$AVG_PCPP[j] * BQ * (1-(0.15/12))
          Packaging_cost_non_npv <- ATB_ADS$AVG_PCPP[j] * BQ
          
          Material_cost <- BQ * ATB_ADS$LAST_COST[j] * (1-(0.15/12))
          Material_cost_non_npv <- BQ * ATB_ADS$LAST_COST[j]
          
          Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + ATB_ADS$Additional_cost[j] + Material_cost + Packaging_cost
          revenue <- revenue_iam + revenue_oes + revenue_allied
          NPV_with_capital_rate <- revenue - Total_Expense
          
          Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + Material_cost_non_npv + ATB_ADS$Additional_cost[j] + Packaging_cost_non_npv
          NPV_non_npv <- revenue_non_npv - Total_Expense_non_npv
          
          Selldown_NPV <- data.frame(lapply(Selldown_NPV, as.character), stringsAsFactors=FALSE)
          Selldown_NPV <- rbind(Selldown_NPV, c(ATB_ADS[j,1], Material_cost, Storage_Cost,Freight_cost,Total_Processing_cost,Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                                Material_cost_non_npv, Storage_Cost_non_npv, Freight_cost_non_npv, Total_Processing_cost_non_npv, Total_Expense_non_npv,
                                                revenue_non_npv, NPV_non_npv, revenue_iam, revenue_oes, revenue_allied, revenue_non_npv_iam, revenue_non_npv_oes,
                                                revenue_non_npv_allied, Packaging_cost, Packaging_cost_non_npv, ATB_ADS$TOTAL_INVENTORY[j]))
          
          colnames(Selldown_NPV) <- c("Part_Nbr","Selldown_Material_cost", "Selldown_Storage_Cost","Selldown_Freight_cost","Selldown_Processing_cost",
                                      "Total_Expense","Selldown_Revenue","Selldown_NPV","Total_BQ", "Selldown_Material_cost_non_npv", "Selldown_Storage_Cost_non_npv",
                                      "Selldown_Freight_cost_non_npv", "Selldown_Processing_cost_non_npv", "Total_Expense_non_npv", "Selldown_Revenue_non_npv",
                                      "Selldown_NPV_non_npv", "Selldown_Revenue_IAM", "Selldown_Revenue_OES", "Selldown_Revenue_Allied", "Selldown_Revenue_non_npv_IAM",
                                      "Selldown_Revenue_non_npv_OES", "Selldown_Revenue_non_npv_Allied", "Selldown_Packaging_cost", "Selldown_Packaging_cost_non_npv",
                                      "Total_Inventory")
          
        }
        Selldown_NPV <- data.frame(lapply(Selldown_NPV, as.character), stringsAsFactors=FALSE)
        Selldown_NPV <- data.frame(lapply(Selldown_NPV, as.numeric), stringsAsFactors=FALSE)
        Selldown_NPV <- Selldown_NPV %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        
        
        incProgress(1/5, detail = "Running Calculations")
        print("Sell down current done")
        ########## Variation of Forecast Demand
        
        
        
        
        shinyjs::show("line2")
        output$line2 <- renderHighchart({
          
          if(input$sel == "Cognos")
          {
            
            graph2 <- data.frame(Year_demand, FCST_demand1)  ##change 99 
            graph2$Year <- as.numeric(as.character(Year_demand)) + as.numeric(strftime(Sys.Date(), "%Y"))
            graph2$FCST <- as.numeric(as.character(FCST_demand1))
          }
          else {
            graph2 <- data.frame(Year_demand, FCST_demand)  ##change 99 
            graph2$Year <- as.numeric(as.character(Year_demand)) + as.numeric(strftime(Sys.Date(), "%Y"))
            graph2$FCST <- as.numeric(as.character(FCST_demand)) 
          }
          
          highchart() %>% 
            hc_title(text="Variation of Forecast Demand (Forecee)") %>%
            hc_chart(type = "line") %>%
            hc_xAxis(title=list(text="Year"),categories= as.vector(graph2$Year))  %>%
            hc_yAxis(title=list(text="Forecast Demand"))  %>% 
            hc_add_theme(hc_theme_sandsignika()) %>%
            hc_add_series(name = "Demand", data = as.vector(graph2$FCST))
          
          
        })
        print("Sell down current done 1")
        spl_1 <- Original_current
        spl_1$Part_Nbr <- str_pad(spl_1$Part_Nbr, width=8, side="left", pad="0")		
        spl_2 <- Original_optimal 
        spl_2$Part_Nbr <- str_pad(spl_2$Part_Nbr, width=8, side="left", pad="0")
        spl_3 <- Selldown_NPV 
        spl_3$Part_Nbr <- str_pad(spl_3$Part_Nbr, width=8, side="left", pad="0")
        spl_x <- t_scenario_curr
        spl_12 <- merge(spl_1, spl_2, by = "Part_Nbr")
        spl_123 <- merge(spl_12, spl_3, by = "Part_Nbr")
        spl_123 <- merge(spl_123, spl_x, by = "Part_Nbr")
        spl_123$First_buy <- First_buy
        spl_123$Last_buy <- Last_buy
        spl_123$Last_sale <- Last_sale
        print("Sell down current done 2")
        pb_excel<-global_ads$df_data_ads_pb
        finance_current_scenario_pb<-global_ads$df_data_ads_pb_orig
        spl_123<-merge(spl_123, finance_current_scenario_pb[ ,c("Part_Nbr","flat_pb","disc_pb")], by = "Part_Nbr")
        
        spl_123<-merge(spl_123, pb_excel[ ,c("Part_Nbr","ATB_Units","X210","X373")], by = "Part_Nbr")
        
        spl_123 <- spl_123 %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                      Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                      Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                      Selldown_Revenue,Selldown_Revenue_non_npv,
                                      Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                      Total_Inventory,
                                      First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                      Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                      Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                      Optimal_Storage_Cost,
                                      Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                      Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost,Dealer_Price,  Dealer_OES_Price, Dealer_Allied_Export_Price,  ## change 786 
                                      WD_Price,  Dealer_IAM_Price,Discount_Percent_OES, Discount_Percent_Allied_Export,Discount_Percent_IAM, Material_Cost, MOQ,Standard_Pack,Setup_Cost_curr,Additional_Cost_curr,Monthly_square_feet_cpp,
                                      Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                      Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp,flat_pb,disc_pb,ATB_Units,X210
        )
        
        spl_123$Part_Nbr <- str_pad(spl_123$Part_Nbr, width=8, side="left", pad="0")
        write.csv(spl_123, file = "current_scenario.csv", row.names = FALSE)
        print("Sell down current done 3")
        output$download_current_scenario <- downloadHandler(
          filename = function() { 
            paste("Part_view_Current_Scenario",".csv", sep="") 
          },
          content = function(file) {
            abc <- spl_123
            abc$Part_Nbr <- str_pad(abc$Part_Nbr, width=8, side="left", pad="0")
            abc <- data.frame(Part_Nbr = abc[,1],
                              lapply(abc[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                              lapply(abc[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                              lapply(abc[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(abc[,53] , big.mark=",", digits=0, format="f"),formatC(abc[,54] , big.mark=",", digits=2, format="f"), ## change 786 
                              lapply(abc[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                              lapply(abc[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                              paste("$", formatC(abc[,65] , big.mark=",", digits=0, format="f")),
                              lapply(abc[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                              lapply(abc[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                              abc[,80:84], stringsAsFactors = FALSE)
            
            colnames(abc) <- c("Part Number",
                               "NPV", "Selldown NPV","Selldown Non NPV",
                               "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                               "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                               "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                               "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                               "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                               "Current Inventory",
                               "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                               "Total Purchase", "Total Sales", "Optimal NPV",
                               "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                               "Optimal Storage Cost",
                               "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                               "Optimal ATB Quantity","Optimal payback period", "Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export", ##change 786 
                               "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                               "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                               "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                               "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)","Simple payabck period","Discounted payback period","2 year payback ATB","2 year payback NPV")
            
            
            write.csv(abc, file)
            
          },
          contentType = "csv"
        )
        
        print("x")
        income_report_current <- c(1:52)
        income_report_current<- as.data.frame(income_report_current)
        income_report_current$Fields <-  c('Dealer Price', 'Wd price', 'Allied Price', 'Dealer discount %', 'Wd discount %', 'Allied Discount %', 'Net Dealer', 'Net Wd',
                                           'Net Allied',
                                           'Lifetime Revenue(Non NPV)',
                                           'Lifetime Revenue(NPV)',
                                           'Sell Down Revenue(Non NPV) - OES',
                                           'Sell Down Revenue(Non NPV) - IAM',
                                           'Sell Down Revenue(Non NPV) - Allied/Export',
                                           'Sell Down Revenue(Non NPV',
                                           'Selldown Revenue (NPV)',
                                           'Material Cost(Non NPV)',
                                           'Material Cost(NPV)',
                                           'Sell Down Material (Non Npv)',
                                           'Sell Down Material (NPV)',
                                           'Transportation Cost(NON NPV)',
                                           'Transportation Cost(NPV)',
                                           'Sell Down Transportation cost (Non NPV)',
                                           'Sell Down Transportation cost (NPV)',
                                           'Labor Cost(NON NPV)',
                                           'Labor Cost(NPV)',
                                           'Sell Down Labor (NON NPV)',
                                           'Sell Down Labor (NPV)',
                                           'Storage Cost (Non NPV)',
                                           'Storage Cost(NPV)',
                                           'Sell Down Storage(Non NPV)',
                                           'Sell Down Storage(NPV)',
                                           'Packaging Cost(NON NPV)',
                                           'Packaging Cost(NPV)',
                                           'Sell Down Packaging Cost (NON NPV)',
                                           'Sell Down Packaging Cost (NPV)',
                                           'Set up Cost (NON NPV)',
                                           'Setup Cost(NPV)',
                                           'Additional Cost($)',
                                           'Total Expense(NON NPV)',
                                           'Total Expense(NPV)',
                                           'Profit (Non NPV)',
                                           'NPV',
                                           'Selldown (non Npv)',
                                           'Selldown NPV',
                                           'National Inventory',
                                           'Total Purchase',
                                           'Total Inventory and Purchase',
                                           'Total Sales',
                                           'Scrap',
                                           'MOQ',
                                           'Standard Pack')
        print("y")
        sales_oes <- sum(FCST_oes)
        sales_iam <- sum(FCST_iam)
        sales_allied <- sum(FCST_allied)
        
        inventory_oes <- round(ATB_ADS$TOTAL_INVENTORY[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
        inventory_iam <- round(ATB_ADS$TOTAL_INVENTORY[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
        inventory_allied <- round(ATB_ADS$TOTAL_INVENTORY[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        purchase_oes <- round(Original_current$Buy_Quantity[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
        purchase_iam <- round(Original_current$Buy_Quantity[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
        purchase_allied <- round(Original_current$Buy_Quantity[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        ## Calculating the difference in sales, inventory and purchase before and after rounding
        diff_sales <- Original_current$Total_Forecast[1] - (sales_oes + sales_iam + sales_allied)
        diff_inventory <- ATB_ADS$TOTAL_INVENTORY[1] - (inventory_oes + inventory_iam + inventory_allied)
        diff_purchase <- ceiling(Original_current$Buy_Quantity[1]) - (purchase_oes + purchase_iam + purchase_allied)
        
        ## Calling function to adjust the rounding error in sales, purcahse and inventory
        sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
        sales_values <- unlist(sales_values)
        sales_oes <- sales_values[1]
        sales_iam <- sales_values[2]
        sales_allied <- sales_values[3]
        
        inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
        inventory_values <- unlist(inventory_values)
        inventory_oes <- inventory_values[1]
        inventory_iam <- inventory_values[2]
        inventory_allied <- inventory_values[3]
        
        purchase_values <- Round_fn(purchase_oes, purchase_iam, purchase_allied, diff_purchase)
        purchase_values <- unlist(purchase_values)
        purchase_oes <- purchase_values[1]
        purchase_iam <- purchase_values[2]
        purchase_allied <- purchase_values[3]
        
        purchase_inventory <- ceiling((ATB_ADS$TOTAL_INVENTORY[1] + Original_current$Buy_Quantity[1]))
        purchase_inventory_oes <- inventory_oes + purchase_oes
        purchase_inventory_iam <- inventory_iam + purchase_iam
        purchase_inventory_allied <- inventory_allied + purchase_allied
        income_report_current$income_report_current <- NULL
        
        income_report_current$Per_unit <- c(ATB_ADS$DEALER_PRICE_NO_DISCOUNT[1], ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[1], 
                                            ATB_ADS$DEALER_PRICE_NO_DISCOUNT[1], ATB_ADS$Discount_oes_percent[1], 
                                            ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                            Original_current$Revenue_OES_non_npv_discount[1], Original_current$Revenue_IAM_non_npv_discount[1], 
                                            Original_current$Revenue_Allied_non_npv_discount[1], 
                                            Original_current$Revenue_non_npv[1], Original_current$Revenue[1], Selldown_NPV$Selldown_Revenue_non_npv_OES,
                                            Selldown_NPV$Selldown_Revenue_non_npv_IAM, Selldown_NPV$Selldown_Revenue_non_npv_Allied,
                                            Selldown_NPV$Selldown_Revenue_non_npv[1],
                                            Selldown_NPV$Selldown_Revenue[1], ATB_ADS$LAST_COST[1], Original_current$Part_cost[1],
                                            ATB_ADS$LAST_COST[1], Selldown_NPV$Selldown_Material_cost[1], 
                                            Original_current$Transportation_cost_non_npv[1], Original_current$Transportation_cost[1], Selldown_NPV$Selldown_Freight_cost_non_npv[1],
                                            Selldown_NPV$Selldown_Freight_cost[1], 
                                            (Original_current$Total_offsite_labor_cost_non_npv[1] + Original_current$Total_process_cost_non_npv[1]), 
                                            (Original_current$Total_offsite_labor_cost[1] + Original_current$Total_process_cost[1]),
                                            Selldown_NPV$Selldown_Processing_cost_non_npv[1], Selldown_NPV$Selldown_Processing_cost[1],
                                            Original_current$Storage_Cost_non_npv[1],
                                            Original_current$Storage_Cost[1], Selldown_NPV$Selldown_Storage_Cost_non_npv[1], Selldown_NPV$Selldown_Storage_Cost[1],
                                            Original_current$Package_cost_non_npv[1], Original_current$Package_cost[1], 
                                            Selldown_NPV$Selldown_Packaging_cost_non_npv[1],Selldown_NPV$Selldown_Packaging_cost[1],
                                            Original_current$Setup_cost[1], Original_current$Setup_cost[1],
                                            ATB_ADS$Additional_cost[1], Original_current$Expense_non_npv[1], Original_current$Expense[1],
                                            Original_current$Profit_Non_NPV[1], Original_current$NPV[1], Selldown_NPV$Selldown_NPV_non_npv[1],
                                            Selldown_NPV$Selldown_NPV[1],ATB_ADS$TOTAL_INVENTORY[1], ceiling(Original_current$Buy_Quantity[1]),
                                            ceiling((ATB_ADS$TOTAL_INVENTORY[1] + Original_current$Buy_Quantity[1])),
                                            Original_current$Total_Forecast[1], Original_current$Scrap_amount[1], ATB_ADS$MINIMUM_BUY_QTY[1],
                                            ATB_ADS$STD_PACK_QTY[1])
        
        income_report_current$Per_unit[c(10:11)] <- income_report_current$Per_unit[c(10:11)] / Original_current$Total_Forecast[1]
        
        div_oes <- ifelse(inventory_oes > sales_oes, sales_oes, inventory_oes)
        div_iam <- ifelse(inventory_iam > sales_iam, sales_iam, inventory_iam)
        div_allied <- ifelse(inventory_allied > sales_allied, sales_allied, inventory_allied)
        div_inventory <- ifelse(ATB_ADS$TOTAL_INVENTORY[1] > Original_current$Total_Forecast[1], Original_current$Total_Forecast[1], ATB_ADS$TOTAL_INVENTORY[1])
        
        income_report_current$Per_unit[c(15:16)] <- income_report_current$Per_unit[c(15:16)] / div_inventory
        income_report_current$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] <- income_report_current$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] / purchase_inventory
        income_report_current$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] <- income_report_current$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] / ATB_ADS$TOTAL_INVENTORY[1]
        income_report_current$Per_unit <- ifelse(is.nan(income_report_current$Per_unit), 0, income_report_current$Per_unit)
        
        income_report_current$OES <- 0
        income_report_current$IAM <- 0
        income_report_current$Allied_export <- 0
        income_report_current$Total <- 0
        
        income_report_current$OES[1] <- income_report_current$Per_unit[1] * sales_oes
        income_report_current$OES[4] <- (ATB_ADS$Discount_oes_percent/100) * income_report_current$OES[1]
        income_report_current$OES[7] <- income_report_current$OES[1] - income_report_current$OES[4]
        income_report_current$Per_unit[7] <- income_report_current$OES[7] / sales_oes
        income_report_current$OES[10] <-  income_report_current$OES[7]
        
        income_report_current$IAM[2] <- income_report_current$Per_unit[2] * sales_iam
        income_report_current$IAM[5] <- (ATB_ADS$Discount_iam_percent/100) * income_report_current$IAM[2]
        income_report_current$IAM[8] <- income_report_current$IAM[2] - income_report_current$IAM[5]
        income_report_current$Per_unit[8] <- income_report_current$IAM[8] / sales_iam
        income_report_current$IAM[10] <-  income_report_current$IAM[8]
        
        income_report_current$Allied_export[3] <- income_report_current$Per_unit[3] * sales_allied
        income_report_current$Allied_export[6] <- (ATB_ADS$Discount_allied_export_percent/100) * income_report_current$Allied_export[3]
        income_report_current$Allied_export[9] <- income_report_current$Allied_export[3] - income_report_current$Allied_export[6]
        income_report_current$Per_unit[9] <- income_report_current$Allied_export[9] / sales_allied
        income_report_current$Allied_export[10] <-  income_report_current$Allied_export[9]
        
        income_report_current$Per_unit[12] <- income_report_current$Per_unit[7]
        income_report_current$Per_unit[13] <- income_report_current$Per_unit[8]
        income_report_current$Per_unit[14] <- income_report_current$Per_unit[9]
        
        income_report_current$OES[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] <- income_report_current$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] * purchase_inventory_oes
        
        
        income_report_current$OES[11:16] <-c( Original_current$Revenue_OES_discount[1], (income_report_current$Per_unit[12] * div_oes),0,0,
                                              (income_report_current$Per_unit[12] * div_oes),Selldown_NPV$Selldown_Revenue_OES[1])
        
        income_report_current$OES[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_current$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_oes
        income_report_current$OES[44] <- income_report_current$OES[15] - sum(income_report_current$OES[c(19,23,27,31,35)])
        income_report_current$OES[45] <- income_report_current$OES[16] - sum(income_report_current$OES[c(20,24,28,32,36)])
        
        income_report_current$OES[c(46:49)] <- c(round(inventory_oes,digits = 0), round(purchase_oes,digits = 0), round(purchase_inventory_oes,digits = 0), round(sales_oes, digits = 0))
        
        income_report_current$OES[40] <- income_report_current$OES[17] + income_report_current$OES[21] + income_report_current$OES[25] + income_report_current$OES[29] + income_report_current$OES[33] + income_report_current$OES[37] + income_report_current$OES[39]
        income_report_current$OES[41] <- income_report_current$OES[18] + income_report_current$OES[22] + income_report_current$OES[26] + income_report_current$OES[30] + income_report_current$OES[34] + income_report_current$OES[38] + income_report_current$OES[39]
        
        income_report_current$OES[42] <- income_report_current$OES[10] - income_report_current$OES[40]
        income_report_current$OES[43] <- income_report_current$OES[11] - income_report_current$OES[41]
        
        ##
        income_report_current$IAM[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_current$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_iam
        income_report_current$IAM[11:16] <- c(Original_current$Revenue_IAM_discount[1], 0, (income_report_current$Per_unit[13] * div_iam), 0, (income_report_current$Per_unit[13] * div_iam), Selldown_NPV$Selldown_Revenue_IAM[1])
        
        income_report_current$IAM[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_current$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_iam
        income_report_current$IAM[44] <- income_report_current$IAM[15] - sum(income_report_current$IAM[c(19,23,27,31,35)])
        income_report_current$IAM[45] <- income_report_current$IAM[16] - sum(income_report_current$IAM[c(20,24,28,32,36)])
        
        income_report_current$IAM[c(46:49)] <- c(round(inventory_iam,digits = 0) , round(purchase_iam,digits = 0) , round(purchase_inventory_iam,digits = 0) , round(sales_iam, digits = 0))
        
        income_report_current$IAM[40] <- income_report_current$IAM[17] + income_report_current$IAM[21] + income_report_current$IAM[25] + income_report_current$IAM[29] + income_report_current$IAM[33] + income_report_current$IAM[37] + income_report_current$IAM[39]
        income_report_current$IAM[41] <- income_report_current$IAM[18] + income_report_current$IAM[22] + income_report_current$IAM[26] + income_report_current$IAM[30] + income_report_current$IAM[34] + income_report_current$IAM[38] + income_report_current$IAM[39]
        
        income_report_current$IAM[42] <- income_report_current$IAM[10] - income_report_current$IAM[40]
        income_report_current$IAM[43] <- income_report_current$IAM[11] - income_report_current$IAM[41]
        
        ####
        income_report_current$Allied_export[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_current$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_allied
        income_report_current$Allied_export[11:16] <- c(Original_current$Revenue_Allied_discount[1], 0,0, (income_report_current$Per_unit[14] * div_allied), (income_report_current$Per_unit[14] * div_allied),Selldown_NPV$Selldown_Revenue_Allied[1])
        
        income_report_current$Allied_export[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_current$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_allied
        income_report_current$Allied_export[44] <- income_report_current$Allied_export[15] - sum(income_report_current$Allied_export[c(19,23,27,31,35)])
        income_report_current$Allied_export[45] <- income_report_current$Allied_export[16] - sum(income_report_current$Allied_export[c(20,24,28,32,36)])
        
        income_report_current$Allied_export[c(46:49)] <- c(round(inventory_allied,digits = 0) , round(purchase_allied,digits = 0) , round(purchase_inventory_allied,digits = 0) , round(sales_allied, digits = 0))
        
        income_report_current$Allied_export[40] <- income_report_current$Allied_export[17] + income_report_current$Allied_export[21] + income_report_current$Allied_export[25] + income_report_current$Allied_export[29] + income_report_current$Allied_export[33] + income_report_current$Allied_export[37] + income_report_current$Allied_export[39]
        income_report_current$Allied_export[41] <- income_report_current$Allied_export[18] + income_report_current$Allied_export[22] + income_report_current$Allied_export[26] + income_report_current$Allied_export[30] + income_report_current$Allied_export[34] + income_report_current$Allied_export[38] + income_report_current$Allied_export[39]
        
        income_report_current$Allied_export[42] <- income_report_current$Allied_export[10] - income_report_current$Allied_export[40]
        income_report_current$Allied_export[43] <- income_report_current$Allied_export[11] - income_report_current$Allied_export[41]
        
        income_report_current$Per_unit <- ifelse(is.nan(income_report_current$Per_unit), 0, income_report_current$Per_unit)
        income_report_current$OES <- ifelse(is.nan(income_report_current$OES), 0, income_report_current$OES)
        income_report_current$IAM <- ifelse(is.nan(income_report_current$IAM), 0, income_report_current$IAM)
        income_report_current$Allied_export <- ifelse(is.nan(income_report_current$Allied_export), 0, income_report_current$Allied_export)
        income_report_current$Total <- ifelse(is.nan(income_report_current$Total), 0, income_report_current$Total)
        
        income_report_current$Total <- income_report_current$Allied_export + income_report_current$IAM + income_report_current$OES
        
        income_report_current$Total[50:52] <- income_report_current$Per_unit[50:52]
        
        
        incProgress(1/5, detail = "Running Calculations")
        print("z")
        ########## Result table for Current Scenario
        shinyjs::show("Curr_scen")
        output$Curr_scen <- renderHotable({
          
          revenue_non <- Original_current$Revenue_non_npv[1]
          material_non <- Original_current$Material_cost_non_npv[1]
          
          part_view <- 0
          part_view<- as.data.frame(part_view)
          part_view$part_view <- NULL
          part_view$Fields <- "NPV($)" 
          part_view[2,1]<- "Selldown NPV($)"       
          part_view[3,1]<- "Net"
          part_view[4,1]<- "Scrap"
          
          part_view[5,1]<- "First Buy"
          part_view[6,1]<- "Last Buy"
          part_view[7,1]<- "Last Sale"    
          part_view[8,1]<- "Lifetime Revenue(NPV)" 
          part_view[9,1]<- "Lifetime Revenue(Non NPV)"
          part_view[10,1]<- "Material Cost(NPV)"
          part_view[11,1]<- "Material Cost(Non NPV)"
          part_view[12,1]<- "Setup Cost(NPV)"
          part_view[13,1]<- "Transportation Cost(NPV)"
          part_view[14,1]<- "Labor Cost(NPV)"
          part_view[15,1]<- "Storage Cost(NPV)"
          part_view[16,1]<- "Packaging Cost(NPV)"
          part_view[17,1]<- "Offsite Labor Cost(NPV)"
          part_view[18,1]<- "Offsite Trans Cost(NPV)"
          part_view[19,1]<- "Total Expense(NPV)"
          part_view[20,1]<- "Optimal NPV"
          part_view[21,1]<- "Optimal Buy Qty"
          part_view[22,1]<- "Total Purchase"
          part_view[23,1]<- "Inventory and Purchase"
          part_view[24,1]<- 'Extended Optimal Buy Cost'
          part_view[25,1]<- 'Extended Buy Qty Cost'
          #part_view[26,1]<-'ATB_qty_2year_pb'
          part_view[26,1]<- "ATB qty for 2 year payback"
          part_view[27,1]<- "Discounted payback period based on ATB qty"		  
          part_view[28,1] <- "Optimal payback"
          print("wat")
          part_view$Values <- paste("$", formatC(Original_current$NPV[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[2, 2] <-  paste("$", formatC(Selldown_NPV$Selldown_NPV[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[3, 2] <-  paste("$", formatC((Original_current$NPV[1] - Selldown_NPV$Selldown_NPV[1]), big.mark=",", digits=2, format="f"), sep = " ")
          part_view[4, 2] <-  round(Original_current$Scrap_amount[1], 0)
          
          part_view[5, 2] <- as.character(round(First_buy,0))
          part_view[6, 2] <- as.character(round(Last_buy,0)) 
          part_view[7, 2] <- as.character(round(Last_sale,0))
          part_view[8, 2] <- paste("$", formatC(Original_current$Revenue[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[9, 2] <-  paste("$", formatC(revenue_non, big.mark=",", digits=2, format="f"), sep = " ")
          part_view[10, 2] <-  paste("$", formatC(Original_current$Part_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[11, 2] <-  paste("$", formatC(material_non, big.mark=",", digits=2, format="f"), sep = " ")
          part_view[12, 2] <- 0
          part_view[13, 2] <-  paste("$", formatC(Original_current$Total_transport_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[14, 2] <- paste("$", formatC((Original_current$Total_process_cost[1]), big.mark=",", digits=2, format="f"), sep = " ")
          part_view[15, 2] <-  paste("$", formatC(Original_current$Storage_Cost[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[16, 2] <-  paste("$", formatC((Original_current$Package_cost[1]), big.mark=",", digits=2, format="f"), sep = " ")
          part_view[17, 2] <-  paste("$", formatC(Original_current$Total_offsite_labor_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[18, 2] <-  paste("$", formatC(Original_current$Total_offsite_transport_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[19, 2] <-  paste("$", formatC(Original_current$Expense[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[20, 2] <-  paste("$", formatC(Original_optimal$Optimal_NPV[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[21, 2] <- paste(formatC(ceiling(Original_optimal$Optimal_ATB_Quantity[1]), big.mark=",", digits=0, format="f"))
          part_view[22,2] <-  paste(formatC(ceiling(Original_current$Buy_Quantity[1]), big.mark=",", digits=0, format="f"))
          part_view[23,2] <-  paste(formatC(ceiling((ATB_ADS$TOTAL_INVENTORY[1] + Original_current$Buy_Quantity[1])), big.mark=",", digits=0, format="f"))
          part_view[24, 2] <-  paste("$", formatC(Original_optimal$Extended_optimal_buy_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[25, 2] <-  paste("$", formatC(Original_current$Extended_purchase_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[26, 2] <- round(as.numeric(ATB_ADS_pb$ATB_Units),0)
          part_view[27, 2] <- round(as.numeric(ATB_ADS_pb_orig$disc_pb),2)
          part_view[28, 2] <- round(as.numeric(ATB_ADS_pb$X373),2)
          part_view
          
        }, readOnly = TRUE)
        print("done")
        income_report_current$Per_unit[c(1:3, 7:16, 18, 20:45)] <- paste("$", formatC(income_report_current$Per_unit[c(1:3, 7:16, 18, 20:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_current$Per_unit[c(17, 19)] <- paste("$", formatC(income_report_current$Per_unit[c(17, 19)], big.mark=",", digits=7, format="f"), sep = " ")
        
        income_report_current$Per_unit[c(4:6)] <- paste(formatC(income_report_current$Per_unit[c(4:6)], big.mark=",", digits=20, format="f"), "%" , sep = " ")
        income_report_current$Per_unit[c(46:52)] <- paste(formatC(income_report_current$Per_unit[c(46:52)], big.mark=",", digits=20, format="f"))
        
        income_report_current$OES[c(1:45)] <- paste("$", formatC(income_report_current$OES[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_current$OES[c(46:52)] <- paste(formatC(as.numeric(income_report_current$OES[c(46:52)]), big.mark=",", digits=20, format="f"))
        
        income_report_current$IAM[c(1:45)] <- paste("$", formatC(income_report_current$IAM[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_current$IAM[c(46:52)] <- paste(formatC(as.numeric(income_report_current$IAM[c(46:52)]), big.mark=",", digits=20, format="f"))
        
        income_report_current$Allied_export[c(1:45)] <- paste("$", formatC(income_report_current$Allied_export[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_current$Allied_export[c(46:52)] <- paste(formatC(as.numeric(income_report_current$Allied_export[c(46:52)]), big.mark=",", digits=20, format="f"))
        
        income_report_current$Total[c(1:45)] <- paste("$", formatC(income_report_current$Total[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_current$Total[c(46:52)] <- paste(formatC(income_report_current$Total[c(46:52)], big.mark=",", digits=20, format="f"))
        
        income_report_current$Per_unit[c(10,11,15,16,40:45)] <- "-"
        
        
        
        output$download_income_report <- downloadHandler(
          filename = function() {
            paste("Income_statement_report_current_scenario_",input$Part_Number, ".csv", sep="") 
          },
          content = function(file) {
            abc <- income_report_current
            
            write.csv(abc, file)
            
          }
        )
        
        
      })  # Closing for Messages and progress bar
      
      ########################### Starting of Scenario-1
      shinyjs::enable("downloadData_s_1")
      shinyjs::enable("download_income_report_s_1")
      
      part_info <- global_ads$df_data_ads
      
      part_inform <- as.data.frame(part_info)
      part_inform$X <- NULL
      part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
      
      ATB_ADS <- part_inform[which(part_inform$PART_NBR == input$Part_Number),]
      #----------------------------------------
      ####### Code for Scenario - 1    
      #----------------------------------------
      ######### Code for Scenario-1-Optimal    
      
      withProgress(message = 'Processing in Progress', value = 0, {
        
        
        DLR_Price_3 <- round(as.numeric(scenario_1$Values[1]), 4)
        wd_price <- round(as.numeric(scenario_1$Values[2]), 4)
        
        Dealer_Price_Allied_Export <- DLR_Price_3 * (1 - (ATB_ADS$Discount_allied_export_percent[1]/100))
        Dealer_Price_OES <- DLR_Price_3 * (1 - (ATB_ADS$Discount_oes_percent[1]/100))
        Dealer_Price_IAM <- wd_price * (1 - (ATB_ADS$Discount_iam_percent[1]/100))
        
        part_c_3 <- round(as.numeric(scenario_1$Values[3]) , 5)
        moq <- round(as.numeric(scenario_1$Values[4]) , 0)
        std_p <- round(as.numeric(scenario_1$Values[5]), 0)
        std_p <- ifelse(std_p == 0, 1, std_p)
        setup_cost <- round(as.numeric(scenario_1$Values[6]), 4)
        add_cost <- round(as.numeric(scenario_1$Values[7]), 4)
        Monthly_square_feet_cpp1 <- round(as.numeric(scenario_1$Values[8]), 7)
        Offsite_transportation_cpp1 <- round(as.numeric(scenario_1$Values[9]), 7)
        Redistribution_cpp1 <- round(as.numeric(scenario_1$Values[10]), 7)
        Offsite_Labor_cpp1 <- round(as.numeric(scenario_1$Values[11]), 7)
        Inbound_Labor_cpp1 <- round(as.numeric(scenario_1$Values[12]), 7)
        Outbound_Labor_cpp1 <- round(as.numeric(scenario_1$Values[13]), 7)
        Average_Labor_cpp1 <- round(as.numeric(scenario_1$Values[14]), 7)
        Average_Processing_cpp1 <- round(as.numeric(scenario_1$Values[15]), 7)
        Inbound_Transportation_cpp1 <- round(as.numeric(scenario_1$Values[16]), 7)
        Outbound_Transportation_cpp1 <- round(as.numeric(scenario_1$Values[17]), 7)
        
        Current_Inventory <-  round(as.numeric(scenario_1$Values[18]), 4)
        print("Values assigned")
        
        #ONSITE_TRANS_COST_PER_PIECE
        Onsite_trans_cpp1 <- Inbound_Transportation_cpp1 + Outbound_Transportation_cpp1 + Redistribution_cpp1
        
        #ONSITE_PRCS_COST_PP
        Onsite_procs_cpp1 <- Inbound_Labor_cpp1 + Outbound_Labor_cpp1 + Average_Labor_cpp1 + Average_Processing_cpp1
        
        ##### ATB Scenario calculation
        Scenario_1_optimal <- data.frame()
        NPV_Data_1 <- data.frame()
        First_buy <- 0
        Last_sale <- 0
        flag <- 0
        flag_last_buy <- 0
        Last_buy <- 0
        
        for (jj in (1:nrow(ATB_ADS))) {
          
          cat("\nsc_1_opt Part Number: ",jj," : ", ATB_ADS[jj,1])
          final_NPV_list <- 0
          Optimal_year_count_list <- 1
          LTBQ_list <- 0
          Year_list <- c()
          FCST_list <- c()
          NPV_CR_list <- c()
          Revenue_CR_list <- c()
          Revenue_list_non_npv <- c()
          Expense_list <- c()
          Storage_cost_CR_list <- c()
          Freight_cost_CR_list <- c()
          Processing_cost_CR_list <- c()
          
          transport_cost <- c()
          offsite_transport_cost <- c()
          offsite_labor_cost <- c()
          process_cost <- c()
          packaging_cost <- c()
          FCST_list1 <- c()
          
          Material_cost_CR_list <- c()
          Buy_quantity_list <- c()
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          
          for(nn in (1:30)){
            FCST_list[nn] <- ATB_ADS[jj,(YI-1+nn)]
          }
          
          FCST_list[1] <- FCST_list[1] + ATB_ADS$CURRENT_YEAR[jj]
          
          
          
          if(FCST_list[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST_list[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          ###########
          Sum_Forecast <- sum(FCST_list)
          
          iam_weight <- ATB_ADS$IAM_FRACTION[jj]
          oes_weight <- ATB_ADS$OES_FRACTION[jj]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[jj]
          
          FCST_iam <- round(FCST_list * iam_weight, digits = 0)
          FCST_oes <- round(FCST_list * oes_weight, digits = 0)
          FCST_allied <- round(FCST_list * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Sum_Forecast
          
          
          if(Sum_Forecast > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          for(i in 1:30)
          {
            FCST_list[i] <- FCST_allied[i] + FCST_iam[i] + FCST_oes[i]
          }
          ###########
          
          
          for (nn in (1:30)) {
            Sum_Forecast_list <- sum(FCST_list[1:nn])
            BQ_list <- Sum_Forecast_list
            qty_list <- 0
            yr_qty_list <- c()
            
            if(nn > 1){
              for (ii in (1:(nn-1))) {
                ss <- ((BQ_list - sum(FCST_list[1:ii])) + (BQ_list - sum(FCST_list[1:(1+ii)])))/2
                qty_list <- qty_list + ss 
                yr_qty_list[ii+1] <- ss
              }
            }
            yr_qty_list[1] <- (2*BQ_list - FCST_list[1])/2        
            
            Total_storage_qty_list <- sum(yr_qty_list)
            Storage_Cost_list <- 0
            revenue_list <- 0
            revenue_list_non_npv <- 0
            revenue_iam <- 0 
            revenue_oes <- 0
            revenue_allied <- 0
            
            
            for(kk in (1: (nn) ))
            {
              CR <- ((1-(0.15/12))^(kk*12))
              revenue_list <- revenue_list + (FCST_list[kk] * CR *((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj]))) 
              
              revenue_iam <- revenue_iam + (FCST_iam[kk] * CR * (Dealer_Price_IAM))
              revenue_oes <- revenue_oes + (FCST_oes[kk] * CR * (Dealer_Price_OES))
              revenue_allied <- revenue_allied + (FCST_allied[kk] * CR * (Dealer_Price_Allied_Export))
              
              revenue_list_non_npv <- revenue_list_non_npv + ((FCST_list[kk]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj])))
              Storage_Cost_list <- Storage_Cost_list + ((yr_qty_list[kk])*Monthly_square_feet_cpp1 * CR)
              
            }
            
            offsite_quantity <- ifelse((BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))) > 0, (BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))), 0)
            
            Offsite_trans_cost_list <- Offsite_transportation_cpp1 * offsite_quantity
            Freight_cost_list <- ((Onsite_trans_cpp1 * BQ_list) + Offsite_trans_cost_list) * (1-(0.15/12))
            Offsite_labour_cost_list <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
            Total_Processing_cost_list <- ((Onsite_procs_cpp1 * BQ_list) + Offsite_labour_cost_list) * (1-(0.15/12))
            
            
            Material_cost_list <- (part_c_3*BQ_list)*(1-(0.15/12))
            
            Total_transport_cost <- (Onsite_trans_cpp1 * BQ_list) * (1-(0.15/12))
            Total_offsite_transport_cost <- Offsite_trans_cost_list * (1-(0.15/12))
            Total_offsite_labor_cost <- Offsite_labour_cost_list * (1-(0.15/12))
            Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ_list) * (1-(0.15/12))
            Total_package_cost <- Average_Processing_cpp1 * BQ_list * (1-(0.15/12)) 
            
            Total_Expense_list <- Storage_Cost_list + Freight_cost_list + Total_Processing_cost_list + Material_cost_list + setup_cost + add_cost
            revenue_list <- revenue_iam + revenue_oes + revenue_allied
            
            NPV_with_capital_rate_list <- revenue_list - Total_Expense_list
            Year_list[nn] <- nn
            NPV_CR_list[nn] <- NPV_with_capital_rate_list
            Expense_list[nn] <- Total_Expense_list
            Revenue_CR_list[nn] <- revenue_list
            Revenue_list_non_npv[nn] <- revenue_list_non_npv
            Storage_cost_CR_list[nn] <- Storage_Cost_list
            Freight_cost_CR_list[nn] <- Freight_cost_list
            Processing_cost_CR_list[nn] <- Total_Processing_cost_list
            Material_cost_CR_list[nn] <- Material_cost_list
            Buy_quantity_list[nn] <- BQ_list
            
            
            transport_cost[nn] <- Total_transport_cost
            offsite_transport_cost[nn] <- Total_offsite_transport_cost
            offsite_labor_cost[nn] <- Total_offsite_labor_cost
            process_cost[nn] <- Total_process_cost
            packaging_cost[nn] <- Total_package_cost
            
            if(NPV_with_capital_rate_list>0) {
              
              if(final_NPV_list<NPV_with_capital_rate_list){
                
                final_NPV_list <- NPV_with_capital_rate_list
                Optimal_year_count_list <- nn
                LTBQ_list <- BQ_list
                Total_Expense_NPV_list <- Total_Expense_list
                Revenue_NPV_list <- revenue_list
                Revenue_NPV_list_non_npv <- revenue_list_non_npv
                Storage_cost_NPV_list <- Storage_Cost_list
                Freight_cost_NPV_list <- Freight_cost_list
                Processing_cost_NPV_list <- Total_Processing_cost_list
                Material_cost_NPV_list <- Material_cost_list
                
                transport_cost_list <- Total_transport_cost
                offsite_transport_cost_list <- Total_offsite_transport_cost
                offsite_labor_cost_list <- Total_offsite_labor_cost
                process_cost_list <- Total_process_cost
                package_cost_list <- Total_package_cost
              }
            } else if((nn==1) && (NPV_with_capital_rate_list<=0)) {
              
              Optimal_year_count_list <- 0
              Total_Expense_NPV_list <- Expense_list[1]
              Revenue_NPV_list <- Revenue_CR_list[1]
              Revenue_NPV_list_non_npv <- Revenue_list_non_npv[1]
              Storage_cost_NPV_list <- Storage_cost_CR_list[1]
              Freight_cost_NPV_list <- Freight_cost_CR_list[1]
              Processing_cost_NPV_list <- Processing_cost_CR_list[1]
              Material_cost_NPV_list <- Material_cost_CR_list[1]
              
              transport_cost_list <- transport_cost[1]
              offsite_transport_cost_list <- offsite_transport_cost[1]
              offsite_labor_cost_list <- offsite_labor_cost[1]
              process_cost_list <- process_cost[1]
              package_cost_list <- packaging_cost[1]
              
            }
          }
          if(offsite_transport_cost_list < 0 )
          {
            offsite_transport_cost_list <- 0
          }
          if(offsite_labor_cost_list < 0)
          {
            offsite_labor_cost_list <- 0
          }
          
          LTBQ_list <- LTBQ_list - Current_Inventory
          
          if(LTBQ_list <= 0)
          {
            LTBQ_list = 0
          }
          
          Extended_optimal_buy_cost <- LTBQ_list * part_c_3
          
          Material_cost_list_non_npv <- (Material_cost_NPV_list / (1-(0.15/12)))
          Scenario_1_optimal <- data.frame(lapply(Scenario_1_optimal, as.character), stringsAsFactors=FALSE)
          Scenario_1_optimal <- rbind(Scenario_1_optimal, c(ATB_ADS[jj,1],Storage_cost_NPV_list,Freight_cost_NPV_list,Processing_cost_NPV_list,
                                                            Material_cost_NPV_list,Total_Expense_NPV_list,Revenue_NPV_list,final_NPV_list,
                                                            Optimal_year_count_list,LTBQ_list,Revenue_NPV_list_non_npv, Material_cost_list_non_npv,
                                                            transport_cost_list, offsite_transport_cost_list, offsite_labor_cost_list, process_cost_list,
                                                            setup_cost, DLR_Price_3, Dealer_Price_OES, Dealer_Price_Allied_Export, wd_price,Dealer_Price_IAM,
                                                            ATB_ADS$Discount_iam_percent[jj], ATB_ADS$Discount_oes_percent[jj], ATB_ADS$Discount_allied_export_percent[jj],
                                                            package_cost_list, Extended_optimal_buy_cost, add_cost, Current_Inventory))
          
          NPV_Data_1 <- data.frame(ATB_ADS[jj,1],Year_list,FCST_list,Storage_cost_CR_list,Freight_cost_CR_list,Processing_cost_CR_list,Material_cost_CR_list,Buy_quantity_list,Expense_list,Revenue_CR_list,NPV_CR_list)
        }
        colnames(Scenario_1_optimal) <- c("Part_Nbr","Optimal_Storage_Cost_Scenario_1","Optimal_Transportation_Cost_Scenario_1",
                                          "Optimal_Processing_Cost_Scenario_1","Optimal_Material_Cost_Scenario_1","Optimal_Expense_Scenario_1",
                                          "Optimal_Revenue_Scenario_1","Optimal_NPV_Scenario_1","Optimal_year_count_Scenario_1","Optimal_ATB_Quantity_Scenario_1",
                                          "Optimal_Revenue_Non_Npv_Scenario_1", "Optimal_Material_cost_non_Npv_Scenario_1", "Optimal_Total_transport_cost_Scenario_1",
                                          "Optimal_Total_offsite_transport_cost_Scenario_1","Optimal_Total_offsite_labor_cost_Scenario_1",
                                          "Optimal_Total_process_cost_Scenario_1", "Optimal_Setup_cost_Scenario_1","Proposed_Dealer_Price_1",
                                          "Dealer_Price_OES_1", "Dealer_Price_Allied_Export_1", "Proposed_Wd_Price_1", "Dealer_Price_IAM_1", 
                                          "Discount_iam_percent", "Discount_oes_percent", "Discount_allied_export_percent", "Optimal_Packaging_cost_Scenario_1",
                                          "Extended_optimal_buy_cost_1", "Additional_Cost_1", "Total_Inventory")
        
        Scenario_1_optimal <- data.frame(lapply(Scenario_1_optimal, as.character), stringsAsFactors=FALSE)
        Scenario_1_optimal <- data.frame(lapply(Scenario_1_optimal, as.numeric), stringsAsFactors=FALSE)
        Scenario_1_optimal <- Scenario_1_optimal %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        Scenario_1_optimal$Part_Nbr <- str_pad(Scenario_1_optimal$Part_Nbr, width=8, side="left", pad="0")
        
        incProgress(1/4, detail = "Running Calculations")
        
        
        ########## Code for Scenario-1: Current 
        if(input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
        {
          BQ_S1 <- as.numeric(ATB_ADS$Buy_Quantity_Scenario_1)
        } else
        {
          BQ_S1 <- NA
        }
        
        if(is.na(BQ_S1))
        {
          shinyjs::enable("download_income_report_s_1")
          Scenario_1_current <- data.frame()
          
          for(j in (1:nrow(ATB_ADS)))
          {
            cat("\nsc_1_curr Part Number: ",j," : ", ATB_ADS[j,1])
            FCST <- c()
            Curr_Inv <- round(as.numeric(scenario_1$Values[18]), 4)
            Curr_Inv_copy <- Curr_Inv
            Revenue <- c()
            Revenue_Allied <- c()
            Revenue_OES <- c()
            Revenue_IAM <- c()
            
            Revenue_non_npv <- c()
            
            AMD <- c()
            AMD_iam <- c()
            AMD_oes <- c()
            AMD_allied <- c()
            
            First_buy <- 0
            Last_sale <- 0
            Last_buy <- 0
            flag <- 0
            flag_last_buy <- 0
            
            
            YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
            for(n in (1:30)){
              FCST[n] <- ATB_ADS[j,(YI-1+n)]
              Revenue[n] <- 0
              Revenue_Allied[n] <- 0
              Revenue_OES[n] <- 0
              Revenue_IAM[n] <- 0
              
              Revenue_non_npv[n] <- 0
            }
            
            FCST[1] <- ATB_ADS$CURRENT_YEAR[j] + FCST[1]
            Total_FCST <- sum(FCST)
            
            if(FCST[1] != 0)
            {
              First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
            } else
            {
              First_buy <- 0
            }
            
            for(i in 1:30)
            {
              if(FCST[i] == 0 & flag != 1)
              {
                Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                flag = 1
              } 
            }
            if(flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
            }
            
            ###########          
            
            iam_weight <- ATB_ADS$IAM_FRACTION[j]
            oes_weight <- ATB_ADS$OES_FRACTION[j]
            allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
            
            FCST_iam <- round(FCST * iam_weight, digits = 0)
            FCST_oes <- round(FCST * oes_weight, digits = 0)
            FCST_allied <- round(FCST * allied_weight, digits = 0)
            
            Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
            
            Diff_FCST <- Sum_FCST - Total_FCST
            
            if(Total_FCST > 0)
            {
              
              if(oes_weight != 0)
              {
                index <- tail(which(FCST_oes!=0),1)
              } else if(iam_weight != 0)
              {
                index <- tail(which(FCST_iam!=0),1)
              } else if(allied_weight != 0)
              {
                index <- tail(which(FCST_allied!=0),1)
              } else
              {
                index <- 1
              }
            } else
            {
              index <- 1
            }
            
            if(length(index)==0)
            {
              index <- 1
            }
            
            flag_revenue_oes <- 0
            flag_revenue_iam <- 0
            flag_revenue_allied <- 0
            
            if(oes_weight == 0)
            {
              FCST_oes[index] <- Sum_FCST + 1000
              flag_revenue_oes <- 1
            }
            if(iam_weight == 0)
            {
              FCST_iam[index] <- Sum_FCST + 1000
              flag_revenue_iam <- 1
            }
            if(allied_weight == 0)
            {
              FCST_allied[index] <- Sum_FCST + 1000
              flag_revenue_allied <- 1
            }
            
            
            if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
            {
              FCST_oes[index] <- FCST_oes[index] - Diff_FCST
              
            } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
            {
              FCST_iam[index] <- FCST_iam[index] - Diff_FCST
              
            } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
            {
              FCST_allied[index] <- FCST_allied[index] - Diff_FCST
            }
            
            if(flag_revenue_oes == 1)
            {
              FCST_oes[index] <- 0
            }
            if(flag_revenue_iam == 1)
            {
              FCST_iam[index] <- 0
            }
            if(flag_revenue_allied == 1)
            {
              FCST_allied[index] <- 0
            }
            
            ###########          
            for(n in (1:30)){
              AMD[n] <- FCST[n]/12
              AMD_oes[n] <- FCST_oes[n] / 12
              AMD_iam[n] <- FCST_iam[n] / 12
              AMD_allied[n] <- FCST_allied[n] / 12
            }
            
            
            for(k in (1:30))
            {
              CR <- ((1-(0.15/12))^(k*12))
              Revenue[k] <- Revenue[k] + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              
              Revenue_Allied[k] <- Revenue_Allied[k] + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
              Revenue_OES[k] <- Revenue_OES[k] + (FCST_oes[k] * CR * (Dealer_Price_OES))
              Revenue_IAM[k] <- Revenue_IAM[k] + (FCST_iam[k] * CR * (Dealer_Price_IAM))
              
              Revenue_non_npv[k] <- Revenue_non_npv[k] + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              
            }
            
            Revenue_OES_non_npv_no_discount <- sum(FCST_oes) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
            Revenue_IAM_non_npv_no_discount <- sum(FCST_iam) * ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[j]
            Revenue_Allied_non_npv_no_discount <- sum(FCST_allied) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
            
            Revenue_OES_non_npv_discount <- sum(FCST_oes) * Dealer_Price_OES
            Revenue_IAM_non_npv_discount <- sum(FCST_iam) * Dealer_Price_IAM 
            Revenue_Allied_non_npv_discount <- sum(FCST_allied) * Dealer_Price_Allied_Export
            
            Revenue_Allied_discount <- sum(Revenue_Allied)
            Revenue_OES_discount <- sum(Revenue_OES)
            Revenue_IAM_discount <- sum(Revenue_IAM)
            
            year <- 0
            month <- 0
            get_demand <- 0
            
            for(i in 1:30)
            {
              get_demand = get_demand + FCST[i]
              if(Curr_Inv > get_demand)
              {
                year = year + 1
              } else if(Curr_Inv <= FCST[1])
              {
                remain = Curr_Inv
                
                year_remain = FCST[1] - remain
                
                month = 1
                demand_for_break_year = 0
                for(i in 1:12)
                {
                  demand_for_break_year = demand_for_break_year + (FCST[1] / 12)
                  if(remain > demand_for_break_year)
                  {
                    month = month + 1
                  }
                }
                
                FCST[year+1] <- remain
                Sum_Forecast <- sum(FCST[1:(year+1)])
                break()
              }
            }
            
            ###
            if(Curr_Inv > FCST[1] & year < 30)
            {
              remain <- Curr_Inv - sum(FCST[1:year])
              
              year_remain <- FCST[(year+1)] - remain
              
              month = 1
              demand_for_break_year = 0
              for(i in 1:12)
              {
                demand_for_break_year = demand_for_break_year + (FCST[year+1] / 12)
                if(remain > demand_for_break_year)
                {
                  month = month+1
                }
              }
              
              FCST[year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(year+1)])
            } else if(year >= 30)
            {
              remain <- Curr_Inv - sum(FCST[1:year])
              FCST[year+1] <- 0
              year_remain <- 0
              Sum_Forecast <- sum(FCST[1:(year + 1)])
              month <- 0
            }
            
            
            BQ <- ceiling(Curr_Inv)
            qty <- 0
            yr_qty <- c()
            
            for (i in (1:(year))) {
              storage_qty <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
              qty <- qty + storage_qty
              yr_qty[i+1] <- storage_qty
            }
            
            yr_qty[1] <- (2*BQ - FCST[1])/2        
            yr_qty[year + 2] <- 0
            
            Storage_Cost_Curr_Inv <- 0
            Storage_Cost_Curr_Inv_non_npv <- 0
            
            
            for(k in (1 : (year+1)))
            {
              CR <- ((1-(0.15/12))^(k*12))
              Storage_Cost_Curr_Inv <- Storage_Cost_Curr_Inv + ((yr_qty[k])* Monthly_square_feet_cpp1 * CR)
              Storage_Cost_Curr_Inv_non_npv <- Storage_Cost_Curr_Inv_non_npv + (yr_qty[k]) * Monthly_square_feet_cpp1
              
            }
            
            offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
            
            Offsite_trans_cost_curr_inv <- Offsite_transportation_cpp1 * offsite_quantity
            transport_cost_curr_inv <- Onsite_trans_cpp1 * BQ * (1-(0.15/12))
            transport_cost_curr_inv_non_npv <- Onsite_trans_cpp1 * BQ 
            
            Freight_cost_curr_inv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv) * (1-(0.15/12))
            Freight_cost_curr_inv_non_npv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv)
            
            Offsite_labour_cost_curr_inv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1) * (1-(0.15/12))
            Offsite_labour_cost_curr_inv_non_npv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
            
            process_cost_curr_inv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ * (1-(0.15/12))
            process_cost_curr_inv_non_npv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ
            
            package_cost_curr_inv <- Average_Processing_cpp1 * BQ * (1-(0.15/12))  
            package_cost_curr_inv_non_npv <- Average_Processing_cpp1 * BQ
            
            Total_Processing_cost_curr_inv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost_curr_inv) * (1-(0.15/12)) 
            Material_cost_curr_inv <- BQ * part_c_3 * (1-(0.15/12)) 
            Material_cost_curr_inv_non_npv <- BQ * part_c_3 
            
            
            FCST[year+1] <- year_remain
            
            Adj_Dem <- c()
            BF_BQ <- c()
            Curr_Inv <- c()
            BQ <- c()
            Purchase_times <- c()
            Yearly_BQ <- c()
            Storage_Cost <- c()
            Storage_Cost_non_npv <- c()
            Offsite_Qty <- c()
            Freight_cost <- c()
            Freight_cost_non_npv <- c()
            transport_cost <- c()
            offsite_transport_cost <- c()
            transport_cost_non_npv <- c()
            offsite_transport_cost_non_npv <- c()
            Processing_cost <- c()
            offsite_labor_cost <- c()
            offsite_labor_cost_non_npv <- c()
            process_cost <- c()
            process_cost_non_npv <- c()
            package_cost <- c()
            package_cost_non_npv <- c()
            Material_cost <- c()
            Material_cost_non_npv <- c()
            All_Expense <- c()
            
            for(i in 1:year)
            {
              Adj_Dem[i] = 0
              BF_BQ[i] = 0
              Curr_Inv[i] = 0
              BQ[i] = 0
              Purchase_times[i] = 0
              Yearly_BQ[i] = 0
              Storage_Cost[i] = 0
              Storage_Cost_non_npv[i] = 0
              Offsite_Qty[i] = 0
              Freight_cost[i] = 0
              Freight_cost_non_npv[i] = 0
              transport_cost[i] = 0
              offsite_transport_cost[i] = 0
              transport_cost_non_npv[i] = 0
              offsite_transport_cost_non_npv[i] = 0
              Processing_cost[i] = 0
              offsite_labor_cost[i] = 0
              offsite_labor_cost_non_npv[i] = 0
              process_cost[i] = 0
              process_cost_non_npv[i] = 0
              package_cost[i] = 0
              package_cost_non_npv[i] = 0
              Material_cost[i] = 0
              Material_cost_non_npv[i] = 0
              All_Expense[i] = 0
            }
            
            Total_BQ <- 0
            
            if((year + 1) < 31)
            {
              Curr_Inv[(year + 1)] <- 0
              for(k in ((year + 1) : 30)){
                Adj_Dem[k] <- (FCST[k] - Curr_Inv[k])
                BF_BQ[k] <- ifelse(k == (year + 1),((ATB_ADS$BUY_FREQ[j]*(AMD[k]/4.33)) * (12-month)/12),(ATB_ADS$BUY_FREQ[j]*(((Adj_Dem[k])/12)/4.33)))
                
                BQ[k] <- ceiling(ifelse((Curr_Inv[k] < Adj_Dem[k]),(max(moq, std_p, BF_BQ[k])), 0))
                Purchase_times[k] <- ifelse((BQ[k]!=0),(ceiling(Adj_Dem[k]/BQ[k])),0)
                Yearly_BQ[k] <- BQ[k] * Purchase_times[k]
                Curr_Inv[k+1] <- Yearly_BQ[k] - Adj_Dem[k]
                Storage_Cost[k] <- 0
                Storage_Cost_non_npv[k] <- 0
              }
              
              Total_BQ <- ceiling(sum(Yearly_BQ))
              scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
              adjusment_factor <- Total_BQ%%std_p
              
              if(adjusment_factor > scrap_amount)
              {
                Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] + (std_p - Total_BQ%%std_p)
                Total_BQ <- Total_BQ + (std_p - Total_BQ%%std_p)
                
                BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
              } else if(adjusment_factor <= scrap_amount)
              {
                Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] - Total_BQ%%std_p
                Total_BQ <- Total_BQ - Total_BQ%%std_p
                
                BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
              }
              
              for(i in ((year + 1):30))
              {
                if(Yearly_BQ[i] == 0 & flag_last_buy != 1)
                {
                  if(i != (year + 1))
                  {
                    Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                    flag_last_buy = 1
                  } else
                  {
                    Last_buy <- 0
                    flag_last_buy = 1
                  }
                } 
              }
              if(flag_last_buy != 1)
              {
                Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
              }
              
              
              for(k in ((year + 1):30))
              {
                CR <- ((1-(0.15/12))^(k*12))
                Storage_Cost[k] <- Storage_Cost[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1 * CR)
                Storage_Cost_non_npv[k] <- Storage_Cost_non_npv[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1)
                
              }
              
              for(k in ((year + 1):30)){
                
                CR <- (1-(0.15/12))^(k*12)
                Offsite_Qty[k] <- ifelse((BQ[k] > (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),(BQ[k] - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),0)
                Freight_cost[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k] * CR
                Freight_cost_non_npv[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k]
                
                transport_cost[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] * CR
                offsite_transport_cost[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k] * CR
                transport_cost_non_npv[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] 
                offsite_transport_cost_non_npv[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k] 
                
                Processing_cost[k] <- ((Onsite_procs_cpp1 * BQ[k]) + (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1))) * Purchase_times[k] * CR
                
                offsite_labor_cost[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k] * CR
                offsite_labor_cost_non_npv[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k]
                
                process_cost[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k] * CR
                process_cost_non_npv[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k]
                
                package_cost[k] <- Average_Processing_cpp1 * BQ[k] * CR * Purchase_times[k]
                package_cost_non_npv[k] <- Average_Processing_cpp1 * BQ[k] * Purchase_times[k]
                
                Material_cost[k] <- (part_c_3 * BQ[k]) * Purchase_times[k] * CR
                Material_cost_non_npv[k] <- (part_c_3 * BQ[k]) * Purchase_times[k]
                All_Expense[k] <- Storage_Cost[k] + Freight_cost[k] + Processing_cost[k] + Material_cost[k]
                
              }
            } else
            {
              Last_buy <- 0
            }
            
            scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
            
            Total_Storage_Cost_current <- sum(Storage_Cost) + Storage_Cost_Curr_Inv
            Total_Storage_Cost_current_non_npv <- sum(Storage_Cost_non_npv) + Storage_Cost_Curr_Inv_non_npv
            Total_Freight_cost_current <- sum(Freight_cost) + Freight_cost_curr_inv
            Total_Freight_cost_current_non_npv <- sum(Freight_cost_non_npv) + Freight_cost_curr_inv_non_npv
            Total_Processing_cost_current <-sum(Processing_cost) + Total_Processing_cost_curr_inv
            Total_Material_cost_current <- sum(Material_cost) + Material_cost_curr_inv
            Total_Material_cost_non_npv_current <- sum(Material_cost_non_npv) + Material_cost_curr_inv_non_npv
            
            
            Total_Revenue_current <- Revenue_Allied_discount + Revenue_OES_discount + Revenue_IAM_discount
            Total_Revenue_non_npv_current <- Revenue_OES_non_npv_discount + Revenue_IAM_non_npv_discount + Revenue_Allied_non_npv_discount
            
            
            Total_transport_cost <- sum(transport_cost) + transport_cost_curr_inv
            Total_offsite_transport_cost <- sum(offsite_transport_cost) + Offsite_trans_cost_curr_inv
            Total_transport_cost_non_npv <- sum(transport_cost_non_npv) + transport_cost_curr_inv_non_npv
            Total_offsite_transport_cost_non_npv <- sum(offsite_transport_cost_non_npv) + Offsite_trans_cost_curr_inv
            
            Total_offsite_labor_cost <- sum(offsite_labor_cost) + Offsite_labour_cost_curr_inv
            Total_offsite_labor_cost_non_npv <- sum(offsite_labor_cost_non_npv) + Offsite_labour_cost_curr_inv_non_npv
            
            Total_process_cost <- sum(process_cost) + process_cost_curr_inv
            
            
            
            Total_process_cost_non_npv <- sum(process_cost_non_npv) + process_cost_curr_inv_non_npv
            Total_package_cost <- sum(package_cost) + package_cost_curr_inv
            Total_package_cost_non_npv <- sum(package_cost_non_npv) + package_cost_curr_inv_non_npv
            
            Total_Expense_current <- Total_Storage_Cost_current + Total_Freight_cost_current + Total_process_cost + Total_offsite_labor_cost + Total_package_cost + Total_Material_cost_current  + setup_cost + add_cost
            
            Total_Expense_current_non_npv <- Total_Storage_Cost_current_non_npv + Total_Freight_cost_current_non_npv + Total_Material_cost_non_npv_current + Total_offsite_labor_cost_non_npv + Total_package_cost_non_npv + Total_process_cost_non_npv + setup_cost + add_cost
            
            Total_NPV <- Total_Revenue_current - Total_Expense_current 
            Total_NPV_non_npv <-  Total_Revenue_non_npv_current - Total_Expense_current_non_npv
            Total_Purchase_Qty <- Total_BQ
            Total_Inventory_Purchase <- Total_Purchase_Qty + Curr_Inv_copy
            BQ_S1_check <- ifelse(is.na(BQ_S1), 0, BQ_S1)
            
            Extended_purchase_cost <- BQ_S1_check * part_c_3
            
            Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
            
            Scenario_1_current <- rbind(Scenario_1_current, c(ATB_ADS[j,1],Total_Storage_Cost_current,Total_Storage_Cost_current_non_npv, Total_Freight_cost_current, 
                                                              Total_Freight_cost_current_non_npv, Total_Processing_cost_current,
                                                              Total_Material_cost_current,Total_Expense_current,Total_Expense_current_non_npv, Total_Revenue_current,
                                                              Total_NPV,Total_NPV_non_npv, Total_BQ,Total_FCST, 
                                                              Total_Material_cost_non_npv_current, Total_Revenue_non_npv_current,Total_transport_cost, Total_offsite_transport_cost,Total_transport_cost_non_npv, Total_offsite_transport_cost_non_npv,
                                                              Total_offsite_labor_cost, Total_offsite_labor_cost_non_npv, Total_process_cost,Total_process_cost_non_npv,
                                                              setup_cost, BQ_S1_check, First_buy, Last_sale,
                                                              Last_buy, Total_package_cost, Total_package_cost_non_npv, scrap_amount,
                                                              Revenue_OES_non_npv_no_discount, Revenue_IAM_non_npv_no_discount, Revenue_Allied_non_npv_no_discount,
                                                              Revenue_OES_non_npv_discount, Revenue_IAM_non_npv_discount, Revenue_Allied_non_npv_discount, add_cost,
                                                              Revenue_Allied_discount, Revenue_OES_discount, Revenue_IAM_discount, Total_Purchase_Qty,
                                                              Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST))
            
          }
          
          colnames(Scenario_1_current) <- c("Part_Nbr","Storage_Cost_Scenario_1","Storage_Cost_non_npv_Scenario_1", "Transportation_Cost_Scenario_1", "Transportation_cost_non_npv_Scenario_1",
                                            "Processing_Cost_Scenario_1","Part_Cost_Scenario_1","Expense_Scenario_1", "Expense_non_npv_Scenario_1", "Revenue_Scenario_1", "NPV_Scenario_1", "Profit_Non_NPV_Scenario_1",
                                            "Buy_Quantity_Scenario_1","Total_Forecast_Scenario_1", "Material_cost_non_npv_Scenario_1", "Revenue_non_npv_Scenario_1",
                                            "Total_transport_cost_Scenario_1", 
                                            "Total_offsite_transport_cost_Scenario_1","Total_transport_cost_non_npv_Scenario_1", "Total_offsite_transport_cost_non_npv_Scenario_1","Total_offsite_labor_cost_Scenario_1", "Total_offsite_labor_cost_non_npv_Scenario_1", 
                                            "Total_process_cost_Scenario_1", "Total_process_cost_non_npv_Scenario_1", "Setup_cost_Scenario_1", "LTB_Buy_Quantity_Scenario_1",
                                            "First_buy",
                                            "Last_sale", "Last_buy", "Package_cost_Scenario_1", "Package_cost_non_npv_Scenario_1", "Scrap_amount_Scenario_1",
                                            'Revenue_OES_non_npv_no_discount_1', 
                                            'Revenue_IAM_non_npv_no_discount_1', 'Revenue_Allied_non_npv_no_discount_1',
                                            'Revenue_OES_non_npv_discount_1', 'Revenue_IAM_non_npv_discount_1', 'Revenue_Allied_non_npv_discount_1', "Additional_cost_Scenario_1",
                                            'Revenue_Allied_discount_1', 'Revenue_OES_discount_1', 'Revenue_IAM_discount_1', "Total_Purchase_Qty_1",
                                            "Total_Inventory_Purchase_1", "Extended_purchase_cost_1", "total_forecast")
          
          Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
          Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.numeric), stringsAsFactors=FALSE)
          Scenario_1_current <- Scenario_1_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
          Scenario_1_current$Part_Nbr <- str_pad(Scenario_1_current$Part_Nbr, width=8, side="left", pad="0")
          
          
          incProgress(1/4, detail = "Running Calculations")
          
        } else
        {
          
          Scenario_1_current <- data.frame()
          
          for (j in (1:nrow(ATB_ADS))) {
            
            cat("\nsc_1_cur Part Number: ",j," : ", ATB_ADS[j,1])
            final_NPV <- 0
            Optimal_year_count <- 1
            LTBQ <- 0
            Year <- c()
            FCST <- c()
            NPV_CR <- c()
            transport_cost <- c()
            offsite_transport_cost <- c()
            offsite_labor_cost <- c()
            process_cost <- c()
            Curr_Inv <- round(as.numeric(scenario_1$Values[18]), 4)
            
            Material_cost_CR_list <- c()
            
            Buy_Qty <- BQ_S1
            Total_Purchase_Qty <- BQ_S1
            Buy_Qty <- Buy_Qty + Curr_Inv
            
            YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
            
            for(n in (1:30)){
              FCST[n] <- ATB_ADS[j,(YI-1+n)]
            }
            
            FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
            
            Total_FCST <- sum(FCST)
            
            ## Calculating First Buy, Last Sale and Last Buy
            First_buy <- 0
            Last_sale <- 0
            Last_buy <- 0
            flag <- 0
            
            
            if(FCST[1] != 0)
            {
              First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
            } else
            {
              First_buy <- 0
            }
            
            for(i in 1:30)
            {
              if(FCST[i] == 0 & flag != 1)
              {
                Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                flag = 1
              } 
            }
            if(flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
            }
            
            Last_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
            
            p_to_get_year = 0
            q_to_get_demand = 0
            
            for(i in 1:30)
            {
              q_to_get_demand = q_to_get_demand + FCST[i]
              if(Buy_Qty > q_to_get_demand)
              {
                p_to_get_year = p_to_get_year + 1
              } else if(Buy_Qty <= FCST[1])
              {
                remain <- Buy_Qty
                c = 1
                d = 0
                for(i in 1:12)
                {
                  d = d + (FCST[p_to_get_year+1] / 12)
                  if(remain > d)
                  {
                    c = c+1
                  }
                }
                
                FCST[p_to_get_year+1] <- remain
                Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
                break()
              }
            }
            
            if(Buy_Qty > FCST[1] & p_to_get_year < 30)
            {
              remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
              c = 1
              d = 0
              for(i in 1:12)
              {
                d = d + (FCST[p_to_get_year+1] / 12)
                if(remain > d)
                {
                  c = c+1
                }
              }
              
              FCST[p_to_get_year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
            } else if(p_to_get_year >= 30)
            {
              remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
              FCST[p_to_get_year+1] <- 0
              Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
              c <- 0
            }
            
            if(p_to_get_year < 29)
            {
              for(i in ((p_to_get_year + 2) : 30))
              {
                FCST[i] <- 0
              }
            }
            
            ###########
            
            iam_weight <- ATB_ADS$IAM_FRACTION[j]
            oes_weight <- ATB_ADS$OES_FRACTION[j]
            allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
            
            FCST_iam <- round(FCST * iam_weight, digits = 0)
            FCST_oes <- round(FCST * oes_weight, digits = 0)
            FCST_allied <- round(FCST * allied_weight, digits = 0)
            
            Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
            
            Diff_FCST <- Sum_FCST - Sum_Forecast
            
            
            if(Buy_Qty > 0)
            {
              
              if(oes_weight != 0)
              {
                index <- tail(which(FCST_oes!=0),1)
                
              } else if(iam_weight != 0)
              {
                index <- tail(which(FCST_iam!=0),1)
                
              } else if(allied_weight != 0)
              {
                index <- tail(which(FCST_allied!=0),1)
              } else
              {
                index <- 1
                
              }
            } else
            {
              index <- 1
            }
            
            if(length(index)==0)
            {
              index <- 1
            }
            
            flag_revenue_oes <- 0
            flag_revenue_iam <- 0
            flag_revenue_allied <- 0
            
            if(oes_weight == 0)
            {
              FCST_oes[index] <- Sum_FCST + 1000
              flag_revenue_oes <- 1
            }
            if(iam_weight == 0)
            {
              FCST_iam[index] <- Sum_FCST + 1000
              flag_revenue_iam <- 1
            }
            if(allied_weight == 0)
            {
              FCST_allied[index] <- Sum_FCST + 1000
              flag_revenue_allied <- 1
            }
            
            
            if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
            {
              FCST_oes[index] <- FCST_oes[index] - Diff_FCST
              
            } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
            {
              FCST_iam[index] <- FCST_iam[index] - Diff_FCST
              
            } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
            {
              FCST_allied[index] <- FCST_allied[index] - Diff_FCST
            }
            
            if(flag_revenue_oes == 1)
            {
              FCST_oes[index] <- 0
            }
            if(flag_revenue_iam == 1)
            {
              FCST_iam[index] <- 0
            }
            if(flag_revenue_allied == 1)
            {
              FCST_allied[index] <- 0
            }
            
            ###########          
            BQ <- Buy_Qty
            qty <- 0
            yr_qty <- c()
            
            for (i in (1:(p_to_get_year))) {
              s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
              qty <- qty + s
              yr_qty[i+1] <- s
            }
            
            
            
            yr_qty[1] <- (2*BQ - FCST[1])/2   
            yr_qty[p_to_get_year + 2] <- 0
            
            Total_storage_qty <- sum(yr_qty)
            
            Storage_Cost <- 0
            Storage_Cost_non_npv <- 0
            revenue <- 0
            revenue_non <- 0
            revenue_allied <- 0
            revenue_oes <- 0
            revenue_iam <- 0
            Revenue_OES_non_npv_no_discount_1 <- 0
            Revenue_IAM_non_npv_no_discount_1 <- 0
            Revenue_Allied_non_npv_no_discount_1 <- 0
            Revenue_OES_non_npv_discount_1 <- 0
            Revenue_IAM_non_npv_discount_1 <- 0
            Revenue_Allied_non_npv_discount_1 <- 0
            
            if(p_to_get_year > 0)
            {
              for(k in (1 : (p_to_get_year + 1)))
              {
                CR <- ((1-(0.15/12))^(k*12))
                revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
                revenue_allied <- revenue_allied + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
                revenue_oes <- revenue_oes + (FCST_oes[k] * CR * (Dealer_Price_OES))
                revenue_iam <- revenue_iam + (FCST_iam[k] * CR * (Dealer_Price_IAM))
                
                revenue_non <- revenue_non + ((FCST[k]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
                Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
                Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
                
              }
            }
            
            if(p_to_get_year == 0)
            {
              
              for(k in (1:1))
              {
                CR <- ((1-(0.15/12))^(k*12))
                revenue <- revenue + ((FCST[1]) * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
                revenue_allied <- revenue_allied + (FCST_allied[1] * CR * (Dealer_Price_Allied_Export))
                revenue_oes <- revenue_oes + (FCST_oes[1] * CR * (Dealer_Price_OES))
                revenue_iam <- revenue_iam + (FCST_iam[1] * CR * (Dealer_Price_IAM))
                
                revenue_non <- revenue_non + ((FCST[1]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
                Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
                Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
              }
            }
            
            Revenue_OES_non_npv_no_discount_1 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$OES_FRACTION[j]
            Revenue_IAM_non_npv_no_discount_1 <- Sum_Forecast * wd_price * ATB_ADS$IAM_FRACTION[j]
            Revenue_Allied_non_npv_no_discount_1 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$ALLIED_EXPORT_FRACTION[j]
            
            Revenue_OES_non_npv_discount_1 <- sum(FCST_oes) * Dealer_Price_OES
            Revenue_IAM_non_npv_discount_1 <- sum(FCST_iam) * Dealer_Price_IAM 
            Revenue_Allied_non_npv_discount_1 <- sum(FCST_allied) * Dealer_Price_Allied_Export
            
            revenue_non <- Revenue_OES_non_npv_discount_1 + Revenue_IAM_non_npv_discount_1 + Revenue_Allied_non_npv_discount_1
            
            offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
            
            Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
            Freight_cost <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost) * (1-(0.15/12))
            Freight_cost_non_npv <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost)
            
            Offsite_labour_cost <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
            Total_Processing_cost <- ((Onsite_procs_cpp1 * BQ) + Offsite_labour_cost) * (1-(0.15/12))
            Total_Processing_cost_non_npv <- ((Onsite_procs_cpp1  * BQ) + Offsite_labour_cost)
            
            package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
            package_cost_non_npv <- Average_Processing_cpp1 * BQ
            
            Material_cost <- (part_c_3 * BQ)*(1-(0.15/12))
            Material_cost_non_npv <- (part_c_3 * BQ)
            
            Total_transport_cost <- (Onsite_trans_cpp1 * BQ) * (1-(0.15/12))
            Total_offsite_transport_cost <- Offsite_trans_cost * (1-(0.15/12))
            Total_offsite_labor_cost <- Offsite_labour_cost * (1-(0.15/12))
            Total_transport_cost_non_npv <- (Onsite_trans_cpp1 * BQ)
            
            Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ) * (1-(0.15/12))
            Total_process_cost_non_npv <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ)
            
            Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + setup_cost + Material_cost
            revenue <- (revenue_allied + revenue_oes + revenue_iam)
            NPV_with_capital_rate <- revenue - Total_Expense
            
            Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + setup_cost +  Material_cost_non_npv
            NPV_non_npv <- revenue_non - Total_Expense_non_npv
            Total_Inventory_Purchase <- Buy_Qty
            
            scrap_amount <-  Buy_Qty - Total_FCST
            scrap_amount <- ifelse(scrap_amount < 0, 0, scrap_amount)
            Extended_purchase_cost <- BQ_S1 * part_c_3
            
            Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
            Scenario_1_current <- rbind(Scenario_1_current, c(ATB_ADS[j,1],Storage_Cost,Freight_cost,Total_Processing_cost,
                                                              Material_cost, Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                                              sum(FCST), Material_cost_non_npv, revenue_non, Total_transport_cost,Total_transport_cost_non_npv,
                                                              Total_offsite_transport_cost,Offsite_trans_cost, Total_offsite_labor_cost, Total_process_cost,
                                                              setup_cost, BQ_S1, scrap_amount, Storage_Cost_non_npv, Freight_cost_non_npv, Total_Processing_cost_non_npv,
                                                              add_cost, package_cost_non_npv, package_cost, Offsite_labour_cost, Total_process_cost_non_npv, Total_Expense_non_npv,
                                                              NPV_non_npv, Revenue_OES_non_npv_no_discount_1, Revenue_IAM_non_npv_no_discount_1, Revenue_Allied_non_npv_no_discount_1,
                                                              Revenue_OES_non_npv_discount_1, Revenue_IAM_non_npv_discount_1, Revenue_Allied_non_npv_discount_1,
                                                              revenue_allied, revenue_oes, revenue_iam, First_buy, Last_sale, Last_buy, Total_Purchase_Qty,
                                                              Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST))
            
            colnames(Scenario_1_current) <- c("Part_Nbr","Storage_Cost_Scenario_1","Transportation_Cost_Scenario_1","Processing_Cost_Scenario_1",
                                              "Part_Cost_Scenario_1","Expense_Scenario_1","Revenue_Scenario_1","NPV_Scenario_1","Buy_Quantity_Scenario_1",
                                              "Total_Forecast_Scenario_1", "Material_cost_non_npv_Scenario_1","Revenue_non_npv_Scenario_1", 
                                              "Total_transport_cost_Scenario_1","Total_transport_cost_non_npv_Scenario_1","Total_offsite_transport_cost_Scenario_1","Total_offsite_transport_cost_non_npv_Scenario_1","Total_offsite_labor_cost_Scenario_1",
                                              "Total_process_cost_Scenario_1", "Setup_cost_Scenario_1", "LTB_Buy_Quantity_Scenario_1", "Scrap_amount_Scenario_1",
                                              "Storage_Cost_non_npv_Scenario_1", "Transportation_cost_non_npv_Scenario_1", "Processing_Cost_non_npv_Scenario_1",
                                              "Additional_cost_Scenario_1", "Package_cost_non_npv_Scenario_1", "Package_cost_Scenario_1", "Total_offsite_labor_cost_non_npv_Scenario_1",
                                              "Total_process_cost_non_npv_Scenario_1", "Expense_non_npv_Scenario_1", "Profit_Non_NPV_Scenario_1", "Revenue_OES_non_npv_no_discount_1",
                                              "Revenue_IAM_non_npv_no_discount_1", "Revenue_Allied_non_npv_no_discount_1", "Revenue_OES_non_npv_discount_1", "Revenue_IAM_non_npv_discount_1",
                                              "Revenue_Allied_non_npv_discount_1", "Revenue_Allied_discount_1", "Revenue_OES_discount_1", "Revenue_IAM_discount_1",
                                              "First_buy", "Last_sale", "Last_buy", "Total_Purchase_Qty_1", "Total_Inventory_Purchase_1", "Extended_purchase_cost_1",
                                              "total_forecast")
            
          }
          Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
          Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.numeric), stringsAsFactors=FALSE)
          Scenario_1_current <- Scenario_1_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
          Scenario_1_current$Part_Nbr <- str_pad(Scenario_1_current$Part_Nbr, width=8, side="left", pad="0")
          
        }
        
        
        ########## Code for Scenario-1: Selldown calculation
        Selldown_NPV_Scenario_1 <- data.frame()
        Buy_Qty <- round(as.numeric(scenario_1$Values[18]), 4)
        
        for (j in (1:nrow(ATB_ADS))) {
          
          cat("\nsc_1_sell Part Number: ",j," : ", ATB_ADS[j,1])
          final_NPV <- 0
          Optimal_year_count <- 1
          LTBQ <- 0
          Year <- c()
          FCST <- c()
          NPV_CR <- c()
          Revenue_CR <- c()
          Expense <- c()
          Storage_cost_CR <- c()
          Freight_cost_CR <- c()
          Processing_cost_CR <- c()
          
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
          }
          
          FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
          
          p_to_get_year = 0
          q_to_get_demand = 0
          
          for(i in 1:30)
          {
            q_to_get_demand = q_to_get_demand + FCST[i]
            if(Buy_Qty > q_to_get_demand)
            {
              p_to_get_year = p_to_get_year + 1
            } else if(Buy_Qty <= FCST[1])
            {
              remain <- Buy_Qty
              c = 1
              d = 0
              for(i in 1:12)
              {
                d = d + (FCST[p_to_get_year+1] / 12)
                if(remain > d)
                {
                  c = c+1
                }
              }
              
              FCST[p_to_get_year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
              break()
            }
          }
          
          if(Buy_Qty > FCST[1] & p_to_get_year < 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
          } else if(p_to_get_year >= 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            FCST[p_to_get_year+1] <- 0
            Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
            c <- 0
          }
          
          if(p_to_get_year < 29)
          {
            for(i in ((p_to_get_year + 2) : 30))
            {
              FCST[i] <- 0
            }
          }
          
          ###########
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam_selldown <- round(FCST * iam_weight, digits = 0)
          FCST_oes_selldown <- round(FCST * oes_weight, digits = 0)
          FCST_allied_selldown <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam_selldown) + sum(FCST_oes_selldown) + sum(FCST_allied_selldown)
          
          Diff_FCST <- Sum_FCST - Sum_Forecast
          index <- 1
          
          if(Buy_Qty > 0 & Sum_Forecast > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes_selldown!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam_selldown!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied_selldown!=0),1)
            } else
            {
              index <- 1
            }
            
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes_selldown[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam_selldown[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied_selldown[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes_selldown[index] < FCST_iam_selldown[index] & FCST_oes_selldown[index] < FCST_allied_selldown[index] & oes_weight != 0)
          {
            FCST_oes_selldown[index] <- FCST_oes_selldown[index] - Diff_FCST
            
          } else if(FCST_iam_selldown[index] <= FCST_oes_selldown[index] & FCST_iam_selldown[index] <= FCST_allied_selldown[index] & iam_weight != 0)
          {
            FCST_iam_selldown[index] <- FCST_iam_selldown[index] - Diff_FCST
            
          } else if(FCST_allied_selldown[index] <= FCST_oes_selldown[index] & FCST_allied_selldown[index] <= FCST_iam_selldown[index] & allied_weight != 0)
          {
            FCST_allied_selldown[index] <- FCST_allied_selldown[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes_selldown[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam_selldown[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied_selldown[index] <- 0
          }
          
          ###########          
          
          
          BQ <- Buy_Qty
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(p_to_get_year))) {
            s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + s
            yr_qty[i+1] <- s
          }
          
          yr_qty[1] <- (2*BQ - FCST[1])/2        
          yr_qty[p_to_get_year + 2] <- 0
          
          Total_storage_qty <- sum(yr_qty)
          
          Storage_Cost <- 0
          Storage_Cost_non_npv <- 0
          revenue <- 0
          revenue_iam <- 0
          revenue_oes <- 0
          revenue_allied <- 0
          revenue_non_npv <- 0
          revenue_non_npv_iam <- 0
          revenue_non_npv_oes <- 0
          revenue_non_npv_allied <- 0
          
          if(p_to_get_year > 0)
          {
            
            for(k in (1 : (p_to_get_year + 1)))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              #revenue_non_npv <- revenue_non_npv + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              
              revenue_iam <- revenue_iam + (FCST_iam_selldown[k] * CR * (Dealer_Price_IAM))
              revenue_oes <- revenue_oes + (FCST_oes_selldown[k] * CR * (Dealer_Price_OES))
              revenue_allied <- revenue_allied + (FCST_allied_selldown[k] * CR * (Dealer_Price_Allied_Export))
              
              #revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[k] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
              #revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[k] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
              #revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[k] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
              #revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
              
              revenue_non_npv <- revenue_non_npv + (FCST[k] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
              
              Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
              
              
            }
          }
          
          if(p_to_get_year == 0)
          {
            
            for(k in 1 : 1)
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              #revenue_non_npv <- revenue_non_npv + (FCST[1] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              
              revenue_iam <- revenue_iam + (FCST_iam_selldown[1] * CR * (Dealer_Price_IAM))
              revenue_oes <- revenue_oes + (FCST_oes_selldown[1] * CR * (Dealer_Price_OES))
              revenue_allied <- revenue_allied + (FCST_allied_selldown[1] * CR * (Dealer_Price_Allied_Export))
              
              #revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[1] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
              #revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[1] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
              #revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[1] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
              #revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
              revenue_non_npv <- revenue_non_npv + (FCST[1] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
              Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
              
              
            }
          }
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
          Freight_cost <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost) * (1-(0.15/12))
          Freight_cost_non_npv <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost)
          
          Offsite_labour_cost <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          #Total_Processing_cost <- (((Onsite_procs_cpp1 ) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
          Total_Processing_cost <- (((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
          
          #Total_Processing_cost_non_npv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost)
          
          Total_Processing_cost_non_npv <- (((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ) + Offsite_labour_cost)
          
          package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
          package_cost_non_npv <- Average_Processing_cpp1 * BQ
          
          #Total_Processing_cost <- Total_Processing_cost - package_cost
          #Total_Processing_cost_non_npv <- Total_Processing_cost_non_npv - package_cost_non_npv
          
          Material_cost <- BQ * part_c_3 * (1-(0.15/12))
          Material_cost_non_npv <- BQ * part_c_3
          
          Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + Material_cost  + setup_cost + package_cost
          revenue <- revenue_iam + revenue_oes + revenue_allied
          NPV_with_capital_rate <- revenue - Total_Expense
          
          Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + Material_cost_non_npv + setup_cost + package_cost_non_npv
          
          NPV_with_capital_rate_non_npv <- revenue_non_npv - Total_Expense_non_npv
          
          Selldown_NPV_Scenario_1 <- data.frame(lapply(Selldown_NPV_Scenario_1, as.character), stringsAsFactors=FALSE)
          Selldown_NPV_Scenario_1 <- rbind(Selldown_NPV_Scenario_1, c(ATB_ADS[j,1], Material_cost, Storage_Cost,Freight_cost,Total_Processing_cost,
                                                                      Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                                                      Material_cost_non_npv, Storage_Cost_non_npv, Freight_cost_non_npv,
                                                                      Total_Processing_cost_non_npv, add_cost, package_cost_non_npv,
                                                                      setup_cost, package_cost, revenue_non_npv, NPV_with_capital_rate_non_npv,
                                                                      revenue_iam, revenue_oes, revenue_allied, revenue_non_npv_iam, revenue_non_npv_oes, revenue_non_npv_allied))
          
          colnames(Selldown_NPV_Scenario_1) <- c("Part_Nbr","Selldown_Material_cost_Scenario_1", "Selldown_Storage_Cost_Scenario_1",
                                                 "Selldown_Freight_cost_Scenario_1",
                                                 "Selldown_Processing_Cost_Scenario_1","Total_Expense_Scenario_1","Selldown_Revenue_Scenario_1",
                                                 "Selldown_NPV_Scenario_1","Total_BQ_Scenario_1", "Selldown_Material_cost_non_npv_Scenario_1", "Selldown_Storage_Cost_non_npv_Scenario_1",
                                                 "Selldown_Freight_cost_non_npv_Scenario_1", "Selldown_Processing_Cost_non_npv_Scenario_1", "Selldown_Additional_Cost_Scenario_1",
                                                 "Selldown_Package_Cost_non_npv_Scenario_1", "Selldown_Setup_Cost_Scenario_1", "Selldown_Package_Cost_Scenario_1",
                                                 "Selldown_Revenue_non_npv_Scenario_1", "Selldown_NPV_non_npv_Scenario_1", "Selldown_Revenue_Scenario_1_IAM", 
                                                 "Selldown_Revenue_Scenario_1_OES", "Selldown_Revenue_Scenario_1_Allied", "Selldown_Revenue_non_npv_Scenario_1_IAM",
                                                 "Selldown_Revenue_non_npv_Scenario_1_OES", "Selldown_Revenue_non_npv_Scenario_1_Allied")
          
        }
        Selldown_NPV_Scenario_1 <- data.frame(lapply(Selldown_NPV_Scenario_1, as.character), stringsAsFactors=FALSE)
        Selldown_NPV_Scenario_1 <- data.frame(lapply(Selldown_NPV_Scenario_1, as.numeric), stringsAsFactors=FALSE)
        Selldown_NPV_Scenario_1 <- Selldown_NPV_Scenario_1 %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        
        Selldown_NPV_Scenario_1$Part_Nbr <- str_pad(Selldown_NPV_Scenario_1$Part_Nbr, width=8, side="left", pad="0")
        
        incProgress(1/4, detail = "Running Calculations")
        
        shinyjs::show("line_1")
        output$line_1<- renderHighchart({
          
          graph_1 <- NPV_Data_1
          
          graph_1 <- as.data.frame(graph_1)
          graph_1$Buy_quantity_list <- as.numeric(as.character(graph_1$Buy_quantity_list))
          graph_1$NPV_CR_list <- as.numeric(as.character(graph_1$NPV_CR_list))
          
          highchart() %>% 
            hc_title(text="NPV variation with Buy Qty") %>%
            hc_chart(type = "line") %>%
            hc_xAxis(title=list(text="Buy Quantity"),categories= as.vector(graph_1$Buy_quantity_list))  %>%
            hc_yAxis(title=list(text="NPV"))  %>% 
            hc_add_theme(hc_theme_sandsignika()) %>%
            hc_add_series(name = "NPV", data = as.vector(graph_1$NPV_CR_list))
          
        })
        
        incProgress(1/4, detail = "Running Calculations")
        
        ## Creating Download Report of Scenario-1 
        result_scenario_1 <- merge(Scenario_1_current, Scenario_1_optimal, by = "Part_Nbr")
        result_scenario_1 <- merge(result_scenario_1, Selldown_NPV_Scenario_1, by = "Part_Nbr")
        result_scenario_1 <- merge(result_scenario_1, t_scenario_1, by = "Part_Nbr")
        
        result_scenario_1 <- result_scenario_1 %>% select(Part_Nbr, NPV_Scenario_1,
                                                          Selldown_NPV_Scenario_1,Selldown_NPV_non_npv_Scenario_1, Revenue_Scenario_1,Revenue_non_npv_Scenario_1,Part_Cost_Scenario_1,Material_cost_non_npv_Scenario_1,
                                                          Setup_cost_Scenario_1 ,Total_transport_cost_Scenario_1,Total_transport_cost_non_npv_Scenario_1,Storage_Cost_Scenario_1,Storage_Cost_non_npv_Scenario_1,
                                                          Total_process_cost_Scenario_1,  Total_process_cost_non_npv_Scenario_1,Package_cost_Scenario_1,Package_cost_non_npv_Scenario_1,
                                                          Total_offsite_labor_cost_Scenario_1,Total_offsite_labor_cost_non_npv_Scenario_1,Total_offsite_transport_cost_Scenario_1,Total_offsite_transport_cost_non_npv_Scenario_1, 
                                                          Additional_Cost_1,Selldown_Revenue_Scenario_1,Selldown_Revenue_non_npv_Scenario_1,
                                                          Selldown_Material_cost_Scenario_1,Selldown_Material_cost_non_npv_Scenario_1,
                                                          Selldown_Freight_cost_Scenario_1,Selldown_Freight_cost_non_npv_Scenario_1,Selldown_Storage_Cost_Scenario_1,Selldown_Storage_Cost_non_npv_Scenario_1, Selldown_Processing_Cost_Scenario_1,
                                                          Selldown_Processing_Cost_non_npv_Scenario_1,Selldown_Package_Cost_Scenario_1,Selldown_Package_Cost_non_npv_Scenario_1,
                                                          Total_Inventory,
                                                          First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_1, LTB_Buy_Quantity_Scenario_1,
                                                          Total_Purchase_Qty_1, Total_Forecast_Scenario_1,
                                                          Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_Material_Cost_Scenario_1, Optimal_Setup_cost_Scenario_1,
                                                          Optimal_Total_transport_cost_Scenario_1,
                                                          Optimal_Total_offsite_transport_cost_Scenario_1, Optimal_Storage_Cost_Scenario_1, Optimal_Total_process_cost_Scenario_1,
                                                          Optimal_Packaging_cost_Scenario_1,
                                                          Optimal_Total_offsite_labor_cost_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1,
                                                          Extended_purchase_cost_1,Proposed_Dealer_Price, Proposed_WD_Price, Material_Cost, MOQ,Standard_Pack,Setup_Cost_s1,Additional_Cost_s1,Monthly_square_feet_cpp,
                                                          Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                                          Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp)
        
        result_scenario_1$Part_Nbr <- str_pad(result_scenario_1$Part_Nbr, width=8, side="left", pad="0")
        write.csv(result_scenario_1, file = "Result_scenario_1.csv", row.names = FALSE)
        
        
        output$downloadData_s_1 <- downloadHandler(
          filename = function() {
            paste("Part_view_Scenario-1",".csv", sep="")
          },
          content = function(file) {
            scenario_1 <- result_scenario_1
            scenario_1$Part_Nbr <- str_pad(scenario_1$Part_Nbr, width=8, side="left", pad="0")
            scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                                     lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                     lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                     lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                     formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                                     lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                     lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                     lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                     lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                     stringsAsFactors = FALSE)
            
            colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                      "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                      "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                      "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                      "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                      "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                      "Current Inventory",
                                      "First Buy","Last Buy","Last Sale","Scrap Scenario-1",  "Entered Buy Quantity Scenario-1",
                                      "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                      "Optimal NPV  Scenario-1",
                                      "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                      "Optimal Offsite transport cost Scenario-1",
                                      "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                      "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                      "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                      "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
            
            write.csv(scenario_1, file)
          },
          contentType = "csv"
        )
        
        ## Refreshing DATA at the back end
        spl_4 <- Scenario_1_current 
        spl_4$Part_Nbr <- str_pad(spl_4$Part_Nbr, width=8, side="left", pad="0")
        spl_5 <- Scenario_1_optimal
        spl_5$Part_Nbr <- str_pad(spl_5$Part_Nbr, width=8, side="left", pad="0")
        spl_6 <- Selldown_NPV_Scenario_1
        spl_6$Part_Nbr <- str_pad(spl_6$Part_Nbr, width=8, side="left", pad="0")
        spl_x1 <- t_scenario_1
        spl_45 <- merge(spl_4, spl_5, by = "Part_Nbr")
        spl_456 <- merge(spl_45, spl_6, by = "Part_Nbr")
        spl_456 <- merge(spl_456, spl_x1, by = "Part_Nbr")
        
        global_scenario_1$df_data_sce_1 <- spl_456
        
        spl_456_result <- spl_456 %>% select(Part_Nbr, NPV_Scenario_1, Selldown_NPV_Scenario_1, Revenue_Scenario_1, Revenue_non_npv_Scenario_1,
                                             Optimal_NPV_Scenario_1, Optimal_ATB_Quantity_Scenario_1,total_forecast)
        
        spl_456_result <- as.data.frame(spl_456_result)
        spl_456_result <- data.frame(lapply(spl_456_result, as.character), stringsAsFactors=FALSE)
        spl_456_result <- data.frame(lapply(spl_456_result, as.numeric), stringsAsFactors=FALSE)
        
        shinyjs::show("analysis_sce_1")
        
        if (input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
        {
          scenario_1_display <- read.csv("spl_456_result.csv", stringsAsFactors = FALSE)
          
          scenario_1_display[scenario_1_display$Part_Nbr == spl_456_result$Part_Nbr[1], ] <- spl_456_result[1,]
          write.csv(scenario_1_display, file = "spl_456_result.csv", row.names = FALSE)
          
          scenario_1_display$Part_Nbr <- str_pad(scenario_1_display$Part_Nbr, width=8, side="left", pad="0")
          
          output$analysis_sce_1 <- renderHotable({
            scenario_1_display <- data.frame(Part_Nbr = scenario_1_display[,1], lapply(scenario_1_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                             formatC(scenario_1_display[,7] , big.mark=",", digits=0, format="f"),formatC(scenario_1_display[,8] , big.mark=",", digits=0, format="f")  ,stringsAsFactors = FALSE)
            colnames(scenario_1_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
            scenario_1_display
          })
        } else
        {
          scenario_1_display <- read.csv("spl_123_result_s1.csv", stringsAsFactors = FALSE)
          scenario_1_display[scenario_1_display$Part_Nbr == spl_456_result$Part_Nbr[1], ] <- spl_456_result[1,]
          
          write.csv(scenario_1_display, file = "spl_123_result_s1.csv", row.names = FALSE)
          scenario_1_display$Part_Nbr <- str_pad(scenario_1_display$Part_Nbr, width=8, side="left", pad="0")
          
          output$analysis_sce_1 <- renderHotable({
            scenario_1_display <- data.frame(Part_Nbr = scenario_1_display[,1], lapply(scenario_1_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                             formatC(scenario_1_display[,7] , big.mark=",", digits=0, format="f"),formatC(scenario_1_display[,8] , big.mark=",", digits=0, format="f")  ,stringsAsFactors = FALSE)
            
            colnames(scenario_1_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
            scenario_1_display
          })
          
        }
        reflect_back_scenario_1 <- spl_456 %>% select(Part_Nbr, NPV_Scenario_1,
                                                      Selldown_NPV_Scenario_1,Selldown_NPV_non_npv_Scenario_1, Revenue_Scenario_1,Revenue_non_npv_Scenario_1,Part_Cost_Scenario_1,Material_cost_non_npv_Scenario_1,
                                                      Setup_cost_Scenario_1 ,Total_transport_cost_Scenario_1,Total_transport_cost_non_npv_Scenario_1,Storage_Cost_Scenario_1,Storage_Cost_non_npv_Scenario_1,
                                                      Total_process_cost_Scenario_1,  Total_process_cost_non_npv_Scenario_1,Package_cost_Scenario_1,Package_cost_non_npv_Scenario_1,
                                                      Total_offsite_labor_cost_Scenario_1,Total_offsite_labor_cost_non_npv_Scenario_1,Total_offsite_transport_cost_Scenario_1,Total_offsite_transport_cost_non_npv_Scenario_1, 
                                                      Additional_Cost_1,Selldown_Revenue_Scenario_1,Selldown_Revenue_non_npv_Scenario_1,
                                                      Selldown_Material_cost_Scenario_1,Selldown_Material_cost_non_npv_Scenario_1,
                                                      Selldown_Freight_cost_Scenario_1,Selldown_Freight_cost_non_npv_Scenario_1,Selldown_Storage_Cost_Scenario_1,Selldown_Storage_Cost_non_npv_Scenario_1, Selldown_Processing_Cost_Scenario_1,
                                                      Selldown_Processing_Cost_non_npv_Scenario_1,Selldown_Package_Cost_Scenario_1,Selldown_Package_Cost_non_npv_Scenario_1,
                                                      Total_Inventory,
                                                      First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_1, LTB_Buy_Quantity_Scenario_1,
                                                      Total_Purchase_Qty_1, Total_Forecast_Scenario_1,
                                                      Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_Material_Cost_Scenario_1, Optimal_Setup_cost_Scenario_1,
                                                      Optimal_Total_transport_cost_Scenario_1,
                                                      Optimal_Total_offsite_transport_cost_Scenario_1, Optimal_Storage_Cost_Scenario_1, Optimal_Total_process_cost_Scenario_1,
                                                      Optimal_Packaging_cost_Scenario_1,
                                                      Optimal_Total_offsite_labor_cost_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1,
                                                      Extended_purchase_cost_1,Proposed_Dealer_Price, Proposed_WD_Price, Material_Cost, MOQ,Standard_Pack,Setup_Cost_s1,Additional_Cost_s1,Monthly_square_feet_cpp,
                                                      Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                                      Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp)
        
        report_update <- global_scenario_1_down$df_data_scenario_1_down
        report_update$Part_Nbr <- str_pad(report_update$Part_Nbr, width=8, side="left", pad="0")
        report_update[report_update$Part_Nbr == reflect_back_scenario_1$Part_Nbr[1], 2:72] <- reflect_back_scenario_1[1, 2:72]
        global_scenario_1_down$df_data_scenario_1_down <- report_update
        
        
        
        ## Generating income report for Scenario-1
        
        income_report_scenario_1 <- c(1:52)
        income_report_scenario_1<- as.data.frame(income_report_scenario_1)
        income_report_scenario_1$Fields <-  c('Dealer Price', 'Wd price', 'Allied Price', 'Dealer discount %', 'Wd discount %', 'Allied Discount %', 'Net Dealer', 'Net Wd',
                                              'Net Allied',
                                              'Lifetime Revenue(Non NPV)',
                                              'Lifetime Revenue(NPV)',
                                              'Sell Down Revenue(Non NPV) - OES',
                                              'Sell Down Revenue(Non NPV) - IAM',
                                              'Sell Down Revenue(Non NPV) - Allied/Export',
                                              'Sell Down Revenue(Non NPV',
                                              'Selldown Revenue (NPV)',
                                              'Material Cost(Non NPV)',
                                              'Material Cost(NPV)',
                                              'Sell Down Material Non Npv',
                                              'Sell Down Material (NPV)',
                                              'Transportation Cost(NON NPV)',
                                              'Transportation Cost(NPV)',
                                              'Sell Down Transportation cost (Non NPV)',
                                              'Sell Down Transportation cost (NPV)',
                                              'Labor Cost(NON NPV)',
                                              'Labor Cost(NPV)',
                                              'Sell Down Labor (NON NPV)',
                                              'Sell Down Labor (NPV)',
                                              'Storage Cost (Non NPV)',
                                              'Storage Cost(NPV)',
                                              'Sell Down Storage(Non NPV)',
                                              'Sell Down Storage(NPV)',
                                              'Packaging Cost(NON NPV)',
                                              'Packaging Cost(NPV)',
                                              'Sell Down Packaging Cost (NON NPV)',
                                              'Sell Down Packaging Cost (NPV)',
                                              'Set up Cost (NON NPV)',
                                              'Setup Cost(NPV)',
                                              'Additional Cost($)',
                                              'Total Expense(NON NPV)',
                                              'Total Expense(NPV)',
                                              'Profit (Non NPV)',
                                              'NPV',
                                              'Selldown (non Npv)',
                                              'Selldown NPV',
                                              'National Inventory',
                                              'Total Purchase',
                                              'Total Inventory and Purchase',
                                              'Total Sales',
                                              'Scrap',
                                              'MOQ',
                                              'Standard Pack')
        
        sales_oes <- sum(FCST_oes)
        sales_iam <- sum(FCST_iam)
        sales_allied <- sum(FCST_allied)
        
        
        inventory_oes <- round(Current_Inventory * ATB_ADS$OES_FRACTION[1], digits = 0)
        inventory_iam <- round(Current_Inventory * ATB_ADS$IAM_FRACTION[1], digits = 0)
        inventory_allied <- round(Current_Inventory * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        if(is.na(BQ_S1))
        {
          
          purchase_oes <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
          purchase_iam <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
          purchase_allied <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
          
          ## Calculating the difference in sales, inventory and purchase before and after rounding
          diff_sales <- Scenario_1_current$Total_Forecast_Scenario_1[1] - (sales_oes + sales_iam + sales_allied)
          diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
          diff_purchase <- ceiling(Scenario_1_current$Buy_Quantity_Scenario_1[1]) - (purchase_oes + purchase_iam + purchase_allied)
          
          ## Calling function to adjust the rounding error in sales, purcahse and inventory
          sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
          sales_values <- unlist(sales_values)
          sales_oes <- sales_values[1]
          sales_iam <- sales_values[2]
          sales_allied <- sales_values[3]
          
          inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
          inventory_values <- unlist(inventory_values)
          inventory_oes <- inventory_values[1]
          inventory_iam <- inventory_values[2]
          inventory_allied <- inventory_values[3]
          
          purchase_values <- Round_fn(purchase_oes, purchase_iam, purchase_allied, diff_purchase)
          purchase_values <- unlist(purchase_values)
          purchase_oes <- purchase_values[1]
          purchase_iam <- purchase_values[2]
          purchase_allied <- purchase_values[3]
          
          purchase_inventory <- ceiling((Current_Inventory + Scenario_1_current$Buy_Quantity_Scenario_1[1]))
          purchase_inventory_oes <- inventory_oes + purchase_oes
          purchase_inventory_iam <- inventory_iam + purchase_iam
          purchase_inventory_allied <- inventory_allied + purchase_allied
          income_report_scenario_1$income_report_scenario_1 <- NULL
          
          
          income_report_scenario_1$Per_unit <- c(Scenario_1_optimal$Proposed_Dealer_Price_1[1], Scenario_1_optimal$Proposed_Wd_Price_1[1], 
                                                 Scenario_1_optimal$Proposed_Dealer_Price_1[1], ATB_ADS$Discount_oes_percent[1], 
                                                 ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                                 Scenario_1_current$Revenue_OES_non_npv_discount_1[1], Scenario_1_current$Revenue_IAM_non_npv_discount_1[1], 
                                                 Scenario_1_current$Revenue_Allied_non_npv_discount_1[1], 
                                                 Scenario_1_current$Revenue_non_npv_Scenario_1[1], Scenario_1_current$Revenue_Scenario_1[1],
                                                 Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_OES[1], Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_IAM[1],
                                                 Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_Allied[1],
                                                 Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1[1],
                                                 Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1[1], part_c_3, 
                                                 Scenario_1_current$Part_Cost_Scenario_1[1],
                                                 part_c_3, Selldown_NPV_Scenario_1$Selldown_Material_cost_Scenario_1[1], 
                                                 Scenario_1_current$Transportation_cost_non_npv_Scenario_1[1], Scenario_1_current$Transportation_Cost_Scenario_1[1], 
                                                 Selldown_NPV_Scenario_1$Selldown_Freight_cost_non_npv_Scenario_1[1],
                                                 Selldown_NPV_Scenario_1$Selldown_Freight_cost_Scenario_1[1], 
                                                 (Scenario_1_current$Total_offsite_labor_cost_non_npv_Scenario_1[1] + Scenario_1_current$Total_process_cost_non_npv_Scenario_1[1]), 
                                                 (Scenario_1_current$Total_offsite_labor_cost_Scenario_1[1] + Scenario_1_current$Total_process_cost_Scenario_1[1]),
                                                 Selldown_NPV_Scenario_1$Selldown_Processing_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Processing_Cost_Scenario_1[1],
                                                 Scenario_1_current$Storage_Cost_non_npv_Scenario_1[1],
                                                 Scenario_1_current$Storage_Cost_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Storage_Cost_non_npv_Scenario_1[1], 
                                                 Selldown_NPV_Scenario_1$Selldown_Storage_Cost_Scenario_1[1],
                                                 Scenario_1_current$Package_cost_non_npv_Scenario_1[1], Scenario_1_current$Package_cost_Scenario_1[1], 
                                                 Selldown_NPV_Scenario_1$Selldown_Package_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Package_Cost_Scenario_1[1],
                                                 Scenario_1_current$Setup_cost_Scenario_1[1], Scenario_1_current$Setup_cost_Scenario_1[1],
                                                 Scenario_1_current$Additional_cost_Scenario_1[1], Scenario_1_current$Expense_non_npv_Scenario_1[1], Scenario_1_current$Expense_Scenario_1[1],
                                                 Scenario_1_current$Profit_Non_NPV_Scenario_1[1], Scenario_1_current$NPV_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_NPV_non_npv_Scenario_1[1],
                                                 Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1], Current_Inventory, ceiling(Scenario_1_current$Buy_Quantity_Scenario_1[1]),
                                                 ceiling((Current_Inventory + Scenario_1_current$Buy_Quantity_Scenario_1[1])),
                                                 Scenario_1_current$Total_Forecast_Scenario_1[1], Scenario_1_current$Scrap_amount_Scenario_1[1], moq,
                                                 std_p)
        } else
        {
          purchase_inventory <- Scenario_1_current$Buy_Quantity_Scenario_1[1]
          purchase_inventory_oes <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
          purchase_inventory_iam <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
          purchase_inventory_allied <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
          
          ## Calculating the difference in sales, inventory and purchase before and after rounding
          diff_sales <- Scenario_1_current$Total_Forecast_Scenario_1[1] - (sales_oes + sales_iam + sales_allied)
          diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
          diff_purchase_inventory <- ceiling(Scenario_1_current$Buy_Quantity_Scenario_1[1]) - (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied)
          
          ## Calling function to adjust the rounding error in sales, purcahse and inventory
          sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
          sales_values <- unlist(sales_values)
          sales_oes <- sales_values[1]
          sales_iam <- sales_values[2]
          sales_allied <- sales_values[3]
          
          
          
          inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
          inventory_values <- unlist(inventory_values)
          inventory_oes <- inventory_values[1]
          inventory_iam <- inventory_values[2]
          inventory_allied <- inventory_values[3]
          
          purchase_inventory_values <- Round_fn(purchase_inventory_oes, purchase_inventory_iam, purchase_inventory_allied, diff_purchase_inventory)
          purchase_inventory_values <- unlist(purchase_inventory_values)
          purchase_inventory_oes <- purchase_inventory_values[1]
          purchase_inventory_iam <- purchase_inventory_values[2]
          purchase_inventory_allied <- purchase_inventory_values[3]
          
          purchase_values <- Scenario_1_current$Buy_Quantity_Scenario_1[1] - Current_Inventory
          purchase_oes <- purchase_inventory_oes - inventory_oes
          purchase_iam <- purchase_inventory_iam - inventory_iam
          purchase_allied <- purchase_inventory_allied - inventory_allied
          
          income_report_scenario_1$income_report_scenario_1 <- NULL
          
          
          income_report_scenario_1$Per_unit <- c(Scenario_1_optimal$Proposed_Dealer_Price_1[1], Scenario_1_optimal$Proposed_Wd_Price_1[1], 
                                                 Scenario_1_optimal$Proposed_Dealer_Price_1[1], ATB_ADS$Discount_oes_percent[1], 
                                                 ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                                 Scenario_1_current$Revenue_OES_non_npv_discount_1[1], Scenario_1_current$Revenue_IAM_non_npv_discount_1[1], 
                                                 Scenario_1_current$Revenue_Allied_non_npv_discount_1[1], 
                                                 Scenario_1_current$Revenue_non_npv_Scenario_1[1], Scenario_1_current$Revenue_Scenario_1[1],
                                                 Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_OES[1], Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_IAM[1],
                                                 Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_Allied[1],
                                                 Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1[1],
                                                 Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1[1], part_c_3, 
                                                 Scenario_1_current$Part_Cost_Scenario_1[1],
                                                 part_c_3, Selldown_NPV_Scenario_1$Selldown_Material_cost_Scenario_1[1], 
                                                 Scenario_1_current$Transportation_cost_non_npv_Scenario_1[1], Scenario_1_current$Transportation_Cost_Scenario_1[1], 
                                                 Selldown_NPV_Scenario_1$Selldown_Freight_cost_non_npv_Scenario_1[1],
                                                 Selldown_NPV_Scenario_1$Selldown_Freight_cost_Scenario_1[1], 
                                                 (Scenario_1_current$Total_offsite_labor_cost_non_npv_Scenario_1[1] + Scenario_1_current$Total_process_cost_non_npv_Scenario_1[1]), 
                                                 (Scenario_1_current$Total_offsite_labor_cost_Scenario_1[1] + Scenario_1_current$Total_process_cost_Scenario_1[1]),
                                                 Selldown_NPV_Scenario_1$Selldown_Processing_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Processing_Cost_Scenario_1[1],
                                                 Scenario_1_current$Storage_Cost_non_npv_Scenario_1[1],
                                                 Scenario_1_current$Storage_Cost_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Storage_Cost_non_npv_Scenario_1[1], 
                                                 Selldown_NPV_Scenario_1$Selldown_Storage_Cost_Scenario_1[1],
                                                 Scenario_1_current$Package_cost_non_npv_Scenario_1[1], Scenario_1_current$Package_cost_Scenario_1[1], 
                                                 Selldown_NPV_Scenario_1$Selldown_Package_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Package_Cost_Scenario_1[1],
                                                 Scenario_1_current$Setup_cost_Scenario_1[1], Scenario_1_current$Setup_cost_Scenario_1[1],
                                                 Scenario_1_current$Additional_cost_Scenario_1[1], Scenario_1_current$Expense_non_npv_Scenario_1[1], Scenario_1_current$Expense_Scenario_1[1],
                                                 Scenario_1_current$Profit_Non_NPV_Scenario_1[1], Scenario_1_current$NPV_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_NPV_non_npv_Scenario_1[1],
                                                 Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1], Current_Inventory, (purchase_oes + purchase_iam + purchase_allied),
                                                 (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied),
                                                 Scenario_1_current$Total_Forecast_Scenario_1[1], Scenario_1_current$Scrap_amount_Scenario_1[1], moq,
                                                 std_p)
        }
        
        income_report_scenario_1$Per_unit[c(10:11)] <- income_report_scenario_1$Per_unit[c(10:11)] / Scenario_1_current$Total_Forecast_Scenario_1[1]
        
        div_oes <- ifelse(inventory_oes > sales_oes, sales_oes, inventory_oes)
        div_iam <- ifelse(inventory_iam > sales_iam, sales_iam, inventory_iam)
        div_allied <- ifelse(inventory_allied > sales_allied, sales_allied, inventory_allied)
        div_inventory <- ifelse(Current_Inventory > Scenario_1_current$Total_Forecast_Scenario_1, Scenario_1_current$Total_Forecast_Scenario_1, Current_Inventory)
        
        income_report_scenario_1$Per_unit[c(15:16)] <- income_report_scenario_1$Per_unit[c(15:16)] / div_inventory
        income_report_scenario_1$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] <- income_report_scenario_1$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] / purchase_inventory
        income_report_scenario_1$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] <- income_report_scenario_1$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] / Current_Inventory
        income_report_scenario_1$Per_unit <- ifelse(is.nan(income_report_scenario_1$Per_unit), 0, income_report_scenario_1$Per_unit)
        
        income_report_scenario_1$OES <- 0
        income_report_scenario_1$IAM <- 0
        income_report_scenario_1$Allied_export <- 0
        income_report_scenario_1$Total <- 0
        
        income_report_scenario_1$OES[1] <- income_report_scenario_1$Per_unit[1] * sales_oes
        income_report_scenario_1$OES[4] <- (ATB_ADS$Discount_oes_percent/100) * income_report_scenario_1$OES[1]
        income_report_scenario_1$OES[7] <- income_report_scenario_1$OES[1] - income_report_scenario_1$OES[4]
        income_report_scenario_1$Per_unit[7] <- income_report_scenario_1$OES[7] / sales_oes
        income_report_scenario_1$OES[10] <-  income_report_scenario_1$OES[7]
        
        income_report_scenario_1$IAM[2] <- income_report_scenario_1$Per_unit[2] * sales_iam
        income_report_scenario_1$IAM[5] <- (ATB_ADS$Discount_iam_percent/100) * income_report_scenario_1$IAM[2]
        income_report_scenario_1$IAM[8] <- income_report_scenario_1$IAM[2] - income_report_scenario_1$IAM[5]
        income_report_scenario_1$Per_unit[8] <- income_report_scenario_1$IAM[8] / sales_iam
        income_report_scenario_1$IAM[10] <-  income_report_scenario_1$IAM[8]
        
        income_report_scenario_1$Allied_export[3] <- income_report_scenario_1$Per_unit[3] * sales_allied
        income_report_scenario_1$Allied_export[6] <- (ATB_ADS$Discount_allied_export_percent/100) * income_report_scenario_1$Allied_export[3]
        income_report_scenario_1$Allied_export[9] <- income_report_scenario_1$Allied_export[3] - income_report_scenario_1$Allied_export[6]
        income_report_scenario_1$Per_unit[9] <- income_report_scenario_1$Allied_export[9] / sales_allied
        income_report_scenario_1$Allied_export[10] <-  income_report_scenario_1$Allied_export[9]
        
        income_report_scenario_1$Per_unit[12] <- income_report_scenario_1$Per_unit[7]
        income_report_scenario_1$Per_unit[13] <- income_report_scenario_1$Per_unit[8]
        income_report_scenario_1$Per_unit[14] <- income_report_scenario_1$Per_unit[9]
        
        income_report_scenario_1$OES[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] <- income_report_scenario_1$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] * purchase_inventory_oes
        
        income_report_scenario_1$OES[11:16] <-c( Scenario_1_current$Revenue_OES_discount_1[1],(income_report_scenario_1$Per_unit[12] * div_oes), 0,0,
                                                 (income_report_scenario_1$Per_unit[12] * div_oes),
                                                 Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1_OES[1])
        
        income_report_scenario_1$OES[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_1$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_oes
        income_report_scenario_1$OES[44] <- income_report_scenario_1$OES[15] - sum(income_report_scenario_1$OES[c(19,23,27,31,35)])
        income_report_scenario_1$OES[45] <- income_report_scenario_1$OES[16] - sum(income_report_scenario_1$OES[c(20,24,28,32,36)])
        
        income_report_scenario_1$OES[c(46:49)] <- c(inventory_oes, purchase_oes, purchase_inventory_oes, sales_oes)
        
        income_report_scenario_1$OES[40] <- income_report_scenario_1$OES[17] + income_report_scenario_1$OES[21] + income_report_scenario_1$OES[25] + income_report_scenario_1$OES[29] + income_report_scenario_1$OES[33] + income_report_scenario_1$OES[37] + income_report_scenario_1$OES[39]
        income_report_scenario_1$OES[41] <- income_report_scenario_1$OES[18] + income_report_scenario_1$OES[22] + income_report_scenario_1$OES[26] + income_report_scenario_1$OES[30] + income_report_scenario_1$OES[34] + income_report_scenario_1$OES[38] + income_report_scenario_1$OES[39]
        
        income_report_scenario_1$OES[42] <- income_report_scenario_1$OES[10] - income_report_scenario_1$OES[40]
        income_report_scenario_1$OES[43] <- income_report_scenario_1$OES[11] - income_report_scenario_1$OES[41]
        
        ##
        income_report_scenario_1$IAM[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_1$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_iam
        
        income_report_scenario_1$IAM[11:16] <-c(Scenario_1_current$Revenue_IAM_discount_1[1], 0, (income_report_scenario_1$Per_unit[13] * div_iam), 0,
                                                (income_report_scenario_1$Per_unit[13] * div_iam),
                                                Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1_IAM[1])
        
        income_report_scenario_1$IAM[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_1$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_iam
        income_report_scenario_1$IAM[44] <- income_report_scenario_1$IAM[15] - sum(income_report_scenario_1$IAM[c(19,23,27,31,35)])
        income_report_scenario_1$IAM[45] <- income_report_scenario_1$IAM[16] - sum(income_report_scenario_1$IAM[c(20,24,28,32,36)])
        
        income_report_scenario_1$IAM[c(46:49)] <- c(inventory_iam, purchase_iam, purchase_inventory_iam, sales_iam)
        
        income_report_scenario_1$IAM[40] <- income_report_scenario_1$IAM[17] + income_report_scenario_1$IAM[21] + income_report_scenario_1$IAM[25] + income_report_scenario_1$IAM[29] + income_report_scenario_1$IAM[33] + income_report_scenario_1$IAM[37] + income_report_scenario_1$IAM[39]
        income_report_scenario_1$IAM[41] <- income_report_scenario_1$IAM[18] + income_report_scenario_1$IAM[22] + income_report_scenario_1$IAM[26] + income_report_scenario_1$IAM[30] + income_report_scenario_1$IAM[34] + income_report_scenario_1$IAM[38] + income_report_scenario_1$IAM[39]
        income_report_scenario_1$IAM[42] <- income_report_scenario_1$IAM[10] - income_report_scenario_1$IAM[40]
        income_report_scenario_1$IAM[43] <- income_report_scenario_1$IAM[11] - income_report_scenario_1$IAM[41]
        
        ####
        income_report_scenario_1$Allied_export[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_1$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_allied
        income_report_scenario_1$Allied_export[11:16] <-c( Scenario_1_current$Revenue_Allied_discount_1[1], 0, 0, (income_report_scenario_1$Per_unit[14] * div_allied),
                                                           (income_report_scenario_1$Per_unit[14] * div_allied),
                                                           Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1_Allied[1])
        
        income_report_scenario_1$Allied_export[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_1$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_allied
        income_report_scenario_1$Allied_export[44] <- income_report_scenario_1$Allied_export[15] - sum(income_report_scenario_1$Allied_export[c(19,23,27,31,35)])
        income_report_scenario_1$Allied_export[45] <- income_report_scenario_1$Allied_export[16] - sum(income_report_scenario_1$Allied_export[c(20,24,28,32,36)])
        
        income_report_scenario_1$Allied_export[c(46:49)] <- c(inventory_allied, purchase_allied, purchase_inventory_allied, sales_allied)
        
        income_report_scenario_1$Allied_export[40] <- income_report_scenario_1$Allied_export[17] + income_report_scenario_1$Allied_export[21] + income_report_scenario_1$Allied_export[25] + income_report_scenario_1$Allied_export[29] + income_report_scenario_1$Allied_export[33] + income_report_scenario_1$Allied_export[37] + income_report_scenario_1$Allied_export[39]
        income_report_scenario_1$Allied_export[41] <- income_report_scenario_1$Allied_export[18] + income_report_scenario_1$Allied_export[22] + income_report_scenario_1$Allied_export[26] + income_report_scenario_1$Allied_export[30] + income_report_scenario_1$Allied_export[34] + income_report_scenario_1$Allied_export[38] + income_report_scenario_1$Allied_export[39]
        
        income_report_scenario_1$Allied_export[42] <- income_report_scenario_1$Allied_export[10] - income_report_scenario_1$Allied_export[40]
        income_report_scenario_1$Allied_export[43] <- income_report_scenario_1$Allied_export[11] - income_report_scenario_1$Allied_export[41]
        
        income_report_scenario_1$Per_unit <- ifelse(is.nan(income_report_scenario_1$Per_unit), 0, income_report_scenario_1$Per_unit)
        income_report_scenario_1$OES <- ifelse(is.nan(income_report_scenario_1$OES), 0, income_report_scenario_1$OES)
        income_report_scenario_1$IAM <- ifelse(is.nan(income_report_scenario_1$IAM), 0, income_report_scenario_1$IAM)
        income_report_scenario_1$Allied_export <- ifelse(is.nan(income_report_scenario_1$Allied_export), 0, income_report_scenario_1$Allied_export)
        income_report_scenario_1$Total <- ifelse(is.nan(income_report_scenario_1$Total), 0, income_report_scenario_1$Total)
        
        income_report_scenario_1$Total <- income_report_scenario_1$Allied_export + income_report_scenario_1$IAM + income_report_scenario_1$OES
        
        income_report_scenario_1$Total[50:52] <- income_report_scenario_1$Per_unit[50:52]
        
        revenue_non <- as.numeric(income_report_scenario_1$Total[10])
        material_non <- as.numeric(income_report_scenario_1$Total[17])
        
        
        ## Displaying result of Scenario-1
        shinyjs::show("Scen_1")
        
        output$Scen_1 <- renderHotable({
          
          part_view <- 0
          part_view<- as.data.frame(part_view)
          part_view$part_view <- NULL
          part_view$Fields <- "NPV($)" 
          part_view[2,1]<- "Selldown NPV($)"       
          part_view[3,1]<- "Net"
          part_view[4,1]<- "Scrap"
          part_view[5,1]<- "Dealer Price($): OES"
          part_view[6,1]<- "Dealer Price($): Allied/Export"
          part_view[7,1]<- "Dealer Price($): IAM"
          part_view[8,1]<- "First Buy"
          part_view[9,1]<- "Last Buy"
          part_view[10,1]<- "Last Sale"    
          part_view[11,1]<- "Lifetime Revenue(NPV)" 
          part_view[12,1]<- "Lifetime Revenue(Non NPV)"
          part_view[13,1]<- "Material Cost(NPV)"
          part_view[14,1]<- "Material Cost(Non NPV)"
          part_view[15,1]<- "Setup Cost(NPV)"
          part_view[16,1]<- "Transportation Cost(NPV)"
          part_view[17,1]<- "Labor Cost(NPV)"
          part_view[18,1]<- "Storage Cost(NPV)"
          part_view[19,1]<- "Packaging Cost(NPV)"
          part_view[20,1]<- "Offsite Labor Cost(NPV)"
          part_view[21,1]<- "Offsite Trans Cost(NPV)"
          part_view[22,1]<- "Total Expense(NPV)"
          part_view[23,1]<- "Optimal NPV"
          part_view[24,1]<- "Optimal Buy Qty"
          part_view[25,1]<- "Total Purchase"
          part_view[26,1]<- "Inventory and Purchase"
          part_view[27,1]<- "Extended Optimal Buy Cost"
          part_view[28,1]<- "Extended Buy Qty Cost"
          
          part_view$Values <- paste("$", formatC(Scenario_1_current$NPV_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[2, 2] <-  paste("$", formatC(Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[3, 2] <-  paste("$", formatC((Scenario_1_current$NPV_Scenario_1[1] - Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1]), big.mark=",", digits=2, format="f"), sep = " ")
          part_view[4, 2] <- round(Scenario_1_current$Scrap_amount_Scenario_1[1], 0)
          part_view[5, 2] <- paste("$", formatC(Scenario_1_optimal$Dealer_Price_OES_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[6, 2] <- paste("$", formatC(Scenario_1_optimal$Dealer_Price_Allied_Export_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[7, 2] <- paste("$", formatC(Scenario_1_optimal$Dealer_Price_IAM_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[8, 2] <- as.character(round(First_buy,0))
          part_view[9, 2] <- as.character(round(Last_buy,0))
          part_view[10, 2] <- as.character(round(Last_sale,0))
          part_view[11, 2] <- paste("$", formatC(Scenario_1_current$Revenue_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[12, 2] <- paste("$", formatC(Scenario_1_current$Revenue_non_npv_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[13, 2] <- paste("$", formatC(Scenario_1_current$Part_Cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[14, 2] <- paste("$", formatC(Scenario_1_current$Material_cost_non_npv_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[15, 2] <- paste("$", formatC(setup_cost , big.mark=",", digits=2, format="f"), sep = " ")
          part_view[16, 2] <-  paste("$", formatC(Scenario_1_current$Total_transport_cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[17, 2] <-  paste("$", formatC((Scenario_1_current$Total_process_cost_Scenario_1[1]), big.mark=",", digits=2, format="f"), sep = " ")
          part_view[18, 2] <-  paste("$", formatC(Scenario_1_current$Storage_Cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[19, 2] <-  paste("$", formatC((Scenario_1_current$Package_cost_Scenario_1[1]), big.mark=",", digits=2, format="f"), sep = " ")
          part_view[20, 2] <-  paste("$", formatC(Scenario_1_current$Total_offsite_labor_cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[21, 2] <-  paste("$", formatC(Scenario_1_current$Total_offsite_transport_cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[22, 2] <-  paste("$", formatC(Scenario_1_current$Expense_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[23, 2] <-  paste("$", formatC(Scenario_1_optimal$Optimal_NPV_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[24, 2] <- paste(formatC(ceiling(Scenario_1_optimal$Optimal_ATB_Quantity_Scenario_1[1]), big.mark=",", digits=0, format="f"))
          part_view[25,2] <-  paste(formatC((Scenario_1_current$Total_Purchase_Qty_1[1]), big.mark=",", digits=0, format="f"))
          part_view[26,2] <-  paste(formatC(Scenario_1_current$Total_Inventory_Purchase_1[1], big.mark=",", digits=0, format="f"))
          part_view[27, 2] <-  paste("$", formatC(Scenario_1_optimal$Extended_optimal_buy_cost_1[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[28, 2] <-  paste("$", formatC(Scenario_1_current$Extended_purchase_cost_1[1], big.mark=",", digits=2, format="s"), sep = " ")
          
          part_view
          
        }, readOnly = TRUE)
        
        ## Formatting the results for income report 
        income_report_scenario_1$Per_unit[c(1:3, 7:16, 18, 20:45)] <- paste("$", formatC(income_report_scenario_1$Per_unit[c(1:3, 7:16, 18, 20:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_scenario_1$Per_unit[c(17, 19)] <- paste("$", formatC(income_report_scenario_1$Per_unit[c(17, 19)], big.mark=",", digits=7, format="f"), sep = " ")
        
        income_report_scenario_1$Per_unit[c(4:6)] <- paste(formatC(income_report_scenario_1$Per_unit[c(4:6)], big.mark=",", digits=20, format="f"), "%" , sep = " ")
        income_report_scenario_1$Per_unit[c(46:52)] <- paste(formatC(income_report_scenario_1$Per_unit[c(46:52)], big.mark=",", digits=20, format="f"))
        
        income_report_scenario_1$OES[c(1:45)] <- paste("$", formatC(income_report_scenario_1$OES[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_scenario_1$OES[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_1$OES[c(46:52)]), big.mark=",", digits=20, format="f"))
        
        income_report_scenario_1$IAM[c(1:45)] <- paste("$", formatC(income_report_scenario_1$IAM[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_scenario_1$IAM[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_1$IAM[c(46:52)]), big.mark=",", digits=20, format="f"))
        
        income_report_scenario_1$Allied_export[c(1:45)] <- paste("$", formatC(income_report_scenario_1$Allied_export[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_scenario_1$Allied_export[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_1$Allied_export[c(46:52)]), big.mark=",", digits=20, format="f"))
        
        income_report_scenario_1$Total[c(1:45)] <- paste("$", formatC(income_report_scenario_1$Total[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_scenario_1$Total[c(46:52)] <- paste(formatC(income_report_scenario_1$Total[c(46:52)], big.mark=",", digits=20, format="f"))
        
        income_report_scenario_1$Per_unit[c(10,11,15,16,40:45)] <- "-"
        income_report_scenario_1[c(12:16, 19,20,23,24,27,28,31,32,35,36,44,45), c(2:6)] <- "-"
        
        output$download_income_report_s_1 <- downloadHandler(
          filename = function() {
            paste("Income_statement_report_s_1", ".csv", sep="") 
          },
          content = function(file) {
            abc <- income_report_scenario_1
            
            write.csv(abc, file)
            
          }
        )
        
      } # Closing for Progress Indicator
      )
      ############################ Closing of Scenario-1
      #####
      #####
      ############################ Starting of Scenario-2
      
      shinyjs::enable("download_all_scenario")
      shinyjs::enable("downloadData_s_2")
      shinyjs::enable("download_income_report_s_2")
      
      part_info <- global_ads$df_data_ads
      
      part_inform <- as.data.frame(part_info)
      part_inform$X <- NULL
      part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
      
      ATB_ADS <- part_inform[which(part_inform$PART_NBR == input$Part_Number),]
      
      #----------------------------------------
      ####### Code for Scenario - 2    
      #----------------------------------------
      
      ######### Code for Scenario-2-Optimal    
      
      withProgress(message = 'Processing in Progress', value = 0, {
        
        #scenario_2 <- hot.to.df(input$hotable_sce2)
        
        DLR_Price_3 <- round(as.numeric(scenario_2$Values[1]), 4)
        wd_price <- round(as.numeric(scenario_2$Values[2]), 4)
        
        Dealer_Price_Allied_Export <- DLR_Price_3 * (1 - (ATB_ADS$Discount_allied_export_percent[1]/100))
        Dealer_Price_OES <- DLR_Price_3 * (1 - (ATB_ADS$Discount_oes_percent[1]/100))
        Dealer_Price_IAM <- wd_price * (1 - (ATB_ADS$Discount_iam_percent[1]/100))
        
        part_c_3 <- round(as.numeric(scenario_2$Values[3]) , 5)
        moq <- round(as.numeric(scenario_2$Values[4]) , 4)
        std_p <- round(as.numeric(scenario_2$Values[5]), 4)
        std_p <- ifelse(std_p == 0, 1, std_p)
        setup_cost <- round(as.numeric(scenario_2$Values[6]), 4)
        add_cost <- round(as.numeric(scenario_2$Values[7]), 4)
        Monthly_square_feet_cpp1 <- round(as.numeric(scenario_2$Values[8]), 7)
        Offsite_transportation_cpp1 <- round(as.numeric(scenario_2$Values[9]), 7)
        Redistribution_cpp1 <- round(as.numeric(scenario_2$Values[10]), 7)
        Offsite_Labor_cpp1 <- round(as.numeric(scenario_2$Values[11]), 7)
        Inbound_Labor_cpp1 <- round(as.numeric(scenario_2$Values[12]), 7)
        Outbound_Labor_cpp1 <- round(as.numeric(scenario_2$Values[13]), 7)
        Average_Labor_cpp1 <- round(as.numeric(scenario_2$Values[14]), 7)
        Average_Processing_cpp1 <- round(as.numeric(scenario_2$Values[15]), 7)
        Inbound_Transportation_cpp1 <- round(as.numeric(scenario_2$Values[16]), 7)
        Outbound_Transportation_cpp1 <- round(as.numeric(scenario_2$Values[17]), 7)
        
        Current_Inventory <-  round(as.numeric(scenario_2$Values[18]), 4)
        #ONSITE_TRANS_COST_PER_PIECE
        Onsite_trans_cpp1 <- Inbound_Transportation_cpp1 + Outbound_Transportation_cpp1 + Redistribution_cpp1
        #ONSITE_PRCS_COST_PP
        Onsite_procs_cpp1 <- Inbound_Labor_cpp1 + Outbound_Labor_cpp1 + Average_Labor_cpp1 + Average_Processing_cpp1
        
        incProgress(1/4, detail = "Running Calculations")
        
        ##### ATB Scenario calculation
        
        Scenario_2_optimal <- data.frame()
        NPV_Data_2 <- data.frame()
        First_buy <- 0
        Last_sale <- 0
        flag <- 0
        flag_last_buy <- 0
        Last_buy <- 0
        
        for (jj in (1:nrow(ATB_ADS))) {
          
          cat("\nsc_2_opt Part Number: ",jj," : ", ATB_ADS[jj,1])
          final_NPV_list <- 0
          Optimal_year_count_list <- 1
          LTBQ_list <- 0
          Year_list <- c()
          FCST_list <- c()
          NPV_CR_list <- c()
          Revenue_CR_list <- c()
          Revenue_list_non_npv <- c()
          Expense_list <- c()
          Storage_cost_CR_list <- c()
          Freight_cost_CR_list <- c()
          Processing_cost_CR_list <- c()
          
          transport_cost <- c()
          offsite_transport_cost <- c()
          offsite_labor_cost <- c()
          process_cost <- c()
          packaging_cost <- c()
          
          Material_cost_CR_list <- c()
          Buy_quantity_list <- c()
          
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          
          for(nn in (1:30)){
            FCST_list[nn] <- ATB_ADS[jj,(YI-1+nn)]
          }
          
          FCST_list[1] <- FCST_list[1] + ATB_ADS$CURRENT_YEAR[jj]
          
          
          
          if(FCST_list[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST_list[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          
          ###########
          Sum_Forecast <- sum(FCST_list)
          
          iam_weight <- ATB_ADS$IAM_FRACTION[jj]
          oes_weight <- ATB_ADS$OES_FRACTION[jj]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[jj]
          
          FCST_iam <- round(FCST_list * iam_weight, digits = 0)
          FCST_oes <- round(FCST_list * oes_weight, digits = 0)
          FCST_allied <- round(FCST_list * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Sum_Forecast
          
          if(Sum_Forecast > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          for(i in 1:30)
          {
            FCST_list[i] <- FCST_allied[i] + FCST_iam[i] + FCST_oes[i]
          }
          ###########
          
          for (nn in (1:30)) {
            Sum_Forecast_list <- sum(FCST_list[1:nn])
            BQ_list <- Sum_Forecast_list
            qty_list <- 0
            yr_qty_list <- c()
            
            if(nn > 1){
              for (ii in (1:(nn-1))) {
                ss <- ((BQ_list - sum(FCST_list[1:ii])) + (BQ_list - sum(FCST_list[1:(1+ii)])))/2
                qty_list <- qty_list + ss 
                yr_qty_list[ii+1] <- ss
              }
            }
            yr_qty_list[1] <- (2*BQ_list - FCST_list[1])/2        
            
            Total_storage_qty_list <- sum(yr_qty_list)
            Storage_Cost_list <- 0
            revenue_list <- 0
            revenue_list_non_npv <- 0
            revenue_iam <- 0
            revenue_oes <- 0
            revenue_allied <- 0
            
            for(kk in (1: (nn) ))
            {
              CR <- ((1-(0.15/12))^(kk*12))
              revenue_list <- revenue_list + (FCST_list[kk] * CR *((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj]))) 
              
              revenue_iam <- revenue_iam + (FCST_iam[kk] * CR * (Dealer_Price_IAM))
              revenue_oes <- revenue_oes + (FCST_oes[kk] * CR * (Dealer_Price_OES))
              revenue_allied <- revenue_allied + (FCST_allied[kk] * CR * (Dealer_Price_Allied_Export))
              
              revenue_list_non_npv <- revenue_list_non_npv + ((FCST_list[kk]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj])))
              Storage_Cost_list <- Storage_Cost_list + ((yr_qty_list[kk])*Monthly_square_feet_cpp1 * CR)
              
            }
            
            offsite_quantity <- ifelse((BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))) > 0, (BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))), 0)
            
            Offsite_trans_cost_list <- Offsite_transportation_cpp1 * offsite_quantity
            Freight_cost_list <- ((Onsite_trans_cpp1 * BQ_list) + Offsite_trans_cost_list) * (1-(0.15/12))
            Offsite_labour_cost_list <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
            Total_Processing_cost_list <- ((Onsite_procs_cpp1 * BQ_list) + Offsite_labour_cost_list) * (1-(0.15/12))
            Material_cost_list <- (part_c_3*BQ_list)*(1-(0.15/12))
            
            Total_transport_cost <- (Onsite_trans_cpp1 * BQ_list) * (1-(0.15/12))
            Total_offsite_transport_cost <- Offsite_trans_cost_list * (1-(0.15/12))
            Total_offsite_labor_cost <- Offsite_labour_cost_list * (1-(0.15/12))
            Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ_list) * (1-(0.15/12))
            Total_package_cost <- Average_Processing_cpp1 * BQ_list * (1-(0.15/12))
            
            Total_Expense_list <- Storage_Cost_list + Freight_cost_list + Total_Processing_cost_list + Material_cost_list + setup_cost + add_cost
            revenue_list <- revenue_iam + revenue_oes + revenue_allied
            NPV_with_capital_rate_list <- revenue_list - Total_Expense_list
            Year_list[nn] <- nn
            NPV_CR_list[nn] <- NPV_with_capital_rate_list
            Expense_list[nn] <- Total_Expense_list
            Revenue_CR_list[nn] <- revenue_list
            Revenue_list_non_npv[nn] <- revenue_list_non_npv
            Storage_cost_CR_list[nn] <- Storage_Cost_list
            Freight_cost_CR_list[nn] <- Freight_cost_list
            Processing_cost_CR_list[nn] <- Total_Processing_cost_list
            Material_cost_CR_list[nn] <- Material_cost_list
            Buy_quantity_list[nn] <- BQ_list
            
            transport_cost[nn] <- Total_transport_cost
            offsite_transport_cost[nn] <- Total_offsite_transport_cost
            offsite_labor_cost[nn] <- Total_offsite_labor_cost
            process_cost[nn] <- Total_process_cost
            packaging_cost[nn] <- Total_package_cost
            
            if( NPV_with_capital_rate_list>0 ) {
              
              if(final_NPV_list<NPV_with_capital_rate_list){
                
                final_NPV_list <- NPV_with_capital_rate_list
                Optimal_year_count_list <- nn
                LTBQ_list <- BQ_list
                Total_Expense_NPV_list <- Total_Expense_list
                Revenue_NPV_list <- revenue_list
                Revenue_NPV_list_non_npv <- revenue_list_non_npv
                Storage_cost_NPV_list <- Storage_Cost_list
                Freight_cost_NPV_list <- Freight_cost_list
                Processing_cost_NPV_list <- Total_Processing_cost_list
                Material_cost_NPV_list <- Material_cost_list
                
                transport_cost_list <- Total_transport_cost
                offsite_transport_cost_list <- Total_offsite_transport_cost
                offsite_labor_cost_list <- Total_offsite_labor_cost
                process_cost_list <- Total_process_cost
                package_cost_list <- Total_package_cost
                
              }
            } else if((nn==1) && (NPV_with_capital_rate_list<=0)) {
              
              Optimal_year_count_list <- 0
              Total_Expense_NPV_list <- Expense_list[1]
              Revenue_NPV_list <- Revenue_CR_list[1]
              Revenue_NPV_list_non_npv <- Revenue_list_non_npv[1]
              Storage_cost_NPV_list <- Storage_cost_CR_list[1]
              Freight_cost_NPV_list <- Freight_cost_CR_list[1]
              Processing_cost_NPV_list <- Processing_cost_CR_list[1]
              Material_cost_NPV_list <- Material_cost_CR_list[1]
              
              transport_cost_list <- transport_cost[1]
              offsite_transport_cost_list <- offsite_transport_cost[1]
              offsite_labor_cost_list <- offsite_labor_cost[1]
              process_cost_list <- process_cost[1]
              package_cost_list <- packaging_cost[1]
            }
          }
          
          if(offsite_transport_cost_list < 0 )
          {
            offsite_transport_cost_list <- 0
          }
          if(offsite_labor_cost_list < 0)
          {
            offsite_labor_cost_list <- 0
          }
          
          LTBQ_list <- LTBQ_list - Current_Inventory
          
          if(LTBQ_list <= 0)
          {
            LTBQ_list = 0
          }
          Extended_optimal_buy_cost <- LTBQ_list * part_c_3
          
          Material_cost_list_non_npv <- (Material_cost_NPV_list / (1-(0.15/12)))
          Scenario_2_optimal <- data.frame(lapply(Scenario_2_optimal, as.character), stringsAsFactors=FALSE)
          Scenario_2_optimal <- rbind(Scenario_2_optimal, c(ATB_ADS[jj,1],Storage_cost_NPV_list,Freight_cost_NPV_list,Processing_cost_NPV_list,
                                                            Material_cost_NPV_list,Total_Expense_NPV_list,Revenue_NPV_list,final_NPV_list,
                                                            Optimal_year_count_list,LTBQ_list,Revenue_NPV_list_non_npv, Material_cost_list_non_npv,
                                                            transport_cost_list, offsite_transport_cost_list, offsite_labor_cost_list, process_cost_list,
                                                            setup_cost,DLR_Price_3, Dealer_Price_OES, Dealer_Price_Allied_Export, wd_price,Dealer_Price_IAM,
                                                            ATB_ADS$Discount_iam_percent[jj], ATB_ADS$Discount_oes_percent[jj], ATB_ADS$Discount_allied_export_percent[jj],
                                                            package_cost_list, Extended_optimal_buy_cost, add_cost, Current_Inventory))
          
          NPV_Data_2 <- data.frame(ATB_ADS[jj,1],Year_list,FCST_list,Storage_cost_CR_list,Freight_cost_CR_list,Processing_cost_CR_list,Material_cost_CR_list,Buy_quantity_list,Expense_list,Revenue_CR_list,NPV_CR_list)
        }
        colnames(Scenario_2_optimal) <- c("Part_Nbr","Optimal_Storage_Cost_Scenario_2","Optimal_Transportation_Cost_Scenario_2",
                                          "Optimal_Processing_Cost_Scenario_2","Optimal_Material_Cost_Scenario_2","Optimal_Expense_Scenario_2",
                                          "Optimal_Revenue_Scenario_2","Optimal_NPV_Scenario_2","Optimal_year_count_Scenario_2","Optimal_ATB_Quantity_Scenario_2",
                                          "Optimal_Revenue_Non_Npv_Scenario_2", "Optimal_Material_cost_non_npv_Scenario_2", "Optimal_Total_transport_cost_Scenario_2",
                                          "Optimal_Total_offsite_transport_cost_Scenario_2","Optimal_Total_offsite_labor_cost_Scenario_2",
                                          "Optimal_Total_process_cost_Scenario_2", "Optimal_Setup_cost_Scenario_2", "Proposed_Dealer_Price_2",
                                          "Dealer_Price_OES_2", "Dealer_Price_Allied_Export_2", "Proposed_Wd_Price_2", "Dealer_Price_IAM_2", 
                                          "Discount_iam_percent", "Discount_oes_percent", "Discount_allied_export_percent", "Optimal_Packaging_cost_Scenario_2",
                                          "Extended_optimal_buy_cost_2", "Additional_Cost_2", "Total_Inventory")
        
        Scenario_2_optimal <- data.frame(lapply(Scenario_2_optimal, as.character), stringsAsFactors=FALSE)
        Scenario_2_optimal <- data.frame(lapply(Scenario_2_optimal, as.numeric), stringsAsFactors=FALSE)
        Scenario_2_optimal <- Scenario_2_optimal %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        Scenario_2_optimal$Part_Nbr <- str_pad(Scenario_2_optimal$Part_Nbr, width=8, side="left", pad="0")
        
        
        incProgress(1/4, detail = "Running Calculations")
        
        ########## Code for Scenario-2: Current 
        if(input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
        {
          BQ_S2 <- as.numeric(ATB_ADS$Buy_Quantity_Scenario_2)
        } else
        {
          BQ_S2 <- NA
        }
        
        if(is.na(BQ_S2))
        {
          Scenario_2_current <- data.frame()
          shinyjs::enable("download_income_report_s_2")
          for(j in (1:nrow(ATB_ADS)))
          {
            cat("\nsc_2_cur Part Number: ",j," : ", ATB_ADS[j,1])
            FCST <- c()
            Curr_Inv <- round(as.numeric(scenario_2$Values[18]), 4)
            Curr_Inv_copy <- Curr_Inv
            Revenue <- c()
            
            Revenue_Allied <- c()
            Revenue_OES <- c()
            Revenue_IAM <- c()
            
            Revenue_non_npv <- c()
            AMD <- c()
            AMD_iam <- c()
            AMD_oes <- c()
            AMD_allied <- c()
            
            First_buy <- 0
            Last_sale <- 0
            Last_buy <- 0
            flag <- 0
            flag_last_buy <- 0
            
            
            YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
            for(n in (1:30)){
              FCST[n] <- ATB_ADS[j,(YI-1+n)]
              Revenue[n] <- 0
              Revenue_Allied[n] <- 0
              Revenue_OES[n] <- 0
              Revenue_IAM[n] <- 0
              
              Revenue_non_npv[n] <- 0
            }
            
            FCST[1] <- ATB_ADS$CURRENT_YEAR[j] + FCST[1]
            Total_FCST <- sum(FCST)
            
            if(FCST[1] != 0)
            {
              First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
            } else
            {
              First_buy <- 0
            }
            
            for(i in 1:30)
            {
              if(FCST[i] == 0 & flag != 1)
              {
                Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                flag = 1
              } 
            }
            if(flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
            }
            
            ###########          
            
            iam_weight <- ATB_ADS$IAM_FRACTION[j]
            oes_weight <- ATB_ADS$OES_FRACTION[j]
            allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
            
            FCST_iam <- round(FCST * iam_weight, digits = 0)
            FCST_oes <- round(FCST * oes_weight, digits = 0)
            FCST_allied <- round(FCST * allied_weight, digits = 0)
            
            Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
            
            Diff_FCST <- Sum_FCST - Total_FCST
            
            if(Total_FCST > 0)
            {
              
              if(oes_weight != 0)
              {
                index <- tail(which(FCST_oes!=0),1)
              } else if(iam_weight != 0)
              {
                index <- tail(which(FCST_iam!=0),1)
              } else if(allied_weight != 0)
              {
                index <- tail(which(FCST_allied!=0),1)
              } else
              {
                index <- 1
              }
            } else
            {
              index <- 1
            }
            
            if(length(index)==0)
            {
              index <- 1
            }
            
            flag_revenue_oes <- 0
            flag_revenue_iam <- 0
            flag_revenue_allied <- 0
            
            if(oes_weight == 0)
            {
              FCST_oes[index] <- Sum_FCST + 1000
              flag_revenue_oes <- 1
            }
            if(iam_weight == 0)
            {
              FCST_iam[index] <- Sum_FCST + 1000
              flag_revenue_iam <- 1
            }
            if(allied_weight == 0)
            {
              FCST_allied[index] <- Sum_FCST + 1000
              flag_revenue_allied <- 1
            }
            
            
            if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
            {
              FCST_oes[index] <- FCST_oes[index] - Diff_FCST
              
            } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
            {
              FCST_iam[index] <- FCST_iam[index] - Diff_FCST
              
            } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
            {
              FCST_allied[index] <- FCST_allied[index] - Diff_FCST
            }
            
            if(flag_revenue_oes == 1)
            {
              FCST_oes[index] <- 0
            }
            if(flag_revenue_iam == 1)
            {
              FCST_iam[index] <- 0
            }
            if(flag_revenue_allied == 1)
            {
              FCST_allied[index] <- 0
            }
            
            ###########          
            for(n in (1:30)){
              AMD[n] <- FCST[n]/12
              AMD_oes[n] <- FCST_oes[n] / 12
              AMD_iam[n] <- FCST_iam[n] / 12
              AMD_allied[n] <- FCST_allied[n] / 12
            }
            
            
            for(k in (1:30))
            {
              CR <- ((1-(0.15/12))^(k*12))
              Revenue[k] <- Revenue[k] + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              
              Revenue_Allied[k] <- Revenue_Allied[k] + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
              Revenue_OES[k] <- Revenue_OES[k] + (FCST_oes[k] * CR * (Dealer_Price_OES))
              Revenue_IAM[k] <- Revenue_IAM[k] + (FCST_iam[k] * CR * (Dealer_Price_IAM))
              
              Revenue_non_npv[k] <- Revenue_non_npv[k] + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              
              
            }
            
            Revenue_OES_non_npv_no_discount <- Total_FCST * DLR_Price_3 * ATB_ADS$OES_FRACTION[j]
            Revenue_IAM_non_npv_no_discount <- Total_FCST * wd_price * ATB_ADS$IAM_FRACTION[j]
            Revenue_Allied_non_npv_no_discount <- Total_FCST * DLR_Price_3 * ATB_ADS$ALLIED_EXPORT_FRACTION[j]
            
            Revenue_OES_non_npv_discount <- sum(FCST_oes) * Dealer_Price_OES
            Revenue_IAM_non_npv_discount <- sum(FCST_iam) * Dealer_Price_IAM 
            Revenue_Allied_non_npv_discount <- sum(FCST_allied) * Dealer_Price_Allied_Export
            
            Revenue_Allied_discount <- sum(Revenue_Allied)
            Revenue_OES_discount <- sum(Revenue_OES)
            Revenue_IAM_discount <- sum(Revenue_IAM)
            
            year <- 0
            month <- 0
            get_demand <- 0
            
            for(i in 1:30)
            {
              get_demand = get_demand + FCST[i]
              if(Curr_Inv > get_demand)
              {
                year = year + 1
              } else if(Curr_Inv <= FCST[1])
              {
                remain = Curr_Inv
                
                year_remain = FCST[1] - remain
                
                month = 1
                demand_for_break_year = 0
                for(i in 1:12)
                {
                  demand_for_break_year = demand_for_break_year + (FCST[1] / 12)
                  if(remain > demand_for_break_year)
                  {
                    month = month + 1
                  }
                }
                
                FCST[year+1] <- remain
                Sum_Forecast <- sum(FCST[1:(year+1)])
                break()
              }
            }
            
            ###
            if(Curr_Inv > FCST[1] & year < 30)
            {
              remain <- Curr_Inv - sum(FCST[1:year])
              
              year_remain <- FCST[(year+1)] - remain
              
              month = 1
              demand_for_break_year = 0
              for(i in 1:12)
              {
                demand_for_break_year = demand_for_break_year + (FCST[year+1] / 12)
                if(remain > demand_for_break_year)
                {
                  month = month+1
                }
              }
              
              FCST[year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(year+1)])
            } else if(year >= 30)
            {
              remain <- Curr_Inv - sum(FCST[1:year])
              FCST[year+1] <- 0
              year_remain <- 0
              Sum_Forecast <- sum(FCST[1:(year + 1)])
              month <- 0
            }
            
            
            BQ <- ceiling(Curr_Inv)
            qty <- 0
            yr_qty <- c()
            
            for (i in (1:(year))) {
              storage_qty <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
              qty <- qty + storage_qty
              yr_qty[i+1] <- storage_qty
            }
            
            yr_qty[1] <- (2*BQ - FCST[1])/2        
            yr_qty[year + 2] <- 0
            
            Storage_Cost_Curr_Inv <- 0
            Storage_Cost_Curr_Inv_non_npv <- 0
            
            
            for(k in (1 : (year + 1)))
            {
              CR <- ((1-(0.15/12))^(k*12))
              Storage_Cost_Curr_Inv <- Storage_Cost_Curr_Inv + ((yr_qty[k])* Monthly_square_feet_cpp1 * CR)
              Storage_Cost_Curr_Inv_non_npv <- Storage_Cost_Curr_Inv_non_npv + (yr_qty[k]) * Monthly_square_feet_cpp1
              
            }
            
            offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
            
            Offsite_trans_cost_curr_inv <- Offsite_transportation_cpp1 * offsite_quantity
            transport_cost_curr_inv <- Onsite_trans_cpp1 * BQ * (1-(0.15/12))
            
            transport_cost_curr_inv_non_npv <- Onsite_trans_cpp1 * BQ 
            
            Freight_cost_curr_inv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv) * (1-(0.15/12))
            Freight_cost_curr_inv_non_npv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv)
            
            Offsite_labour_cost_curr_inv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1) * (1-(0.15/12))
            Offsite_labour_cost_curr_inv_non_npv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
            
            process_cost_curr_inv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ * (1-(0.15/12))
            process_cost_curr_inv_non_npv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ
            
            package_cost_curr_inv <- Average_Processing_cpp1 * BQ * (1-(0.15/12))  
            package_cost_curr_inv_non_npv <- Average_Processing_cpp1 * BQ
            
            Total_Processing_cost_curr_inv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost_curr_inv) * (1-(0.15/12))
            Material_cost_curr_inv <- BQ * part_c_3 * (1-(0.15/12))
            Material_cost_curr_inv_non_npv <- BQ * part_c_3 
            
            
            FCST[year+1] <- year_remain
            
            Adj_Dem <- c()
            BF_BQ <- c()
            Curr_Inv <- c()
            BQ <- c()
            Purchase_times <- c()
            Yearly_BQ <- c()
            Storage_Cost <- c()
            Storage_Cost_non_npv <- c()
            Offsite_Qty <- c()
            Freight_cost <- c()
            Freight_cost_non_npv <- c()
            transport_cost <- c()
            offsite_transport_cost <- c()
            transport_cost_non_npv <- c()
            offsite_transport_cost_non_npv <- c()
            Processing_cost <- c()
            offsite_labor_cost <- c()
            offsite_labor_cost_non_npv <- c()
            process_cost <- c()
            process_cost_non_npv <- c()
            package_cost <- c()
            package_cost_non_npv <- c()
            Material_cost <- c()
            Material_cost_non_npv <- c()
            All_Expense <- c()
            
            for(i in 1:year)
            {
              Adj_Dem[i] = 0
              BF_BQ[i] = 0
              Curr_Inv[i] = 0
              BQ[i] = 0
              Purchase_times[i] = 0
              Yearly_BQ[i] = 0
              Storage_Cost[i] = 0
              Storage_Cost_non_npv[i] = 0
              Offsite_Qty[i] = 0
              Freight_cost[i] = 0
              Freight_cost_non_npv[i] = 0
              transport_cost[i] = 0
              offsite_transport_cost[i] = 0
              transport_cost_non_npv[i] = 0
              offsite_transport_cost_non_npv[i] = 0
              Processing_cost[i] = 0
              offsite_labor_cost[i] = 0
              offsite_labor_cost_non_npv[i] = 0
              process_cost[i] = 0
              process_cost_non_npv[i] = 0
              package_cost[i] = 0
              package_cost_non_npv[i] = 0
              Material_cost[i] = 0
              Material_cost_non_npv[i] = 0
              All_Expense[i] = 0
            }
            
            Total_BQ <- 0
            
            if((year + 1) < 31)
            {
              Curr_Inv[(year + 1)] <- 0
              for(k in ((year + 1) : 30)){
                Adj_Dem[k] <- (FCST[k] - Curr_Inv[k])
                BF_BQ[k] <- ifelse(k == (year + 1),((ATB_ADS$BUY_FREQ[j]*(AMD[k]/4.33)) * (12-month)/12),(ATB_ADS$BUY_FREQ[j]*(((Adj_Dem[k])/12)/4.33)))
                
                BQ[k] <- ceiling(ifelse((Curr_Inv[k] < Adj_Dem[k]),(max(moq, std_p, BF_BQ[k])), 0))
                Purchase_times[k] <- ifelse((BQ[k]!=0),(ceiling(Adj_Dem[k]/BQ[k])),0)
                Yearly_BQ[k] <- BQ[k] * Purchase_times[k]
                Curr_Inv[k+1] <- Yearly_BQ[k] - Adj_Dem[k]
                Storage_Cost[k] <- 0
                Storage_Cost_non_npv[k] <- 0
              }
              
              Total_BQ <- ceiling(sum(Yearly_BQ))
              scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
              adjusment_factor <- Total_BQ%%std_p
              
              if(adjusment_factor > scrap_amount)
              {
                Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] + (std_p - Total_BQ%%std_p)
                Total_BQ <- Total_BQ + (std_p - Total_BQ%%std_p)
                
                BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
              } else if(adjusment_factor <= scrap_amount)
              {
                Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] - Total_BQ%%std_p
                Total_BQ <- Total_BQ - Total_BQ%%std_p
                
                BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
              }
              
              for(i in ((year + 1):30))
              {
                if(Yearly_BQ[i] == 0 & flag_last_buy != 1)
                {
                  if(i != (year + 1))
                  {
                    Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                    flag_last_buy = 1
                  } else
                  {
                    Last_buy <- 0
                    flag_last_buy = 1
                  }
                } 
              }
              if(flag_last_buy != 1)
              {
                Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
              }
              
              
              for(k in ((year + 1):30))
              {
                CR <- ((1-(0.15/12))^(k*12))
                Storage_Cost[k] <- Storage_Cost[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1 * CR)
                Storage_Cost_non_npv[k] <- Storage_Cost_non_npv[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1)
                
              }
              
              for(k in ((year + 1):30)){
                
                CR <- (1-(0.15/12))^(k*12)
                Offsite_Qty[k] <- ifelse((BQ[k] > (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),(BQ[k] - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),0)
                Freight_cost[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k] * CR
                Freight_cost_non_npv[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k]
                
                transport_cost[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] * CR
                offsite_transport_cost[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k] * CR
                transport_cost_non_npv[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k]
                offsite_transport_cost_non_npv[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k]
                
                Processing_cost[k] <- ((Onsite_procs_cpp1 * BQ[k]) + (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1))) * Purchase_times[k] * CR
                
                offsite_labor_cost[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k] * CR
                offsite_labor_cost_non_npv[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k]
                
                process_cost[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k] * CR
                process_cost_non_npv[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k]
                
                package_cost[k] <- Average_Processing_cpp1 * BQ[k] * CR * Purchase_times[k]
                package_cost_non_npv[k] <- Average_Processing_cpp1 * BQ[k] * Purchase_times[k]
                
                Material_cost[k] <- (part_c_3 * BQ[k]) * Purchase_times[k] * CR
                Material_cost_non_npv[k] <- (part_c_3 * BQ[k]) * Purchase_times[k]
                All_Expense[k] <- Storage_Cost[k] + Freight_cost[k] + Processing_cost[k] + Material_cost[k]
                
              }
            } else
            {
              Last_buy <- 0
            }
            
            scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
            
            Total_Storage_Cost_current <- sum(Storage_Cost) + Storage_Cost_Curr_Inv
            Total_Storage_Cost_current_non_npv <- sum(Storage_Cost_non_npv) + Storage_Cost_Curr_Inv_non_npv
            Total_Freight_cost_current <- sum(Freight_cost) + Freight_cost_curr_inv
            Total_Freight_cost_current_non_npv <- sum(Freight_cost_non_npv) + Freight_cost_curr_inv_non_npv
            Total_Processing_cost_current <-sum(Processing_cost) + Total_Processing_cost_curr_inv
            Total_Material_cost_current <- sum(Material_cost) + Material_cost_curr_inv
            Total_Material_cost_non_npv_current <- sum(Material_cost_non_npv) + Material_cost_curr_inv_non_npv
            Total_Revenue_current <- Revenue_Allied_discount + Revenue_OES_discount + Revenue_IAM_discount
            Total_Revenue_non_npv_current <- Revenue_OES_non_npv_discount + Revenue_IAM_non_npv_discount + Revenue_Allied_non_npv_discount
            
            Total_transport_cost <- sum(transport_cost) + transport_cost_curr_inv
            Total_offsite_transport_cost <- sum(offsite_transport_cost) + Offsite_trans_cost_curr_inv
            Total_transport_cost_non_npv <- sum(transport_cost_non_npv) + transport_cost_curr_inv_non_npv
            Total_offsite_transport_cost_non_npv <- sum(offsite_transport_cost_non_npv) + Offsite_trans_cost_curr_inv
            
            Total_offsite_labor_cost <- sum(offsite_labor_cost) + Offsite_labour_cost_curr_inv
            Total_offsite_labor_cost_non_npv <- sum(offsite_labor_cost_non_npv) + Offsite_labour_cost_curr_inv_non_npv
            
            Total_process_cost <- sum(process_cost) + process_cost_curr_inv
            
            
            Total_process_cost_non_npv <- sum(process_cost_non_npv) + process_cost_curr_inv_non_npv
            Total_package_cost <- sum(package_cost) + package_cost_curr_inv
            Total_package_cost_non_npv <- sum(package_cost_non_npv) + package_cost_curr_inv_non_npv
            Total_Expense_current_non_npv <- Total_Storage_Cost_current_non_npv + Total_Freight_cost_current_non_npv + Total_Material_cost_non_npv_current + Total_offsite_labor_cost_non_npv + Total_package_cost_non_npv + Total_process_cost_non_npv + setup_cost + add_cost
            Total_Expense_current <- Total_Storage_Cost_current + Total_Freight_cost_current + Total_process_cost + Total_package_cost + Total_offsite_labor_cost + Total_Material_cost_current  + setup_cost + add_cost
            
            Total_NPV <- Total_Revenue_current - Total_Expense_current 
            
            Total_NPV_non_npv <-  Total_Revenue_non_npv_current - Total_Expense_current_non_npv
            
            Total_Purchase_Qty <- Total_BQ
            Total_Inventory_Purchase <- Total_Purchase_Qty + Curr_Inv_copy
            BQ_S2_check <- ifelse(is.na(BQ_S2), 0, BQ_S1)
            Extended_purchase_cost <- BQ_S2_check * part_c_3
            
            Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
            
            Scenario_2_current <- rbind(Scenario_2_current, c(ATB_ADS[j,1],Total_Storage_Cost_current,Total_Storage_Cost_current_non_npv, Total_Freight_cost_current, 
                                                              Total_Freight_cost_current_non_npv, Total_Processing_cost_current,
                                                              Total_Material_cost_current,Total_Expense_current,Total_Expense_current_non_npv, Total_Revenue_current,
                                                              Total_NPV,Total_NPV_non_npv, Total_BQ,Total_FCST, 
                                                              Total_Material_cost_non_npv_current, Total_Revenue_non_npv_current, Total_transport_cost, Total_offsite_transport_cost,Total_transport_cost_non_npv, Total_offsite_transport_cost_non_npv,
                                                              Total_offsite_labor_cost, Total_offsite_labor_cost_non_npv, Total_process_cost,Total_process_cost_non_npv,
                                                              setup_cost, BQ_S2_check, First_buy, Last_sale,
                                                              Last_buy, Total_package_cost, Total_package_cost_non_npv, scrap_amount, DLR_Price_3,
                                                              wd_price ,
                                                              Revenue_OES_non_npv_no_discount, Revenue_IAM_non_npv_no_discount, Revenue_Allied_non_npv_no_discount,
                                                              Revenue_OES_non_npv_discount, Revenue_IAM_non_npv_discount, Revenue_Allied_non_npv_discount, add_cost,
                                                              Revenue_Allied_discount, Revenue_OES_discount, Revenue_IAM_discount, Total_Purchase_Qty,
                                                              Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST))
            
          }
          
          colnames(Scenario_2_current) <- c("Part_Nbr","Storage_Cost_Scenario_2","Storage_Cost_non_npv_Scenario_2", "Transportation_Cost_Scenario_2", "Transportation_cost_non_npv_Scenario_2",
                                            "Processing_Cost_Scenario_2","Part_Cost_Scenario_2","Expense_Scenario_2", "Expense_non_npv_Scenario_2", "Revenue_Scenario_2", "NPV_Scenario_2", "Profit_Non_NPV_Scenario_2",
                                            "Buy_Quantity_Scenario_2","Total_Forecast_Scenario_2", "Material_cost_non_npv_Scenario_2", "Revenue_non_npv_Scenario_2",
                                            "Total_transport_cost_Scenario_2", "Total_offsite_transport_cost_Scenario_2","Total_transport_cost_non_npv_Scenario_2", "Total_offsite_transport_cost_non_npv_Scenario_2",
                                            "Total_offsite_labor_cost_Scenario_2", "Total_offsite_labor_cost_non_npv_Scenario_2", 
                                            "Total_process_cost_Scenario_2", "Total_process_cost_non_npv_Scenario_2", "Setup_cost_Scenario_2", "LTB_Buy_Quantity_Scenario_2",
                                            "First_buy",
                                            "Last_sale", "Last_buy", "Package_cost_Scenario_2", "Package_cost_non_npv_Scenario_2", "Scrap_amount_Scenario_2", "Dealer_price_Scenario_2", "WD_dealer_price_Scenario_2", 
                                            'Revenue_OES_non_npv_no_discount_2', 
                                            'Revenue_IAM_non_npv_no_discount_2', 'Revenue_Allied_non_npv_no_discount_2',
                                            'Revenue_OES_non_npv_discount_2', 'Revenue_IAM_non_npv_discount_2', 'Revenue_Allied_non_npv_discount_2', "Additional_cost_Scenario_2",
                                            'Revenue_Allied_discount_2', 'Revenue_OES_discount_2', 'Revenue_IAM_discount_2', "Total_Purchase_Qty_2",
                                            "Total_Inventory_Purchase_2", "Extended_purchase_cost_2", "total_forecast")
          
          Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
          Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.numeric), stringsAsFactors=FALSE)
          Scenario_2_current <- Scenario_2_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
          Scenario_2_current$Part_Nbr <- str_pad(Scenario_2_current$Part_Nbr, width=8, side="left", pad="0")
          
          
        } else
        {
          Scenario_2_current <- data.frame()
          for (j in (1:nrow(ATB_ADS))) {
            
            cat("\nsc_2_cur Part Number: ",j," : ", ATB_ADS[j,1])
            final_NPV <- 0
            Optimal_year_count <- 1
            LTBQ <- 0
            Year <- c()
            FCST <- c()
            NPV_CR <- c()
            
            transport_cost <- c()
            offsite_transport_cost <- c()
            offsite_labor_cost <- c()
            process_cost <- c()
            
            Curr_Inv <- round(as.numeric(scenario_2$Values[18]), 4)
            Material_cost_CR_list <- c()
            Buy_Qty <- BQ_S2
            Total_Purchase_Qty <- BQ_S2
            
            Buy_Qty <- Buy_Qty + Curr_Inv
            
            YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
            
            for(n in (1:30)){
              FCST[n] <- ATB_ADS[j,(YI-1+n)]
            }
            
            FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
            
            Total_FCST <- sum(FCST)
            
            ## Calculating First Buy, Last Sale and Last Buy
            First_buy <- 0
            Last_sale <- 0
            Last_buy <- 0
            flag <- 0
            
            
            if(FCST[1] != 0)
            {
              First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
            } else
            {
              First_buy <- 0
            }
            
            for(i in 1:30)
            {
              if(FCST[i] == 0 & flag != 1)
              {
                Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                flag = 1
              } 
            }
            if(flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
            }
            
            Last_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
            
            p_to_get_year = 0
            q_to_get_demand = 0
            
            for(i in 1:30)
            {
              q_to_get_demand = q_to_get_demand + FCST[i]
              if(Buy_Qty > q_to_get_demand)
              {
                p_to_get_year = p_to_get_year + 1
              } else if(Buy_Qty <= FCST[1])
              {
                remain <- Buy_Qty
                
                c = 1
                d = 0
                for(i in 1:12)
                {
                  d = d + (FCST[p_to_get_year+1] / 12)
                  if(remain > d)
                  {
                    c = c+1
                  }
                }
                
                FCST[p_to_get_year+1] <- remain
                
                Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
                break()
              }
            }
            
            if(Buy_Qty > FCST[1] & p_to_get_year < 30)
            {
              remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
              c = 1
              d = 0
              for(i in 1:12)
              {
                d = d + (FCST[p_to_get_year+1] / 12)
                if(remain > d)
                {
                  c = c+1
                }
              }
              
              FCST[p_to_get_year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
            } else if(p_to_get_year >= 30)
            {
              remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
              FCST[p_to_get_year+1] <- 0
              Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
              c <- 0
            }
            
            if(p_to_get_year < 29)
            {
              for(i in ((p_to_get_year + 2) : 30))
              {
                FCST[i] <- 0
              }
            }
            
            ###########
            
            iam_weight <- ATB_ADS$IAM_FRACTION[j]
            oes_weight <- ATB_ADS$OES_FRACTION[j]
            allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
            
            FCST_iam <- round(FCST * iam_weight, digits = 0)
            FCST_oes <- round(FCST * oes_weight, digits = 0)
            FCST_allied <- round(FCST * allied_weight, digits = 0)
            
            Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
            
            Diff_FCST <- Sum_FCST - Sum_Forecast
            
            if(Buy_Qty > 0)
            {
              
              if(oes_weight != 0)
              {
                index <- tail(which(FCST_oes!=0),1)
              } else if(iam_weight != 0)
              {
                index <- tail(which(FCST_iam!=0),1)
              } else if(allied_weight != 0)
              {
                index <- tail(which(FCST_allied!=0),1)
              } else
              {
                index <- 1
              }
            } else
            {
              index <- 1
            }
            
            if(length(index)==0)
            {
              index <- 1
            }
            
            flag_revenue_oes <- 0
            flag_revenue_iam <- 0
            flag_revenue_allied <- 0
            
            if(oes_weight == 0)
            {
              FCST_oes[index] <- Sum_FCST + 1000
              flag_revenue_oes <- 1
            }
            if(iam_weight == 0)
            {
              FCST_iam[index] <- Sum_FCST + 1000
              flag_revenue_iam <- 1
            }
            if(allied_weight == 0)
            {
              FCST_allied[index] <- Sum_FCST + 1000
              flag_revenue_allied <- 1
            }
            
            
            if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
            {
              FCST_oes[index] <- FCST_oes[index] - Diff_FCST
              
            } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
            {
              FCST_iam[index] <- FCST_iam[index] - Diff_FCST
              
            } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
            {
              FCST_allied[index] <- FCST_allied[index] - Diff_FCST
            }
            
            if(flag_revenue_oes == 1)
            {
              FCST_oes[index] <- 0
            }
            if(flag_revenue_iam == 1)
            {
              FCST_iam[index] <- 0
            }
            if(flag_revenue_allied == 1)
            {
              FCST_allied[index] <- 0
            }
            
            ###########           
            BQ <- Buy_Qty
            
            qty <- 0
            yr_qty <- c()
            
            for (i in (1:(p_to_get_year))) {
              s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
              qty <- qty + s
              yr_qty[i+1] <- s
            }
            
            yr_qty[1] <- (2*BQ - FCST[1])/2        
            yr_qty[p_to_get_year + 2] <- 0
            
            Total_storage_qty <- sum(yr_qty)
            
            Storage_Cost <- 0
            revenue <- 0
            revenue_non <- 0
            revenue_allied <- 0
            revenue_oes <- 0
            revenue_iam <- 0
            revenue_non_npv_allied<-0
            revenue_non_npv_iam<-0
            revenue_non_npv_oes<-0
            Storage_Cost_non_npv <- 0
            Revenue_OES_non_npv_no_discount_2 <- 0
            Revenue_IAM_non_npv_no_discount_2 <- 0
            Revenue_Allied_non_npv_no_discount_2 <- 0
            Revenue_OES_non_npv_discount_2 <- 0
            Revenue_IAM_non_npv_discount_2 <- 0
            Revenue_Allied_non_npv_discount_2 <- 0
            
            if(p_to_get_year > 0)
            {
              
              for(k in (1 : (p_to_get_year + 1)))
              {
                CR <- ((1-(0.15/12))^(k*12))
                revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
                revenue_allied <- revenue_allied + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
                revenue_oes <- revenue_oes + (FCST_oes[k] * CR * (Dealer_Price_OES))
                revenue_iam <- revenue_iam + (FCST_iam[k] * CR * (Dealer_Price_IAM))
                
                #revenue_non_npv_allied <- revenue_non_npv_allied + (FCST_allied[k] *  (Dealer_Price_Allied_Export))
                #revenue_non_npv_oes <- revenue_non_npv_oes + (FCST_oes[k] * (Dealer_Price_OES))
                #revenue_non_npv_iam <- revenue_non_npv_iam + (FCST_iam[k] *  (Dealer_Price_IAM))
                #revenue_non <- round(revenue_non_npv_allied,2)+round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)
                revenue_non <- revenue_non + ((FCST[k]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
                
                Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
                Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
                
              }
            }
            
            
            if(p_to_get_year == 0)
            {
              
              for(k in (1:1))
              {
                CR <- ((1-(0.15/12))^(k*12))
                revenue <- revenue + ((FCST[1]) * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
                revenue_allied <- revenue_allied + (FCST_allied[1] * CR * (Dealer_Price_Allied_Export))
                revenue_oes <- revenue_oes + (FCST_oes[1] * CR * (Dealer_Price_OES))
                revenue_iam <- revenue_iam + (FCST_iam[1] * CR * (Dealer_Price_IAM))
                
                #revenue_allied <- revenue_allied + (FCST_allied[1] * CR * (Dealer_Price_Allied_Export))
                #revenue_oes <- revenue_oes + (FCST_oes[1] * CR * (Dealer_Price_OES))
                #revenue_iam <- revenue_iam + (FCST_iam[1] * CR * (Dealer_Price_IAM))
                #revenue_non <- round(revenue_non_npv_allied,2)+round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)
                revenue_non <- revenue_non + ((FCST[1]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
                Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
                Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
              }
            }
            
            Revenue_OES_non_npv_no_discount_2 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$OES_FRACTION[j]
            Revenue_IAM_non_npv_no_discount_2 <- Sum_Forecast * wd_price * ATB_ADS$IAM_FRACTION[j]
            Revenue_Allied_non_npv_no_discount_2 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$ALLIED_EXPORT_FRACTION[j]
            
            Revenue_OES_non_npv_discount_2 <- sum(FCST_oes) * Dealer_Price_OES 
            Revenue_IAM_non_npv_discount_2 <- sum(FCST_iam) * Dealer_Price_IAM
            Revenue_Allied_non_npv_discount_2 <- sum(FCST_allied) * Dealer_Price_Allied_Export
            
            revenue_non <- Revenue_OES_non_npv_discount_2 + Revenue_IAM_non_npv_discount_2 + Revenue_Allied_non_npv_discount_2
            
            offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
            
            Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
            Freight_cost <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost) * (1-(0.15/12))
            Freight_cost_non_npv <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost)
            
            Offsite_labour_cost <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
            Total_Processing_cost <- (((Onsite_procs_cpp1 ) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
            Total_Processing_cost_non_npv <- ((Onsite_procs_cpp1  * BQ) + Offsite_labour_cost)
            
            package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
            package_cost_non_npv <- Average_Processing_cpp1 * BQ
            
            Material_cost <- (part_c_3 * BQ)*(1-(0.15/12))
            Material_cost_non_npv <- (part_c_3 * BQ)
            
            Total_transport_cost <- (Onsite_trans_cpp1 * BQ) * (1-(0.15/12))
            Total_offsite_transport_cost <- Offsite_trans_cost * (1-(0.15/12))
            Total_offsite_labor_cost <- Offsite_labour_cost * (1-(0.15/12))
            Total_transport_cost_non_npv <- (Onsite_trans_cpp1 * BQ) 
            
            Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1)  * BQ) * (1-(0.15/12))
            Total_process_cost_non_npv <- ((Onsite_procs_cpp1 - Average_Processing_cpp1)  * BQ)
            
            
            Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + setup_cost + Material_cost
            revenue <- (revenue_allied + revenue_oes + revenue_iam)
            NPV_with_capital_rate <- revenue - Total_Expense
            
            Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + setup_cost +  Material_cost_non_npv
            NPV_non_npv <- revenue_non - Total_Expense_non_npv
            Total_Inventory_Purchase <- Buy_Qty
            
            scrap_amount <- Buy_Qty - sum(FCST)
            scrap_amount <- ifelse(scrap_amount < 0, 0, scrap_amount)
            Extended_purchase_cost <- BQ_S2 * part_c_3
            
            Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
            Scenario_2_current <- rbind(Scenario_2_current, c(ATB_ADS[j,1],Storage_Cost,Freight_cost,Total_Processing_cost,
                                                              Material_cost, Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                                              sum(FCST), Material_cost_non_npv, revenue_non, Total_transport_cost,Total_transport_cost_non_npv,
                                                              Total_offsite_transport_cost,Offsite_trans_cost, Total_offsite_labor_cost, Total_process_cost, setup_cost, BQ_S2, scrap_amount,
                                                              Storage_Cost_non_npv, Freight_cost_non_npv, Total_Processing_cost_non_npv, add_cost, package_cost_non_npv, 
                                                              package_cost, Offsite_labour_cost, Total_process_cost_non_npv, Total_Expense_non_npv,
                                                              NPV_non_npv, Revenue_OES_non_npv_no_discount_2, Revenue_IAM_non_npv_no_discount_2,
                                                              Revenue_Allied_non_npv_no_discount_2, Revenue_OES_non_npv_discount_2,
                                                              Revenue_IAM_non_npv_discount_2, Revenue_Allied_non_npv_discount_2,
                                                              revenue_allied, revenue_oes, revenue_iam, First_buy, Last_sale, Last_buy, Total_Purchase_Qty,
                                                              Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST
            ))
            
            colnames(Scenario_2_current) <- c("Part_Nbr","Storage_Cost_Scenario_2","Transportation_Cost_Scenario_2","Processing_Cost_Scenario_2",
                                              "Part_Cost_Scenario_2","Expense_Scenario_2","Revenue_Scenario_2","NPV_Scenario_2","Buy_Quantity_Scenario_2",
                                              "Total_Forecast_Scenario_2", "Material_cost_non_npv_Scenario_2","Revenue_non_npv_Scenario_2", 
                                              "Total_transport_cost_Scenario_2","Total_transport_cost_non_npv_Scenario_2","Total_offsite_transport_cost_Scenario_2","Total_offsite_transport_cost_non_npv_Scenario_2","Total_offsite_labor_cost_Scenario_2",
                                              "Total_process_cost_Scenario_2", "Setup_cost_Scenario_2", "LTB_Buy_Quantity_Scenario_2", "Scrap_amount_Scenario_2",
                                              "Storage_Cost_non_npv_Scenario_2", "Transportation_cost_non_npv_Scenario_2","Processing_Cost_non_npv_Scenario_2",
                                              "Additional_cost_Scenario_2", "Package_cost_non_npv_Scenario_2", "Package_cost_Scenario_2", "Total_offsite_labor_cost_non_npv_Scenario_2",
                                              "Total_process_cost_non_npv_Scenario_2", "Expense_non_npv_Scenario_2", "Profit_Non_NPV_Scenario_2", "Revenue_OES_non_npv_no_discount_2",
                                              "Revenue_IAM_non_npv_no_discount_2", "Revenue_Allied_non_npv_no_discount_2", "Revenue_OES_non_npv_discount_2", "Revenue_IAM_non_npv_discount_2",
                                              "Revenue_Allied_non_npv_discount_2", "Revenue_Allied_discount_2", "Revenue_OES_discount_2", "Revenue_IAM_discount_2",
                                              "First_buy", "Last_sale", "Last_buy", "Total_Purchase_Qty_2", "Total_Inventory_Purchase_2", "Extended_purchase_cost_2",
                                              "total_forecast")
            
          }
          Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
          Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.numeric), stringsAsFactors=FALSE)
          Scenario_2_current <- Scenario_2_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
          Scenario_2_current$Part_Nbr <- str_pad(Scenario_2_current$Part_Nbr, width=8, side="left", pad="0")
          
        }
        
        scrap_amount <- Scenario_2_current$Scrap_amount_Scenario_2[1]
        
        incProgress(1/4, detail = "Running Calculations")
        
        ########## Code for Scenario-2: Selldown calculation
        
        Selldown_NPV_Scenario_2 <- data.frame()
        Buy_Qty <- round(as.numeric(scenario_2$Values[18]), 4)
        
        for (j in (1:nrow(ATB_ADS))) {
          
          cat("\nsc_2_sell Part Number: ",j," : ", ATB_ADS[j,1])
          final_NPV <- 0
          Optimal_year_count <- 1
          LTBQ <- 0
          Year <- c()
          FCST <- c()
          NPV_CR <- c()
          Revenue_CR <- c()
          Expense <- c()
          Storage_cost_CR <- c()
          Freight_cost_CR <- c()
          Processing_cost_CR <- c()
          
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
          }
          
          FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
          
          p_to_get_year = 0
          q_to_get_demand = 0
          
          for(i in 1:30)
          {
            q_to_get_demand = q_to_get_demand + FCST[i]
            if(Buy_Qty > q_to_get_demand)
            {
              p_to_get_year = p_to_get_year + 1
            } else if(Buy_Qty <= FCST[1])
            {
              remain <- Buy_Qty
              c = 1
              d = 0
              for(i in 1:12)
              {
                d = d + (FCST[p_to_get_year+1] / 12)
                if(remain > d)
                {
                  c = c+1
                }
              }
              
              FCST[p_to_get_year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
              break()
            }
          }
          
          if(Buy_Qty > FCST[1] & p_to_get_year < 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
          } else if(p_to_get_year >= 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            FCST[p_to_get_year+1] <- 0
            Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
            c <- 0
          }
          
          if(p_to_get_year < 29)
          {
            for(i in ((p_to_get_year + 2) : 30))
            {
              FCST[i] <- 0
            }
          }
          
          ###########
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam_selldown <- round(FCST * iam_weight, digits = 0)
          FCST_oes_selldown <- round(FCST * oes_weight, digits = 0)
          FCST_allied_selldown <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam_selldown) + sum(FCST_oes_selldown) + sum(FCST_allied_selldown)
          
          Diff_FCST <- Sum_FCST - Sum_Forecast
          
          if(Buy_Qty > 0 & Sum_Forecast > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes_selldown!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam_selldown!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied_selldown!=0),1)
            } else
            {
              index <- 1
            }
            
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes_selldown[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam_selldown[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied_selldown[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes_selldown[index] < FCST_iam_selldown[index] & FCST_oes_selldown[index] < FCST_allied_selldown[index] & oes_weight != 0)
          {
            FCST_oes_selldown[index] <- FCST_oes_selldown[index] - Diff_FCST
            
          } else if(FCST_iam_selldown[index] <= FCST_oes_selldown[index] & FCST_iam_selldown[index] <= FCST_allied_selldown[index] & iam_weight != 0)
          {
            FCST_iam_selldown[index] <- FCST_iam_selldown[index] - Diff_FCST
            
          } else if(FCST_allied_selldown[index] <= FCST_oes_selldown[index] & FCST_allied_selldown[index] <= FCST_iam_selldown[index] & allied_weight != 0)
          {
            FCST_allied_selldown[index] <- FCST_allied_selldown[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes_selldown[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam_selldown[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied_selldown[index] <- 0
          }
          
          ###########
          
          
          BQ <- Buy_Qty
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(p_to_get_year))) {
            s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + s
            yr_qty[i+1] <- s
          }
          
          yr_qty[1] <- (2*BQ - FCST[1])/2        
          yr_qty[p_to_get_year + 2] <- 0
          
          Total_storage_qty <- sum(yr_qty)
          
          Storage_Cost <- 0
          Storage_Cost_non_npv <- 0
          revenue <- 0
          revenue_iam <- 0
          revenue_oes <- 0
          revenue_allied <- 0
          revenue_non_npv <- 0
          revenue_non_npv_iam <- 0
          revenue_non_npv_oes <- 0
          revenue_non_npv_allied <- 0
          
          
          if(p_to_get_year > 0)
          {
            
            for(k in (1 : (p_to_get_year + 1)))
            {
              CR <- ((1-(0.15/12))^(k*12))
              
              revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              #revenue_non_npv <- revenue_non_npv + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              
              revenue_iam <- revenue_iam + (FCST_iam_selldown[k] * CR * (Dealer_Price_IAM))
              revenue_oes <- revenue_oes + (FCST_oes_selldown[k] * CR * (Dealer_Price_OES))
              revenue_allied <- revenue_allied + (FCST_allied_selldown[k] * CR * (Dealer_Price_Allied_Export))
              
              revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[k] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
              revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[k] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
              revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[k] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
              revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
              
              Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
              
              
            }
          }
          
          if(p_to_get_year == 0)
          {
            
            for(k in (1:1))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_non_npv <- revenue_non_npv + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              
              revenue_iam <- revenue_iam + (FCST_iam_selldown[1] * CR * (Dealer_Price_IAM))
              revenue_oes <- revenue_oes + (FCST_oes_selldown[1] * CR * (Dealer_Price_OES))
              revenue_allied <- revenue_allied + (FCST_allied_selldown[1] * CR * (Dealer_Price_Allied_Export))
              
              # revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[1] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
              # revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[1] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
              # revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[1] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
              # revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
              
              Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
            }
          }
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
          Freight_cost <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost) * (1-(0.15/12))
          Freight_cost_non_npv <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost)
          
          Offsite_labour_cost <- offsite_quantity*as.numeric(Offsite_Labor_cpp1)
          #Total_Processing_cost <- (((Onsite_procs_cpp1 ) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
          Total_Processing_cost <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ + Offsite_labour_cost) * (1-(0.15/12))
          Total_Processing_cost_non_npv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost)
          
          package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
          package_cost_non_npv <- Average_Processing_cpp1 * BQ
          Total_Processing_cost_non_npv <- (((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ) + Offsite_labour_cost)
          
          #Total_Processing_cost <- Total_Processing_cost - package_cost
          #Total_Processing_cost_non_npv <- Total_Processing_cost_non_npv - package_cost_non_npv
          
          Material_cost <- BQ * part_c_3 * (1-(0.15/12))
          Material_cost_non_npv <- BQ * part_c_3
          
          Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + Material_cost  + setup_cost + package_cost
          revenue <- revenue_iam + revenue_oes + revenue_allied
          NPV_with_capital_rate <- revenue - Total_Expense
          
          Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + Material_cost_non_npv + setup_cost + package_cost_non_npv
          NPV_with_capital_rate_non_npv <- revenue_non_npv - Total_Expense_non_npv
          
          Selldown_NPV_Scenario_2 <- data.frame(lapply(Selldown_NPV_Scenario_2, as.character), stringsAsFactors=FALSE)
          Selldown_NPV_Scenario_2 <- rbind(Selldown_NPV_Scenario_2, c(ATB_ADS[j,1], Material_cost, Storage_Cost,Freight_cost,Total_Processing_cost,Total_Expense,
                                                                      revenue,NPV_with_capital_rate,Buy_Qty,
                                                                      Material_cost_non_npv, Storage_Cost_non_npv, Freight_cost_non_npv,
                                                                      Total_Processing_cost_non_npv, add_cost, package_cost_non_npv,
                                                                      setup_cost, package_cost, revenue_non_npv, NPV_with_capital_rate_non_npv,
                                                                      revenue_iam, revenue_oes, revenue_allied, revenue_non_npv_iam, revenue_non_npv_oes, revenue_non_npv_allied))
          
          colnames(Selldown_NPV_Scenario_2) <- c("Part_Nbr","Selldown_Material_cost_Scenario_2","Selldown_Storage_Cost_Scenario_2","Selldown_Freight_cost_Scenario_2",
                                                 "Selldown_Processing_Cost_Scenario_2","Total_Expense_Scenario_2","Selldown_Revenue_Scenario_2",
                                                 "Selldown_NPV_Scenario_2","Total_BQ_Scenario_2", "Selldown_Material_cost_non_npv_Scenario_2", "Selldown_Storage_Cost_non_npv_Scenario_2",
                                                 "Selldown_Freight_cost_non_npv_Scenario_2", "Selldown_Processing_Cost_non_npv_Scenario_2", "Selldown_Additional_Cost_Scenario_2",
                                                 "Selldown_Package_Cost_non_npv_Scenario_2", "Selldown_Setup_Cost_Scenario_2", "Selldown_Package_Cost_Scenario_2",
                                                 "Selldown_Revenue_non_npv_Scenario_2", "Selldown_NPV_non_npv_Scenario_2", "Selldown_Revenue_Scenario_2_IAM", 
                                                 "Selldown_Revenue_Scenario_2_OES", "Selldown_Revenue_Scenario_2_Allied", "Selldown_Revenue_non_npv_Scenario_2_IAM",
                                                 "Selldown_Revenue_non_npv_Scenario_2_OES", "Selldown_Revenue_non_npv_Scenario_2_Allied")
          
        }
        Selldown_NPV_Scenario_2 <- data.frame(lapply(Selldown_NPV_Scenario_2, as.character), stringsAsFactors=FALSE)
        Selldown_NPV_Scenario_2 <- data.frame(lapply(Selldown_NPV_Scenario_2, as.numeric), stringsAsFactors=FALSE)
        Selldown_NPV_Scenario_2 <- Selldown_NPV_Scenario_2 %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        
        
        Selldown_NPV_Scenario_2$Part_Nbr <- str_pad(Selldown_NPV_Scenario_2$Part_Nbr, width=8, side="left", pad="0")
        
        
        incProgress(1/4, detail = "Running Calculations")
        
        ###################
        shinyjs::show("line_2")
        output$line_2 <- renderHighchart({
          
          graph_2 <- NPV_Data_2
          graph_2 <- as.data.frame(graph_2)
          graph_2$Buy_quantity_list <- as.numeric(as.character(graph_2$Buy_quantity_list))
          graph_2$NPV_CR_list <- as.numeric(as.character(graph_2$NPV_CR_list))
          
          highchart() %>% 
            hc_title(text="NPV variation with Buy Qty") %>%
            hc_chart(type = "line") %>%
            hc_xAxis(title=list(text="Buy Quantity"),categories= as.vector(graph_2$Buy_quantity_list))  %>%
            hc_yAxis(title=list(text="NPV"))  %>% 
            hc_add_theme(hc_theme_sandsignika()) %>%
            hc_add_series(name = "NPV", data = as.vector(graph_2$NPV_CR_list))
          
        })
        
        
        ## Creating Download Report of Scenario-2 
        result_scenario_2 <- merge(Scenario_2_current, Scenario_2_optimal, by = "Part_Nbr")
        result_scenario_2 <- merge(result_scenario_2, Selldown_NPV_Scenario_2, by = "Part_Nbr")
        result_scenario_2 <- merge(result_scenario_2, t_scenario_2, by = "Part_Nbr")
        
        result_scenario_2 <- result_scenario_2 %>% select(Part_Nbr, NPV_Scenario_2,
                                                          Selldown_NPV_Scenario_2,Selldown_NPV_non_npv_Scenario_2, Revenue_Scenario_2,Revenue_non_npv_Scenario_2,Part_Cost_Scenario_2,Material_cost_non_npv_Scenario_2,
                                                          Setup_cost_Scenario_2 ,Total_transport_cost_Scenario_2,Total_transport_cost_non_npv_Scenario_2,Storage_Cost_Scenario_2,Storage_Cost_non_npv_Scenario_2,
                                                          Total_process_cost_Scenario_2,  Total_process_cost_non_npv_Scenario_2,Package_cost_Scenario_2,Package_cost_non_npv_Scenario_2,
                                                          Total_offsite_labor_cost_Scenario_2,Total_offsite_labor_cost_non_npv_Scenario_2,Total_offsite_transport_cost_Scenario_2,Total_offsite_transport_cost_non_npv_Scenario_2, 
                                                          Additional_Cost_2,Selldown_Revenue_Scenario_2,Selldown_Revenue_non_npv_Scenario_2,
                                                          Selldown_Material_cost_Scenario_2,Selldown_Material_cost_non_npv_Scenario_2,
                                                          Selldown_Freight_cost_Scenario_2,Selldown_Freight_cost_non_npv_Scenario_2,Selldown_Storage_Cost_Scenario_2,Selldown_Storage_Cost_non_npv_Scenario_2, Selldown_Processing_Cost_Scenario_2,
                                                          Selldown_Processing_Cost_non_npv_Scenario_2,Selldown_Package_Cost_Scenario_2,Selldown_Package_Cost_non_npv_Scenario_2,
                                                          Total_Inventory,
                                                          First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_2, LTB_Buy_Quantity_Scenario_2,
                                                          Total_Purchase_Qty_2, Total_Forecast_Scenario_2,
                                                          Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2, Optimal_Material_Cost_Scenario_2, Optimal_Setup_cost_Scenario_2,
                                                          Optimal_Total_transport_cost_Scenario_2,
                                                          Optimal_Total_offsite_transport_cost_Scenario_2, Optimal_Storage_Cost_Scenario_2, Optimal_Total_process_cost_Scenario_2,
                                                          Optimal_Packaging_cost_Scenario_2,
                                                          Optimal_Total_offsite_labor_cost_Scenario_2, Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2,
                                                          Extended_purchase_cost_2,Proposed_Dealer_Price, Proposed_WD_Price, Material_Cost, MOQ,Standard_Pack,Setup_Cost_s2,Additional_Cost_s2,Monthly_square_feet_cpp,
                                                          Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                                          Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp)
        
        result_scenario_2$Part_Nbr <- str_pad(result_scenario_2$Part_Nbr, width=8, side="left", pad="0")
        write.csv(result_scenario_2, file = "Result_scenario_2.csv", row.names = FALSE)
        
        output$downloadData_s_2 <- downloadHandler(
          filename = function() { 
            paste("Part_view_Scenario-2",".csv", sep="") 
          },
          content = function(file) {
            scenario_2 <- result_scenario_2
            scenario_2$Part_Nbr <- str_pad(scenario_2$Part_Nbr, width=8, side="left", pad="0")
            scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],
                                     lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                     lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                     lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                     formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                                     lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                     lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                     lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                     lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                     stringsAsFactors = FALSE)
            
            colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                      "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                      "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                      "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                      "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                      "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                      "Current Inventory",
                                      "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                      "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                      "Optimal NPV  Scenario-2",
                                      "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                      "Optimal Offsite transport cost Scenario-2",
                                      "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                      "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                      "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                      "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
            
            
            write.csv(scenario_2, file)
            
          },
          contentType = "csv"
        )
        
        ## Downloading all Scenarios
        output$download_all_scenario<- downloadHandler(
          filename = function() {
            paste("All_Scenarios",".xlsx", sep="") 
          },
          content = function(file) {
            scenario_current <- read.csv("current_scenario.csv", stringsAsFactors = FALSE)
            scenario_1 <- read.csv("Result_scenario_1.csv", stringsAsFactors = FALSE)
            scenario_2 <- read.csv("Result_scenario_2.csv", stringsAsFactors = FALSE)
            
            scenario_current <- data.frame(Part_Nbr = scenario_current[,1],
                                           lapply(scenario_current[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                           lapply(scenario_current[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                           lapply(scenario_current[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(scenario_current[,53] , big.mark=",", digits=0, format="f"),formatC(scenario_current[,54] , big.mark=",", digits=2, format="f"),
                                           lapply(scenario_current[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                           lapply(scenario_current[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                           paste("$", formatC(scenario_current[,65] , big.mark=",", digits=0, format="f")),
                                           lapply(scenario_current[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                           lapply(scenario_current[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),  # change 786 
                                           scenario_current[,80:83],
                                           stringsAsFactors = FALSE)
            
            colnames(scenario_current) <- c("Part Number",
                                            "NPV", "Selldown NPV","Selldown Non NPV",
                                            "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                                            "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                                            "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                                            "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                                            "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                                            "Current Inventory",
                                            "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                                            "Total Purchase", "Total Sales", "Optimal NPV",
                                            "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                                            "Optimal Storage Cost",
                                            "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                                            "Optimal ATB Quantity","Optimal payback period", "Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export", ## change 786
                                            "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                                            "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                                            "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                                            "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)","Simple payabck period","Discounted payback period","2 year payback ATB","2 year payback NPV")
            
            scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                                     lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                     lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                     lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                     formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                                     lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                     lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                     lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                     lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                     stringsAsFactors = FALSE)
            
            colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                      "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                      "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                      "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                      "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                      "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                      "Current Inventory",
                                      "First Buy","Last Buy","Last Sale","Scrap Scenario-1",  "Entered Buy Quantity Scenario-1",
                                      "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                      "Optimal NPV  Scenario-1",
                                      "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                      "Optimal Offsite transport cost Scenario-1",
                                      "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                      "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                      "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                      "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
            
            scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],
                                     lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                     lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                     lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                     formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                                     lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                     lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                     lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                     lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                     stringsAsFactors = FALSE)
            
            colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                      "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                      "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                      "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                      "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                      "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                      "Current Inventory",
                                      "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                      "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                      "Optimal NPV  Scenario-2",
                                      "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                      "Optimal Offsite transport cost Scenario-2",
                                      "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                      "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                      "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                      "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
            
            write.xlsx2(scenario_current, file, sheetName="Current", row.names=FALSE)
            write.xlsx2(scenario_1, file, sheetName="Scenario-1", append=TRUE, row.names=FALSE)
            write.xlsx2(scenario_2, file, sheetName="Scenario-2", append=TRUE, row.names=FALSE)
            
          }
        )
        
        ## Refreshing data at the back end
        spl_7 <- Scenario_2_current
        spl_7$Part_Nbr <- str_pad(spl_7$Part_Nbr, width=8, side="left", pad="0")
        spl_8 <- Scenario_2_optimal
        spl_8$Part_Nbr <- str_pad(spl_8$Part_Nbr, width=8, side="left", pad="0")
        spl_9 <- Selldown_NPV_Scenario_2
        spl_9$Part_Nbr <- str_pad(spl_9$Part_Nbr, width=8, side="left", pad="0")
        spl_x2 <- t_scenario_2
        
        spl_78 <- merge(spl_7, spl_8, by = "Part_Nbr")
        spl_789 <- merge(spl_78, spl_9, by = "Part_Nbr")
        spl_789 <- merge(spl_789, spl_x2, by = "Part_Nbr")
        global_scenario_2$df_data_sce_2 <- spl_789
        
        spl_789_result <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2, Selldown_NPV_Scenario_2, Revenue_Scenario_2, Revenue_non_npv_Scenario_2,
                                             Optimal_NPV_Scenario_2, Optimal_ATB_Quantity_Scenario_2,total_forecast)
        
        spl_789_result <- as.data.frame(spl_789_result)
        spl_789_result <- data.frame(lapply(spl_789_result, as.character), stringsAsFactors=FALSE)
        spl_789_result <- data.frame(lapply(spl_789_result, as.numeric), stringsAsFactors=FALSE)
        
        shinyjs::show("analysis_sce_2")
        if (input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
        {
          scenario_2_display <- read.csv("spl_789_result.csv", stringsAsFactors = FALSE)
          
          scenario_2_display[scenario_2_display$Part_Nbr == spl_789_result$Part_Nbr[1], ] <- spl_789_result[1,]
          write.csv(scenario_2_display, file = "spl_789_result.csv", row.names = FALSE)
          
          scenario_2_display$Part_Nbr <- str_pad(scenario_2_display$Part_Nbr, width=8, side="left", pad="0")
          
          output$analysis_sce_2 <- renderHotable({
            scenario_2_display <- data.frame(Part_Nbr = scenario_2_display[,1], lapply(scenario_2_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                             formatC(scenario_2_display[,7] , big.mark=",", digits=0, format="f"), formatC(scenario_2_display[,8] , big.mark=",", digits=0, format="f") ,stringsAsFactors = FALSE)
            
            colnames(scenario_2_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
            
            scenario_2_display
          })
          
        } else
        {
          scenario_2_display <- read.csv("spl_123_result_s2.csv", stringsAsFactors = FALSE)
          scenario_2_display[scenario_2_display$Part_Nbr == spl_789_result$Part_Nbr[1], ] <- spl_789_result[1,]
          write.csv(scenario_2_display, file = "spl_123_result_s2.csv", row.names = FALSE)
          
          scenario_2_display$Part_Nbr <- str_pad(scenario_2_display$Part_Nbr, width=8, side="left", pad="0")
          
          output$analysis_sce_2 <- renderHotable({
            scenario_2_display <- data.frame(Part_Nbr = scenario_2_display[,1], lapply(scenario_2_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                             formatC(scenario_2_display[,7] , big.mark=",", digits=0, format="f"), formatC(scenario_2_display[,8] , big.mark=",", digits=0, format="f") ,stringsAsFactors = FALSE)
            
            colnames(scenario_2_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
            scenario_2_display
          })
        }
        
        reflect_back_scenario_2 <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2,
                                                      Selldown_NPV_Scenario_2,Selldown_NPV_non_npv_Scenario_2, Revenue_Scenario_2,Revenue_non_npv_Scenario_2,Part_Cost_Scenario_2,Material_cost_non_npv_Scenario_2,
                                                      Setup_cost_Scenario_2 ,Total_transport_cost_Scenario_2,Total_transport_cost_non_npv_Scenario_2,Storage_Cost_Scenario_2,Storage_Cost_non_npv_Scenario_2,
                                                      Total_process_cost_Scenario_2,  Total_process_cost_non_npv_Scenario_2,Package_cost_Scenario_2,Package_cost_non_npv_Scenario_2,
                                                      Total_offsite_labor_cost_Scenario_2,Total_offsite_labor_cost_non_npv_Scenario_2,Total_offsite_transport_cost_Scenario_2,Total_offsite_transport_cost_non_npv_Scenario_2, 
                                                      Additional_Cost_2,Selldown_Revenue_Scenario_2,Selldown_Revenue_non_npv_Scenario_2,
                                                      Selldown_Material_cost_Scenario_2,Selldown_Material_cost_non_npv_Scenario_2,
                                                      Selldown_Freight_cost_Scenario_2,Selldown_Freight_cost_non_npv_Scenario_2,Selldown_Storage_Cost_Scenario_2,Selldown_Storage_Cost_non_npv_Scenario_2, Selldown_Processing_Cost_Scenario_2,
                                                      Selldown_Processing_Cost_non_npv_Scenario_2,Selldown_Package_Cost_Scenario_2,Selldown_Package_Cost_non_npv_Scenario_2,
                                                      Total_Inventory,
                                                      First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_2, LTB_Buy_Quantity_Scenario_2,
                                                      Total_Purchase_Qty_2, Total_Forecast_Scenario_2,
                                                      Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2, Optimal_Material_Cost_Scenario_2, Optimal_Setup_cost_Scenario_2,
                                                      Optimal_Total_transport_cost_Scenario_2,
                                                      Optimal_Total_offsite_transport_cost_Scenario_2, Optimal_Storage_Cost_Scenario_2, Optimal_Total_process_cost_Scenario_2,
                                                      Optimal_Packaging_cost_Scenario_2,
                                                      Optimal_Total_offsite_labor_cost_Scenario_2, Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2,
                                                      Extended_purchase_cost_2,Proposed_Dealer_Price, Proposed_WD_Price, Material_Cost, MOQ,Standard_Pack,Setup_Cost_s2,Additional_Cost_s2,Monthly_square_feet_cpp,
                                                      Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                                      Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp)
        
        report_update <- global_scenario_2_down$df_data_scenario_2_down
        report_update$Part_Nbr <- str_pad(report_update$Part_Nbr, width=8, side="left", pad="0")
        report_update[report_update$Part_Nbr == reflect_back_scenario_2$Part_Nbr[1], 2:72] <- reflect_back_scenario_2[1, 2:72]
        global_scenario_2_down$df_data_scenario_2_down <- report_update
        
        ## Generating income report for Scenario-2
        income_report_scenario_2 <- c(1:52)
        income_report_scenario_2<- as.data.frame(income_report_scenario_2)
        income_report_scenario_2$Fields <-  c('Dealer Price', 'Wd price', 'Allied Price', 'Dealer discount %', 'Wd discount %', 'Allied Discount %', 'Net Dealer', 'Net Wd',
                                              'Net Allied',
                                              'Lifetime Revenue(Non NPV)',
                                              'Lifetime Revenue(NPV)',
                                              'Sell Down Revenue(Non NPV) - OES',
                                              'Sell Down Revenue(Non NPV) - IAM',
                                              'Sell Down Revenue(Non NPV) - Allied/Export',
                                              'Sell Down Revenue(Non NPV',
                                              'Selldown Revenue (NPV)',
                                              'Material Cost(Non NPV)',
                                              'Material Cost(NPV)',
                                              'Sell Down Material Non Npv',
                                              'Sell Down Material (NPV)',
                                              'Transportation Cost(NON NPV)',
                                              'Transportation Cost(NPV)',
                                              'Sell Down Transportation cost (Non NPV)',
                                              'Sell Down Transportation cost (NPV)',
                                              'Labor Cost(NON NPV)',
                                              'Labor Cost(NPV)',
                                              'Sell Down Labor (NON NPV)',
                                              'Sell Down Labor (NPV)',
                                              'Storage Cost (Non NPV)',
                                              'Storage Cost(NPV)',
                                              'Sell Down Storage(Non NPV)',
                                              'Sell Down Storage(NPV)',
                                              'Packaging Cost(NON NPV)',
                                              'Packaging Cost(NPV)',
                                              'Sell Down Packaging Cost (NON NPV)',
                                              'Sell Down Packaging Cost (NPV)',
                                              'Set up Cost (NON NPV)',
                                              'Setup Cost(NPV)',
                                              'Additional Cost($)',
                                              'Total Expense(NON NPV)',
                                              'Total Expense(NPV)',
                                              'Profit (Non NPV)',
                                              'NPV',
                                              'Selldown (non Npv)',
                                              'Selldown NPV',
                                              'National Inventory',
                                              'Total Purchase',
                                              'Total Inventory and Purchase',
                                              'Total Sales',
                                              'Scrap',
                                              'MOQ',
                                              'Standard Pack')
        
        sales_oes <- sum(FCST_oes)
        sales_iam <- sum(FCST_iam)
        sales_allied <- sum(FCST_allied)
        
        inventory_oes <- round(Current_Inventory * ATB_ADS$OES_FRACTION[1], digits = 0)
        inventory_iam <- round(Current_Inventory * ATB_ADS$IAM_FRACTION[1], digits = 0)
        inventory_allied <- round(Current_Inventory * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        if(is.na(BQ_S2))
        {
          
          purchase_oes <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
          purchase_iam <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
          purchase_allied <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
          
          ## Calculating the difference in sales, inventory and purchase before and after rounding
          diff_sales <- Scenario_2_current$Total_Forecast_Scenario_2[1] - (sales_oes + sales_iam + sales_allied)
          diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
          diff_purchase <- ceiling(Scenario_2_current$Buy_Quantity_Scenario_2[1]) - (purchase_oes + purchase_iam + purchase_allied)
          
          ## Calling function to adjust the rounding error in sales, purcahse and inventory
          sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
          sales_values <- unlist(sales_values)
          sales_oes <- sales_values[1]
          sales_iam <- sales_values[2]
          sales_allied <- sales_values[3]
          
          inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
          inventory_values <- unlist(inventory_values)
          inventory_oes <- inventory_values[1]
          inventory_iam <- inventory_values[2]
          inventory_allied <- inventory_values[3]
          
          purchase_values <- Round_fn(purchase_oes, purchase_iam, purchase_allied, diff_purchase)
          purchase_values <- unlist(purchase_values)
          purchase_oes <- purchase_values[1]
          purchase_iam <- purchase_values[2]
          purchase_allied <- purchase_values[3]
          
          purchase_inventory <- ceiling((Current_Inventory + Scenario_2_current$Buy_Quantity_Scenario_2[1]))
          purchase_inventory_oes <- inventory_oes + purchase_oes
          purchase_inventory_iam <- inventory_iam + purchase_iam
          purchase_inventory_allied <- inventory_allied + purchase_allied
          income_report_scenario_2$income_report_scenario_2 <- NULL
          
          income_report_scenario_2$Per_unit <- c(Scenario_2_optimal$Proposed_Dealer_Price_2[1], Scenario_2_optimal$Proposed_Wd_Price_2[1], 
                                                 Scenario_2_optimal$Proposed_Dealer_Price_2[1], ATB_ADS$Discount_oes_percent[1], 
                                                 ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                                 Scenario_2_current$Revenue_OES_non_npv_discount_2[1], Scenario_2_current$Revenue_IAM_non_npv_discount_2[1], 
                                                 Scenario_2_current$Revenue_Allied_non_npv_discount_2[1], 
                                                 Scenario_2_current$Revenue_non_npv_Scenario_2[1], Scenario_2_current$Revenue_Scenario_2[1],
                                                 Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_OES[1], Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_IAM[1],
                                                 Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_Allied[1],
                                                 Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2[1],
                                                 Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2[1], part_c_3, 
                                                 Scenario_2_current$Part_Cost_Scenario_2[1],
                                                 part_c_3, Selldown_NPV_Scenario_2$Selldown_Material_cost_Scenario_2[1], 
                                                 Scenario_2_current$Transportation_cost_non_npv_Scenario_2[1], Scenario_2_current$Transportation_Cost_Scenario_2[1], 
                                                 Selldown_NPV_Scenario_2$Selldown_Freight_cost_non_npv_Scenario_2[1],
                                                 Selldown_NPV_Scenario_2$Selldown_Freight_cost_Scenario_2[1], 
                                                 (Scenario_2_current$Total_offsite_labor_cost_non_npv_Scenario_2[1] + Scenario_2_current$Total_process_cost_non_npv_Scenario_2[1]), 
                                                 (Scenario_2_current$Total_offsite_labor_cost_Scenario_2[1] + Scenario_2_current$Total_process_cost_Scenario_2[1]),
                                                 Selldown_NPV_Scenario_2$Selldown_Processing_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Processing_Cost_Scenario_2[1],
                                                 Scenario_2_current$Storage_Cost_non_npv_Scenario_2[1],
                                                 Scenario_2_current$Storage_Cost_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Storage_Cost_non_npv_Scenario_2[1], 
                                                 Selldown_NPV_Scenario_2$Selldown_Storage_Cost_Scenario_2[1],
                                                 Scenario_2_current$Package_cost_non_npv_Scenario_2[1], Scenario_2_current$Package_cost_Scenario_2[1], 
                                                 Selldown_NPV_Scenario_2$Selldown_Package_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Package_Cost_Scenario_2[1],
                                                 Scenario_2_current$Setup_cost_Scenario_2[1], Scenario_2_current$Setup_cost_Scenario_2[1],
                                                 Scenario_2_current$Additional_cost_Scenario_2[1], Scenario_2_current$Expense_non_npv_Scenario_2[1], Scenario_2_current$Expense_Scenario_2[1],
                                                 Scenario_2_current$Profit_Non_NPV_Scenario_2[1], Scenario_2_current$NPV_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_NPV_non_npv_Scenario_2[1],
                                                 Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1], Current_Inventory, ceiling(Scenario_2_current$Buy_Quantity_Scenario_2[1]),
                                                 ceiling((Current_Inventory + Scenario_2_current$Buy_Quantity_Scenario_2[1])),
                                                 Scenario_2_current$Total_Forecast_Scenario_2[1], Scenario_2_current$Scrap_amount_Scenario_2[1], moq,
                                                 std_p)
          
        } else
        {
          purchase_inventory <- Scenario_2_current$Buy_Quantity_Scenario_2[1]
          purchase_inventory_oes <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
          purchase_inventory_iam <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
          purchase_inventory_allied <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
          
          ## Calculating the difference in sales, inventory and purchase before and after rounding
          diff_sales <- Scenario_2_current$Total_Forecast_Scenario_2[1] - (sales_oes + sales_iam + sales_allied)
          diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
          diff_purchase_inventory <- ceiling(Scenario_2_current$Buy_Quantity_Scenario_2[1]) - (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied)
          
          ## Calling function to adjust the rounding error in sales, purcahse and inventory
          sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
          sales_values <- unlist(sales_values)
          sales_oes <- sales_values[1]
          sales_iam <- sales_values[2]
          sales_allied <- sales_values[3]
          
          inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
          inventory_values <- unlist(inventory_values)
          inventory_oes <- inventory_values[1]
          inventory_iam <- inventory_values[2]
          inventory_allied <- inventory_values[3]
          
          purchase_inventory_values <- Round_fn(purchase_inventory_oes, purchase_inventory_iam, purchase_inventory_allied, diff_purchase_inventory)
          purchase_inventory_values <- unlist(purchase_inventory_values)
          purchase_inventory_oes <- purchase_inventory_values[1]
          purchase_inventory_iam <- purchase_inventory_values[2]
          purchase_inventory_allied <- purchase_inventory_values[3]
          
          purchase_values <- Scenario_2_current$Buy_Quantity_Scenario_2[1] - Current_Inventory
          purchase_oes <- purchase_inventory_oes - inventory_oes
          purchase_iam <- purchase_inventory_iam - inventory_iam
          purchase_allied <- purchase_inventory_allied - inventory_allied
          
          income_report_scenario_2$income_report_scenario_2 <- NULL
          
          income_report_scenario_2$Per_unit <- c(Scenario_2_optimal$Proposed_Dealer_Price_2[1], Scenario_2_optimal$Proposed_Wd_Price_2[1], 
                                                 Scenario_2_optimal$Proposed_Dealer_Price_2[1], ATB_ADS$Discount_oes_percent[1], 
                                                 ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                                 Scenario_2_current$Revenue_OES_non_npv_discount_2[1], Scenario_2_current$Revenue_IAM_non_npv_discount_2[1], 
                                                 Scenario_2_current$Revenue_Allied_non_npv_discount_2[1], 
                                                 Scenario_2_current$Revenue_non_npv_Scenario_2[1], Scenario_2_current$Revenue_Scenario_2[1],
                                                 Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_OES[1], Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_IAM[1],
                                                 Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_Allied[1],
                                                 Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2[1],
                                                 Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2[1], part_c_3, 
                                                 Scenario_2_current$Part_Cost_Scenario_2[1],
                                                 part_c_3, Selldown_NPV_Scenario_2$Selldown_Material_cost_Scenario_2[1], 
                                                 Scenario_2_current$Transportation_cost_non_npv_Scenario_2[1], Scenario_2_current$Transportation_Cost_Scenario_2[1], 
                                                 Selldown_NPV_Scenario_2$Selldown_Freight_cost_non_npv_Scenario_2[1],
                                                 Selldown_NPV_Scenario_2$Selldown_Freight_cost_Scenario_2[1], 
                                                 (Scenario_2_current$Total_offsite_labor_cost_non_npv_Scenario_2[1] + Scenario_2_current$Total_process_cost_non_npv_Scenario_2[1]), 
                                                 (Scenario_2_current$Total_offsite_labor_cost_Scenario_2[1] + Scenario_2_current$Total_process_cost_Scenario_2[1]),
                                                 Selldown_NPV_Scenario_2$Selldown_Processing_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Processing_Cost_Scenario_2[1],
                                                 Scenario_2_current$Storage_Cost_non_npv_Scenario_2[1],
                                                 Scenario_2_current$Storage_Cost_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Storage_Cost_non_npv_Scenario_2[1], 
                                                 Selldown_NPV_Scenario_2$Selldown_Storage_Cost_Scenario_2[1],
                                                 Scenario_2_current$Package_cost_non_npv_Scenario_2[1], Scenario_2_current$Package_cost_Scenario_2[1], 
                                                 Selldown_NPV_Scenario_2$Selldown_Package_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Package_Cost_Scenario_2[1],
                                                 Scenario_2_current$Setup_cost_Scenario_2[1], Scenario_2_current$Setup_cost_Scenario_2[1],
                                                 Scenario_2_current$Additional_cost_Scenario_2[1], Scenario_2_current$Expense_non_npv_Scenario_2[1], Scenario_2_current$Expense_Scenario_2[1],
                                                 Scenario_2_current$Profit_Non_NPV_Scenario_2[1], Scenario_2_current$NPV_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_NPV_non_npv_Scenario_2[1],
                                                 Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1], Current_Inventory, (purchase_oes + purchase_iam + purchase_allied),
                                                 (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied),
                                                 Scenario_2_current$Total_Forecast_Scenario_2[1], Scenario_2_current$Scrap_amount_Scenario_2[1], moq,
                                                 std_p)
          
        }
        income_report_scenario_2$Per_unit[c(10:11)] <- income_report_scenario_2$Per_unit[c(10:11)] / Scenario_2_current$Total_Forecast_Scenario_2[1]
        
        div_oes <- ifelse(inventory_oes > sales_oes, sales_oes, inventory_oes)
        div_iam <- ifelse(inventory_iam > sales_iam, sales_iam, inventory_iam)
        div_allied <- ifelse(inventory_allied > sales_allied, sales_allied, inventory_allied)
        div_inventory <- ifelse(Current_Inventory > Scenario_2_current$Total_Forecast_Scenario_2, Scenario_2_current$Total_Forecast_Scenario_2, Current_Inventory)
        
        
        income_report_scenario_2$Per_unit[c(15:16)] <- income_report_scenario_2$Per_unit[c(15:16)] / div_inventory
        income_report_scenario_2$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] <- income_report_scenario_2$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] / purchase_inventory
        income_report_scenario_2$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] <- income_report_scenario_2$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] / Current_Inventory
        income_report_scenario_2$Per_unit <- ifelse(is.nan(income_report_scenario_2$Per_unit), 0, income_report_scenario_2$Per_unit)
        
        income_report_scenario_2$OES <- 0
        income_report_scenario_2$IAM <- 0
        income_report_scenario_2$Allied_export <- 0
        income_report_scenario_2$Total <- 0
        
        income_report_scenario_2$OES[1] <- income_report_scenario_2$Per_unit[1] * sales_oes
        income_report_scenario_2$OES[4] <- (ATB_ADS$Discount_oes_percent[1]/100) * income_report_scenario_2$OES[1]
        income_report_scenario_2$OES[7] <- income_report_scenario_2$OES[1] - income_report_scenario_2$OES[4]
        income_report_scenario_2$Per_unit[7] <- income_report_scenario_2$OES[7] / sales_oes
        income_report_scenario_2$OES[10] <-  income_report_scenario_2$OES[7]
        
        income_report_scenario_2$IAM[2] <- income_report_scenario_2$Per_unit[2] * sales_iam
        income_report_scenario_2$IAM[5] <- (ATB_ADS$Discount_iam_percent[1]/100) * income_report_scenario_2$IAM[2]
        income_report_scenario_2$IAM[8] <- income_report_scenario_2$IAM[2] - income_report_scenario_2$IAM[5]
        income_report_scenario_2$Per_unit[8] <- income_report_scenario_2$IAM[8] / sales_iam
        income_report_scenario_2$IAM[10] <-  income_report_scenario_2$IAM[8]
        
        income_report_scenario_2$Allied_export[3] <- income_report_scenario_2$Per_unit[3] * sales_allied
        income_report_scenario_2$Allied_export[6] <- (ATB_ADS$Discount_allied_export_percent[1]/100) * income_report_scenario_2$Allied_export[3]
        income_report_scenario_2$Allied_export[9] <- income_report_scenario_2$Allied_export[3] - income_report_scenario_2$Allied_export[6]
        income_report_scenario_2$Per_unit[9] <- income_report_scenario_2$Allied_export[9] / sales_allied
        income_report_scenario_2$Allied_export[10] <-  income_report_scenario_2$Allied_export[9]
        
        income_report_scenario_2$Per_unit[12] <- income_report_scenario_2$Per_unit[7]
        income_report_scenario_2$Per_unit[13] <- income_report_scenario_2$Per_unit[8]
        income_report_scenario_2$Per_unit[14] <- income_report_scenario_2$Per_unit[9]
        
        income_report_scenario_2$OES[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] <- income_report_scenario_2$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] * purchase_inventory_oes
        income_report_scenario_2$OES[11:16] <-c( Scenario_2_current$Revenue_OES_discount_2[1],(income_report_scenario_2$Per_unit[12] * div_oes), 0,0,
                                                 (income_report_scenario_2$Per_unit[12] * div_oes),
                                                 Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2_OES[1])
        
        income_report_scenario_2$OES[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_2$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_oes
        income_report_scenario_2$OES[44] <- income_report_scenario_2$OES[15] - sum(income_report_scenario_2$OES[c(19,23,27,31,35)])
        income_report_scenario_2$OES[45] <- income_report_scenario_2$OES[16] - sum(income_report_scenario_2$OES[c(20,24,28,32,36)])
        
        income_report_scenario_2$OES[c(46:49)] <- c(inventory_oes, purchase_oes, purchase_inventory_oes, sales_oes)
        
        income_report_scenario_2$OES[40] <- income_report_scenario_2$OES[17] + income_report_scenario_2$OES[21] + income_report_scenario_2$OES[25] + income_report_scenario_2$OES[29] + income_report_scenario_2$OES[33] + income_report_scenario_2$OES[37] + income_report_scenario_2$OES[39]
        income_report_scenario_2$OES[41] <- income_report_scenario_2$OES[18] + income_report_scenario_2$OES[22] + income_report_scenario_2$OES[26] + income_report_scenario_2$OES[30] + income_report_scenario_2$OES[34] + income_report_scenario_2$OES[38] + income_report_scenario_2$OES[39]
        
        income_report_scenario_2$OES[42] <- income_report_scenario_2$OES[10] - income_report_scenario_2$OES[40]
        income_report_scenario_2$OES[43] <- income_report_scenario_2$OES[11] - income_report_scenario_2$OES[41]
        
        ##
        income_report_scenario_2$IAM[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_2$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_iam
        income_report_scenario_2$IAM[11:16] <-c( Scenario_2_current$Revenue_IAM_discount_2[1], 0, (income_report_scenario_2$Per_unit[13] * div_iam), 0,
                                                 (income_report_scenario_2$Per_unit[13] * div_iam),
                                                 Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2_IAM[1])
        
        income_report_scenario_2$IAM[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_2$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_iam
        income_report_scenario_2$IAM[44] <- income_report_scenario_2$IAM[15] - sum(income_report_scenario_2$IAM[c(19,23,27,31,35)])
        income_report_scenario_2$IAM[45] <- income_report_scenario_2$IAM[16] - sum(income_report_scenario_2$IAM[c(20,24,28,32,36)])
        
        income_report_scenario_2$IAM[c(46:49)] <- c(inventory_iam, purchase_iam, purchase_inventory_iam, sales_iam)
        
        income_report_scenario_2$IAM[40] <- income_report_scenario_2$IAM[17] + income_report_scenario_2$IAM[21] + income_report_scenario_2$IAM[25] + income_report_scenario_2$IAM[29] + income_report_scenario_2$IAM[33] + income_report_scenario_2$IAM[37] + income_report_scenario_2$IAM[39]
        income_report_scenario_2$IAM[41] <- income_report_scenario_2$IAM[18] + income_report_scenario_2$IAM[22] + income_report_scenario_2$IAM[26] + income_report_scenario_2$IAM[30] + income_report_scenario_2$IAM[34] + income_report_scenario_2$IAM[38] + income_report_scenario_2$IAM[39]
        
        income_report_scenario_2$IAM[42] <- income_report_scenario_2$IAM[10] - income_report_scenario_2$IAM[40]
        income_report_scenario_2$IAM[43] <- income_report_scenario_2$IAM[11] - income_report_scenario_2$IAM[41]
        
        ####
        income_report_scenario_2$Allied_export[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_2$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_allied
        income_report_scenario_2$Allied_export[11:16] <-c( Scenario_2_current$Revenue_Allied_discount_2[1], 0, 0, (income_report_scenario_2$Per_unit[14] * div_allied),
                                                           (income_report_scenario_2$Per_unit[14] * div_allied),
                                                           Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2_Allied[1])
        
        income_report_scenario_2$Allied_export[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_2$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_allied
        income_report_scenario_2$Allied_export[44] <- income_report_scenario_2$Allied_export[15] - sum(income_report_scenario_2$Allied_export[c(19,23,27,31,35)])
        income_report_scenario_2$Allied_export[45] <- income_report_scenario_2$Allied_export[16] - sum(income_report_scenario_2$Allied_export[c(20,24,28,32,36)])
        
        income_report_scenario_2$Allied_export[c(46:49)] <- c(inventory_allied, purchase_allied, purchase_inventory_allied, sales_allied)
        
        income_report_scenario_2$Allied_export[40] <- income_report_scenario_2$Allied_export[17] + income_report_scenario_2$Allied_export[21] + income_report_scenario_2$Allied_export[25] + income_report_scenario_2$Allied_export[29] + income_report_scenario_2$Allied_export[33] + income_report_scenario_2$Allied_export[37] + income_report_scenario_2$Allied_export[39]
        income_report_scenario_2$Allied_export[41] <- income_report_scenario_2$Allied_export[18] + income_report_scenario_2$Allied_export[22] + income_report_scenario_2$Allied_export[26] + income_report_scenario_2$Allied_export[30] + income_report_scenario_2$Allied_export[34] + income_report_scenario_2$Allied_export[38] + income_report_scenario_2$Allied_export[39]
        
        income_report_scenario_2$Allied_export[42] <- income_report_scenario_2$Allied_export[10] - income_report_scenario_2$Allied_export[40]
        income_report_scenario_2$Allied_export[43] <- income_report_scenario_2$Allied_export[11] - income_report_scenario_2$Allied_export[41]
        
        income_report_scenario_2$Per_unit <- ifelse(is.nan(income_report_scenario_2$Per_unit), 0, income_report_scenario_2$Per_unit)
        income_report_scenario_2$OES <- ifelse(is.nan(income_report_scenario_2$OES), 0, income_report_scenario_2$OES)
        income_report_scenario_2$IAM <- ifelse(is.nan(income_report_scenario_2$IAM), 0, income_report_scenario_2$IAM)
        income_report_scenario_2$Allied_export <- ifelse(is.nan(income_report_scenario_2$Allied_export), 0, income_report_scenario_2$Allied_export)
        income_report_scenario_2$Total <- ifelse(is.nan(income_report_scenario_2$Total), 0, income_report_scenario_2$Total)
        
        income_report_scenario_2$Total <- income_report_scenario_2$Allied_export + income_report_scenario_2$IAM + income_report_scenario_2$OES
        
        income_report_scenario_2$Total[50:52] <- income_report_scenario_2$Per_unit[50:52]
        
        revenue_non <- income_report_scenario_2$Total[10]
        material_non <- income_report_scenario_2$Total[17]
        
        ## Displaying results for Scenario-2
        shinyjs::show("Scen_2")
        output$Scen_2 <- renderHotable({
          
          part_view <- 0
          part_view<- as.data.frame(part_view)
          part_view$part_view <- NULL
          part_view$Fields <- "NPV($)"
          part_view[2,1]<- "Selldown NPV($)"
          part_view[3,1]<- "Net"
          part_view[4,1]<- "Scrap"
          part_view[5,1]<- "Dealer Price($): OES"
          part_view[6,1]<- "Dealer Price($): Allied/Export"
          part_view[7,1]<- "Dealer Price($): IAM"
          part_view[8,1]<- "First Buy"
          part_view[9,1]<- "Last Buy"
          part_view[10,1]<- "Last Sale"
          part_view[11,1]<- "Lifetime Revenue(NPV)"
          part_view[12,1]<- "Lifetime Revenue(Non NPV)"
          part_view[13,1]<- "Material Cost(NPV)"
          part_view[14,1]<- "Material Cost(Non NPV)"
          part_view[15,1]<- "Setup Cost(NPV)"
          part_view[16,1]<- "Transportation Cost(NPV)"
          part_view[17,1]<- "Labor Cost(NPV)"
          part_view[18,1]<- "Storage Cost(NPV)"
          part_view[19,1]<- "Packaging Cost(NPV)"
          part_view[20,1]<- "Offsite Labor Cost(NPV)"
          part_view[21,1]<- "Offsite Trans Cost(NPV)"
          part_view[22,1]<- "Total Expense(NPV)"
          part_view[23,1]<- "Optimal NPV"
          part_view[24,1]<- "Optimal Buy Qty"
          part_view[25,1]<- "Total Purchase"
          part_view[26,1]<- "Inventory and Purchase"
          part_view[27,1]<- "Extended Optimal Buy Cost"
          part_view[28,1]<- "Extended Buy Qty Cost"
          
          part_view$Values <-  paste("$", formatC(Scenario_2_current$NPV_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[2, 2] <-  paste("$", formatC(Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[3, 2] <-  paste("$", formatC((Scenario_2_current$NPV_Scenario_2[1] - Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1]), big.mark=",", digits=2, format="f"), sep = " ")
          part_view[4, 2] <- round(Scenario_2_current$Scrap_amount_Scenario_2[1], 0)
          part_view[5, 2] <- paste("$", formatC(Scenario_2_optimal$Dealer_Price_OES_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[6, 2] <- paste("$", formatC(Scenario_2_optimal$Dealer_Price_Allied_Export_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[7, 2] <- paste("$", formatC(Scenario_2_optimal$Dealer_Price_IAM_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[8, 2] <- as.character(round(First_buy,0))
          part_view[9, 2] <- as.character(round(Last_buy,0))
          part_view[10, 2] <- as.character(round(Last_sale,0))
          part_view[11, 2] <-  paste("$", formatC(Scenario_2_current$Revenue_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[12, 2] <-  paste("$", formatC(Scenario_2_current$Revenue_non_npv_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[13, 2] <-  paste("$", formatC(Scenario_2_current$Part_Cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[14, 2] <- paste("$", formatC(Scenario_2_current$Material_cost_non_npv_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[15, 2] <-  paste("$", formatC(setup_cost, big.mark=",", digits=2, format="f"), sep = " ")
          part_view[16, 2] <- paste("$", formatC(Scenario_2_current$Total_transport_cost_Scenario_2[1] , big.mark=",", digits=2, format="f"), sep = " ")
          part_view[17, 2] <-  paste("$", formatC((Scenario_2_current$Total_process_cost_Scenario_2[1]), big.mark=",", digits=2, format="f"), sep = " ")
          part_view[18, 2] <-  paste("$", formatC(Scenario_2_current$Storage_Cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[19, 2] <-  paste("$", formatC((Scenario_2_current$Package_cost_Scenario_2[1]), big.mark=",", digits=2, format="f"), sep = " ")
          part_view[20, 2] <-  paste("$", formatC(Scenario_2_current$Total_offsite_labor_cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[21, 2] <- paste("$", formatC( Scenario_2_current$Total_offsite_transport_cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[22, 2] <- paste("$", formatC(Scenario_2_current$Expense_Scenario_2[1] , big.mark=",", digits=2, format="f"), sep = " ")
          part_view[23, 2] <-  paste("$", formatC(Scenario_2_optimal$Optimal_NPV_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[24, 2] <- paste(formatC(ceiling(Scenario_2_optimal$Optimal_ATB_Quantity_Scenario_2[1]), big.mark=",", digits=0, format="f"), sep = " ")
          part_view[25,2] <-  paste(formatC((Scenario_2_current$Total_Purchase_Qty_2[1]), big.mark=",", digits=0, format="f"))
          part_view[26,2] <-  paste(formatC(Scenario_2_current$Total_Inventory_Purchase_2[1], big.mark=",", digits=0, format="f"), sep = " ")
          part_view[27, 2] <-  paste("$", formatC(Scenario_2_optimal$Extended_optimal_buy_cost_2[1], big.mark=",", digits=2, format="f"), sep = " ")
          part_view[28, 2] <-  paste("$", formatC(Scenario_2_current$Extended_purchase_cost_2[1], big.mark=",", digits=2, format="s"), sep = " ")
          
          part_view
          
        }, readOnly = TRUE)
        
        ## Formatting results for income report
        income_report_scenario_2$Per_unit[c(1:3, 7:16, 18, 20:45)] <- paste("$", formatC(income_report_scenario_2$Per_unit[c(1:3, 7:16, 18, 20:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_scenario_2$Per_unit[c(17, 19)] <- paste("$", formatC(income_report_scenario_2$Per_unit[c(17, 19)], big.mark=",", digits=7, format="f"), sep = " ")
        
        income_report_scenario_2$Per_unit[c(4:6)] <- paste(formatC(income_report_scenario_2$Per_unit[c(4:6)], big.mark=",", digits=20, format="f"), "%" , sep = " ")
        income_report_scenario_2$Per_unit[c(46:52)] <- paste(formatC(income_report_scenario_2$Per_unit[c(46:52)], big.mark=",", digits=20, format="f"))
        
        income_report_scenario_2$OES[c(1:45)] <- paste("$", formatC(income_report_scenario_2$OES[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_scenario_2$OES[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_2$OES[c(46:52)]), big.mark=",", digits=20, format="f"))
        
        income_report_scenario_2$IAM[c(1:45)] <- paste("$", formatC(income_report_scenario_2$IAM[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_scenario_2$IAM[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_2$IAM[c(46:52)]), big.mark=",", digits=20, format="f"))
        
        income_report_scenario_2$Allied_export[c(1:45)] <- paste("$", formatC(income_report_scenario_2$Allied_export[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_scenario_2$Allied_export[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_2$Allied_export[c(46:52)]), big.mark=",", digits=20, format="f"))
        
        income_report_scenario_2$Total[c(1:45)] <- paste("$", formatC(income_report_scenario_2$Total[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
        income_report_scenario_2$Total[c(46:52)] <- paste(formatC(income_report_scenario_2$Total[c(46:52)], big.mark=",", digits=20, format="f"))
        
        income_report_scenario_2$Per_unit[c(10,11,15,16,40:45)] <- "-"
        income_report_scenario_2[c(12:16, 19,20,23,24,27,28,31,32,35,36,44,45), c(2:6)] <- "-"
        
        
        output$download_income_report_s_2 <- downloadHandler(
          filename = function() {
            paste("Income_statement_report_s_2", ".csv", sep="")
          },
          content = function(file) {
            abc <- income_report_scenario_2
            
            write.csv(abc, file)
            
          }
        )
        
      } # Closing for Progress Indicator
      )
      
      ############################ Closing of Scenario-2
    }
  })
  observeEvent({
    input$go_curr
  }, {
    
    
    pb_info <- global_ads$df_data_ads_pb
    pb_inform <- as.data.frame(pb_info)
    pb_inform$X <- NULL
    pb_inform$Part_Nbr<- str_pad(pb_inform$Part_Nbr, width=8, side="left", pad="0")
    ATB_ADS_pb<-pb_inform[which(pb_inform$Part_Nbr == input$Part_Number),]
    
    pb_orig_info <- global_ads$df_data_ads_pb_orig
    pb_orig_inform <- as.data.frame(pb_orig_info)
    pb_orig_inform$X <- NULL
    pb_orig_inform$Part_Nbr<- str_pad(pb_orig_inform$Part_Nbr, width=8, side="left", pad="0")
    ATB_ADS_pb_orig<-pb_orig_inform[which(pb_orig_inform$Part_Nbr == input$Part_Number),]
    #withProgress(message = 'Processing in Progress', value = 0, {
    #########
    
    
    scenario_curr <- hot.to.df(input$hotable_curr)
    t_scenario_curr<- transpose(scenario_curr)
    colnames(t_scenario_curr) <- scenario_curr$Fields
    t_scenario_curr$Part_Nbr<-input$Part_Number
    t_scenario_curr <- t_scenario_curr[-c(1), ]
    rownames(t_scenario_curr) <- NULL
    colnames(t_scenario_curr)<- c("Dealer_Price", "Discount_Percent_OES", "Discount_Percent_Allied_Export", "Dealer_OES_Price", "Dealer_Allied_Export_Price",
                                  "WD_Price", "Discount_Percent_IAM", "Dealer_IAM_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_curr","Additional_Cost_curr","Monthly_square_feet_cpp",
                                  "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                  "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                  "National_Inventory","Payback","Part_Nbr")
    ############   
    x<- round(ATB_ADS_pb$X373,2)
    
    Pb_in <- round(as.numeric(scenario_curr$Values[25]), 0)
    ATB_ADS_pb$Pb<-Pb_in
    pb_info[which(pb_inform$Part_Nbr == input$Part_Number),]<-ATB_ADS_pb
    global_ads$df_data_ads_pb<-pb_info
    
    write.xlsx(pb_info, file = "finance_current_scenario_1.xlsx", row.names = FALSE, overwrite=TRUE)
    path_to_vbs_file = "test_pb_input.vbs"
    print("4")
    shell(shQuote(normalizePath(path_to_vbs_file)), "cscript", flag = "//nologo")
    print("5")
    print("AM I the error f??")
    pb_excel<-read.xlsx("PB_excel_new.xlsm")
    pb_excel<-as.data.frame(pb_excel)
    
    ATB_ADS_pb<-pb_excel[which(pb_excel$Part_Nbr == input$Part_Number),]
    
    part_info <- global_ads$df_data_ads
    
    part_inform <- as.data.frame(part_info)
    part_inform$X <- NULL
    part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
    
    ATB_ADS <- part_inform[which(part_inform$PART_NBR == input$Part_Number),]
    
    Original_optimal <- data.frame()
    print("Original optimal")
    
    for (jj in (1:nrow(ATB_ADS))) {
      
      cat("\nPart Number: ",jj," : ", ATB_ADS[jj,1])
      final_NPV_list <- 0
      Optimal_year_count_list <- 1
      LTBQ_list <- 0
      Year_list <- c()
      FCST_list <- c()
      FCST_list1 <- c()
      NPV_CR_list <- c()
      Revenue_CR_list <- c()
      Revenue_list <- c()
      Expense_list <- c()
      Storage_cost_CR_list <- c()
      Freight_cost_CR_list <- c()
      Processing_cost_CR_list <- c()
      
      transport_cost <- c()
      offsite_transport_cost <- c()
      offsite_labor_cost <- c()
      process_cost <- c()
      packaging_cost <- c()
      
      Material_cost_CR_list <- c()
      Material_cost_list_non_npv <- c()
      Buy_quantity_list <- c()
      
      YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
      
      for(nn in (1:30)){
        FCST_list[nn] <- ATB_ADS[jj,(YI-1+nn)]
      }
      
      FCST_list[1] <- FCST_list[1] + ATB_ADS$CURRENT_YEAR[jj]
      
      YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1") # change 999
      
      for(nnp in (1:30)){
        FCST_list1[nn] <- ATB_ADS[jj,(YI-1+nnp)]
      }
      
      FCST_list1[1] <- FCST_list1[1] + ATB_ADS$CURRENT_YEAR[jj] + ATB_ADS$PROJECTED_SALES_CURR_YEAR[jj] 
      
      
      
      ###########
      Sum_Forecast <- sum(FCST_list)
      
      iam_weight <- ATB_ADS$IAM_FRACTION[jj]
      oes_weight <- ATB_ADS$OES_FRACTION[jj]
      allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[jj]
      
      FCST_iam <- round(FCST_list * iam_weight, digits = 0)
      FCST_oes <- round(FCST_list * oes_weight, digits = 0)
      FCST_allied <- round(FCST_list * allied_weight, digits = 0)
      
      Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
      
      Diff_FCST <- Sum_FCST - Sum_Forecast
      
      if(Sum_Forecast > 0)
      {
        
        if(oes_weight != 0)
        {
          index <- tail(which(FCST_oes!=0),1)
        } else if(iam_weight != 0)
        {
          index <- tail(which(FCST_iam!=0),1)
        } else if(allied_weight != 0)
        {
          index <- tail(which(FCST_allied!=0),1)
        } else
        {
          index <- 1
        }
      } else
      {
        index <- 1
      }
      
      if(length(index)==0)
      {
        index <- 1
      }
      
      flag_revenue_oes <- 0
      flag_revenue_iam <- 0
      flag_revenue_allied <- 0
      
      if(oes_weight == 0)
      {
        FCST_oes[index] <- Sum_FCST + 1000
        flag_revenue_oes <- 1
      }
      if(iam_weight == 0)
      {
        FCST_iam[index] <- Sum_FCST + 1000
        flag_revenue_iam <- 1
      }
      if(allied_weight == 0)
      {
        FCST_allied[index] <- Sum_FCST + 1000
        flag_revenue_allied <- 1
      }
      
      
      if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
      {
        FCST_oes[index] <- FCST_oes[index] - Diff_FCST
        
      } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
      {
        FCST_iam[index] <- FCST_iam[index] - Diff_FCST
        
      } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
      {
        FCST_allied[index] <- FCST_allied[index] - Diff_FCST
      }
      
      if(flag_revenue_oes == 1)
      {
        FCST_oes[index] <- 0
      }
      if(flag_revenue_iam == 1)
      {
        FCST_iam[index] <- 0
      }
      if(flag_revenue_allied == 1)
      {
        FCST_allied[index] <- 0
      }
      
      for(i in 1:30)
      {
        FCST_list[i] <- FCST_allied[i] + FCST_iam[i] + FCST_oes[i]
      }
      ###########
      
      for (nn in (1:30)) {
        Sum_Forecast_list <- sum(FCST_list[1:nn])
        BQ_list <- Sum_Forecast_list
        qty_list <- 0
        yr_qty_list <- c()
        
        if(nn > 1){
          for (ii in (1:(nn-1))) {
            ss <- ((BQ_list - sum(FCST_list[1:ii])) + (BQ_list - sum(FCST_list[1:(1+ii)])))/2
            qty_list <- qty_list + ss 
            yr_qty_list[ii+1] <- ss
          }
        }
        yr_qty_list[1] <- (2*BQ_list - FCST_list[1])/2        
        
        Total_storage_qty_list <- sum(yr_qty_list)
        
        Storage_Cost_list <- 0
        revenue_list <- 0
        revenue_list_non_npv <- 0
        revenue_iam <- 0
        revenue_oes <- 0
        revenue_allied <- 0
        
        for(kk in (1: (nn) ))
        {
          CR <- ((1-(0.15/12))^(kk*12))
          revenue_list <- revenue_list + (FCST_list[kk] * CR *((ATB_ADS$Dealer_Price_Allied_Export[jj] * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (ATB_ADS$Dealer_Price_OES[jj] * ATB_ADS$OES_FRACTION[jj]) + (ATB_ADS$Dealer_Price_IAM[jj] * ATB_ADS$IAM_FRACTION[jj]))) 
          
          revenue_iam <- revenue_iam + (FCST_iam[kk] * CR * (ATB_ADS$Dealer_Price_IAM[jj]))
          revenue_oes <- revenue_oes + (FCST_oes[kk] * CR * (ATB_ADS$Dealer_Price_OES[jj]))
          revenue_allied <- revenue_allied + (FCST_allied[kk] * CR * (ATB_ADS$Dealer_Price_Allied_Export[jj]))
          
          revenue_list_non_npv <- revenue_list_non_npv + ((FCST_list[kk]) * ((ATB_ADS$Dealer_Price_Allied_Export[jj] * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (ATB_ADS$Dealer_Price_OES[jj] * ATB_ADS$OES_FRACTION[jj]) + (ATB_ADS$Dealer_Price_IAM[jj] * ATB_ADS$IAM_FRACTION[jj])))
          Storage_Cost_list <- Storage_Cost_list + ((yr_qty_list[kk])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[jj] * CR)
          
        }
        
        offsite_quantity <- ifelse((BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))) > 0, (BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))), 0)
        
        Offsite_trans_cost_list <- ATB_ADS$OFFSITE_TRANS_COST_PP[jj] * offsite_quantity
        Freight_cost_list <- ((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[jj] * BQ_list) + Offsite_trans_cost_list) * (1-(0.15/12))
        Offsite_labour_cost_list <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[jj])
        Total_Processing_cost_list <- ((ATB_ADS$ONSITE_PRCS_COST_PP[jj] * BQ_list) + Offsite_labour_cost_list) * (1-(0.15/12))
        
        Material_cost_list <- (ATB_ADS$LAST_COST[jj]*BQ_list)*(1-(0.15/12))
        
        Total_transport_cost <- (ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[jj] * BQ_list) * (1-(0.15/12))
        Total_offsite_transport_cost <- Offsite_trans_cost_list * (1-(0.15/12))
        Total_offsite_labor_cost <- Offsite_labour_cost_list * (1-(0.15/12))
        Total_process_cost<- ((ATB_ADS$ONSITE_PRCS_COST_PP[jj] - ATB_ADS$AVG_PCPP[jj]) * BQ_list) * (1-(0.15/12))
        Total_package_cost <- ATB_ADS$AVG_PCPP[jj] * BQ_list * (1-(0.15/12))
        
        Material_cost_list_non <- (ATB_ADS$LAST_COST[jj]*BQ_list)
        
        Total_Expense_list <- Storage_Cost_list + Freight_cost_list + Total_Processing_cost_list + Material_cost_list + ATB_ADS$Setup_cost[jj] + ATB_ADS$Additional_cost[jj]
        revenue_list <- revenue_iam + revenue_oes + revenue_allied
        
        NPV_with_capital_rate_list <- revenue_list - Total_Expense_list
        Year_list[nn] <- nn
        NPV_CR_list[nn] <- NPV_with_capital_rate_list
        Expense_list[nn] <- Total_Expense_list
        Revenue_CR_list[nn] <- revenue_list
        Revenue_list[nn] <- revenue_list_non_npv
        Storage_cost_CR_list[nn] <- Storage_Cost_list
        Freight_cost_CR_list[nn] <- Freight_cost_list
        Processing_cost_CR_list[nn] <- Total_Processing_cost_list
        Material_cost_CR_list[nn] <- Material_cost_list
        Material_cost_list_non_npv[nn] <- Material_cost_list_non
        Buy_quantity_list[nn] <- BQ_list
        
        transport_cost[nn] <- Total_transport_cost
        offsite_transport_cost[nn] <- Total_offsite_transport_cost
        offsite_labor_cost[nn] <- Total_offsite_labor_cost
        process_cost[nn] <- Total_process_cost
        packaging_cost[nn] <- Total_package_cost
        
        if(NPV_with_capital_rate_list>0) {
          if(final_NPV_list<NPV_with_capital_rate_list){
            final_NPV_list <- NPV_with_capital_rate_list
            Optimal_year_count_list <- nn
            LTBQ_list <- BQ_list
            Total_Expense_NPV_list <- Total_Expense_list
            Revenue_NPV_list <- revenue_list
            Revenue_non_NPV_list <- revenue_list_non_npv
            Storage_cost_NPV_list <- Storage_Cost_list
            Freight_cost_NPV_list <- Freight_cost_list
            Processing_cost_NPV_list <- Total_Processing_cost_list
            Material_cost_NPV_list <- Material_cost_list
            Material_cost_NPV_list_non_npv <- Material_cost_list_non
            transport_cost_list <- Total_transport_cost
            offsite_transport_cost_list <- Total_offsite_transport_cost
            offsite_labor_cost_list <- Total_offsite_labor_cost
            process_cost_list <- Total_process_cost
            package_cost_list <- Total_package_cost
            
          }
        } else if((nn==1) && (NPV_with_capital_rate_list<=0)) {
          Optimal_year_count_list <- 0
          Total_Expense_NPV_list <- Expense_list[1]
          Revenue_NPV_list <- Revenue_CR_list[1]
          Revenue_non_NPV_list <- Revenue_list[1]
          Storage_cost_NPV_list <- Storage_cost_CR_list[1]
          Freight_cost_NPV_list <- Freight_cost_CR_list[1]
          Processing_cost_NPV_list <- Processing_cost_CR_list[1]
          Material_cost_NPV_list <- Material_cost_CR_list[1]
          Material_cost_NPV_list_non_npv <- Material_cost_list_non_npv[1]
          
          transport_cost_list <- transport_cost[1]
          offsite_transport_cost_list <- offsite_transport_cost[1]
          offsite_labor_cost_list <- offsite_labor_cost[1]
          process_cost_list <- process_cost[1]
          package_cost_list <- packaging_cost[1]
          
        }
      }
      
      if(offsite_transport_cost_list < 0 )
      {
        offsite_transport_cost_list <- 0
      }
      if(offsite_labor_cost_list < 0)
      {
        offsite_labor_cost_list <- 0
      }
      
      LTBQ_list <- LTBQ_list - ATB_ADS$TOTAL_INVENTORY[jj]
      
      if(LTBQ_list <= 0)
      {
        LTBQ_list = 0
      }
      Extended_optimal_buy_cost <- LTBQ_list * ATB_ADS$LAST_COST[jj]
      
      Original_optimal <- data.frame(lapply(Original_optimal, as.character), stringsAsFactors=FALSE)
      Original_optimal <- rbind(Original_optimal, c(ATB_ADS[jj,1],Storage_cost_NPV_list,Freight_cost_NPV_list,Processing_cost_NPV_list,
                                                    Material_cost_NPV_list,Total_Expense_NPV_list,Revenue_NPV_list,final_NPV_list,
                                                    Optimal_year_count_list,LTBQ_list, Revenue_non_NPV_list, Material_cost_NPV_list_non_npv,
                                                    transport_cost_list, offsite_transport_cost_list, offsite_labor_cost_list, process_cost_list,
                                                    package_cost_list, ATB_ADS$Setup_cost[jj], Extended_optimal_buy_cost))
    }
    colnames(Original_optimal) <- c("Part_Nbr","Optimal_Storage_Cost","Optimal_Transportation_Cost","Optimal_Processing_Cost",
                                    "Optimal_Material_Cost","Optimal_Expense","Optimal_Revenue","Optimal_NPV",
                                    "Optimal_year_count","Optimal_ATB_Quantity", 
                                    "Optimal_Revenue_non_npv", "Optimal_Material_cost_non_npv", "Optimal_Total_transport_cost",
                                    "Optimal_Total_offsite_transport_cost","Optimal_Total_offsite_labor_cost",
                                    "Optimal_Total_process_cost", "Optimal_Packaging_cost", "Optimal_Setup_cost", "Extended_optimal_buy_cost")
    
    Original_optimal <- data.frame(lapply(Original_optimal, as.character), stringsAsFactors=FALSE)
    Original_optimal <- data.frame(lapply(Original_optimal, as.numeric), stringsAsFactors=FALSE)
    Original_optimal <- Original_optimal %>% mutate_each(funs(round(.,2)), -Part_Nbr)
    Original_optimal[,2:19] <- 0
    FCST_demand <- FCST_list
    Year_demand <- Year_list
    
    
    print("Original Optimal done")
    
    incProgress(1/5, detail = "Running Calculations")
    
    ################# Code for Scenario- Current    
    Original_current <- data.frame()
    
    for(j in (1:nrow(ATB_ADS)))
    {
      cat("\nPart Number: ",j," : ", ATB_ADS[j,1])
      FCST <- c()
      FCST_iam <- c()
      FCST_oes <- c()
      FCST_allied <- c()
      
      Curr_Inv <- ATB_ADS$TOTAL_INVENTORY[j]
      
      Revenue <- c()
      Revenue_Allied <- c()
      Revenue_OES <- c()
      Revenue_IAM <- c()
      
      ATB_ADS$STD_PACK_QTY[j] <- ifelse(ATB_ADS$STD_PACK_QTY[j] == 0, 1, ATB_ADS$STD_PACK_QTY[j])
      
      Revenue_non_npv <- c()
      Revenue_non_npv_Allied <- c()
      Revenue_non_npv_OES <- c()
      Revenue_non_npv_IAM <- c()
      
      AMD <- c()
      AMD_iam <- c()
      AMD_oes <- c()
      AMD_allied <- c()
      
      First_buy <- 0
      Last_sale <- 0
      Last_buy <- 0
      flag <- 0
      flag_last_buy <- 0
      
      
      YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
      for(n in (1:30)){
        FCST[n] <- ATB_ADS[j,(YI-1+n)]
        Revenue[n] <- 0
        Revenue_Allied[n] <- 0
        Revenue_OES[n] <- 0
        Revenue_IAM[n] <- 0
        
        Revenue_non_npv[n] <- 0
        Revenue_non_npv_Allied[n] <- 0
        Revenue_non_npv_OES[n] <- 0
        Revenue_non_npv_IAM[n] <- 0
        
      }
      
      FCST[1] <- ATB_ADS$CURRENT_YEAR[j] + FCST[1]
      Total_FCST <- sum(FCST)
      
      if(FCST[1] != 0)
      {
        First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
      } else
      {
        First_buy <- 0
      }
      
      for(i in 1:30)
      {
        if(FCST[i] == 0 & flag != 1)
        {
          Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
          flag = 1
        } 
      }
      if(flag != 1)
      {
        Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
      }
      
      ###########          
      
      iam_weight <- ATB_ADS$IAM_FRACTION[j]
      oes_weight <- ATB_ADS$OES_FRACTION[j]
      allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
      
      FCST_iam <- round(FCST * iam_weight, digits = 0)
      FCST_oes <- round(FCST * oes_weight, digits = 0)
      FCST_allied <- round(FCST * allied_weight, digits = 0)
      
      Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
      
      Diff_FCST <- Sum_FCST - Total_FCST
      
      
      if(Total_FCST > 0)
      {
        
        if(oes_weight != 0)
        {
          index <- tail(which(FCST_oes!=0),1)
        } else if(iam_weight != 0)
        {
          index <- tail(which(FCST_iam!=0),1)
        } else if(allied_weight != 0)
        {
          index <- tail(which(FCST_allied!=0),1)
        } else
        {
          index <- 1
        }
      } else
      {
        index <- 1
      }
      
      if(length(index)==0)
      {
        index <- 1
      }
      
      flag_revenue_oes <- 0
      flag_revenue_iam <- 0
      flag_revenue_allied <- 0
      
      if(oes_weight == 0)
      {
        FCST_oes[index] <- Sum_FCST + 1000
        flag_revenue_oes <- 1
      }
      if(iam_weight == 0)
      {
        FCST_iam[index] <- Sum_FCST + 1000
        flag_revenue_iam <- 1
      }
      if(allied_weight == 0)
      {
        FCST_allied[index] <- Sum_FCST + 1000
        flag_revenue_allied <- 1
      }
      
      
      if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
      {
        FCST_oes[index] <- FCST_oes[index] - Diff_FCST
        
      } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
      {
        FCST_iam[index] <- FCST_iam[index] - Diff_FCST
        
      } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
      {
        FCST_allied[index] <- FCST_allied[index] - Diff_FCST
      }
      
      if(flag_revenue_oes == 1)
      {
        FCST_oes[index] <- 0
      }
      if(flag_revenue_iam == 1)
      {
        FCST_iam[index] <- 0
      }
      if(flag_revenue_allied == 1)
      {
        FCST_allied[index] <- 0
      }
      
      ###########          
      for(n in (1:30)){
        AMD[n] <- FCST[n]/12
        AMD_oes[n] <- FCST_oes[n] / 12
        AMD_iam[n] <- FCST_iam[n] / 12
        AMD_allied[n] <- FCST_allied[n] / 12
      }
      
      for(k in 1:30)
      {
        CR <- ((1-(0.15/12))^(k*12))
        Revenue[k] <- Revenue[k] + (FCST[k] * CR * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j])))
        
        Revenue_Allied[k] <- Revenue_Allied[k] + (FCST_allied[k] * CR * (ATB_ADS$Dealer_Price_Allied_Export[j]))
        Revenue_OES[k] <- Revenue_OES[k] + (FCST_oes[k] * CR * (ATB_ADS$Dealer_Price_OES[j]))
        Revenue_IAM[k] <- Revenue_IAM[k] + (FCST_iam[k] * CR * (ATB_ADS$Dealer_Price_IAM[j]))
        
        Revenue_non_npv[k] <- Revenue_non_npv[k] + (FCST[k] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j])))
        Revenue_non_npv_Allied[k] <- Revenue_non_npv_Allied[k] + (FCST_allied[k] * (ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
        Revenue_non_npv_OES[k] <- Revenue_non_npv_OES[k] + (FCST_oes[k] * (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]))
        Revenue_non_npv_IAM[k] <- Revenue_non_npv_IAM[k] + (FCST_iam[k] * (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))
        
      }
      
      Revenue_OES_non_npv_no_discount <- sum(FCST_oes) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
      Revenue_IAM_non_npv_no_discount <- sum(FCST_iam) * ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[j]
      Revenue_Allied_non_npv_no_discount <- sum(FCST_allied) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
      
      Revenue_OES_non_npv_discount <- sum(FCST_oes) * ATB_ADS$Dealer_Price_OES[j] 
      Revenue_IAM_non_npv_discount <- sum(FCST_iam) * ATB_ADS$Dealer_Price_IAM[j] 
      Revenue_Allied_non_npv_discount <- sum(FCST_allied) * ATB_ADS$Dealer_Price_Allied_Export[j]
      
      Revenue_Allied_discount <- sum(Revenue_Allied)
      Revenue_OES_discount <- sum(Revenue_OES)
      Revenue_IAM_discount <- sum(Revenue_IAM)
      
      year <- 0
      month <- 0
      get_demand <- 0
      
      for(i in 1:30)
      {
        get_demand = get_demand + FCST[i]
        if(Curr_Inv > get_demand)
        {
          year = year + 1
        } else if(Curr_Inv <= FCST[1])
        {
          remain = Curr_Inv
          
          year_remain = FCST[1] - remain
          
          month = 1
          demand_for_break_year = 0
          for(i in 1:12)
          {
            demand_for_break_year = demand_for_break_year + (FCST[1] / 12)
            if(remain > demand_for_break_year)
            {
              month = month + 1
            }
          }
          
          FCST[year+1] <- remain
          Sum_Forecast <- sum(FCST[1:(year+1)])
          break()
        }
      }
      
      ###
      if(Curr_Inv > FCST[1] & year < 30)
      {
        remain <- Curr_Inv - sum(FCST[1:year])
        
        year_remain <- FCST[(year+1)] - remain
        
        month = 1
        demand_for_break_year = 0
        for(i in 1:12)
        {
          demand_for_break_year = demand_for_break_year + (FCST[year+1] / 12)
          if(remain > demand_for_break_year)
          {
            month = month+1
          }
        }
        
        FCST[year+1] <- remain
        Sum_Forecast <- sum(FCST[1:(year+1)])
      } else if(year >= 30)
      {
        remain <- Curr_Inv - sum(FCST[1:year])
        FCST[year+1] <- 0
        year_remain <- 0
        Sum_Forecast <- sum(FCST[1:(year + 1)])
        month <- 0
      }
      
      
      BQ <- ceiling(Curr_Inv)
      qty <- 0
      yr_qty <- c()
      
      for (i in (1:(year))) {
        storage_qty <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
        qty <- qty + storage_qty
        yr_qty[i+1] <- storage_qty
      }
      
      yr_qty[1] <- (2*BQ - FCST[1])/2        
      yr_qty[year + 2] <- 0
      
      Storage_Cost_Curr_Inv <- 0
      Storage_Cost_Curr_Inv_non_npv <- 0
      
      
      for(k in (1 : (year + 1)))
      {
        CR <- ((1-(0.15/12))^(k*12))
        Storage_Cost_Curr_Inv <- Storage_Cost_Curr_Inv + ((yr_qty[k])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
        Storage_Cost_Curr_Inv_non_npv <- Storage_Cost_Curr_Inv_non_npv + (yr_qty[k])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j]
        
      }
      
      offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
      
      Offsite_trans_cost_curr_inv <- ATB_ADS$OFFSITE_TRANS_COST_PP[j] * offsite_quantity
      transport_cost_curr_inv <- ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ * (1-(0.15/12))
      
      transport_cost_curr_inv_non_npv <- ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ 
      
      Freight_cost_curr_inv <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost_curr_inv) * (1-(0.15/12))
      Freight_cost_curr_inv_non_npv <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost_curr_inv)
      
      Offsite_labour_cost_curr_inv <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[j]) * (1-(0.15/12))
      Offsite_labour_cost_curr_inv_non_npv <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[j])
      
      process_cost_curr_inv <- (ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ * (1-(0.15/12))
      process_cost_curr_inv_non_npv <- (ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ
      
      package_cost_curr_inv <- ATB_ADS$AVG_PCPP[j] * BQ * (1-(0.15/12))  
      package_cost_curr_inv_non_npv <- ATB_ADS$AVG_PCPP[j] * BQ
      
      Total_Processing_cost_curr_inv <- (((ATB_ADS$ONSITE_PRCS_COST_PP[j]) * BQ) + Offsite_labour_cost_curr_inv) * (1-(0.15/12)) 
      Material_cost_curr_inv <- BQ * ATB_ADS$LAST_COST[j] * (1-(0.15/12)) 
      Material_cost_curr_inv_non_npv <- BQ * ATB_ADS$LAST_COST[j] 
      
      
      FCST[year+1] <- year_remain
      
      Adj_Dem <- c()
      BF_BQ <- c()
      Curr_Inv <- c()
      BQ <- c()
      Purchase_times <- c()
      Yearly_BQ <- c()
      Storage_Cost <- c()
      Storage_Cost_non_npv <- c()
      Offsite_Qty <- c()
      Freight_cost <- c()
      Freight_cost_non_npv <- c()
      transport_cost <- c()
      offsite_transport_cost <- c()
      transport_cost_non_npv <- c()
      offsite_transport_cost_non_npv <- c()
      Processing_cost <- c()
      offsite_labor_cost <- c()
      offsite_labor_cost_non_npv <- c()
      process_cost <- c()
      process_cost_non_npv <- c()
      package_cost <- c()
      package_cost_non_npv <- c()
      Material_cost <- c()
      Material_cost_non_npv <- c()
      All_Expense <- c()
      
      for(i in 1:year)
      {
        Adj_Dem[i] = 0
        BF_BQ[i] = 0
        Curr_Inv[i] = 0
        BQ[i] = 0
        Purchase_times[i] = 0
        Yearly_BQ[i] = 0
        Storage_Cost[i] = 0
        Storage_Cost_non_npv[i] = 0
        Offsite_Qty[i] = 0
        Freight_cost[i] = 0
        Freight_cost_non_npv[i] = 0
        transport_cost[i] = 0
        offsite_transport_cost[i] = 0
        transport_cost_non_npv[i] = 0
        offsite_transport_cost_non_npv[i] = 0
        Processing_cost[i] = 0
        offsite_labor_cost[i] = 0
        offsite_labor_cost_non_npv[i] = 0
        process_cost[i] = 0
        process_cost_non_npv[i] = 0
        package_cost[i] = 0
        package_cost_non_npv[i] = 0
        Material_cost[i] = 0
        Material_cost_non_npv[i] = 0
        All_Expense[i] = 0
      }
      
      Total_BQ <- 0
      
      if((year + 1) < 31)
      {
        Curr_Inv[(year + 1)] <- 0
        for(k in ((year + 1) : 30)){
          Adj_Dem[k] <- (FCST[k] - Curr_Inv[k])
          BF_BQ[k] <- ifelse(k == (year + 1),((ATB_ADS$BUY_FREQ[j]*(AMD[k]/4.33)) * (12-month)/12),(ATB_ADS$BUY_FREQ[j]*(((Adj_Dem[k])/12)/4.33)))
          
          BQ[k] <- ceiling(ifelse((Curr_Inv[k] < Adj_Dem[k]),(max(ATB_ADS$MINIMUM_BUY_QTY[j],ATB_ADS$STD_PACK_QTY[j],BF_BQ[k])), 0))
          Purchase_times[k] <- ifelse((BQ[k]!=0),(ceiling(Adj_Dem[k]/BQ[k])),0)
          Yearly_BQ[k] <- BQ[k] * Purchase_times[k]
          Curr_Inv[k+1] <- Yearly_BQ[k] - Adj_Dem[k]
          Storage_Cost[k] <- 0
          Storage_Cost_non_npv[k] <- 0
        }
        
        Total_BQ <- ceiling(sum(Yearly_BQ))
        scrap_amount <- ATB_ADS$TOTAL_INVENTORY[j] + Total_BQ - Total_FCST
        adjusment_factor <- Total_BQ%%ATB_ADS$STD_PACK_QTY[j]
        
        if(adjusment_factor > scrap_amount)
        {
          Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] + (ATB_ADS$STD_PACK_QTY[j] - Total_BQ%%ATB_ADS$STD_PACK_QTY[j])
          Total_BQ <- Total_BQ + (ATB_ADS$STD_PACK_QTY[j] - Total_BQ%%ATB_ADS$STD_PACK_QTY[j])
          
          BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
        } else if(adjusment_factor <= scrap_amount)
        {
          Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] - Total_BQ%%ATB_ADS$STD_PACK_QTY[j]
          Total_BQ <- Total_BQ - Total_BQ%%ATB_ADS$STD_PACK_QTY[j]
          
          BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
        }
        
        
        for(i in ((year + 1):30))
        {
          if(Yearly_BQ[i] == 0 & flag_last_buy != 1)
          {
            if(i != (year + 1))
            {
              Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag_last_buy = 1
            } else
            {
              Last_buy <- 0
              flag_last_buy = 1
            }
          } 
        }
        if(flag_last_buy != 1)
        {
          Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
        }
        
        
        for(k in ((year + 1):30))
        {
          CR <- ((1-(0.15/12))^(k*12))
          Storage_Cost[k] <- Storage_Cost[k] + ((BQ[k]*6) * ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
          Storage_Cost_non_npv[k] <- Storage_Cost_non_npv[k] + (BQ[k]*6 * ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j])
          
        }
        
        for(k in ((year + 1):30)){
          
          CR <- (1-(0.15/12))^(k*12)
          Offsite_Qty[k] <- ifelse((BQ[k] > (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),(BQ[k] - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),0)
          Freight_cost[k] <- ((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) + (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])) * Purchase_times[k] * CR
          Freight_cost_non_npv[k] <- ((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) + (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])) * Purchase_times[k]
          
          transport_cost[k] <- (ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) * Purchase_times[k] * CR
          offsite_transport_cost[k] <- (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])* Purchase_times[k] * CR
          transport_cost_non_npv[k] <- (ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) * Purchase_times[k] 
          offsite_transport_cost_non_npv[k] <- (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])* Purchase_times[k] 
          
          Processing_cost[k] <- ((ATB_ADS$ONSITE_PRCS_COST_PP[j] * BQ[k]) + (Offsite_Qty[k] * as.numeric(ATB_ADS$OFFSITE_LCPP[j]))) * Purchase_times[k] * CR
          
          offsite_labor_cost[k] <- (Offsite_Qty[k] * as.numeric(ATB_ADS$OFFSITE_LCPP[j])) * Purchase_times[k] * CR
          offsite_labor_cost_non_npv[k] <- (Offsite_Qty[k] * as.numeric(ATB_ADS$OFFSITE_LCPP[j])) * Purchase_times[k]
          
          process_cost[k] <- ((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ[k]) * Purchase_times[k] * CR
          process_cost_non_npv[k] <- ((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ[k]) * Purchase_times[k]
          
          package_cost[k] <- ATB_ADS$AVG_PCPP[j] * BQ[k] * CR * Purchase_times[k]
          package_cost_non_npv[k] <- ATB_ADS$AVG_PCPP[j] * BQ[k] * Purchase_times[k]
          
          Material_cost[k] <- (ATB_ADS$LAST_COST[j] * BQ[k]) * Purchase_times[k] * CR
          Material_cost_non_npv[k] <- (ATB_ADS$LAST_COST[j] * BQ[k]) * Purchase_times[k]
          All_Expense[k] <- Storage_Cost[k] + Freight_cost[k] + Processing_cost[k] + Material_cost[k]
          
        }
      } else
      {
        Last_buy <- 0
      }
      
      scrap_amount <- ATB_ADS$TOTAL_INVENTORY[j] + Total_BQ - Total_FCST
      
      Total_Storage_Cost_current <- sum(Storage_Cost) + Storage_Cost_Curr_Inv
      Total_Storage_Cost_current_non_npv <- sum(Storage_Cost_non_npv) + Storage_Cost_Curr_Inv_non_npv
      Total_Freight_cost_current <- sum(Freight_cost) + Freight_cost_curr_inv
      Total_Freight_cost_current_non_npv <- sum(Freight_cost_non_npv) + Freight_cost_curr_inv_non_npv
      Total_Processing_cost_current <-sum(Processing_cost) + Total_Processing_cost_curr_inv
      Total_Material_cost_current <- sum(Material_cost) + Material_cost_curr_inv
      Total_Material_cost_non_npv_current <- sum(Material_cost_non_npv) + Material_cost_curr_inv_non_npv
      Total_Revenue_current <- Revenue_OES_discount + Revenue_IAM_discount + Revenue_Allied_discount
      
      Total_Revenue_non_npv_current <- Revenue_OES_non_npv_discount + Revenue_IAM_non_npv_discount + Revenue_Allied_non_npv_discount
      
      Total_transport_cost <- sum(transport_cost) + transport_cost_curr_inv
      Total_offsite_transport_cost <- sum(offsite_transport_cost) + Offsite_trans_cost_curr_inv
      Total_transport_cost_non_npv <- sum(transport_cost_non_npv) + transport_cost_curr_inv_non_npv
      Total_offsite_transport_cost_non_npv <- sum(offsite_transport_cost_non_npv) + Offsite_trans_cost_curr_inv
      
      Total_offsite_labor_cost <- sum(offsite_labor_cost) + Offsite_labour_cost_curr_inv
      Total_offsite_labor_cost_non_npv <- sum(offsite_labor_cost_non_npv) + Offsite_labour_cost_curr_inv_non_npv
      
      Total_process_cost <- sum(process_cost) + process_cost_curr_inv
      Total_process_cost_non_npv <- sum(process_cost_non_npv) + process_cost_curr_inv_non_npv
      Total_package_cost <- sum(package_cost) + package_cost_curr_inv
      Total_package_cost_non_npv <- sum(package_cost_non_npv) + package_cost_curr_inv_non_npv
      
      Total_Expense_current <- Total_Storage_Cost_current + Total_Freight_cost_current + Total_process_cost + Total_package_cost + Total_offsite_labor_cost + Total_Material_cost_current  + ATB_ADS$Setup_cost[j] + ATB_ADS$Additional_cost[j]
      Total_Expense_current_non_npv <- Total_Storage_Cost_current_non_npv + Total_Freight_cost_current_non_npv + Total_Material_cost_non_npv_current + Total_offsite_labor_cost_non_npv + Total_package_cost_non_npv + Total_process_cost_non_npv + ATB_ADS$Setup_cost[j] + ATB_ADS$Additional_cost[j]
      
      Total_NPV <- Total_Revenue_current - Total_Expense_current
      Total_NPV_non_npv <-  Total_Revenue_non_npv_current - Total_Expense_current_non_npv
      Extended_purchase_cost <- ATB_ADS$Entered_Buy_Qty[j] * ATB_ADS$LAST_COST[j]
      
      Original_current <- data.frame(lapply(Original_current, as.character), stringsAsFactors=FALSE)
      
      Original_current <- rbind(Original_current, c(ATB_ADS[j,1],Total_Storage_Cost_current,Total_Storage_Cost_current_non_npv, Total_Freight_cost_current, 
                                                    Total_Freight_cost_current_non_npv, Total_Processing_cost_current,
                                                    Total_Material_cost_current,Total_Expense_current,Total_Expense_current_non_npv, Total_Revenue_current,
                                                    Total_NPV,Total_NPV_non_npv, Total_BQ,Total_FCST, 
                                                    Total_Material_cost_non_npv_current, Total_Revenue_non_npv_current, Total_transport_cost, Total_offsite_transport_cost,Total_transport_cost_non_npv, Total_offsite_transport_cost_non_npv,
                                                    Total_offsite_labor_cost, Total_offsite_labor_cost_non_npv, Total_process_cost,Total_process_cost_non_npv,
                                                    ATB_ADS$Setup_cost[j], First_buy, Last_sale,
                                                    Last_buy, Total_package_cost, Total_package_cost_non_npv, scrap_amount, ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j],
                                                    ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[j],
                                                    ATB_ADS$Discount_iam_percent[j], ATB_ADS$Discount_oes_percent[j] ,ATB_ADS$Discount_allied_export_percent[j],
                                                    ATB_ADS$Dealer_Price_IAM[j], ATB_ADS$Dealer_Price_OES[j], ATB_ADS$Dealer_Price_Allied_Export[j],
                                                    Revenue_OES_non_npv_no_discount, Revenue_IAM_non_npv_no_discount, Revenue_Allied_non_npv_no_discount,
                                                    Revenue_OES_non_npv_discount, Revenue_IAM_non_npv_discount, Revenue_Allied_non_npv_discount, Revenue_Allied_discount,
                                                    Revenue_OES_discount, Revenue_IAM_discount, ATB_ADS$Entered_Buy_Qty[j], Extended_purchase_cost,
                                                    ATB_ADS$Additional_cost[j]))
      
    }
    
    colnames(Original_current) <- c("Part_Nbr","Storage_Cost","Storage_Cost_non_npv", "Transportation_cost", "Transportation_cost_non_npv",
                                    "Processing_cost","Part_cost","Expense", "Expense_non_npv", "Revenue", "NPV", "Profit_Non_NPV",
                                    "Buy_Quantity","Total_Forecast", "Material_cost_non_npv", "Revenue_non_npv","Total_transport_cost", "Total_offsite_transport_cost",
                                    "Total_transport_cost_non_npv","Total_offsite_transport_cost_non_npv","Total_offsite_labor_cost", "Total_offsite_labor_cost_non_npv", 
                                    "Total_process_cost", "Total_process_cost_non_npv", "Setup_cost", "First_buy",
                                    "Last_sale", "Last_buy", "Package_cost", "Package_cost_non_npv", "Scrap_amount", "Dealer_price", "WD_dealer_price", 
                                    "Discount_iam_percent", "Discount_oes_percent", "Discount_allied_export_percent",
                                    "Dealer_Price_IAM","Dealer_Price_OES", "Dealer_Price_Allied_Export", 'Revenue_OES_non_npv_no_discount', 
                                    'Revenue_IAM_non_npv_no_discount', 'Revenue_Allied_non_npv_no_discount',
                                    'Revenue_OES_non_npv_discount', 'Revenue_IAM_non_npv_discount', 'Revenue_Allied_non_npv_discount',
                                    'Revenue_Allied_discount', 'Revenue_OES_discount', 'Revenue_IAM_discount', "Entered_Buy_Quantity",
                                    "Extended_purchase_cost", "Additional_Cost")
    
    
    Original_current <- data.frame(lapply(Original_current, as.character), stringsAsFactors=FALSE)
    Original_current <- data.frame(lapply(Original_current, as.numeric), stringsAsFactors=FALSE)
    Original_current <- Original_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
    
    incProgress(1/5, detail = "Running Calculations")
    print("Original current done")
    ########## Code for Selldown Calculation (Current)
    Selldown_NPV <- data.frame()
    
    
    for (j in (1:nrow(ATB_ADS))) {
      
      cat("\nPart Number: ",j," : ", ATB_ADS[j,1])
      final_NPV <- 0
      Optimal_year_count <- 1
      LTBQ <- 0
      Year <- c()
      FCST <- c()
      NPV_CR <- c()
      Revenue_CR <- c()
      Expense <- c()
      Storage_cost_CR <- c()
      Freight_cost_CR <- c()
      Processing_cost_CR <- c()
      Buy_quantity <- c()
      Buy_Qty <- ATB_ADS$TOTAL_INVENTORY[j]
      
      YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
      
      for(n in (1:30)){
        FCST[n] <- ATB_ADS[j,(YI-1+n)]
      }
      
      FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
      
      p_to_get_year = 0
      q_to_get_demand = 0
      
      for(i in 1:30)
      {
        q_to_get_demand = q_to_get_demand + FCST[i]
        if(Buy_Qty > q_to_get_demand)
        {
          p_to_get_year = p_to_get_year + 1
        } else if(Buy_Qty <= FCST[1])
        {
          remain <- Buy_Qty
          c = 1
          d = 0
          for(i in 1:12)
          {
            d = d + (FCST[p_to_get_year+1] / 12)
            if(remain > d)
            {
              c = c+1
            }
          }
          
          FCST[p_to_get_year+1] <- remain
          Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
          break()
        }
      }
      
      if(Buy_Qty > FCST[1] & p_to_get_year < 30)
      {
        remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
        c = 1
        d = 0
        for(i in 1:12)
        {
          d = d + (FCST[p_to_get_year+1] / 12)
          if(remain > d)
          {
            c = c+1
          }
        }
        
        FCST[p_to_get_year+1] <- remain
        Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
      } else if(p_to_get_year >= 30)
      {
        remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
        FCST[p_to_get_year+1] <- 0
        Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
        c <- 0
      }
      
      if(p_to_get_year < 29)
      {
        for(i in ((p_to_get_year + 2) : 30))
        {
          FCST[i] <- 0
        }
      }
      
      ###########
      
      iam_weight <- ATB_ADS$IAM_FRACTION[j]
      oes_weight <- ATB_ADS$OES_FRACTION[j]
      allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
      
      FCST_iam_selldown <- round(FCST * iam_weight, digits = 0)
      FCST_oes_selldown <- round(FCST * oes_weight, digits = 0)
      FCST_allied_selldown <- round(FCST * allied_weight, digits = 0)
      
      Sum_FCST <- sum(FCST_iam_selldown) + sum(FCST_oes_selldown) + sum(FCST_allied_selldown)
      
      Diff_FCST <- Sum_FCST - Sum_Forecast
      
      
      if(Buy_Qty > 0 & Sum_Forecast > 0)
      {
        
        if(oes_weight != 0)
        {
          index <- tail(which(FCST_oes_selldown!=0),1)
        } else if(iam_weight != 0)
        {
          index <- tail(which(FCST_iam_selldown!=0),1)
        } else if(allied_weight != 0)
        {
          index <- tail(which(FCST_allied_selldown!=0),1)
        } else
        {
          index <- 1
        }
      } else
      {
        index <- 1
      }
      
      if(length(index)==0)
      {
        index <- 1
      }
      
      flag_revenue_oes <- 0
      flag_revenue_iam <- 0
      flag_revenue_allied <- 0
      
      if(oes_weight == 0)
      {
        FCST_oes_selldown[index] <- Sum_FCST + 1000
        flag_revenue_oes <- 1
      }
      if(iam_weight == 0)
      {
        FCST_iam_selldown[index] <- Sum_FCST + 1000
        flag_revenue_iam <- 1
      }
      if(allied_weight == 0)
      {
        FCST_allied_selldown[index] <- Sum_FCST + 1000
        flag_revenue_allied <- 1
      }
      
      
      if(FCST_oes_selldown[index] < FCST_iam_selldown[index] & FCST_oes_selldown[index] < FCST_allied_selldown[index] & oes_weight != 0)
      {
        FCST_oes_selldown[index] <- FCST_oes_selldown[index] - Diff_FCST
        
      } else if(FCST_iam_selldown[index] <= FCST_oes_selldown[index] & FCST_iam_selldown[index] <= FCST_allied_selldown[index] & iam_weight != 0)
      {
        FCST_iam_selldown[index] <- FCST_iam_selldown[index] - Diff_FCST
        
      } else if(FCST_allied_selldown[index] <= FCST_oes_selldown[index] & FCST_allied_selldown[index] <= FCST_iam_selldown[index] & allied_weight != 0)
      {
        FCST_allied_selldown[index] <- FCST_allied_selldown[index] - Diff_FCST
      }
      
      if(flag_revenue_oes == 1)
      {
        FCST_oes_selldown[index] <- 0
      }
      if(flag_revenue_iam == 1)
      {
        FCST_iam_selldown[index] <- 0
      }
      if(flag_revenue_allied == 1)
      {
        FCST_allied_selldown[index] <- 0
      }
      
      ###########
      
      BQ <- Buy_Qty
      qty <- 0
      yr_qty <- c()
      
      for (i in (1:(p_to_get_year))) {
        s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
        qty <- qty + s
        yr_qty[i+1] <- s
      }
      
      yr_qty[1] <- (2*BQ - FCST[1])/2       
      yr_qty[p_to_get_year + 2] <- 0
      
      Total_storage_qty <- sum(yr_qty)
      
      Storage_Cost <- 0
      Storage_Cost_non_npv <- 0
      revenue <- 0
      revenue_iam <- 0
      revenue_oes <- 0
      revenue_allied <- 0
      
      revenue_non_npv <- 0
      revenue_non_npv_iam <- 0
      revenue_non_npv_oes <- 0
      revenue_non_npv_allied <- 0
      
      if(p_to_get_year > 0)
      {
        
        for(k in 1 : (p_to_get_year + 1))
        {
          CR <- ((1-(0.15/12))^(k*12))
          revenue <- revenue + (FCST[k] * CR * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
          revenue_iam <- revenue_iam + (FCST_iam_selldown[k] * CR * (ATB_ADS$Dealer_Price_IAM[j]))
          revenue_oes <- revenue_oes + (FCST_oes_selldown[k] * CR * (ATB_ADS$Dealer_Price_OES[j]))
          revenue_allied <- revenue_allied + (FCST_allied_selldown[k] * CR * (ATB_ADS$Dealer_Price_Allied_Export[j]))
          
          ##revenue_non_npv <- revenue_non_npv + (FCST[k] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
          revenue_non_npv_iam <- revenue_non_npv_iam + (FCST_iam_selldown[k] * (ATB_ADS$Dealer_Price_IAM[j]))
          revenue_non_npv_oes <- revenue_non_npv_oes + (FCST_oes_selldown[k] * (ATB_ADS$Dealer_Price_OES[j]))
          revenue_non_npv_allied <- revenue_non_npv_allied + (FCST_allied_selldown[k] * (ATB_ADS$Dealer_Price_Allied_Export[j]))
          revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
          Storage_Cost <- Storage_Cost + (yr_qty[k]*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
          Storage_Cost_non_npv <- Storage_Cost_non_npv + (yr_qty[k]*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] )
          
          
        }
      }
      
      if(p_to_get_year == 0)
      {
        
        for(k in (1:1))
        {
          CR <- ((1-(0.15/12))^(k*12))
          revenue <- revenue + ((FCST[1]) * CR * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
          revenue_iam <- revenue_iam + (FCST_iam_selldown[1] * CR * (ATB_ADS$Dealer_Price_IAM[j]))
          revenue_oes <- revenue_oes + (FCST_oes_selldown[1] * CR * (ATB_ADS$Dealer_Price_OES[j]))
          revenue_allied <- revenue_allied + (FCST_allied_selldown[1] * CR * (ATB_ADS$Dealer_Price_Allied_Export[j]))
          
          ##revenue_non_npv <- revenue_non_npv + (FCST[1] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
          revenue_non_npv_iam <- revenue_non_npv_iam + (FCST_iam_selldown[1] * (ATB_ADS$Dealer_Price_IAM[j]))
          revenue_non_npv_oes <- revenue_non_npv_oes + (FCST_oes_selldown[1] * (ATB_ADS$Dealer_Price_OES[j]))
          revenue_non_npv_allied <- revenue_non_npv_allied + (FCST_allied_selldown[1] * (ATB_ADS$Dealer_Price_Allied_Export[j]))
          revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
          
          Storage_Cost <- Storage_Cost + ((yr_qty[1]) * ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
          Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j])
          
        }
      }
      
      offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
      
      Offsite_trans_cost <- ATB_ADS$OFFSITE_TRANS_COST_PP[j] * offsite_quantity
      Freight_cost <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost) * (1-(0.15/12))
      Freight_cost_non_npv <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost)
      
      Offsite_labour_cost <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[j])
      Total_Processing_cost <- (((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
      Total_Processing_cost_non_npv <- (((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ) + Offsite_labour_cost)
      
      Packaging_cost <- ATB_ADS$AVG_PCPP[j] * BQ * (1-(0.15/12))
      Packaging_cost_non_npv <- ATB_ADS$AVG_PCPP[j] * BQ
      
      Material_cost <- BQ * ATB_ADS$LAST_COST[j] * (1-(0.15/12))
      Material_cost_non_npv <- BQ * ATB_ADS$LAST_COST[j]
      
      Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + ATB_ADS$Additional_cost[j] + Material_cost + Packaging_cost
      revenue <- revenue_iam + revenue_oes + revenue_allied
      NPV_with_capital_rate <- revenue - Total_Expense
      
      Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + Material_cost_non_npv + ATB_ADS$Additional_cost[j] + Packaging_cost_non_npv
      NPV_non_npv <- revenue_non_npv - Total_Expense_non_npv
      
      Selldown_NPV <- data.frame(lapply(Selldown_NPV, as.character), stringsAsFactors=FALSE)
      Selldown_NPV <- rbind(Selldown_NPV, c(ATB_ADS[j,1], Material_cost, Storage_Cost,Freight_cost,Total_Processing_cost,Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                            Material_cost_non_npv, Storage_Cost_non_npv, Freight_cost_non_npv, Total_Processing_cost_non_npv, Total_Expense_non_npv,
                                            revenue_non_npv, NPV_non_npv, revenue_iam, revenue_oes, revenue_allied, revenue_non_npv_iam, revenue_non_npv_oes,
                                            revenue_non_npv_allied, Packaging_cost, Packaging_cost_non_npv, ATB_ADS$TOTAL_INVENTORY[j]))
      
      colnames(Selldown_NPV) <- c("Part_Nbr","Selldown_Material_cost", "Selldown_Storage_Cost","Selldown_Freight_cost","Selldown_Processing_cost",
                                  "Total_Expense","Selldown_Revenue","Selldown_NPV","Total_BQ", "Selldown_Material_cost_non_npv", "Selldown_Storage_Cost_non_npv",
                                  "Selldown_Freight_cost_non_npv", "Selldown_Processing_cost_non_npv", "Total_Expense_non_npv", "Selldown_Revenue_non_npv",
                                  "Selldown_NPV_non_npv", "Selldown_Revenue_IAM", "Selldown_Revenue_OES", "Selldown_Revenue_Allied", "Selldown_Revenue_non_npv_IAM",
                                  "Selldown_Revenue_non_npv_OES", "Selldown_Revenue_non_npv_Allied", "Selldown_Packaging_cost", "Selldown_Packaging_cost_non_npv",
                                  "Total_Inventory")
      
    }
    Selldown_NPV <- data.frame(lapply(Selldown_NPV, as.character), stringsAsFactors=FALSE)
    Selldown_NPV <- data.frame(lapply(Selldown_NPV, as.numeric), stringsAsFactors=FALSE)
    Selldown_NPV <- Selldown_NPV %>% mutate_each(funs(round(.,2)), -Part_Nbr)
    
    
    incProgress(1/5, detail = "Running Calculations")
    print("Sell down current done")
    ########## Variation of Forecast Demand
    spl_1 <- Original_current
    spl_1$Part_Nbr <- str_pad(spl_1$Part_Nbr, width=8, side="left", pad="0")		
    spl_2 <- Original_optimal 
    spl_2$Part_Nbr <- str_pad(spl_2$Part_Nbr, width=8, side="left", pad="0")
    spl_3 <- Selldown_NPV 
    spl_3$Part_Nbr <- str_pad(spl_3$Part_Nbr, width=8, side="left", pad="0")
    spl_x <- t_scenario_curr
    spl_12 <- merge(spl_1, spl_2, by = "Part_Nbr")
    spl_123 <- merge(spl_12, spl_3, by = "Part_Nbr")
    spl_123 <- merge(spl_123, spl_x, by = "Part_Nbr")
    spl_123$First_buy <- First_buy
    spl_123$Last_buy <- Last_buy
    spl_123$Last_sale <- Last_sale
    print("Sell down current done 2")
    #pb_excel<-global_ads$df_data_ads_pb
    finance_current_scenario_pb<-global_ads$df_data_ads_pb_orig
    spl_123<-merge(spl_123, finance_current_scenario_pb[ ,c("Part_Nbr","flat_pb","disc_pb")], by = "Part_Nbr")
    
    spl_123<-merge(spl_123, pb_excel[ ,c("Part_Nbr","ATB_Units","X210","X373")], by = "Part_Nbr")
    
    spl_123 <- spl_123 %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                  Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                  Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                  Selldown_Revenue,Selldown_Revenue_non_npv,
                                  Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                  Total_Inventory,
                                  First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                  Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                  Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                  Optimal_Storage_Cost,
                                  Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                  Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost,Dealer_Price,  Dealer_OES_Price, Dealer_Allied_Export_Price, # change 786 
                                  WD_Price,  Dealer_IAM_Price,Discount_Percent_OES, Discount_Percent_Allied_Export,Discount_Percent_IAM, Material_Cost, MOQ,Standard_Pack,Setup_Cost_curr,Additional_Cost_curr,Monthly_square_feet_cpp,
                                  Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                  Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp,flat_pb,disc_pb,ATB_Units,X210
    )
    
    spl_123$Part_Nbr <- str_pad(spl_123$Part_Nbr, width=8, side="left", pad="0")
    write.csv(spl_123, file = "current_scenario.csv", row.names = FALSE)
    print("Sell down current done 3")
    output$download_current_scenario <- downloadHandler(
      filename = function() { 
        paste("Part_view_Current_Scenario",".csv", sep="") 
      },
      content = function(file) {
        abc <- spl_123
        abc$Part_Nbr <- str_pad(abc$Part_Nbr, width=8, side="left", pad="0")
        abc <- data.frame(Part_Nbr = abc[,1],
                          lapply(abc[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                          lapply(abc[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                          lapply(abc[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(abc[,53] , big.mark=",", digits=0, format="f"),formatC(abc[,54] , big.mark=",", digits=2, format="f"), # change 786
                          lapply(abc[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                          lapply(abc[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                          paste("$", formatC(abc[,65] , big.mark=",", digits=0, format="f")),
                          lapply(abc[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                          lapply(abc[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                          abc[,80:83],
                          stringsAsFactors = FALSE)
        
        colnames(abc) <- c("Part Number",
                           "NPV", "Selldown NPV","Selldown Non NPV",
                           "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                           "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                           "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                           "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                           "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                           "Current Inventory",
                           "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                           "Total Purchase", "Total Sales", "Optimal NPV",
                           "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                           "Optimal Storage Cost",
                           "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                           "Optimal ATB Quantity","Optimal payback period", "Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export",
                           "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                           "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                           "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                           "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)","Simple payabck period","Discounted payback period","2 year payback ATB","2 year payback NPV")
        
        
        write.csv(abc, file)
        
      },
      contentType = "csv"
    ) 
    spl_123_1<-spl_123
    spl_123_1$Selected_scenario <- "None"
    spl_123_1 <- spl_123_1 %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                      Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                      Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                      Selldown_Revenue,Selldown_Revenue_non_npv,
                                      Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                      Total_Inventory,
                                      First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                      Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                      Optimal_Revenue, Optimal_Material_Cost,Optimal_Setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                      Optimal_Storage_Cost,
                                      Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                      Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost,Dealer_Price,  Dealer_OES_Price, Dealer_Allied_Export_Price,
                                      WD_Price,  Dealer_IAM_Price,Discount_Percent_OES, Discount_Percent_Allied_Export,Discount_Percent_IAM, Material_Cost, MOQ,Standard_Pack,Setup_Cost_curr,Additional_Cost_curr,Monthly_square_feet_cpp,
                                      Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                      Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp, Selected_scenario,flat_pb,disc_pb,ATB_Units,X210
    )
    report_update <- global_current_sce_down$df_data_current
    report_update[report_update$Part_Nbr == spl_123_1$Part_Nbr[1], 2:84] <- spl_123_1[1, 2:84]
    global_current_sce_down$df_data_current <- report_update
    
    #report_update <- global_current_sce_down$df_data_current
    #report_update$Part_Nbr <- str_pad(report_update$Part_Nbr, width=8, side="left", pad="0")
    #report_update[report_update$Part_Nbr == input$Part_Number, 79] <- as.character("None")
    #global_current_sce_down$df_data_current <- report_update
    
    
    shinyjs::show("Curr_scen")
    output$Curr_scen <- renderHotable({
      
      revenue_non <- Original_current$Revenue_non_npv[1]
      material_non <- Original_current$Material_cost_non_npv[1]
      
      part_view <- 0
      part_view<- as.data.frame(part_view)
      part_view$part_view <- NULL
      part_view$Fields <- "NPV($)" 
      part_view[2,1]<- "Selldown NPV($)"       
      part_view[3,1]<- "Net"
      part_view[4,1]<- "Scrap"
      
      part_view[5,1]<- "First Buy"
      part_view[6,1]<- "Last Buy"
      part_view[7,1]<- "Last Sale"    
      part_view[8,1]<- "Lifetime Revenue(NPV)" 
      part_view[9,1]<- "Lifetime Revenue(Non NPV)"
      part_view[10,1]<- "Material Cost(NPV)"
      part_view[11,1]<- "Material Cost(Non NPV)"
      part_view[12,1]<- "Setup Cost(NPV)"
      part_view[13,1]<- "Transportation Cost(NPV)"
      part_view[14,1]<- "Labor Cost(NPV)"
      part_view[15,1]<- "Storage Cost(NPV)"
      part_view[16,1]<- "Packaging Cost(NPV)"
      part_view[17,1]<- "Offsite Labor Cost(NPV)"
      part_view[18,1]<- "Offsite Trans Cost(NPV)"
      part_view[19,1]<- "Total Expense(NPV)"
      part_view[20,1]<- "Optimal NPV"
      part_view[21,1]<- "Optimal Buy Qty"
      part_view[22,1]<- "Total Purchase"
      part_view[23,1]<- "Inventory and Purchase"
      part_view[24,1]<- 'Extended Optimal Buy Cost'
      part_view[25,1]<- 'Extended Buy Qty Cost'
      #part_view[26,1]<-'ATB_qty_2year_pb'
      part_view[26,1]<- "ATB qty for 2 year payback" 
      part_view[27,1]<- "Discounted payback based on ATB qty"
      part_view[28,1] <- "Optimal payback"		  
      
      part_view$Values <- paste("$", formatC(Original_current$NPV[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[2, 2] <-  paste("$", formatC(Selldown_NPV$Selldown_NPV[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[3, 2] <-  paste("$", formatC((Original_current$NPV[1] - Selldown_NPV$Selldown_NPV[1]), big.mark=",", digits=2, format="f"), sep = " ")
      part_view[4, 2] <-  round(Original_current$Scrap_amount[1], 0)
      
      part_view[5, 2] <- as.character(round(First_buy,0))
      part_view[6, 2] <- as.character(round(Last_buy,0)) 
      part_view[7, 2] <- as.character(round(Last_sale,0))
      part_view[8, 2] <- paste("$", formatC(Original_current$Revenue[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[9, 2] <-  paste("$", formatC(revenue_non, big.mark=",", digits=2, format="f"), sep = " ")
      part_view[10, 2] <-  paste("$", formatC(Original_current$Part_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[11, 2] <-  paste("$", formatC(material_non, big.mark=",", digits=2, format="f"), sep = " ")
      part_view[12, 2] <- 0
      part_view[13, 2] <-  paste("$", formatC(Original_current$Total_transport_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[14, 2] <- paste("$", formatC((Original_current$Total_process_cost[1]), big.mark=",", digits=2, format="f"), sep = " ")
      part_view[15, 2] <-  paste("$", formatC(Original_current$Storage_Cost[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[16, 2] <-  paste("$", formatC((Original_current$Package_cost[1]), big.mark=",", digits=2, format="f"), sep = " ")
      part_view[17, 2] <-  paste("$", formatC(Original_current$Total_offsite_labor_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[18, 2] <-  paste("$", formatC(Original_current$Total_offsite_transport_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[19, 2] <-  paste("$", formatC(Original_current$Expense[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[20, 2] <-  paste("$", formatC(Original_optimal$Optimal_NPV[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[21, 2] <- paste(formatC(ceiling(Original_optimal$Optimal_ATB_Quantity[1]), big.mark=",", digits=0, format="f"))
      part_view[22,2] <-  paste(formatC(ceiling(Original_current$Buy_Quantity[1]), big.mark=",", digits=0, format="f"))
      part_view[23,2] <-  paste(formatC(ceiling((ATB_ADS$TOTAL_INVENTORY[1] + Original_current$Buy_Quantity[1])), big.mark=",", digits=0, format="f"))
      part_view[24, 2] <-  paste("$", formatC(Original_optimal$Extended_optimal_buy_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[25, 2] <-  paste("$", formatC(Original_current$Extended_purchase_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
      part_view[26, 2] <- round(as.numeric(ATB_ADS_pb$ATB_Units),0)
      part_view[27, 2] <- round(as.numeric(ATB_ADS_pb_orig$disc_pb),2)
      part_view[28, 2] <- round(as.numeric(x),2)
      
      part_view
      
    }, readOnly = TRUE)
    print("done")
    
    
  })
  
  
  ## Code for Part View Scenario-1
  observeEvent({
    input$go_s1
  }, {
    
    
    shinyjs::enable("downloadData_s_1")
    shinyjs::enable("download_income_report_s_1")
    
    part_info <- global_ads$df_data_ads
    
    part_inform <- as.data.frame(part_info)
    part_inform$X <- NULL
    part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
    
    ATB_ADS <- part_inform[which(part_inform$PART_NBR == input$Part_Number),]
    
    output$scenario_selector <- renderUI({
      radioButtons("selected_scenario", "Choose the best scenario for this part",
                   c("None" = "None",
                     "Scenario-1" = "Scenario_1",
                     "Scenario-2" = "Scenario_2"),
                   selected = "None", inline = TRUE
      )
    })
    ####getting scenario 1 values
    scenario_1 <- c(1:18)
    scenario_1 <- as.data.frame(scenario_1)
    
    scenario_1$Fields <- c("Proposed Dealer Price($)", "Proposed WD Price($)", "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                           "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                           "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)", "National Inventory")
    scenario_1$scenario_1 <- NULL
    if (input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
    {
      scenario_1$Values <- c(part_inform$Proposed_Dealer_Price_1[1], part_inform$Proposed_Wd_Price_1[1], part_inform$Material_cost_Scenario_1[1],part_inform$Moq_1[1],part_inform$Standard_Pack_1[1],
                             part_inform$Setup_Cost_Scenario_1[1], part_inform$Additional_Cost_Scenario_1[1],
                             round(as.numeric(as.character(part_inform$MTH_SQ_FT_COST_PER_PEICE[1])),5),
                             round(as.numeric(as.character(part_inform$OFFSITE_TRANS_COST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$REDISTRIBUTION_COST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$OFFSITE_LCPP[1])), 5),
                             round(as.numeric(as.character(part_inform$IB_LABOR_COST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$OB_LABOR_COST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$AVG_LCPP[1])), 5), 
                             round(as.numeric(as.character(part_inform$AVG_PCPP[1])), 5),
                             round(as.numeric(as.character(part_inform$IB_TRANS_CST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$OB_TRANS_CST_PP[1])), 5), part_inform$TOTAL_INVENTORY[1])
      print("This is true")
      t_scenario_1<- transpose(scenario_1)
      colnames(t_scenario_1) <- scenario_1$Fields
      
      t_scenario_1$Part_Nbr<-input$Part_Number
      t_scenario_1 <- t_scenario_1[-c(1), ]
      rownames(t_scenario_1) <- NULL
      colnames(t_scenario_1)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s1","Additional_Cost_s1","Monthly_square_feet_cpp",
                                 "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                 "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                 "National_Inventory","Part_Nbr")
      
      
    } else
    {
      scenario_1$Values <- c(part_inform$DEALER_PRICE_NO_DISCOUNT[1], part_inform$WD_DEALER_PRICE_NO_DISCOUNT[1], part_inform$LAST_COST[1],
                             part_inform$MINIMUM_BUY_QTY[1],part_inform$STD_PACK_QTY[1],part_inform$Setup_cost[1],
                             part_inform$Additional_cost[1], 
                             round(as.numeric(as.character(part_inform$MTH_SQ_FT_COST_PER_PEICE[1])), 5), 
                             round(as.numeric(as.character(part_inform$OFFSITE_TRANS_COST_PP[1])), 5),
                             round(as.numeric(as.character(part_inform$REDISTRIBUTION_COST_PP[1])), 5),
                             round(as.numeric(as.character(part_inform$OFFSITE_LCPP[1])), 5), 
                             round(as.numeric(as.character(part_inform$IB_LABOR_COST_PP[1])), 5),
                             round(as.numeric(as.character(part_inform$OB_LABOR_COST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$AVG_LCPP[1])),5),
                             round(as.numeric(as.character(part_inform$AVG_PCPP[1])), 5),
                             round(as.numeric(as.character(part_inform$IB_TRANS_CST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$OB_TRANS_CST_PP[1])), 5), 
                             part_inform$TOTAL_INVENTORY[1])
      t_scenario_1<- transpose(scenario_1)
      colnames(t_scenario_1) <- scenario_1$Fields
      
      t_scenario_1$Part_Nbr<-input$Part_Number
      t_scenario_1 <- t_scenario_1[-c(1), ]
      rownames(t_scenario_1) <- NULL
      colnames(t_scenario_1)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s1","Additional_Cost_s1","Monthly_square_feet_cpp",
                                 "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                 "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                 "National_Inventory","Part_Nbr")
      
      
    }
    ###########Scenario 1 table done
    
    TEMP_MAN_REP_1_NAME <- ""
    test <- read.csv('gm_id.csv', stringsAsFactors = FALSE)
    
    if(!is.na(test$gm_id))
    {
      my_email <- test$gm_id[1]
      
      user_id <- my_email
      user_id <- gsub("\\ ", "_", user_id)
      TEMP_MAN_REP_1_NAME <- paste("TEMP_MAN_REP_1", user_id, sep = "_")
      TEMP_MAN_REP_2_NAME <- paste("TEMP_MAN_REP_2", user_id, sep = "_")
      
    }
    
    dbSendUpdate(con, paste("BEGIN
                            EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_1_NAME , "';
                            EXCEPTION
                            WHEN OTHERS THEN NULL;
                            END;"))
    
    #----------------------------------------
    ####### Code for Scenario - 1    
    #----------------------------------------
    ######### Code for Scenario-1-Optimal    
    
    withProgress(message = 'Processing in Progress', value = 0, {
      
      scenario_1 <- hot.to.df(input$hotable_sce1)
      
      DLR_Price_3 <- round(as.numeric(scenario_1$Values[1]), 4)
      wd_price <- round(as.numeric(scenario_1$Values[2]), 4)
      
      Dealer_Price_Allied_Export <- DLR_Price_3 * (1 - (ATB_ADS$Discount_allied_export_percent[1]/100))
      Dealer_Price_OES <- DLR_Price_3 * (1 - (ATB_ADS$Discount_oes_percent[1]/100))
      Dealer_Price_IAM <- wd_price * (1 - (ATB_ADS$Discount_iam_percent[1]/100))
      
      part_c_3 <- round(as.numeric(scenario_1$Values[3]) , 5)
      moq <- round(as.numeric(scenario_1$Values[4]) , 0)
      std_p <- round(as.numeric(scenario_1$Values[5]), 0)
      std_p <- ifelse(std_p == 0, 1, std_p)
      setup_cost <- round(as.numeric(scenario_1$Values[6]), 4)
      add_cost <- round(as.numeric(scenario_1$Values[7]), 4)
      Monthly_square_feet_cpp1 <- round(as.numeric(scenario_1$Values[8]), 7)
      Offsite_transportation_cpp1 <- round(as.numeric(scenario_1$Values[9]), 7)
      Redistribution_cpp1 <- round(as.numeric(scenario_1$Values[10]), 7)
      Offsite_Labor_cpp1 <- round(as.numeric(scenario_1$Values[11]), 7)
      Inbound_Labor_cpp1 <- round(as.numeric(scenario_1$Values[12]), 7)
      Outbound_Labor_cpp1 <- round(as.numeric(scenario_1$Values[13]), 7)
      Average_Labor_cpp1 <- round(as.numeric(scenario_1$Values[14]), 7)
      Average_Processing_cpp1 <- round(as.numeric(scenario_1$Values[15]), 7)
      Inbound_Transportation_cpp1 <- round(as.numeric(scenario_1$Values[16]), 7)
      Outbound_Transportation_cpp1 <- round(as.numeric(scenario_1$Values[17]), 7)
      
      Current_Inventory <-  round(as.numeric(scenario_1$Values[18]), 4)
      
      #ONSITE_TRANS_COST_PER_PIECE
      Onsite_trans_cpp1 <- Inbound_Transportation_cpp1 + Outbound_Transportation_cpp1 + Redistribution_cpp1
      
      #ONSITE_PRCS_COST_PP
      Onsite_procs_cpp1 <- Inbound_Labor_cpp1 + Outbound_Labor_cpp1 + Average_Labor_cpp1 + Average_Processing_cpp1
      
      ##### ATB Scenario calculation
      
      Scenario_1_optimal <- data.frame()
      NPV_Data <- data.frame()
      First_buy <- 0
      Last_sale <- 0
      flag <- 0
      flag_last_buy <- 0
      Last_buy <- 0
      
      for (jj in (1:nrow(ATB_ADS))) {
        
        cat("\nsc_1_opt Part Number: ",jj," : ", ATB_ADS[jj,1])
        final_NPV_list <- 0
        Optimal_year_count_list <- 1
        LTBQ_list <- 0
        Year_list <- c()
        FCST_list <- c()
        NPV_CR_list <- c()
        Revenue_CR_list <- c()
        Revenue_list_non_npv <- c()
        Expense_list <- c()
        Storage_cost_CR_list <- c()
        Freight_cost_CR_list <- c()
        Processing_cost_CR_list <- c()
        
        transport_cost <- c()
        offsite_transport_cost <- c()
        offsite_labor_cost <- c()
        process_cost <- c()
        packaging_cost <- c()
        
        Material_cost_CR_list <- c()
        Buy_quantity_list <- c()
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        
        for(nn in (1:30)){
          FCST_list[nn] <- ATB_ADS[jj,(YI-1+nn)]
        }
        
        FCST_list[1] <- FCST_list[1] + ATB_ADS$CURRENT_YEAR[jj]
        
        if(FCST_list[1] != 0)
        {
          First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
        } else
        {
          First_buy <- 0
        }
        
        for(i in 1:30)
        {
          if(FCST_list[i] == 0 & flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
            flag = 1
          } 
        }
        if(flag != 1)
        {
          Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
        }
        
        ###########
        Sum_Forecast <- sum(FCST_list)
        
        iam_weight <- ATB_ADS$IAM_FRACTION[jj]
        oes_weight <- ATB_ADS$OES_FRACTION[jj]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[jj]
        
        FCST_iam <- round(FCST_list * iam_weight, digits = 0)
        FCST_oes <- round(FCST_list * oes_weight, digits = 0)
        FCST_allied <- round(FCST_list * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
        
        Diff_FCST <- Sum_FCST - Sum_Forecast
        
        if(Sum_Forecast > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied!=0),1)
          } else
          {
            index <- 1
          }
        } else
        {
          index <- 1
        }
        
        if(length(index)==0)
        {
          index <- 1
        }
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
        {
          FCST_oes[index] <- FCST_oes[index] - Diff_FCST
          
        } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
        {
          FCST_iam[index] <- FCST_iam[index] - Diff_FCST
          
        } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
        {
          FCST_allied[index] <- FCST_allied[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied[index] <- 0
        }
        
        for(i in 1:30)
        {
          FCST_list[i] <- FCST_allied[i] + FCST_iam[i] + FCST_oes[i]
        }
        ###########
        
        
        for (nn in (1:30)) {
          Sum_Forecast_list <- sum(FCST_list[1:nn])
          BQ_list <- Sum_Forecast_list
          qty_list <- 0
          yr_qty_list <- c()
          
          if(nn > 1){
            for (ii in (1:(nn-1))) {
              ss <- ((BQ_list - sum(FCST_list[1:ii])) + (BQ_list - sum(FCST_list[1:(1+ii)])))/2
              qty_list <- qty_list + ss 
              yr_qty_list[ii+1] <- ss
            }
          }
          yr_qty_list[1] <- (2*BQ_list - FCST_list[1])/2        
          
          Total_storage_qty_list <- sum(yr_qty_list)
          Storage_Cost_list <- 0
          revenue_list <- 0
          revenue_list_non_npv <- 0
          revenue_iam <- 0 
          revenue_oes <- 0
          revenue_allied <- 0
          
          
          for(kk in (1: (nn) ))
          {
            CR <- ((1-(0.15/12))^(kk*12))
            revenue_list <- revenue_list + (FCST_list[kk] * CR *((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam[kk] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes[kk] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied[kk] * CR * (Dealer_Price_Allied_Export))
            
            revenue_list_non_npv <- revenue_list_non_npv + ((FCST_list[kk]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj])))
            Storage_Cost_list <- Storage_Cost_list + ((yr_qty_list[kk])*Monthly_square_feet_cpp1 * CR)
            
          }
          
          offsite_quantity <- ifelse((BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))) > 0, (BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))), 0)
          
          Offsite_trans_cost_list <- Offsite_transportation_cpp1 * offsite_quantity
          Freight_cost_list <- ((Onsite_trans_cpp1 * BQ_list) + Offsite_trans_cost_list) * (1-(0.15/12))
          Offsite_labour_cost_list <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          Total_Processing_cost_list <- ((Onsite_procs_cpp1 * BQ_list) + Offsite_labour_cost_list) * (1-(0.15/12))
          
          
          Material_cost_list <- (part_c_3*BQ_list)*(1-(0.15/12))
          
          Total_transport_cost <- (Onsite_trans_cpp1 * BQ_list) * (1-(0.15/12))
          Total_offsite_transport_cost <- Offsite_trans_cost_list * (1-(0.15/12))
          Total_offsite_labor_cost <- Offsite_labour_cost_list * (1-(0.15/12))
          Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ_list) * (1-(0.15/12))
          Total_package_cost <- Average_Processing_cpp1 * BQ_list * (1-(0.15/12)) 
          
          Total_Expense_list <- Storage_Cost_list + Freight_cost_list + Total_Processing_cost_list + Material_cost_list + setup_cost + add_cost
          revenue_list <- revenue_iam + revenue_oes + revenue_allied
          
          NPV_with_capital_rate_list <- revenue_list - Total_Expense_list
          Year_list[nn] <- nn
          NPV_CR_list[nn] <- NPV_with_capital_rate_list
          Expense_list[nn] <- Total_Expense_list
          Revenue_CR_list[nn] <- revenue_list
          Revenue_list_non_npv[nn] <- revenue_list_non_npv
          Storage_cost_CR_list[nn] <- Storage_Cost_list
          Freight_cost_CR_list[nn] <- Freight_cost_list
          Processing_cost_CR_list[nn] <- Total_Processing_cost_list
          Material_cost_CR_list[nn] <- Material_cost_list
          Buy_quantity_list[nn] <- BQ_list
          
          
          transport_cost[nn] <- Total_transport_cost
          offsite_transport_cost[nn] <- Total_offsite_transport_cost
          offsite_labor_cost[nn] <- Total_offsite_labor_cost
          process_cost[nn] <- Total_process_cost
          packaging_cost[nn] <- Total_package_cost
          
          if(NPV_with_capital_rate_list>0) {
            
            if(final_NPV_list<NPV_with_capital_rate_list){
              
              final_NPV_list <- NPV_with_capital_rate_list
              Optimal_year_count_list <- nn
              LTBQ_list <- BQ_list
              Total_Expense_NPV_list <- Total_Expense_list
              Revenue_NPV_list <- revenue_list
              Revenue_NPV_list_non_npv <- revenue_list_non_npv
              Storage_cost_NPV_list <- Storage_Cost_list
              Freight_cost_NPV_list <- Freight_cost_list
              Processing_cost_NPV_list <- Total_Processing_cost_list
              Material_cost_NPV_list <- Material_cost_list
              
              transport_cost_list <- Total_transport_cost
              offsite_transport_cost_list <- Total_offsite_transport_cost
              offsite_labor_cost_list <- Total_offsite_labor_cost
              process_cost_list <- Total_process_cost
              package_cost_list <- Total_package_cost
            }
          } else if((nn==1) && (NPV_with_capital_rate_list<=0)) {
            
            Optimal_year_count_list <- 0
            Total_Expense_NPV_list <- Expense_list[1]
            Revenue_NPV_list <- Revenue_CR_list[1]
            Revenue_NPV_list_non_npv <- Revenue_list_non_npv[1]
            Storage_cost_NPV_list <- Storage_cost_CR_list[1]
            Freight_cost_NPV_list <- Freight_cost_CR_list[1]
            Processing_cost_NPV_list <- Processing_cost_CR_list[1]
            Material_cost_NPV_list <- Material_cost_CR_list[1]
            
            transport_cost_list <- transport_cost[1]
            offsite_transport_cost_list <- offsite_transport_cost[1]
            offsite_labor_cost_list <- offsite_labor_cost[1]
            process_cost_list <- process_cost[1]
            package_cost_list <- packaging_cost[1]
            
          }
        }
        if(offsite_transport_cost_list < 0 )
        {
          offsite_transport_cost_list <- 0
        }
        if(offsite_labor_cost_list < 0)
        {
          offsite_labor_cost_list <- 0
        }
        
        LTBQ_list <- LTBQ_list - Current_Inventory
        
        if(LTBQ_list <= 0)
        {
          LTBQ_list = 0
        }
        
        Extended_optimal_buy_cost <- LTBQ_list * part_c_3
        Material_cost_list_non_npv <- (Material_cost_NPV_list / (1-(0.15/12)))
        Scenario_1_optimal <- data.frame(lapply(Scenario_1_optimal, as.character), stringsAsFactors=FALSE)
        
        Scenario_1_optimal <- rbind(Scenario_1_optimal, c(ATB_ADS[jj,1],Storage_cost_NPV_list,Freight_cost_NPV_list,Processing_cost_NPV_list,
                                                          Material_cost_NPV_list,Total_Expense_NPV_list,Revenue_NPV_list,final_NPV_list,
                                                          Optimal_year_count_list,LTBQ_list,Revenue_NPV_list_non_npv, Material_cost_list_non_npv,
                                                          transport_cost_list, offsite_transport_cost_list, offsite_labor_cost_list, process_cost_list,
                                                          setup_cost, DLR_Price_3, Dealer_Price_OES, Dealer_Price_Allied_Export, wd_price,Dealer_Price_IAM,
                                                          ATB_ADS$Discount_iam_percent[jj], ATB_ADS$Discount_oes_percent[jj], ATB_ADS$Discount_allied_export_percent[jj],
                                                          package_cost_list,Extended_optimal_buy_cost, add_cost, Current_Inventory))
        
        NPV_Data <- data.frame(ATB_ADS[jj,1],Year_list,FCST_list,Storage_cost_CR_list,Freight_cost_CR_list,Processing_cost_CR_list,Material_cost_CR_list,Buy_quantity_list,Expense_list,Revenue_CR_list,NPV_CR_list)
      }
      colnames(Scenario_1_optimal) <- c("Part_Nbr","Optimal_Storage_Cost_Scenario_1","Optimal_Transportation_Cost_Scenario_1",
                                        "Optimal_Processing_Cost_Scenario_1","Optimal_Material_Cost_Scenario_1","Optimal_Expense_Scenario_1",
                                        "Optimal_Revenue_Scenario_1","Optimal_NPV_Scenario_1","Optimal_year_count_Scenario_1","Optimal_ATB_Quantity_Scenario_1",
                                        "Optimal_Revenue_Non_Npv_Scenario_1", "Optimal_Material_cost_non_npv_Scenario_1", "Optimal_Total_transport_cost_Scenario_1",
                                        "Optimal_Total_offsite_transport_cost_Scenario_1","Optimal_Total_offsite_labor_cost_Scenario_1",
                                        "Optimal_Total_process_cost_Scenario_1", "Optimal_Setup_cost_Scenario_1","Proposed_Dealer_Price_1",
                                        "Dealer_Price_OES_1", "Dealer_Price_Allied_Export_1", "Proposed_Wd_Price_1", "Dealer_Price_IAM_1", 
                                        "Discount_iam_percent", "Discount_oes_percent", "Discount_allied_export_percent", "Optimal_Packaging_cost_Scenario_1",
                                        "Extended_optimal_buy_cost_1", "Additional_Cost_1", "Total_Inventory")
      
      Scenario_1_optimal <- data.frame(lapply(Scenario_1_optimal, as.character), stringsAsFactors=FALSE)
      Scenario_1_optimal <- data.frame(lapply(Scenario_1_optimal, as.numeric), stringsAsFactors=FALSE)
      Scenario_1_optimal <- Scenario_1_optimal %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      Scenario_1_optimal$Part_Nbr <- str_pad(Scenario_1_optimal$Part_Nbr, width=8, side="left", pad="0")
      
      incProgress(1/4, detail = "Running Calculations")
      
      
      ########## Code for Scenario-1: Current 
      BQ_S1 <- as.numeric(input$Buy_qty_s11)
      
      if(is.na(BQ_S1))
      {
        shinyjs::enable("download_income_report_s_1")
        Scenario_1_current <- data.frame()
        
        for(j in (1:nrow(ATB_ADS)))
        {
          cat("\nsc_1_curr Part Number: ",j," : ", ATB_ADS[j,1])
          FCST <- c()
          Curr_Inv <- round(as.numeric(scenario_1$Values[18]), 4)
          Curr_Inv_copy <- Curr_Inv
          Revenue <- c()
          Revenue_Allied <- c()
          Revenue_OES <- c()
          Revenue_IAM <- c()
          
          Revenue_non_npv <- c()
          
          AMD <- c()
          AMD_iam <- c()
          AMD_oes <- c()
          AMD_allied <- c()
          
          First_buy <- 0
          Last_sale <- 0
          Last_buy <- 0
          flag <- 0
          flag_last_buy <- 0
          
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
            Revenue[n] <- 0
            Revenue_Allied[n] <- 0
            Revenue_OES[n] <- 0
            Revenue_IAM[n] <- 0
            
            Revenue_non_npv[n] <- 0
          }
          
          FCST[1] <- ATB_ADS$CURRENT_YEAR[j] + FCST[1]
          
          Total_FCST <- sum(FCST)
          
          if(FCST[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          ###########          
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam <- round(FCST * iam_weight, digits = 0)
          FCST_oes <- round(FCST * oes_weight, digits = 0)
          FCST_allied <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Total_FCST
          
          
          if(Total_FCST > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          ###########          
          for(n in (1:30)){
            AMD[n] <- FCST[n]/12
            AMD_oes[n] <- FCST_oes[n] / 12
            AMD_iam[n] <- FCST_iam[n] / 12
            AMD_allied[n] <- FCST_allied[n] / 12
          }
          
          
          for(k in (1:30))
          {
            CR <- ((1-(0.15/12))^(k*12))
            Revenue[k] <- Revenue[k] + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
            
            Revenue_Allied[k] <- Revenue_Allied[k] + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
            Revenue_OES[k] <- Revenue_OES[k] + (FCST_oes[k] * CR * (Dealer_Price_OES))
            Revenue_IAM[k] <- Revenue_IAM[k] + (FCST_iam[k] * CR * (Dealer_Price_IAM))
            
            Revenue_non_npv[k] <- Revenue_non_npv[k] + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
            
          }
          
          Revenue_OES_non_npv_no_discount <- sum(FCST_oes) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
          Revenue_IAM_non_npv_no_discount <- sum(FCST_iam) * ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[j]
          Revenue_Allied_non_npv_no_discount <- sum(FCST_allied) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
          
          Revenue_OES_non_npv_discount <- sum(FCST_oes) * Dealer_Price_OES
          Revenue_IAM_non_npv_discount <- sum(FCST_iam) * Dealer_Price_IAM 
          Revenue_Allied_non_npv_discount <- sum(FCST_allied) * Dealer_Price_Allied_Export
          
          Revenue_Allied_discount <- sum(Revenue_Allied)
          Revenue_OES_discount <- sum(Revenue_OES)
          Revenue_IAM_discount <- sum(Revenue_IAM)
          
          year <- 0
          month <- 0
          get_demand <- 0
          
          for(i in 1:30)
          {
            get_demand = get_demand + FCST[i]
            if(Curr_Inv > get_demand)
            {
              year = year + 1
            } else if(Curr_Inv <= FCST[1])
            {
              remain = Curr_Inv
              
              year_remain = FCST[1] - remain
              
              month = 1
              demand_for_break_year = 0
              for(i in 1:12)
              {
                demand_for_break_year = demand_for_break_year + (FCST[1] / 12)
                if(remain > demand_for_break_year)
                {
                  month = month + 1
                }
              }
              
              FCST[year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(year+1)])
              break()
            }
          }
          
          ###
          if(Curr_Inv > FCST[1] & year < 30)
          {
            remain <- Curr_Inv - sum(FCST[1:year])
            
            year_remain <- FCST[(year+1)] - remain
            
            month = 1
            demand_for_break_year = 0
            for(i in 1:12)
            {
              demand_for_break_year = demand_for_break_year + (FCST[year+1] / 12)
              if(remain > demand_for_break_year)
              {
                month = month+1
              }
            }
            
            FCST[year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(year+1)])
          } else if(year >= 30)
          {
            remain <- Curr_Inv - sum(FCST[1:year])
            FCST[year+1] <- 0
            year_remain <- 0
            Sum_Forecast <- sum(FCST[1:(year + 1)])
            month <- 0
          }
          
          
          BQ <- ceiling(Curr_Inv)
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(year))) {
            storage_qty <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + storage_qty
            yr_qty[i+1] <- storage_qty
          }
          
          yr_qty[1] <- (2*BQ - FCST[1])/2        
          yr_qty[year + 2] <- 0
          
          Storage_Cost_Curr_Inv <- 0
          Storage_Cost_Curr_Inv_non_npv <- 0
          
          
          for(k in (1 : (year+1)))
          {
            CR <- ((1-(0.15/12))^(k*12))
            Storage_Cost_Curr_Inv <- Storage_Cost_Curr_Inv + ((yr_qty[k])* Monthly_square_feet_cpp1 * CR)
            Storage_Cost_Curr_Inv_non_npv <- Storage_Cost_Curr_Inv_non_npv + (yr_qty[k]) * Monthly_square_feet_cpp1
            
          }
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost_curr_inv <- Offsite_transportation_cpp1 * offsite_quantity
          transport_cost_curr_inv <- Onsite_trans_cpp1 * BQ * (1-(0.15/12))
          transport_cost_curr_inv_non_npv <- Onsite_trans_cpp1 * BQ 
          
          Freight_cost_curr_inv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv) * (1-(0.15/12))
          Freight_cost_curr_inv_non_npv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv)
          
          Offsite_labour_cost_curr_inv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1) * (1-(0.15/12))
          Offsite_labour_cost_curr_inv_non_npv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          
          process_cost_curr_inv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ * (1-(0.15/12))
          process_cost_curr_inv_non_npv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ
          
          package_cost_curr_inv <- Average_Processing_cpp1 * BQ * (1-(0.15/12))  
          package_cost_curr_inv_non_npv <- Average_Processing_cpp1 * BQ
          
          Total_Processing_cost_curr_inv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost_curr_inv) * (1-(0.15/12)) 
          Material_cost_curr_inv <- BQ * part_c_3 * (1-(0.15/12)) 
          Material_cost_curr_inv_non_npv <- BQ * part_c_3 
          
          
          FCST[year+1] <- year_remain
          
          Adj_Dem <- c()
          BF_BQ <- c()
          Curr_Inv <- c()
          BQ <- c()
          Purchase_times <- c()
          Yearly_BQ <- c()
          Storage_Cost <- c()
          Storage_Cost_non_npv <- c()
          Offsite_Qty <- c()
          Freight_cost <- c()
          Freight_cost_non_npv <- c()
          transport_cost <- c()
          offsite_transport_cost <- c()
          transport_cost_non_npv <- c()
          offsite_transport_cost_non_npv <- c()
          Processing_cost <- c()
          offsite_labor_cost <- c()
          offsite_labor_cost_non_npv <- c()
          process_cost <- c()
          process_cost_non_npv <- c()
          package_cost <- c()
          package_cost_non_npv <- c()
          Material_cost <- c()
          Material_cost_non_npv <- c()
          All_Expense <- c()
          
          for(i in 1:year)
          {
            Adj_Dem[i] = 0
            BF_BQ[i] = 0
            Curr_Inv[i] = 0
            BQ[i] = 0
            Purchase_times[i] = 0
            Yearly_BQ[i] = 0
            Storage_Cost[i] = 0
            Storage_Cost_non_npv[i] = 0
            Offsite_Qty[i] = 0
            Freight_cost[i] = 0
            Freight_cost_non_npv[i] = 0
            transport_cost[i] = 0
            offsite_transport_cost[i] = 0
            transport_cost_non_npv[i] = 0
            offsite_transport_cost_non_npv[i] = 0
            Processing_cost[i] = 0
            offsite_labor_cost[i] = 0
            offsite_labor_cost_non_npv[i] = 0
            process_cost[i] = 0
            process_cost_non_npv[i] = 0
            package_cost[i] = 0
            package_cost_non_npv[i] = 0
            Material_cost[i] = 0
            Material_cost_non_npv[i] = 0
            All_Expense[i] = 0
          }
          
          Total_BQ <- 0
          
          if((year + 1) < 31)
          {
            Curr_Inv[(year + 1)] <- 0
            for(k in ((year + 1) : 30)){
              Adj_Dem[k] <- (FCST[k] - Curr_Inv[k])
              BF_BQ[k] <- ifelse(k == (year + 1),((ATB_ADS$BUY_FREQ[j]*(AMD[k]/4.33)) * (12-month)/12),(ATB_ADS$BUY_FREQ[j]*(((Adj_Dem[k])/12)/4.33)))
              
              BQ[k] <- ceiling(ifelse((Curr_Inv[k] < Adj_Dem[k]),(max(moq, std_p, BF_BQ[k])), 0))
              Purchase_times[k] <- ifelse((BQ[k]!=0),(ceiling(Adj_Dem[k]/BQ[k])),0)
              Yearly_BQ[k] <- BQ[k] * Purchase_times[k]
              Curr_Inv[k+1] <- Yearly_BQ[k] - Adj_Dem[k]
              Storage_Cost[k] <- 0
              Storage_Cost_non_npv[k] <- 0
            }
            
            Total_BQ <- ceiling(sum(Yearly_BQ))
            scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
            adjusment_factor <- Total_BQ%%std_p
            
            if(adjusment_factor > scrap_amount)
            {
              Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] + (std_p - Total_BQ%%std_p)
              Total_BQ <- Total_BQ + (std_p - Total_BQ%%std_p)
              
              BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
            } else if(adjusment_factor <= scrap_amount)
            {
              Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] - Total_BQ%%std_p
              Total_BQ <- Total_BQ - Total_BQ%%std_p
              
              BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
            }
            
            for(i in ((year + 1):30))
            {
              if(Yearly_BQ[i] == 0 & flag_last_buy != 1)
              {
                if(i != (year + 1))
                {
                  Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                  flag_last_buy = 1
                } else
                {
                  Last_buy <- 0
                  flag_last_buy = 1
                }
              } 
            }
            if(flag_last_buy != 1)
            {
              Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
            }
            
            
            for(k in ((year + 1):30))
            {
              CR <- ((1-(0.15/12))^(k*12))
              Storage_Cost[k] <- Storage_Cost[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv[k] <- Storage_Cost_non_npv[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1)
              
            }
            
            for(k in ((year + 1):30)){
              
              CR <- (1-(0.15/12))^(k*12)
              Offsite_Qty[k] <- ifelse((BQ[k] > (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),(BQ[k] - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),0)
              Freight_cost[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k] * CR
              Freight_cost_non_npv[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k]
              
              transport_cost[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] * CR
              offsite_transport_cost[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k] * CR
              transport_cost_non_npv[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] 
              offsite_transport_cost_non_npv[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k] 
              
              Processing_cost[k] <- ((Onsite_procs_cpp1 * BQ[k]) + (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1))) * Purchase_times[k] * CR
              
              offsite_labor_cost[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k] * CR
              offsite_labor_cost_non_npv[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k]
              
              process_cost[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k] * CR
              process_cost_non_npv[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k]
              
              package_cost[k] <- Average_Processing_cpp1 * BQ[k] * CR * Purchase_times[k]
              package_cost_non_npv[k] <- Average_Processing_cpp1 * BQ[k] * Purchase_times[k]
              
              Material_cost[k] <- (part_c_3 * BQ[k]) * Purchase_times[k] * CR
              Material_cost_non_npv[k] <- (part_c_3 * BQ[k]) * Purchase_times[k]
              All_Expense[k] <- Storage_Cost[k] + Freight_cost[k] + Processing_cost[k] + Material_cost[k]
              
            }
          } else
          {
            Last_buy <- 0
          }
          
          scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
          
          Total_Storage_Cost_current <- sum(Storage_Cost) + Storage_Cost_Curr_Inv
          Total_Storage_Cost_current_non_npv <- sum(Storage_Cost_non_npv) + Storage_Cost_Curr_Inv_non_npv
          Total_Freight_cost_current <- sum(Freight_cost) + Freight_cost_curr_inv
          Total_Freight_cost_current_non_npv <- sum(Freight_cost_non_npv) + Freight_cost_curr_inv_non_npv
          Total_Processing_cost_current <-sum(Processing_cost) + Total_Processing_cost_curr_inv
          Total_Material_cost_current <- sum(Material_cost) + Material_cost_curr_inv
          Total_Material_cost_non_npv_current <- sum(Material_cost_non_npv) + Material_cost_curr_inv_non_npv
          
          
          Total_Revenue_current <- Revenue_Allied_discount + Revenue_OES_discount + Revenue_IAM_discount
          Total_Revenue_non_npv_current <- Revenue_OES_non_npv_discount + Revenue_IAM_non_npv_discount + Revenue_Allied_non_npv_discount
          
          
          Total_transport_cost <- sum(transport_cost) + transport_cost_curr_inv
          Total_offsite_transport_cost <- sum(offsite_transport_cost) + Offsite_trans_cost_curr_inv
          Total_transport_cost_non_npv <- sum(transport_cost_non_npv) + transport_cost_curr_inv_non_npv
          Total_offsite_transport_cost_non_npv <- sum(offsite_transport_cost_non_npv) + Offsite_trans_cost_curr_inv
          
          Total_offsite_labor_cost <- sum(offsite_labor_cost) + Offsite_labour_cost_curr_inv
          Total_offsite_labor_cost_non_npv <- sum(offsite_labor_cost_non_npv) + Offsite_labour_cost_curr_inv_non_npv
          
          Total_process_cost <- sum(process_cost) + process_cost_curr_inv
          
          
          
          Total_process_cost_non_npv <- sum(process_cost_non_npv) + process_cost_curr_inv_non_npv
          Total_package_cost <- sum(package_cost) + package_cost_curr_inv
          Total_package_cost_non_npv <- sum(package_cost_non_npv) + package_cost_curr_inv_non_npv
          
          Total_Expense_current <- Total_Storage_Cost_current + Total_Freight_cost_current + Total_process_cost + Total_offsite_labor_cost + Total_package_cost + Total_Material_cost_current  + setup_cost + add_cost
          
          Total_Expense_current_non_npv <- Total_Storage_Cost_current_non_npv + Total_Freight_cost_current_non_npv + Total_Material_cost_non_npv_current + Total_offsite_labor_cost_non_npv + Total_package_cost_non_npv + Total_process_cost_non_npv + setup_cost + add_cost
          
          Total_NPV <- Total_Revenue_current - Total_Expense_current 
          Total_NPV_non_npv <-  Total_Revenue_non_npv_current - Total_Expense_current_non_npv
          Total_Purchase_Qty <- Total_BQ
          Total_Inventory_Purchase <- Total_Purchase_Qty + Curr_Inv_copy
          BQ_S1_check <- ifelse(is.na(BQ_S1), 0, BQ_S1)
          Extended_purchase_cost <- BQ_S1_check * part_c_3
          
          Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
          
          Scenario_1_current <- rbind(Scenario_1_current, c(ATB_ADS[j,1],Total_Storage_Cost_current,Total_Storage_Cost_current_non_npv, Total_Freight_cost_current, 
                                                            Total_Freight_cost_current_non_npv, Total_Processing_cost_current,
                                                            Total_Material_cost_current,Total_Expense_current,Total_Expense_current_non_npv, Total_Revenue_current,
                                                            Total_NPV,Total_NPV_non_npv, Total_BQ,Total_FCST, 
                                                            Total_Material_cost_non_npv_current, Total_Revenue_non_npv_current, Total_transport_cost, Total_offsite_transport_cost,Total_transport_cost_non_npv, Total_offsite_transport_cost_non_npv,
                                                            Total_offsite_labor_cost, Total_offsite_labor_cost_non_npv, Total_process_cost,Total_process_cost_non_npv,
                                                            setup_cost, BQ_S1_check, First_buy, Last_sale,
                                                            Last_buy, Total_package_cost, Total_package_cost_non_npv, scrap_amount,
                                                            Revenue_OES_non_npv_no_discount, Revenue_IAM_non_npv_no_discount, Revenue_Allied_non_npv_no_discount,
                                                            Revenue_OES_non_npv_discount, Revenue_IAM_non_npv_discount, Revenue_Allied_non_npv_discount, add_cost,
                                                            Revenue_Allied_discount, Revenue_OES_discount, Revenue_IAM_discount, Total_Purchase_Qty,
                                                            Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST))
          
        }
        
        colnames(Scenario_1_current) <- c("Part_Nbr","Storage_Cost_Scenario_1","Storage_Cost_non_npv_Scenario_1", "Transportation_Cost_Scenario_1", "Transportation_cost_non_npv_Scenario_1",
                                          "Processing_Cost_Scenario_1","Part_Cost_Scenario_1","Expense_Scenario_1", "Expense_non_npv_Scenario_1", "Revenue_Scenario_1", "NPV_Scenario_1", "Profit_Non_NPV_Scenario_1",
                                          "Buy_Quantity_Scenario_1","Total_Forecast_Scenario_1", "Material_cost_non_npv_Scenario_1", "Revenue_non_npv_Scenario_1",
                                          "Total_transport_cost_Scenario_1", "Total_offsite_transport_cost_Scenario_1","Total_transport_cost_non_npv_Scenario_1", "Total_offsite_transport_cost_non_npv_Scenario_1",
                                          "Total_offsite_labor_cost_Scenario_1", "Total_offsite_labor_cost_non_npv_Scenario_1", 
                                          "Total_process_cost_Scenario_1", "Total_process_cost_non_npv_Scenario_1", "Setup_cost_Scenario_1", "LTB_Buy_Quantity_Scenario_1",
                                          "First_buy",
                                          "Last_sale", "Last_buy", "Package_cost_Scenario_1", "Package_cost_non_npv_Scenario_1", "Scrap_amount_Scenario_1",
                                          'Revenue_OES_non_npv_no_discount_1', 
                                          'Revenue_IAM_non_npv_no_discount_1', 'Revenue_Allied_non_npv_no_discount_1',
                                          'Revenue_OES_non_npv_discount_1', 'Revenue_IAM_non_npv_discount_1', 'Revenue_Allied_non_npv_discount_1', "Additional_cost_Scenario_1",
                                          'Revenue_Allied_discount_1', 'Revenue_OES_discount_1', 'Revenue_IAM_discount_1', "Total_Purchase_Qty_1",
                                          "Total_Inventory_Purchase_1", "Extended_purchase_cost_1", "total_forecast")
        
        Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
        Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.numeric), stringsAsFactors=FALSE)
        Scenario_1_current <- Scenario_1_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        Scenario_1_current$Part_Nbr <- str_pad(Scenario_1_current$Part_Nbr, width=8, side="left", pad="0")
        
        incProgress(1/4, detail = "Running Calculations")
        
      } else
      {
        
        Scenario_1_current <- data.frame()
        
        for (j in (1:nrow(ATB_ADS))) {
          
          cat("\nsc_1_cur Part Number: ",j," : ", ATB_ADS[j,1])
          final_NPV <- 0
          Optimal_year_count <- 1
          LTBQ <- 0
          Year <- c()
          FCST <- c()
          NPV_CR <- c()
          transport_cost <- c()
          offsite_transport_cost <- c()
          offsite_labor_cost <- c()
          process_cost <- c()
          Curr_Inv <- round(as.numeric(scenario_1$Values[18]), 4)
          
          Material_cost_CR_list <- c()
          
          Buy_Qty <- BQ_S1
          Total_Purchase_Qty <- BQ_S1
          Buy_Qty <- Buy_Qty + Curr_Inv
          
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
          }
          
          FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
          Total_FCST <- sum(FCST)
          
          ## Calculating First Buy, Last Sale and Last Buy
          First_buy <- 0
          Last_sale <- 0
          Last_buy <- 0
          flag <- 0
          
          
          if(FCST[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          Last_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          
          p_to_get_year = 0
          q_to_get_demand = 0
          
          for(i in 1:30)
          {
            q_to_get_demand = q_to_get_demand + FCST[i]
            if(Buy_Qty > q_to_get_demand)
            {
              p_to_get_year = p_to_get_year + 1
            } else if(Buy_Qty <= FCST[1])
            {
              remain <- Buy_Qty
              c = 1
              d = 0
              for(i in 1:12)
              {
                d = d + (FCST[p_to_get_year+1] / 12)
                if(remain > d)
                {
                  c = c+1
                }
              }
              
              FCST[p_to_get_year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
              break()
            }
          }
          
          if(Buy_Qty > FCST[1] & p_to_get_year < 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
          } else if(p_to_get_year >= 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            FCST[p_to_get_year+1] <- 0
            Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
            c <- 0
          }
          
          if(p_to_get_year < 29)
          {
            for(i in ((p_to_get_year + 2) : 30))
            {
              FCST[i] <- 0
            }
          }
          
          ###########
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam <- round(FCST * iam_weight, digits = 0)
          FCST_oes <- round(FCST * oes_weight, digits = 0)
          FCST_allied <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Sum_Forecast
          
          
          if(Buy_Qty > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
              
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
              
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
              
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          ###########          
          BQ <- Buy_Qty
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(p_to_get_year))) {
            s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + s
            yr_qty[i+1] <- s
          }
          
          
          
          yr_qty[1] <- (2*BQ - FCST[1])/2   
          yr_qty[p_to_get_year + 2] <- 0
          
          Total_storage_qty <- sum(yr_qty)
          
          Storage_Cost <- 0
          Storage_Cost_non_npv <- 0
          revenue <- 0
          revenue_non <- 0
          revenue_allied <- 0
          revenue_oes <- 0
          revenue_iam <- 0
          revenue_non_npv_allied<-0
          revenue_non_npv_iam<-0
          revenue_non_npv_oes<-0
          Revenue_OES_non_npv_no_discount_1 <- 0
          Revenue_IAM_non_npv_no_discount_1 <- 0
          Revenue_Allied_non_npv_no_discount_1 <- 0
          Revenue_OES_non_npv_discount_1 <- 0
          Revenue_IAM_non_npv_discount_1 <- 0
          Revenue_Allied_non_npv_discount_1 <- 0
          
          if(p_to_get_year > 0)
          {
            for(k in (1 : (p_to_get_year + 1)))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              revenue_allied <- revenue_allied + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
              revenue_oes <- revenue_oes + (FCST_oes[k] * CR * (Dealer_Price_OES))
              revenue_iam <- revenue_iam + (FCST_iam[k] * CR * (Dealer_Price_IAM))
              
              revenue_non <- revenue_non + ((FCST[k]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
              
            }
          }
          
          if(p_to_get_year == 0)
          {
            
            for(k in (1:1))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + ((FCST[1]) * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_allied <- revenue_allied + (FCST_allied[1] * CR * (Dealer_Price_Allied_Export))
              revenue_oes <- revenue_oes + (FCST_oes[1] * CR * (Dealer_Price_OES))
              revenue_iam <- revenue_iam + (FCST_iam[1] * CR * (Dealer_Price_IAM))
              
              revenue_non <- revenue_non + ((FCST[1]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
            }
          }
          
          Revenue_OES_non_npv_no_discount_1 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$OES_FRACTION[j]
          Revenue_IAM_non_npv_no_discount_1 <- Sum_Forecast * wd_price * ATB_ADS$IAM_FRACTION[j]
          Revenue_Allied_non_npv_no_discount_1 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          Revenue_OES_non_npv_discount_1 <- sum(FCST_oes) * Dealer_Price_OES
          Revenue_IAM_non_npv_discount_1 <- sum(FCST_iam) * Dealer_Price_IAM 
          Revenue_Allied_non_npv_discount_1 <- sum(FCST_allied) * Dealer_Price_Allied_Export
          
          revenue_non <- Revenue_OES_non_npv_discount_1 + Revenue_IAM_non_npv_discount_1 + Revenue_Allied_non_npv_discount_1
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
          Freight_cost <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost) * (1-(0.15/12))
          Freight_cost_non_npv <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost)
          
          Offsite_labour_cost <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          Total_Processing_cost <- ((Onsite_procs_cpp1 * BQ) + Offsite_labour_cost) * (1-(0.15/12))
          Total_Processing_cost_non_npv <- ((Onsite_procs_cpp1  * BQ) + Offsite_labour_cost)
          
          package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
          package_cost_non_npv <- Average_Processing_cpp1 * BQ
          
          Material_cost <- (part_c_3 * BQ)*(1-(0.15/12))
          Material_cost_non_npv <- (part_c_3 * BQ)
          
          Total_transport_cost <- (Onsite_trans_cpp1 * BQ) * (1-(0.15/12))
          Total_transport_cost_non_npv <- (Onsite_trans_cpp1 * BQ) 
          Total_offsite_transport_cost <- Offsite_trans_cost * (1-(0.15/12))
          Total_offsite_labor_cost <- Offsite_labour_cost * (1-(0.15/12))
          
          Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ) * (1-(0.15/12))
          Total_process_cost_non_npv <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ)
          
          Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + setup_cost + Material_cost
          revenue <- (revenue_allied + revenue_oes + revenue_iam)
          NPV_with_capital_rate <- revenue - Total_Expense
          
          Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + setup_cost +  Material_cost_non_npv
          NPV_non_npv <- revenue_non - Total_Expense_non_npv
          Total_Inventory_Purchase <- Buy_Qty
          
          scrap_amount <-  Buy_Qty - Total_FCST
          scrap_amount <- ifelse(scrap_amount < 0, 0, scrap_amount)
          Extended_purchase_cost <- BQ_S1 * part_c_3
          
          
          Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
          Scenario_1_current <- rbind(Scenario_1_current, c(ATB_ADS[j,1],Storage_Cost,Freight_cost,Total_Processing_cost,
                                                            Material_cost, Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                                            sum(FCST), Material_cost_non_npv, revenue_non, Total_transport_cost,Total_transport_cost_non_npv,
                                                            Total_offsite_transport_cost,Offsite_trans_cost, Total_offsite_labor_cost, Total_process_cost,
                                                            setup_cost, BQ_S1, scrap_amount, Storage_Cost_non_npv, Freight_cost_non_npv, Total_Processing_cost_non_npv,
                                                            add_cost, package_cost_non_npv, package_cost, Offsite_labour_cost, Total_process_cost_non_npv, Total_Expense_non_npv,
                                                            NPV_non_npv, Revenue_OES_non_npv_no_discount_1, Revenue_IAM_non_npv_no_discount_1, Revenue_Allied_non_npv_no_discount_1,
                                                            Revenue_OES_non_npv_discount_1, Revenue_IAM_non_npv_discount_1, Revenue_Allied_non_npv_discount_1,
                                                            revenue_allied, revenue_oes, revenue_iam, First_buy, Last_sale, Last_buy, Total_Purchase_Qty,
                                                            Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST))
          
          colnames(Scenario_1_current) <- c("Part_Nbr","Storage_Cost_Scenario_1","Transportation_Cost_Scenario_1","Processing_Cost_Scenario_1",
                                            "Part_Cost_Scenario_1","Expense_Scenario_1","Revenue_Scenario_1","NPV_Scenario_1","Buy_Quantity_Scenario_1",
                                            "Total_Forecast_Scenario_1", "Material_cost_non_npv_Scenario_1","Revenue_non_npv_Scenario_1", 
                                            "Total_transport_cost_Scenario_1","Total_transport_cost_non_npv_Scenario_1","Total_offsite_transport_cost_Scenario_1","Total_offsite_transport_cost_non_npv_Scenario_1","Total_offsite_labor_cost_Scenario_1",
                                            "Total_process_cost_Scenario_1", "Setup_cost_Scenario_1", "LTB_Buy_Quantity_Scenario_1", "Scrap_amount_Scenario_1",
                                            "Storage_Cost_non_npv_Scenario_1", "Transportation_cost_non_npv_Scenario_1", "Processing_Cost_non_npv_Scenario_1",
                                            "Additional_cost_Scenario_1", "Package_cost_non_npv_Scenario_1", "Package_cost_Scenario_1", "Total_offsite_labor_cost_non_npv_Scenario_1",
                                            "Total_process_cost_non_npv_Scenario_1", "Expense_non_npv_Scenario_1", "Profit_Non_NPV_Scenario_1", "Revenue_OES_non_npv_no_discount_1",
                                            "Revenue_IAM_non_npv_no_discount_1", "Revenue_Allied_non_npv_no_discount_1", "Revenue_OES_non_npv_discount_1", "Revenue_IAM_non_npv_discount_1",
                                            "Revenue_Allied_non_npv_discount_1", "Revenue_Allied_discount_1", "Revenue_OES_discount_1", "Revenue_IAM_discount_1",
                                            "First_buy", "Last_sale", "Last_buy", "Total_Purchase_Qty_1", "Total_Inventory_Purchase_1", "Extended_purchase_cost_1",
                                            "total_forecast")
          
        }
        Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
        Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.numeric), stringsAsFactors=FALSE)
        Scenario_1_current <- Scenario_1_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        Scenario_1_current$Part_Nbr <- str_pad(Scenario_1_current$Part_Nbr, width=8, side="left", pad="0")
      }
      
      
      scrap_amount <- Scenario_1_current$Scrap_amount_Scenario_1[1]
      
      ########## Code for Scenario-1: Selldown calculation
      Selldown_NPV_Scenario_1 <- data.frame()
      Buy_Qty <- round(as.numeric(scenario_1$Values[18]), 4)
      
      for (j in (1:nrow(ATB_ADS))) {
        
        cat("\nsc_1_sell Part Number: ",j," : ", ATB_ADS[j,1])
        final_NPV <- 0
        Optimal_year_count <- 1
        LTBQ <- 0
        Year <- c()
        FCST <- c()
        NPV_CR <- c()
        Revenue_CR <- c()
        Expense <- c()
        Storage_cost_CR <- c()
        Freight_cost_CR <- c()
        Processing_cost_CR <- c()
        
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        
        for(n in (1:30)){
          FCST[n] <- ATB_ADS[j,(YI-1+n)]
        }
        
        FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
        
        p_to_get_year = 0
        q_to_get_demand = 0
        
        for(i in 1:30)
        {
          q_to_get_demand = q_to_get_demand + FCST[i]
          if(Buy_Qty > q_to_get_demand)
          {
            p_to_get_year = p_to_get_year + 1
          } else if(Buy_Qty <= FCST[1])
          {
            remain <- Buy_Qty
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
            break()
          }
        }
        
        if(Buy_Qty > FCST[1] & p_to_get_year < 30)
        {
          remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
          c = 1
          d = 0
          for(i in 1:12)
          {
            d = d + (FCST[p_to_get_year+1] / 12)
            if(remain > d)
            {
              c = c+1
            }
          }
          
          FCST[p_to_get_year+1] <- remain
          Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
        } else if(p_to_get_year >= 30)
        {
          remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
          FCST[p_to_get_year+1] <- 0
          Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
          c <- 0
        }
        
        if(p_to_get_year < 29)
        {
          for(i in ((p_to_get_year + 2) : 30))
          {
            FCST[i] <- 0
          }
        }
        
        ###########
        
        iam_weight <- ATB_ADS$IAM_FRACTION[j]
        oes_weight <- ATB_ADS$OES_FRACTION[j]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
        
        FCST_iam_selldown <- round(FCST * iam_weight, digits = 0)
        FCST_oes_selldown <- round(FCST * oes_weight, digits = 0)
        FCST_allied_selldown <- round(FCST * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam_selldown) + sum(FCST_oes_selldown) + sum(FCST_allied_selldown)
        
        Diff_FCST <- Sum_FCST - Sum_Forecast
        index <- 1
        
        if(Buy_Qty > 0 & Sum_Forecast > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes_selldown!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam_selldown!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied_selldown!=0),1)
          } else
          {
            index <- 1
          }
          
        } else
        {
          index <- 1
        }
        
        if(length(index)==0)
        {
          index <- 1
        }
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes_selldown[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam_selldown[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied_selldown[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes_selldown[index] < FCST_iam_selldown[index] & FCST_oes_selldown[index] < FCST_allied_selldown[index] & oes_weight != 0)
        {
          FCST_oes_selldown[index] <- FCST_oes_selldown[index] - Diff_FCST
          
        } else if(FCST_iam_selldown[index] <= FCST_oes_selldown[index] & FCST_iam_selldown[index] <= FCST_allied_selldown[index] & iam_weight != 0)
        {
          FCST_iam_selldown[index] <- FCST_iam_selldown[index] - Diff_FCST
          
        } else if(FCST_allied_selldown[index] <= FCST_oes_selldown[index] & FCST_allied_selldown[index] <= FCST_iam_selldown[index] & allied_weight != 0)
        {
          FCST_allied_selldown[index] <- FCST_allied_selldown[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes_selldown[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam_selldown[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied_selldown[index] <- 0
        }
        
        ###########          
        
        
        BQ <- Buy_Qty
        qty <- 0
        yr_qty <- c()
        
        for (i in (1:(p_to_get_year))) {
          s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
          qty <- qty + s
          yr_qty[i+1] <- s
        }
        
        yr_qty[1] <- (2*BQ - FCST[1])/2        
        yr_qty[p_to_get_year + 2] <- 0
        
        Total_storage_qty <- sum(yr_qty)
        
        Storage_Cost <- 0
        Storage_Cost_non_npv <- 0
        revenue <- 0
        revenue_iam <- 0
        revenue_oes <- 0
        revenue_allied <- 0
        revenue_non_npv <- 0
        revenue_non_npv_iam <- 0
        revenue_non_npv_oes <- 0
        revenue_non_npv_allied <- 0
        
        if(p_to_get_year > 0)
        {
          
          for(k in (1 : (p_to_get_year + 1)))
          {
            CR <- ((1-(0.15/12))^(k*12))
            revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            #revenue_non_npv <- revenue_non_npv + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam_selldown[k] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes_selldown[k] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied_selldown[k] * CR * (Dealer_Price_Allied_Export))
            
            #revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[k] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
            #revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[k] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
            #revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[k] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
            #revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
            
            revenue_non_npv <- revenue_non_npv + (FCST[k] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
            
            Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
            Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
            
            
          }
        }
        
        if(p_to_get_year == 0)
        {
          
          for(k in 1 : 1)
          {
            CR <- ((1-(0.15/12))^(k*12))
            revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            #revenue_non_npv <- revenue_non_npv + (FCST[1] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam_selldown[1] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes_selldown[1] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied_selldown[1] * CR * (Dealer_Price_Allied_Export))
            
            #revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[1] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
            #revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[1] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
            #revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[1] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
            #revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
            revenue_non_npv <- revenue_non_npv + (FCST[1] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
            Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
            Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
            
            
          }
        }
        
        offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
        
        Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
        Freight_cost <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost) * (1-(0.15/12))
        Freight_cost_non_npv <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost)
        
        Offsite_labour_cost <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
        #Total_Processing_cost <- (((Onsite_procs_cpp1 ) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
        Total_Processing_cost <- (((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
        
        #Total_Processing_cost_non_npv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost)
        
        Total_Processing_cost_non_npv <- (((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ) + Offsite_labour_cost)
        
        package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
        package_cost_non_npv <- Average_Processing_cpp1 * BQ
        
        #Total_Processing_cost <- Total_Processing_cost - package_cost
        #Total_Processing_cost_non_npv <- Total_Processing_cost_non_npv - package_cost_non_npv
        
        Material_cost <- BQ * part_c_3 * (1-(0.15/12))
        Material_cost_non_npv <- BQ * part_c_3
        
        Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + Material_cost  + setup_cost + package_cost
        revenue <- revenue_iam + revenue_oes + revenue_allied
        NPV_with_capital_rate <- revenue - Total_Expense
        
        Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + Material_cost_non_npv + setup_cost + package_cost_non_npv
        
        NPV_with_capital_rate_non_npv <- revenue_non_npv - Total_Expense_non_npv
        
        Selldown_NPV_Scenario_1 <- data.frame(lapply(Selldown_NPV_Scenario_1, as.character), stringsAsFactors=FALSE)
        Selldown_NPV_Scenario_1 <- rbind(Selldown_NPV_Scenario_1, c(ATB_ADS[j,1], Material_cost, Storage_Cost,Freight_cost,Total_Processing_cost,
                                                                    Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                                                    Material_cost_non_npv, Storage_Cost_non_npv, Freight_cost_non_npv,
                                                                    Total_Processing_cost_non_npv, add_cost, package_cost_non_npv,
                                                                    setup_cost, package_cost, revenue_non_npv, NPV_with_capital_rate_non_npv,
                                                                    revenue_iam, revenue_oes, revenue_allied, revenue_non_npv_iam, revenue_non_npv_oes, revenue_non_npv_allied))
        
        colnames(Selldown_NPV_Scenario_1) <- c("Part_Nbr","Selldown_Material_cost_Scenario_1", "Selldown_Storage_Cost_Scenario_1",
                                               "Selldown_Freight_cost_Scenario_1",
                                               "Selldown_Processing_Cost_Scenario_1","Total_Expense_Scenario_1","Selldown_Revenue_Scenario_1",
                                               "Selldown_NPV_Scenario_1","Total_BQ_Scenario_1", "Selldown_Material_cost_non_npv_Scenario_1", "Selldown_Storage_Cost_non_npv_Scenario_1",
                                               "Selldown_Freight_cost_non_npv_Scenario_1", "Selldown_Processing_Cost_non_npv_Scenario_1", "Selldown_Additional_Cost_Scenario_1",
                                               "Selldown_Package_Cost_non_npv_Scenario_1", "Selldown_Setup_Cost_Scenario_1", "Selldown_Package_Cost_Scenario_1",
                                               "Selldown_Revenue_non_npv_Scenario_1", "Selldown_NPV_non_npv_Scenario_1", "Selldown_Revenue_Scenario_1_IAM", 
                                               "Selldown_Revenue_Scenario_1_OES", "Selldown_Revenue_Scenario_1_Allied", "Selldown_Revenue_non_npv_Scenario_1_IAM",
                                               "Selldown_Revenue_non_npv_Scenario_1_OES", "Selldown_Revenue_non_npv_Scenario_1_Allied")
        
      }
      Selldown_NPV_Scenario_1 <- data.frame(lapply(Selldown_NPV_Scenario_1, as.character), stringsAsFactors=FALSE)
      Selldown_NPV_Scenario_1 <- data.frame(lapply(Selldown_NPV_Scenario_1, as.numeric), stringsAsFactors=FALSE)
      Selldown_NPV_Scenario_1 <- Selldown_NPV_Scenario_1 %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      
      
      Selldown_NPV_Scenario_1$Part_Nbr <- str_pad(Selldown_NPV_Scenario_1$Part_Nbr, width=8, side="left", pad="0")
      incProgress(1/4, detail = "Running Calculations")
      
      shinyjs::show("line_1")
      output$line_1<- renderHighchart({
        
        graph <- NPV_Data
        graph <- as.data.frame(graph)
        graph$Buy_quantity_list <- as.numeric(as.character(graph$Buy_quantity_list))
        graph$NPV_CR_list <- as.numeric(as.character(graph$NPV_CR_list))
        
        highchart() %>% 
          hc_title(text="NPV variation with Buy Qty") %>%
          hc_chart(type = "line") %>%
          hc_xAxis(title=list(text="Buy Quantity"),categories= as.vector(graph$Buy_quantity_list))  %>%
          hc_yAxis(title=list(text="NPV"))  %>% 
          hc_add_theme(hc_theme_sandsignika()) %>%
          hc_add_series(name = "NPV", data = as.vector(graph$NPV_CR_list))
        
      })
      
      incProgress(1/4, detail = "Running Calculations")
      x<-data.frame(1)
      x$DLR_Price_3<-DLR_Price_3
      x$wd_price <- wd_price
      x$part_c_3 <- part_c_3
      x$moq <-moq
      x$std_p <-std_p
      x$setup_cost<-setup_cost
      x$add_cost <- add_cost
      x$Monthly_square_feet_cpp1<-Monthly_square_feet_cpp1
      x$Offsite_transportation_cpp1<-Offsite_transportation_cpp1
      x$Redistribution_cpp1<-Redistribution_cpp1
      x$Offsite_Labor_cpp1 <- Offsite_Labor_cpp1
      x$Inbound_Labor_cpp1 <- Inbound_Labor_cpp1
      x$Outbound_Labor_cpp1<-Outbound_Labor_cpp1
      x$Average_Labor_cpp1<-Average_Labor_cpp1
      x$Average_Processing_cpp1<-Average_Processing_cpp1
      x$Inbound_Transportation_cpp1<-Inbound_Transportation_cpp1
      x$Outbound_Transportation_cpp1<-Outbound_Transportation_cpp1
      x$Part_Nbr<-t_scenario_1$Part_Nbr
      
      ## Creating Download Report of Scenario-1 
      result_scenario_1 <- merge(Scenario_1_current, Scenario_1_optimal, by = "Part_Nbr")
      result_scenario_1 <- merge(result_scenario_1, Selldown_NPV_Scenario_1, by = "Part_Nbr")
      result_scenario_1 <- merge(result_scenario_1, x, by = "Part_Nbr")
      result_scenario_1$First_buy_s_1 <- First_buy
      result_scenario_1$Last_buy_s_1 <- Last_buy
      result_scenario_1$scrappage_s_1 <- scrap_amount
      result_scenario_1$Last_sale_s_1 <- Last_sale
      
      result_scenario_1 <- result_scenario_1 %>% select(Part_Nbr, NPV_Scenario_1,
                                                        Selldown_NPV_Scenario_1,Selldown_NPV_non_npv_Scenario_1, Revenue_Scenario_1,Revenue_non_npv_Scenario_1,Part_Cost_Scenario_1,Material_cost_non_npv_Scenario_1,
                                                        Setup_cost_Scenario_1 ,Total_transport_cost_Scenario_1,Total_transport_cost_non_npv_Scenario_1,Storage_Cost_Scenario_1,Storage_Cost_non_npv_Scenario_1,
                                                        Total_process_cost_Scenario_1,  Total_process_cost_non_npv_Scenario_1,Package_cost_Scenario_1,Package_cost_non_npv_Scenario_1,
                                                        Total_offsite_labor_cost_Scenario_1,Total_offsite_labor_cost_non_npv_Scenario_1,Total_offsite_transport_cost_Scenario_1,Total_offsite_transport_cost_non_npv_Scenario_1, 
                                                        Additional_Cost_1,Selldown_Revenue_Scenario_1,Selldown_Revenue_non_npv_Scenario_1,
                                                        Selldown_Material_cost_Scenario_1,Selldown_Material_cost_non_npv_Scenario_1,
                                                        Selldown_Freight_cost_Scenario_1,Selldown_Freight_cost_non_npv_Scenario_1,Selldown_Storage_Cost_Scenario_1,Selldown_Storage_Cost_non_npv_Scenario_1, Selldown_Processing_Cost_Scenario_1,
                                                        Selldown_Processing_Cost_non_npv_Scenario_1,Selldown_Package_Cost_Scenario_1,Selldown_Package_Cost_non_npv_Scenario_1,
                                                        Total_Inventory,
                                                        First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_1, LTB_Buy_Quantity_Scenario_1,
                                                        Total_Purchase_Qty_1, Total_Forecast_Scenario_1,
                                                        Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_Material_Cost_Scenario_1, Optimal_Setup_cost_Scenario_1,
                                                        Optimal_Total_transport_cost_Scenario_1,
                                                        Optimal_Total_offsite_transport_cost_Scenario_1, Optimal_Storage_Cost_Scenario_1, Optimal_Total_process_cost_Scenario_1,
                                                        Optimal_Packaging_cost_Scenario_1,
                                                        Optimal_Total_offsite_labor_cost_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1,
                                                        Extended_purchase_cost_1,DLR_Price_3,wd_price,part_c_3,moq,std_p,setup_cost,add_cost,Monthly_square_feet_cpp1,Offsite_transportation_cpp1,
                                                        Redistribution_cpp1,Offsite_Labor_cpp1,Inbound_Labor_cpp1,Outbound_Labor_cpp1,Average_Labor_cpp1,Average_Processing_cpp1,Inbound_Transportation_cpp1,Outbound_Transportation_cpp1)
      
      result_scenario_1$Part_Nbr <- str_pad(result_scenario_1$Part_Nbr, width=8, side="left", pad="0")
      write.csv(result_scenario_1, file = "Result_scenario_1.csv", row.names = FALSE)
      
      output$downloadData_s_1 <- downloadHandler(
        filename = function() {
          paste("Part_view_Scenario-1",".csv", sep="") 
        },
        content = function(file) {
          scenario_1 <- result_scenario_1
          scenario_1$Part_Nbr <- str_pad(scenario_1$Part_Nbr, width=8, side="left", pad="0")
          scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                                   lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                                   lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                   lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   stringsAsFactors = FALSE)
          
          colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                    "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                    "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                    "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                    "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                    "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                    "Current Inventory",
                                    "First Buy","Last Buy","Last Sale","Scrap Scenario-1",  "Entered Buy Quantity Scenario-1",
                                    "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                    "Optimal NPV  Scenario-1",
                                    "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                    "Optimal Offsite transport cost Scenario-1",
                                    "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                    "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                    "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                    "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
          
          write.csv(scenario_1, file)
          
          
        },
        contentType = "csv"
      )
      
      ## Refreshing DATA at the back end
      spl_4 <- Scenario_1_current 
      spl_4$Part_Nbr <- str_pad(spl_4$Part_Nbr, width=8, side="left", pad="0")
      spl_5 <- Scenario_1_optimal
      spl_5$Part_Nbr <- str_pad(spl_5$Part_Nbr, width=8, side="left", pad="0")
      spl_6 <- Selldown_NPV_Scenario_1
      spl_6$Part_Nbr <- str_pad(spl_6$Part_Nbr, width=8, side="left", pad="0")
      spl_x1 <- t_scenario_1
      spl_45 <- merge(spl_4, spl_5, by = "Part_Nbr")
      spl_456 <- merge(spl_45, spl_6, by = "Part_Nbr")
      spl_456 <- merge(spl_456, x, by = "Part_Nbr")
      
      
      global_scenario_1$df_data_sce_1 <- spl_456
      
      spl_456_result <- spl_456 %>% select(Part_Nbr, NPV_Scenario_1, Selldown_NPV_Scenario_1, Revenue_Scenario_1, Revenue_non_npv_Scenario_1,
                                           Optimal_NPV_Scenario_1, Optimal_ATB_Quantity_Scenario_1,total_forecast)
      
      spl_456_result <- as.data.frame(spl_456_result)
      spl_456_result <- data.frame(lapply(spl_456_result, as.character), stringsAsFactors=FALSE)
      spl_456_result <- data.frame(lapply(spl_456_result, as.numeric), stringsAsFactors=FALSE)
      
      shinyjs::show("analysis_sce_1")
      
      if (input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
      {
        scenario_1_display <- read.csv("spl_456_result.csv", stringsAsFactors = FALSE)
        
        scenario_1_display[scenario_1_display$Part_Nbr == spl_456_result$Part_Nbr[1], ] <- spl_456_result[1,]
        write.csv(scenario_1_display, file = "spl_456_result.csv", row.names = FALSE)
        
        scenario_1_display$Part_Nbr <- str_pad(scenario_1_display$Part_Nbr, width=8, side="left", pad="0")
        
        output$analysis_sce_1 <- renderHotable({
          scenario_1_display <- data.frame(Part_Nbr = scenario_1_display[,1], lapply(scenario_1_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                           formatC(scenario_1_display[,7] , big.mark=",", digits=0, format="f"),formatC(scenario_1_display[,8] , big.mark=",", digits=0, format="f")  ,stringsAsFactors = FALSE)
          colnames(scenario_1_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
          scenario_1_display
        })
      } else
      {
        scenario_1_display <- read.csv("spl_123_result_s1.csv", stringsAsFactors = FALSE)
        scenario_1_display[scenario_1_display$Part_Nbr == spl_456_result$Part_Nbr[1], ] <- spl_456_result[1,]
        
        write.csv(scenario_1_display, file = "spl_123_result_s1.csv", row.names = FALSE)
        scenario_1_display$Part_Nbr <- str_pad(scenario_1_display$Part_Nbr, width=8, side="left", pad="0")
        
        output$analysis_sce_1 <- renderHotable({
          scenario_1_display <- data.frame(Part_Nbr = scenario_1_display[,1], lapply(scenario_1_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                           formatC(scenario_1_display[,7] , big.mark=",", digits=0, format="f"),formatC(scenario_1_display[,8] , big.mark=",", digits=0, format="f")  ,stringsAsFactors = FALSE)
          
          colnames(scenario_1_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
          scenario_1_display
        })
        
      }
      
      ## Refreshing Cost Element data for Part List Tab
      scenario_1_cost <- reflect_cost_scenario_1$df_data_cost_scenario_1
      scenario_1_cost[scenario_1_cost$PART_NBR == input$Part_Number, 2:9] <- c(part_c_3, moq, round(as.numeric(scenario_1$Values[5]), 0), BQ_S1,
                                                                               setup_cost, add_cost, DLR_Price_3, wd_price)
      reflect_cost_scenario_1$df_data_cost_scenario_1 <- scenario_1_cost
      
      shinyjs::show("cost_sce_1")
      output$cost_sce_1 <- renderHotable({
        
        scenario_1_cost <- reflect_cost_scenario_1$df_data_cost_scenario_1
        
        scenario_1_cost <- data.frame(PART_NBR = scenario_1_cost[,1], paste("$", formatC(scenario_1_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                      lapply(scenario_1_cost[,3:5], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                      lapply(scenario_1_cost[,6:9], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
        
        colnames(scenario_1_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Buy Quantity", "Setup Cost", 
                                       "Additional Cost","Proposed Dealer Price", "Proposed WD Price")
        
        scenario_1_cost
        
      }, readOnly = TRUE)
      
      reflect_back_scenario_1 <- spl_456 %>% select(Part_Nbr, NPV_Scenario_1,
                                                    Selldown_NPV_Scenario_1,Selldown_NPV_non_npv_Scenario_1, Revenue_Scenario_1,Revenue_non_npv_Scenario_1,Part_Cost_Scenario_1,Material_cost_non_npv_Scenario_1,
                                                    Setup_cost_Scenario_1 ,Total_transport_cost_Scenario_1,Total_transport_cost_non_npv_Scenario_1,Storage_Cost_Scenario_1,Storage_Cost_non_npv_Scenario_1,
                                                    Total_process_cost_Scenario_1,  Total_process_cost_non_npv_Scenario_1,Package_cost_Scenario_1,Package_cost_non_npv_Scenario_1,
                                                    Total_offsite_labor_cost_Scenario_1,Total_offsite_labor_cost_non_npv_Scenario_1,Total_offsite_transport_cost_Scenario_1,Total_offsite_transport_cost_non_npv_Scenario_1, 
                                                    Additional_Cost_1,Selldown_Revenue_Scenario_1,Selldown_Revenue_non_npv_Scenario_1,
                                                    Selldown_Material_cost_Scenario_1,Selldown_Material_cost_non_npv_Scenario_1,
                                                    Selldown_Freight_cost_Scenario_1,Selldown_Freight_cost_non_npv_Scenario_1,Selldown_Storage_Cost_Scenario_1,Selldown_Storage_Cost_non_npv_Scenario_1, Selldown_Processing_Cost_Scenario_1,
                                                    Selldown_Processing_Cost_non_npv_Scenario_1,Selldown_Package_Cost_Scenario_1,Selldown_Package_Cost_non_npv_Scenario_1,
                                                    Total_Inventory,
                                                    First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_1, LTB_Buy_Quantity_Scenario_1,
                                                    Total_Purchase_Qty_1, Total_Forecast_Scenario_1,
                                                    Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_Material_Cost_Scenario_1, Optimal_Setup_cost_Scenario_1,
                                                    Optimal_Total_transport_cost_Scenario_1,
                                                    Optimal_Total_offsite_transport_cost_Scenario_1, Optimal_Storage_Cost_Scenario_1, Optimal_Total_process_cost_Scenario_1,
                                                    Optimal_Packaging_cost_Scenario_1,
                                                    Optimal_Total_offsite_labor_cost_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1,
                                                    Extended_purchase_cost_1,DLR_Price_3,wd_price,part_c_3,moq,std_p,setup_cost,add_cost,Monthly_square_feet_cpp1,Offsite_transportation_cpp1,
                                                    Redistribution_cpp1,Offsite_Labor_cpp1,Inbound_Labor_cpp1,Outbound_Labor_cpp1,Average_Labor_cpp1,Average_Processing_cpp1,Inbound_Transportation_cpp1,Outbound_Transportation_cpp1)
      
      report_update <- global_scenario_1_down$df_data_scenario_1_down
      report_update[report_update$Part_Nbr == reflect_back_scenario_1$Part_Nbr[1], 2:72] <- reflect_back_scenario_1[1, 2:72]
      global_scenario_1_down$df_data_scenario_1_down <- report_update
      
      report_update <- global_current_sce_down$df_data_current
      report_update$Part_Nbr <- str_pad(report_update$Part_Nbr, width=8, side="left", pad="0")
      report_update[report_update$Part_Nbr == input$Part_Number, 79] <- as.character("None")
      global_current_sce_down$df_data_current <- report_update
      
      ##-----------------------------------------
      ## Writing the data for Management Report
      ##-----------------------------------------
      management_report_1 <- global_scenario_1_down$df_data_scenario_1_down
      management_report_1 <- management_report_1 %>% select(Part_Nbr, NPV_Scenario_1, Revenue_Scenario_1, LTB_Buy_Quantity_Scenario_1, Extended_purchase_cost_1, 
                                                            Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1)
      
      management_report_1 <- management_report_1[management_report_1$LTB_Buy_Quantity_Scenario_1 > 0,]
      
      incProgress(1/3, detail = "Preparing the tables")
      
      if(nrow(management_report_1) > 0)
      {
        
        management_report_1$NPV_impact_1 <- management_report_1$Optimal_NPV_Scenario_1 - management_report_1$NPV_Scenario_1
        management_report_1$Revenue_impact_1 <- management_report_1$Optimal_Revenue_Scenario_1 - management_report_1$Revenue_Scenario_1
        management_report_1$Buy_impact_1 <- management_report_1$Extended_optimal_buy_cost_1 - management_report_1$Extended_purchase_cost_1
        colnames(management_report_1)[4] <- "Entered_Buy_Quantity_1"
        colnames(management_report_1)[8] <- "Optimal_Quantity_Scenario_1"
        management_report_1$Time_stamp_1 <- Sys.Date()
        management_report_1$Day_1 <- day(Sys.Date())
        management_report_1$Month_1 <- month(Sys.Date())
        management_report_1$Year_1 <- year(Sys.Date())
        
        management_report_1$Part_Nbr <- as.character(str_pad(management_report_1$Part_Nbr, width=8, side="left", pad="0"))
        management_report_1$Time_stamp_1 <- as.character(management_report_1$Time_stamp_1)
        management_report_1$Day_1 <- as.character(management_report_1$Day_1)
        management_report_1$Month_1 <- as.character(management_report_1$Month_1)
        management_report_1$Year_1 <- as.character(management_report_1$Year_1)
        
        management_report_1$RAT_NUMBER <- "-"
        management_report_1$GM_ID <- test$gm_id[1]
        
        print(TEMP_MAN_REP_1_NAME)
        
        dbWriteTable(conn = con,
                     name = TEMP_MAN_REP_1_NAME,
                     value = management_report_1, overwrite = TRUE, append = FALSE)
        
        dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_1 IN EXCLUSIVE MODE")
        
        sql_management_rep_1 <- paste("UPDATE MANAGEMENT_TABLE_1 A
                                      SET (A.NPV_SCENARIO_1, A.REVENUE_SCENARIO_1, A.ENTERED_BUY_QUANTITY_1, A.EXTENDED_PURCHASE_COST_1, A.OPTIMAL_NPV_SCENARIO_1, A.OPTIMAL_REVENUE_SCENARIO_1,
                                      A.OPTIMAL_QUANTITY_SCENARIO_1, A.EXTENDED_OPTIMAL_BUY_COST_1, A.NPV_IMPACT_1, A.REVENUE_IMPACT_1, A.BUY_IMPACT_1, 
                                      A.TIME_STAMP, A.DAY_1, A.MONTH_1, A.YEAR_1, A.RAT_NUMBER, A.GM_ID) =
                                      (SELECT B.NPV_SCENARIO_1, B.REVENUE_SCENARIO_1, B.ENTERED_BUY_QUANTITY_1, B.EXTENDED_PURCHASE_COST_1, 
                                      B.OPTIMAL_NPV_SCENARIO_1, B.OPTIMAL_REVENUE_SCENARIO_1, B.OPTIMAL_QUANTITY_SCENARIO_1, B.EXTENDED_OPTIMAL_BUY_COST_1, 
                                      B.NPV_IMPACT_1,B.REVENUE_IMPACT_1, B.BUY_IMPACT_1, B.TIME_STAMP_1, B.DAY_1, B.MONTH_1, B.YEAR_1, B.RAT_NUMBER, B.GM_ID
                                      FROM",
                                      TEMP_MAN_REP_1_NAME, "B
                                      WHERE 
                                      LPAD(A.PART_NBR, 8, '0')= LPAD(B.PART_NBR, 8, '0'))
                                      WHERE EXISTS (SELECT NPV_SCENARIO_1
                                      FROM",
                                      TEMP_MAN_REP_1_NAME, "C WHERE
                                      LPAD(C.PART_NBR, 8, '0')= LPAD(A.PART_NBR, 8, '0'))")
        
        value_management_rep_1 <- dbSendUpdate(con, sql_management_rep_1)
        
        
        
        dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_1 IN EXCLUSIVE MODE")
        
        sql_management_rep_insert_1 <- paste("INSERT INTO MANAGEMENT_TABLE_1 
                                             SELECT A.* FROM", TEMP_MAN_REP_1_NAME," A
                                             WHERE A.PART_NBR NOT IN (SELECT DISTINCT PART_NBR FROM MANAGEMENT_TABLE_1)")
        
        value_management_rep_insert_1 <- dbSendUpdate(con, sql_management_rep_insert_1)
        
        
        
      }
      
      ## Generating income report for Scenario-1
      
      income_report_scenario_1 <- c(1:52)
      income_report_scenario_1<- as.data.frame(income_report_scenario_1)
      income_report_scenario_1$Fields <-  c('Dealer Price', 'Wd price', 'Allied Price', 'Dealer discount %', 'Wd discount %', 'Allied Discount %', 'Net Dealer', 'Net Wd',
                                            'Net Allied',
                                            'Lifetime Revenue(Non NPV)',
                                            'Lifetime Revenue(NPV)',
                                            'Sell Down Revenue(Non NPV) - OES',
                                            'Sell Down Revenue(Non NPV) - IAM',
                                            'Sell Down Revenue(Non NPV) - Allied/Export',
                                            'Sell Down Revenue(Non NPV',
                                            'Selldown Revenue (NPV)',
                                            'Material Cost(Non NPV)',
                                            'Material Cost(NPV)',
                                            'Sell Down Material Non Npv',
                                            'Sell Down Material (NPV)',
                                            'Transportation Cost(NON NPV)',
                                            'Transportation Cost(NPV)',
                                            'Sell Down Transportation cost (Non NPV)',
                                            'Sell Down Transportation cost (NPV)',
                                            'Labor Cost(NON NPV)',
                                            'Labor Cost(NPV)',
                                            'Sell Down Labor (NON NPV)',
                                            'Sell Down Labor (NPV)',
                                            'Storage Cost (Non NPV)',
                                            'Storage Cost(NPV)',
                                            'Sell Down Storage(Non NPV)',
                                            'Sell Down Storage(NPV)',
                                            'Packaging Cost(NON NPV)',
                                            'Packaging Cost(NPV)',
                                            'Sell Down Packaging Cost (NON NPV)',
                                            'Sell Down Packaging Cost (NPV)',
                                            'Set up Cost (NON NPV)',
                                            'Setup Cost(NPV)',
                                            'Additional Cost($)',
                                            'Total Expense(NON NPV)',
                                            'Total Expense(NPV)',
                                            'Profit (Non NPV)',
                                            'NPV',
                                            'Selldown (non Npv)',
                                            'Selldown NPV',
                                            'National Inventory',
                                            'Total Purchase',
                                            'Total Inventory and Purchase',
                                            'Total Sales',
                                            'Scrap',
                                            'MOQ',
                                            'Standard Pack')
      
      sales_oes <- sum(FCST_oes)
      sales_iam <- sum(FCST_iam)
      sales_allied <- sum(FCST_allied)
      
      
      
      inventory_oes <- round(Current_Inventory * ATB_ADS$OES_FRACTION[1], digits = 0)
      inventory_iam <- round(Current_Inventory * ATB_ADS$IAM_FRACTION[1], digits = 0)
      inventory_allied <- round(Current_Inventory * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
      
      if(is.na(BQ_S1))
      {
        
        purchase_oes <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
        purchase_iam <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
        purchase_allied <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        ## Calculating the difference in sales, inventory and purchase before and after rounding
        diff_sales <- Scenario_1_current$Total_Forecast_Scenario_1[1] - (sales_oes + sales_iam + sales_allied)
        diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
        diff_purchase <- ceiling(Scenario_1_current$Buy_Quantity_Scenario_1[1]) - (purchase_oes + purchase_iam + purchase_allied)
        
        ## Calling function to adjust the rounding error in sales, purcahse and inventory
        sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
        sales_values <- unlist(sales_values)
        sales_oes <- sales_values[1]
        sales_iam <- sales_values[2]
        sales_allied <- sales_values[3]
        
        inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
        inventory_values <- unlist(inventory_values)
        inventory_oes <- inventory_values[1]
        inventory_iam <- inventory_values[2]
        inventory_allied <- inventory_values[3]
        
        purchase_values <- Round_fn(purchase_oes, purchase_iam, purchase_allied, diff_purchase)
        purchase_values <- unlist(purchase_values)
        purchase_oes <- purchase_values[1]
        purchase_iam <- purchase_values[2]
        purchase_allied <- purchase_values[3]
        
        purchase_inventory <- ceiling((Current_Inventory + Scenario_1_current$Buy_Quantity_Scenario_1[1]))
        purchase_inventory_oes <- inventory_oes + purchase_oes
        purchase_inventory_iam <- inventory_iam + purchase_iam
        purchase_inventory_allied <- inventory_allied + purchase_allied
        income_report_scenario_1$income_report_scenario_1 <- NULL
        
        
        income_report_scenario_1$Per_unit <- c(Scenario_1_optimal$Proposed_Dealer_Price_1[1], Scenario_1_optimal$Proposed_Wd_Price_1[1], 
                                               Scenario_1_optimal$Proposed_Dealer_Price_1[1], ATB_ADS$Discount_oes_percent[1], 
                                               ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                               Scenario_1_current$Revenue_OES_non_npv_discount_1[1], Scenario_1_current$Revenue_IAM_non_npv_discount_1[1], 
                                               Scenario_1_current$Revenue_Allied_non_npv_discount_1[1], 
                                               Scenario_1_current$Revenue_non_npv_Scenario_1[1], Scenario_1_current$Revenue_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_OES[1], Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_IAM[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_Allied[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1[1], part_c_3, 
                                               Scenario_1_current$Part_Cost_Scenario_1[1],
                                               part_c_3, Selldown_NPV_Scenario_1$Selldown_Material_cost_Scenario_1[1], 
                                               Scenario_1_current$Transportation_cost_non_npv_Scenario_1[1], Scenario_1_current$Transportation_Cost_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Freight_cost_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Freight_cost_Scenario_1[1], 
                                               (Scenario_1_current$Total_offsite_labor_cost_non_npv_Scenario_1[1] + Scenario_1_current$Total_process_cost_non_npv_Scenario_1[1]), 
                                               (Scenario_1_current$Total_offsite_labor_cost_Scenario_1[1] + Scenario_1_current$Total_process_cost_Scenario_1[1]),
                                               Selldown_NPV_Scenario_1$Selldown_Processing_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Processing_Cost_Scenario_1[1],
                                               Scenario_1_current$Storage_Cost_non_npv_Scenario_1[1],
                                               Scenario_1_current$Storage_Cost_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Storage_Cost_non_npv_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Storage_Cost_Scenario_1[1],
                                               Scenario_1_current$Package_cost_non_npv_Scenario_1[1], Scenario_1_current$Package_cost_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Package_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Package_Cost_Scenario_1[1],
                                               Scenario_1_current$Setup_cost_Scenario_1[1], Scenario_1_current$Setup_cost_Scenario_1[1],
                                               Scenario_1_current$Additional_cost_Scenario_1[1], Scenario_1_current$Expense_non_npv_Scenario_1[1], Scenario_1_current$Expense_Scenario_1[1],
                                               Scenario_1_current$Profit_Non_NPV_Scenario_1[1], Scenario_1_current$NPV_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_NPV_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1], Current_Inventory, ceiling(Scenario_1_current$Buy_Quantity_Scenario_1[1]),
                                               ceiling((Current_Inventory + Scenario_1_current$Buy_Quantity_Scenario_1[1])),
                                               Scenario_1_current$Total_Forecast_Scenario_1[1], Scenario_1_current$Scrap_amount_Scenario_1[1], moq,
                                               std_p)
      } else
      {
        purchase_inventory <- Scenario_1_current$Buy_Quantity_Scenario_1[1]
        purchase_inventory_oes <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
        purchase_inventory_iam <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
        purchase_inventory_allied <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        ## Calculating the difference in sales, inventory and purchase before and after rounding
        diff_sales <- Scenario_1_current$Total_Forecast_Scenario_1[1] - (sales_oes + sales_iam + sales_allied)
        diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
        diff_purchase_inventory <- ceiling(Scenario_1_current$Buy_Quantity_Scenario_1[1]) - (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied)
        
        ## Calling function to adjust the rounding error in sales, purcahse and inventory
        sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
        sales_values <- unlist(sales_values)
        sales_oes <- sales_values[1]
        sales_iam <- sales_values[2]
        sales_allied <- sales_values[3]
        
        
        
        inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
        inventory_values <- unlist(inventory_values)
        inventory_oes <- inventory_values[1]
        inventory_iam <- inventory_values[2]
        inventory_allied <- inventory_values[3]
        
        purchase_inventory_values <- Round_fn(purchase_inventory_oes, purchase_inventory_iam, purchase_inventory_allied, diff_purchase_inventory)
        purchase_inventory_values <- unlist(purchase_inventory_values)
        purchase_inventory_oes <- purchase_inventory_values[1]
        purchase_inventory_iam <- purchase_inventory_values[2]
        purchase_inventory_allied <- purchase_inventory_values[3]
        
        purchase_values <- Scenario_1_current$Buy_Quantity_Scenario_1[1] - Current_Inventory
        purchase_oes <- purchase_inventory_oes - inventory_oes
        purchase_iam <- purchase_inventory_iam - inventory_iam
        purchase_allied <- purchase_inventory_allied - inventory_allied
        
        income_report_scenario_1$income_report_scenario_1 <- NULL
        
        
        income_report_scenario_1$Per_unit <- c(Scenario_1_optimal$Proposed_Dealer_Price_1[1], Scenario_1_optimal$Proposed_Wd_Price_1[1], 
                                               Scenario_1_optimal$Proposed_Dealer_Price_1[1], ATB_ADS$Discount_oes_percent[1], 
                                               ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                               Scenario_1_current$Revenue_OES_non_npv_discount_1[1], Scenario_1_current$Revenue_IAM_non_npv_discount_1[1], 
                                               Scenario_1_current$Revenue_Allied_non_npv_discount_1[1], 
                                               Scenario_1_current$Revenue_non_npv_Scenario_1[1], Scenario_1_current$Revenue_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_OES[1], Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_IAM[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_Allied[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1[1], part_c_3, 
                                               Scenario_1_current$Part_Cost_Scenario_1[1],
                                               part_c_3, Selldown_NPV_Scenario_1$Selldown_Material_cost_Scenario_1[1], 
                                               Scenario_1_current$Transportation_cost_non_npv_Scenario_1[1], Scenario_1_current$Transportation_Cost_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Freight_cost_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Freight_cost_Scenario_1[1], 
                                               (Scenario_1_current$Total_offsite_labor_cost_non_npv_Scenario_1[1] + Scenario_1_current$Total_process_cost_non_npv_Scenario_1[1]), 
                                               (Scenario_1_current$Total_offsite_labor_cost_Scenario_1[1] + Scenario_1_current$Total_process_cost_Scenario_1[1]),
                                               Selldown_NPV_Scenario_1$Selldown_Processing_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Processing_Cost_Scenario_1[1],
                                               Scenario_1_current$Storage_Cost_non_npv_Scenario_1[1],
                                               Scenario_1_current$Storage_Cost_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Storage_Cost_non_npv_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Storage_Cost_Scenario_1[1],
                                               Scenario_1_current$Package_cost_non_npv_Scenario_1[1], Scenario_1_current$Package_cost_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Package_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Package_Cost_Scenario_1[1],
                                               Scenario_1_current$Setup_cost_Scenario_1[1], Scenario_1_current$Setup_cost_Scenario_1[1],
                                               Scenario_1_current$Additional_cost_Scenario_1[1], Scenario_1_current$Expense_non_npv_Scenario_1[1], Scenario_1_current$Expense_Scenario_1[1],
                                               Scenario_1_current$Profit_Non_NPV_Scenario_1[1], Scenario_1_current$NPV_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_NPV_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1], Current_Inventory, (purchase_oes + purchase_iam + purchase_allied),
                                               (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied),
                                               Scenario_1_current$Total_Forecast_Scenario_1[1], Scenario_1_current$Scrap_amount_Scenario_1[1], moq,
                                               std_p)
      }
      
      income_report_scenario_1$Per_unit[c(10:11)] <- income_report_scenario_1$Per_unit[c(10:11)] / Scenario_1_current$Total_Forecast_Scenario_1[1]
      
      div_oes <- ifelse(inventory_oes > sales_oes, sales_oes, inventory_oes)
      div_iam <- ifelse(inventory_iam > sales_iam, sales_iam, inventory_iam)
      div_allied <- ifelse(inventory_allied > sales_allied, sales_allied, inventory_allied)
      div_inventory <- ifelse(Current_Inventory > Scenario_1_current$Total_Forecast_Scenario_1, Scenario_1_current$Total_Forecast_Scenario_1, Current_Inventory)
      
      income_report_scenario_1$Per_unit[c(15:16)] <- income_report_scenario_1$Per_unit[c(15:16)] / div_inventory
      income_report_scenario_1$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] <- income_report_scenario_1$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] / purchase_inventory
      income_report_scenario_1$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] <- income_report_scenario_1$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] / Current_Inventory
      income_report_scenario_1$Per_unit <- ifelse(is.nan(income_report_scenario_1$Per_unit), 0, income_report_scenario_1$Per_unit)
      
      income_report_scenario_1$OES <- 0
      income_report_scenario_1$IAM <- 0
      income_report_scenario_1$Allied_export <- 0
      income_report_scenario_1$Total <- 0
      
      income_report_scenario_1$OES[1] <- income_report_scenario_1$Per_unit[1] * sales_oes
      income_report_scenario_1$OES[4] <- (ATB_ADS$Discount_oes_percent/100) * income_report_scenario_1$OES[1]
      income_report_scenario_1$OES[7] <- income_report_scenario_1$OES[1] - income_report_scenario_1$OES[4]
      income_report_scenario_1$Per_unit[7] <- income_report_scenario_1$OES[7] / sales_oes
      income_report_scenario_1$OES[10] <-  income_report_scenario_1$OES[7]
      
      income_report_scenario_1$IAM[2] <- income_report_scenario_1$Per_unit[2] * sales_iam
      income_report_scenario_1$IAM[5] <- (ATB_ADS$Discount_iam_percent/100) * income_report_scenario_1$IAM[2]
      income_report_scenario_1$IAM[8] <- income_report_scenario_1$IAM[2] - income_report_scenario_1$IAM[5]
      income_report_scenario_1$Per_unit[8] <- income_report_scenario_1$IAM[8] / sales_iam
      income_report_scenario_1$IAM[10] <-  income_report_scenario_1$IAM[8]
      
      income_report_scenario_1$Allied_export[3] <- income_report_scenario_1$Per_unit[3] * sales_allied
      income_report_scenario_1$Allied_export[6] <- (ATB_ADS$Discount_allied_export_percent/100) * income_report_scenario_1$Allied_export[3]
      income_report_scenario_1$Allied_export[9] <- income_report_scenario_1$Allied_export[3] - income_report_scenario_1$Allied_export[6]
      income_report_scenario_1$Per_unit[9] <- income_report_scenario_1$Allied_export[9] / sales_allied
      income_report_scenario_1$Allied_export[10] <-  income_report_scenario_1$Allied_export[9]
      
      income_report_scenario_1$Per_unit[12] <- income_report_scenario_1$Per_unit[7]
      income_report_scenario_1$Per_unit[13] <- income_report_scenario_1$Per_unit[8]
      income_report_scenario_1$Per_unit[14] <- income_report_scenario_1$Per_unit[9]
      
      income_report_scenario_1$OES[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] <- income_report_scenario_1$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] * purchase_inventory_oes
      
      income_report_scenario_1$OES[11:16] <-c( Scenario_1_current$Revenue_OES_discount_1[1],(income_report_scenario_1$Per_unit[12] * div_oes), 0,0,
                                               (income_report_scenario_1$Per_unit[12] * div_oes),
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1_OES[1])
      
      income_report_scenario_1$OES[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_1$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_oes
      income_report_scenario_1$OES[44] <- income_report_scenario_1$OES[15] - sum(income_report_scenario_1$OES[c(19,23,27,31,35)])
      income_report_scenario_1$OES[45] <- income_report_scenario_1$OES[16] - sum(income_report_scenario_1$OES[c(20,24,28,32,36)])
      
      income_report_scenario_1$OES[c(46:49)] <- c(inventory_oes, purchase_oes, purchase_inventory_oes, sales_oes)
      
      income_report_scenario_1$OES[40] <- income_report_scenario_1$OES[17] + income_report_scenario_1$OES[21] + income_report_scenario_1$OES[25] + income_report_scenario_1$OES[29] + income_report_scenario_1$OES[33] + income_report_scenario_1$OES[37] + income_report_scenario_1$OES[39]
      income_report_scenario_1$OES[41] <- income_report_scenario_1$OES[18] + income_report_scenario_1$OES[22] + income_report_scenario_1$OES[26] + income_report_scenario_1$OES[30] + income_report_scenario_1$OES[34] + income_report_scenario_1$OES[38] + income_report_scenario_1$OES[39]
      
      income_report_scenario_1$OES[42] <- income_report_scenario_1$OES[10] - income_report_scenario_1$OES[40]
      income_report_scenario_1$OES[43] <- income_report_scenario_1$OES[11] - income_report_scenario_1$OES[41]
      
      ##
      income_report_scenario_1$IAM[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_1$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_iam
      
      income_report_scenario_1$IAM[11:16] <-c(Scenario_1_current$Revenue_IAM_discount_1[1], 0, (income_report_scenario_1$Per_unit[13] * div_iam), 0,
                                              (income_report_scenario_1$Per_unit[13] * div_iam),
                                              Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1_IAM[1])
      
      income_report_scenario_1$IAM[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_1$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_iam
      income_report_scenario_1$IAM[44] <- income_report_scenario_1$IAM[15] - sum(income_report_scenario_1$IAM[c(19,23,27,31,35)])
      income_report_scenario_1$IAM[45] <- income_report_scenario_1$IAM[16] - sum(income_report_scenario_1$IAM[c(20,24,28,32,36)])
      
      income_report_scenario_1$IAM[c(46:49)] <- c(inventory_iam, purchase_iam, purchase_inventory_iam, sales_iam)
      
      income_report_scenario_1$IAM[40] <- income_report_scenario_1$IAM[17] + income_report_scenario_1$IAM[21] + income_report_scenario_1$IAM[25] + income_report_scenario_1$IAM[29] + income_report_scenario_1$IAM[33] + income_report_scenario_1$IAM[37] + income_report_scenario_1$IAM[39]
      income_report_scenario_1$IAM[41] <- income_report_scenario_1$IAM[18] + income_report_scenario_1$IAM[22] + income_report_scenario_1$IAM[26] + income_report_scenario_1$IAM[30] + income_report_scenario_1$IAM[34] + income_report_scenario_1$IAM[38] + income_report_scenario_1$IAM[39]
      income_report_scenario_1$IAM[42] <- income_report_scenario_1$IAM[10] - income_report_scenario_1$IAM[40]
      income_report_scenario_1$IAM[43] <- income_report_scenario_1$IAM[11] - income_report_scenario_1$IAM[41]
      
      ####
      income_report_scenario_1$Allied_export[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_1$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_allied
      income_report_scenario_1$Allied_export[11:16] <-c( Scenario_1_current$Revenue_Allied_discount_1[1], 0, 0, (income_report_scenario_1$Per_unit[14] * div_allied),
                                                         (income_report_scenario_1$Per_unit[14] * div_allied),
                                                         Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1_Allied[1])
      
      income_report_scenario_1$Allied_export[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_1$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_allied
      income_report_scenario_1$Allied_export[44] <- income_report_scenario_1$Allied_export[15] - sum(income_report_scenario_1$Allied_export[c(19,23,27,31,35)])
      income_report_scenario_1$Allied_export[45] <- income_report_scenario_1$Allied_export[16] - sum(income_report_scenario_1$Allied_export[c(20,24,28,32,36)])
      
      income_report_scenario_1$Allied_export[c(46:49)] <- c(inventory_allied, purchase_allied, purchase_inventory_allied, sales_allied)
      
      income_report_scenario_1$Allied_export[40] <- income_report_scenario_1$Allied_export[17] + income_report_scenario_1$Allied_export[21] + income_report_scenario_1$Allied_export[25] + income_report_scenario_1$Allied_export[29] + income_report_scenario_1$Allied_export[33] + income_report_scenario_1$Allied_export[37] + income_report_scenario_1$Allied_export[39]
      income_report_scenario_1$Allied_export[41] <- income_report_scenario_1$Allied_export[18] + income_report_scenario_1$Allied_export[22] + income_report_scenario_1$Allied_export[26] + income_report_scenario_1$Allied_export[30] + income_report_scenario_1$Allied_export[34] + income_report_scenario_1$Allied_export[38] + income_report_scenario_1$Allied_export[39]
      
      income_report_scenario_1$Allied_export[42] <- income_report_scenario_1$Allied_export[10] - income_report_scenario_1$Allied_export[40]
      income_report_scenario_1$Allied_export[43] <- income_report_scenario_1$Allied_export[11] - income_report_scenario_1$Allied_export[41]
      
      income_report_scenario_1$Per_unit <- ifelse(is.nan(income_report_scenario_1$Per_unit), 0, income_report_scenario_1$Per_unit)
      income_report_scenario_1$OES <- ifelse(is.nan(income_report_scenario_1$OES), 0, income_report_scenario_1$OES)
      income_report_scenario_1$IAM <- ifelse(is.nan(income_report_scenario_1$IAM), 0, income_report_scenario_1$IAM)
      income_report_scenario_1$Allied_export <- ifelse(is.nan(income_report_scenario_1$Allied_export), 0, income_report_scenario_1$Allied_export)
      income_report_scenario_1$Total <- ifelse(is.nan(income_report_scenario_1$Total), 0, income_report_scenario_1$Total)
      
      income_report_scenario_1$Total <- income_report_scenario_1$Allied_export + income_report_scenario_1$IAM + income_report_scenario_1$OES
      
      income_report_scenario_1$Total[50:52] <- income_report_scenario_1$Per_unit[50:52]
      
      revenue_non <- as.numeric(income_report_scenario_1$Total[10])
      material_non <- as.numeric(income_report_scenario_1$Total[17])
      
      
      ## Displaying result of Scenario-1
      shinyjs::show("Scen_1")
      
      output$Scen_1 <- renderHotable({
        
        part_view <- 0
        part_view<- as.data.frame(part_view)
        part_view$part_view <- NULL
        part_view$Fields <- "NPV($)" 
        part_view[2,1]<- "Selldown NPV($)"       
        part_view[3,1]<- "Net"
        part_view[4,1]<- "Scrap"
        part_view[5,1]<- "Dealer Price($): OES"
        part_view[6,1]<- "Dealer Price($): Allied/Export"
        part_view[7,1]<- "Dealer Price($): IAM"
        part_view[8,1]<- "First Buy"
        part_view[9,1]<- "Last Buy"
        part_view[10,1]<- "Last Sale"    
        part_view[11,1]<- "Lifetime Revenue(NPV)" 
        part_view[12,1]<- "Lifetime Revenue(Non NPV)"
        part_view[13,1]<- "Material Cost(NPV)"
        part_view[14,1]<- "Material Cost(Non NPV)"
        part_view[15,1]<- "Setup Cost(NPV)"
        part_view[16,1]<- "Transportation Cost(NPV)"
        part_view[17,1]<- "Labor Cost(NPV)"
        part_view[18,1]<- "Storage Cost(NPV)"
        part_view[19,1]<- "Packaging Cost(NPV)"
        part_view[20,1]<- "Offsite Labor Cost(NPV)"
        part_view[21,1]<- "Offsite Trans Cost(NPV)"
        part_view[22,1]<- "Total Expense(NPV)"
        part_view[23,1]<- "Optimal NPV"
        part_view[24,1]<- "Optimal Buy Qty"
        part_view[25,1]<- "Total Purchase"
        part_view[26,1]<- "Inventory and Purchase"
        part_view[27,1]<- "Extended Optimal Buy Cost"
        part_view[28,1]<- "Extended Buy Qty Cost"
        
        
        part_view$Values <- paste("$", formatC(Scenario_1_current$NPV_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[2, 2] <-  paste("$", formatC(Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[3, 2] <-  paste("$", formatC((Scenario_1_current$NPV_Scenario_1[1] - Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[4, 2] <- round(scrap_amount, 0)
        part_view[5, 2] <- paste("$", formatC(Scenario_1_optimal$Dealer_Price_OES_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[6, 2] <- paste("$", formatC(Scenario_1_optimal$Dealer_Price_Allied_Export_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[7, 2] <- paste("$", formatC(Scenario_1_optimal$Dealer_Price_IAM_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[8, 2] <- as.character(round(First_buy,0))
        part_view[9, 2] <- as.character(round(Last_buy,0))
        part_view[10, 2] <- as.character(round(Last_sale,0))
        part_view[11, 2] <- paste("$", formatC(Scenario_1_current$Revenue_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[12, 2] <- paste("$", formatC(Scenario_1_current$Revenue_non_npv_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[13, 2] <- paste("$", formatC(Scenario_1_current$Part_Cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[14, 2] <- paste("$", formatC(Scenario_1_current$Material_cost_non_npv_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[15, 2] <- paste("$", formatC(setup_cost , big.mark=",", digits=2, format="f"), sep = " ")
        part_view[16, 2] <-  paste("$", formatC(Scenario_1_current$Total_transport_cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[17, 2] <-  paste("$", formatC((Scenario_1_current$Total_process_cost_Scenario_1[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[18, 2] <-  paste("$", formatC(Scenario_1_current$Storage_Cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[19, 2] <-  paste("$", formatC((Scenario_1_current$Package_cost_Scenario_1[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[20, 2] <-  paste("$", formatC(Scenario_1_current$Total_offsite_labor_cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[21, 2] <-  paste("$", formatC(Scenario_1_current$Total_offsite_transport_cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[22, 2] <-  paste("$", formatC(Scenario_1_current$Expense_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[23, 2] <-  paste("$", formatC(Scenario_1_optimal$Optimal_NPV_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[24, 2] <- paste(formatC(ceiling(Scenario_1_optimal$Optimal_ATB_Quantity_Scenario_1[1]), big.mark=",", digits=0, format="f"))
        part_view[25,2] <-  paste(formatC((Scenario_1_current$Total_Purchase_Qty_1[1]), big.mark=",", digits=0, format="f"))
        part_view[26,2] <-  paste(formatC(Scenario_1_current$Total_Inventory_Purchase_1[1], big.mark=",", digits=0, format="f"))
        part_view[27, 2] <-  paste("$", formatC(Scenario_1_optimal$Extended_optimal_buy_cost_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[28, 2] <-  paste("$", formatC(Scenario_1_current$Extended_purchase_cost_1[1], big.mark=",", digits=2, format="s"), sep = " ")
        
        part_view
        
      }, readOnly = TRUE)
      
      ## Formatting the results for income report 
      income_report_scenario_1$Per_unit[c(1:3, 7:16, 18, 20:45)] <- paste("$", formatC(income_report_scenario_1$Per_unit[c(1:3, 7:16, 18, 20:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_1$Per_unit[c(17, 19)] <- paste("$", formatC(income_report_scenario_1$Per_unit[c(17, 19)], big.mark=",", digits=7, format="f"), sep = " ")
      
      income_report_scenario_1$Per_unit[c(4:6)] <- paste(formatC(income_report_scenario_1$Per_unit[c(4:6)], big.mark=",", digits=20, format="f"), "%" , sep = " ")
      income_report_scenario_1$Per_unit[c(46:52)] <- paste(formatC(income_report_scenario_1$Per_unit[c(46:52)], big.mark=",", digits=20, format="f"))
      
      income_report_scenario_1$OES[c(1:45)] <- paste("$", formatC(income_report_scenario_1$OES[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_1$OES[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_1$OES[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_1$IAM[c(1:45)] <- paste("$", formatC(income_report_scenario_1$IAM[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_1$IAM[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_1$IAM[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_1$Allied_export[c(1:45)] <- paste("$", formatC(income_report_scenario_1$Allied_export[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_1$Allied_export[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_1$Allied_export[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_1$Total[c(1:45)] <- paste("$", formatC(income_report_scenario_1$Total[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_1$Total[c(46:52)] <- paste(formatC(income_report_scenario_1$Total[c(46:52)], big.mark=",", digits=20, format="f"))
      
      income_report_scenario_1$Per_unit[c(10,11,15,16,40:45)] <- "-"
      income_report_scenario_1[c(12:16, 19,20,23,24,27,28,31,32,35,36,44,45), c(2:6)] <- "-"
      
      
      
      output$download_income_report_s_1 <- downloadHandler(
        filename = function() {
          paste("Income_statement_report_s_1", ".csv", sep="") 
        },
        content = function(file) {
          abc <- income_report_scenario_1
          
          write.csv(abc, file)
          
        }
      )
      
    } # Closing for Progress Indicator
                                      )
    
    
    
  })
  
  ## R-Portable snippet
  session$onSessionEnded(function() {
    print("The user has closed the tool")
    stopApp()
    
  })
  
  ## Code for Part View Scenario-2
  observeEvent({
    input$go_s_2
  }, {
    
    shinyjs::enable("download_all_scenario")
    shinyjs::enable("downloadData_s_2")
    shinyjs::enable("download_income_report_s_2")
    
    part_info <- global_ads$df_data_ads
    
    part_inform <- as.data.frame(part_info)
    part_inform$X <- NULL
    part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
    
    ATB_ADS <- part_inform[which(part_inform$PART_NBR == input$Part_Number),]
    
    output$scenario_selector <- renderUI({
      radioButtons("selected_scenario", "Choose the best scenario for this part",
                   c("None" = "None",
                     "Scenario-1" = "Scenario_1",
                     "Scenario-2" = "Scenario_2"),
                   selected = "None", inline = TRUE
      )
    })
    ##### Giving values for Scenario- 2
    scenario_2 <- c(1:18)
    scenario_2 <- as.data.frame(scenario_2)
    
    scenario_2$Fields <- c("Proposed Dealer Price($)", "Proposed WD Price($)", "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                           "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                           "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)",
                           "National Inventory")
    scenario_2$scenario_2 <- NULL
    
    if (input$sel == "Cost" | input$sel =="Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
    {
      
      scenario_2$Values <- c(part_inform$Proposed_Dealer_Price_2[1], part_inform$Proposed_Wd_Price_2[1], part_inform$Material_cost_Scenario_2[1],part_inform$Moq_2[1],part_inform$Standard_Pack_2[1],
                             part_inform$Setup_Cost_Scenario_2[1], part_inform$Additional_Cost_Scenario_2[1],
                             round(as.numeric(as.character(part_inform$MTH_SQ_FT_COST_PER_PEICE[1])),5),
                             round(as.numeric(as.character(part_inform$OFFSITE_TRANS_COST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$REDISTRIBUTION_COST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$OFFSITE_LCPP[1])), 5),
                             round(as.numeric(as.character(part_inform$IB_LABOR_COST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$OB_LABOR_COST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$AVG_LCPP[1])), 5), 
                             round(as.numeric(as.character(part_inform$AVG_PCPP[1])), 5),
                             round(as.numeric(as.character(part_inform$IB_TRANS_CST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$OB_TRANS_CST_PP[1])), 5), part_inform$TOTAL_INVENTORY[1])
      t_scenario_2<- transpose(scenario_2)
      colnames(t_scenario_2) <- scenario_2$Fields
      t_scenario_2$Part_Nbr<-input$Part_Number
      t_scenario_2 <- t_scenario_2[-c(1), ]
      rownames(t_scenario_2) <- NULL
      colnames(t_scenario_2)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s2","Additional_Cost_s2","Monthly_square_feet_cpp",
                                 "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                 "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                 "National_Inventory","Part_Nbr")   
      
    } else
    {
      
      scenario_2$Values <- c(part_inform$DEALER_PRICE_NO_DISCOUNT[1], part_inform$WD_DEALER_PRICE_NO_DISCOUNT[1], part_inform$LAST_COST[1],
                             part_inform$MINIMUM_BUY_QTY[1],part_inform$STD_PACK_QTY[1],part_inform$Setup_cost[1],
                             part_inform$Additional_cost[1], 
                             round(as.numeric(as.character(part_inform$MTH_SQ_FT_COST_PER_PEICE[1])), 5), 
                             round(as.numeric(as.character(part_inform$OFFSITE_TRANS_COST_PP[1])), 5),
                             round(as.numeric(as.character(part_inform$REDISTRIBUTION_COST_PP[1])), 5),
                             round(as.numeric(as.character(part_inform$OFFSITE_LCPP[1])), 5), 
                             round(as.numeric(as.character(part_inform$IB_LABOR_COST_PP[1])), 5),
                             round(as.numeric(as.character(part_inform$OB_LABOR_COST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$AVG_LCPP[1])),5),
                             round(as.numeric(as.character(part_inform$AVG_PCPP[1])), 5),
                             round(as.numeric(as.character(part_inform$IB_TRANS_CST_PP[1])), 5), 
                             round(as.numeric(as.character(part_inform$OB_TRANS_CST_PP[1])), 5), 
                             part_inform$TOTAL_INVENTORY[1])
      t_scenario_2<- transpose(scenario_2)
      colnames(t_scenario_2) <- scenario_2$Fields
      t_scenario_2$Part_Nbr<-input$Part_Number
      t_scenario_2 <- t_scenario_2[-c(1), ]
      rownames(t_scenario_2) <- NULL
      colnames(t_scenario_2)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s2","Additional_Cost_s2","Monthly_square_feet_cpp",
                                 "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                 "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                 "National_Inventory","Part_Nbr")
      
    }
    
    TEMP_MAN_REP_2_NAME <- ""
    test <- read.csv('gm_id.csv', stringsAsFactors = FALSE)
    
    if(!is.na(test$gm_id))
    {
      my_email <- test$gm_id[1]
      
      user_id <- my_email
      user_id <- gsub("\\ ", "_", user_id)
      TEMP_MAN_REP_1_NAME <- paste("TEMP_MAN_REP_1", user_id, sep = "_")
      TEMP_MAN_REP_2_NAME <- paste("TEMP_MAN_REP_2", user_id, sep = "_")
      
    }
    
    dbSendUpdate(con, paste("BEGIN
                            EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_2_NAME , "';
                            EXCEPTION
                            WHEN OTHERS THEN NULL;
                            END;"))
    
    #----------------------------------------
    ####### Code for Scenario - 2    
    #----------------------------------------
    
    ######### Code for Scenario-2-Optimal    
    
    withProgress(message = 'Processing in Progress', value = 0, {
      
      scenario_2 <- hot.to.df(input$hotable_sce2)
      
      DLR_Price_3 <- round(as.numeric(scenario_2$Values[1]), 4)
      wd_price <- round(as.numeric(scenario_2$Values[2]), 4)
      
      Dealer_Price_Allied_Export <- DLR_Price_3 * (1 - (ATB_ADS$Discount_allied_export_percent[1]/100))
      Dealer_Price_OES <- DLR_Price_3 * (1 - (ATB_ADS$Discount_oes_percent[1]/100))
      Dealer_Price_IAM <- wd_price * (1 - (ATB_ADS$Discount_iam_percent[1]/100))
      
      part_c_3 <- round(as.numeric(scenario_2$Values[3]) , 5)
      moq <- round(as.numeric(scenario_2$Values[4]) , 4)
      std_p <- round(as.numeric(scenario_2$Values[5]), 4)
      std_p <- ifelse(std_p == 0, 1, std_p)
      setup_cost <- round(as.numeric(scenario_2$Values[6]), 4)
      add_cost <- round(as.numeric(scenario_2$Values[7]), 4)
      Monthly_square_feet_cpp1 <- round(as.numeric(scenario_2$Values[8]), 7)
      Offsite_transportation_cpp1 <- round(as.numeric(scenario_2$Values[9]), 7)
      Redistribution_cpp1 <- round(as.numeric(scenario_2$Values[10]), 7)
      Offsite_Labor_cpp1 <- round(as.numeric(scenario_2$Values[11]), 7)
      Inbound_Labor_cpp1 <- round(as.numeric(scenario_2$Values[12]), 7)
      Outbound_Labor_cpp1 <- round(as.numeric(scenario_2$Values[13]), 7)
      Average_Labor_cpp1 <- round(as.numeric(scenario_2$Values[14]), 7)
      Average_Processing_cpp1 <- round(as.numeric(scenario_2$Values[15]), 7)
      Inbound_Transportation_cpp1 <- round(as.numeric(scenario_2$Values[16]), 7)
      Outbound_Transportation_cpp1 <- round(as.numeric(scenario_2$Values[17]), 7)
      
      Current_Inventory <-  round(as.numeric(scenario_2$Values[18]), 4)
      #ONSITE_TRANS_COST_PER_PIECE
      Onsite_trans_cpp1 <- Inbound_Transportation_cpp1 + Outbound_Transportation_cpp1 + Redistribution_cpp1
      #ONSITE_PRCS_COST_PP
      Onsite_procs_cpp1 <- Inbound_Labor_cpp1 + Outbound_Labor_cpp1 + Average_Labor_cpp1 + Average_Processing_cpp1
      
      incProgress(1/4, detail = "Running Calculations")
      
      ##### ATB Scenario calculation
      Scenario_2_optimal <- data.frame()
      NPV_Data <- data.frame()
      First_buy <- 0
      Last_sale <- 0
      flag <- 0
      flag_last_buy <- 0
      Last_buy <- 0
      
      for (jj in (1:nrow(ATB_ADS))) {
        
        cat("\nSC_2_opt Part Number: ",jj," : ", ATB_ADS[jj,1])
        final_NPV_list <- 0
        Optimal_year_count_list <- 1
        LTBQ_list <- 0
        Year_list <- c()
        FCST_list <- c()
        NPV_CR_list <- c()
        Revenue_CR_list <- c()
        Revenue_list_non_npv <- c()
        Expense_list <- c()
        Storage_cost_CR_list <- c()
        Freight_cost_CR_list <- c()
        Processing_cost_CR_list <- c()
        
        transport_cost <- c()
        offsite_transport_cost <- c()
        offsite_labor_cost <- c()
        process_cost <- c()
        packaging_cost <- c()
        
        Material_cost_CR_list <- c()
        Buy_quantity_list <- c()
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        
        for(nn in (1:30)){
          FCST_list[nn] <- ATB_ADS[jj,(YI-1+nn)]
        }
        
        FCST_list[1] <- FCST_list[1] + ATB_ADS$CURRENT_YEAR[jj]
        
        if(FCST_list[1] != 0)
        {
          First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
        } else
        {
          First_buy <- 0
        }
        
        for(i in 1:30)
        {
          if(FCST_list[i] == 0 & flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
            flag = 1
          } 
        }
        if(flag != 1)
        {
          Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
        }
        
        
        ###########
        Sum_Forecast <- sum(FCST_list)
        
        iam_weight <- ATB_ADS$IAM_FRACTION[jj]
        oes_weight <- ATB_ADS$OES_FRACTION[jj]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[jj]
        
        FCST_iam <- round(FCST_list * iam_weight, digits = 0)
        FCST_oes <- round(FCST_list * oes_weight, digits = 0)
        FCST_allied <- round(FCST_list * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
        
        Diff_FCST <- Sum_FCST - Sum_Forecast
        
        if(Sum_Forecast > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied!=0),1)
          } else
          {
            index <- 1
          }
        } else
        {
          index <- 1
        }
        
        
        if(length(index)==0)
        {
          index <- 1
        }
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
        {
          FCST_oes[index] <- FCST_oes[index] - Diff_FCST
          
        } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
        {
          FCST_iam[index] <- FCST_iam[index] - Diff_FCST
          
        } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
        {
          FCST_allied[index] <- FCST_allied[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied[index] <- 0
        }
        
        for(i in 1:30)
        {
          FCST_list[i] <- FCST_allied[i] + FCST_iam[i] + FCST_oes[i]
        }
        ###########
        
        for (nn in (1:30)) {
          Sum_Forecast_list <- sum(FCST_list[1:nn])
          BQ_list <- Sum_Forecast_list
          qty_list <- 0
          yr_qty_list <- c()
          
          if(nn > 1){
            for (ii in (1:(nn-1))) {
              ss <- ((BQ_list - sum(FCST_list[1:ii])) + (BQ_list - sum(FCST_list[1:(1+ii)])))/2
              qty_list <- qty_list + ss 
              yr_qty_list[ii+1] <- ss
            }
          }
          yr_qty_list[1] <- (2*BQ_list - FCST_list[1])/2        
          
          Total_storage_qty_list <- sum(yr_qty_list)
          Storage_Cost_list <- 0
          revenue_list <- 0
          revenue_list_non_npv <- 0
          revenue_iam <- 0
          revenue_oes <- 0
          revenue_allied <- 0
          
          for(kk in (1: (nn) ))
          {
            CR <- ((1-(0.15/12))^(kk*12))
            revenue_list <- revenue_list + (FCST_list[kk] * CR *((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam[kk] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes[kk] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied[kk] * CR * (Dealer_Price_Allied_Export))
            
            revenue_list_non_npv <- revenue_list_non_npv + ((FCST_list[kk]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj])))
            Storage_Cost_list <- Storage_Cost_list + ((yr_qty_list[kk])*Monthly_square_feet_cpp1 * CR)
            
          }
          
          offsite_quantity <- ifelse((BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))) > 0, (BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))), 0)
          
          Offsite_trans_cost_list <- Offsite_transportation_cpp1 * offsite_quantity
          Freight_cost_list <- ((Onsite_trans_cpp1 * BQ_list) + Offsite_trans_cost_list) * (1-(0.15/12))
          Offsite_labour_cost_list <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          Total_Processing_cost_list <- ((Onsite_procs_cpp1 * BQ_list) + Offsite_labour_cost_list) * (1-(0.15/12))
          Material_cost_list <- (part_c_3*BQ_list)*(1-(0.15/12))
          
          Total_transport_cost <- (Onsite_trans_cpp1 * BQ_list) * (1-(0.15/12))
          Total_offsite_transport_cost <- Offsite_trans_cost_list * (1-(0.15/12))
          Total_offsite_labor_cost <- Offsite_labour_cost_list * (1-(0.15/12))
          Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ_list) * (1-(0.15/12))
          Total_package_cost <- Average_Processing_cpp1 * BQ_list * (1-(0.15/12))
          
          Total_Expense_list <- Storage_Cost_list + Freight_cost_list + Total_Processing_cost_list + Material_cost_list + setup_cost + add_cost
          revenue_list <- revenue_iam + revenue_oes + revenue_allied
          NPV_with_capital_rate_list <- revenue_list - Total_Expense_list
          Year_list[nn] <- nn
          NPV_CR_list[nn] <- NPV_with_capital_rate_list
          Expense_list[nn] <- Total_Expense_list
          Revenue_CR_list[nn] <- revenue_list
          Revenue_list_non_npv[nn] <- revenue_list_non_npv
          Storage_cost_CR_list[nn] <- Storage_Cost_list
          Freight_cost_CR_list[nn] <- Freight_cost_list
          Processing_cost_CR_list[nn] <- Total_Processing_cost_list
          Material_cost_CR_list[nn] <- Material_cost_list
          Buy_quantity_list[nn] <- BQ_list
          
          transport_cost[nn] <- Total_transport_cost
          offsite_transport_cost[nn] <- Total_offsite_transport_cost
          offsite_labor_cost[nn] <- Total_offsite_labor_cost
          process_cost[nn] <- Total_process_cost
          packaging_cost[nn] <- Total_package_cost
          
          if( NPV_with_capital_rate_list>0 ) {
            
            if(final_NPV_list<NPV_with_capital_rate_list){
              
              final_NPV_list <- NPV_with_capital_rate_list
              Optimal_year_count_list <- nn
              LTBQ_list <- BQ_list
              Total_Expense_NPV_list <- Total_Expense_list
              Revenue_NPV_list <- revenue_list
              Revenue_NPV_list_non_npv <- revenue_list_non_npv
              Storage_cost_NPV_list <- Storage_Cost_list
              Freight_cost_NPV_list <- Freight_cost_list
              Processing_cost_NPV_list <- Total_Processing_cost_list
              Material_cost_NPV_list <- Material_cost_list
              
              transport_cost_list <- Total_transport_cost
              offsite_transport_cost_list <- Total_offsite_transport_cost
              offsite_labor_cost_list <- Total_offsite_labor_cost
              process_cost_list <- Total_process_cost
              package_cost_list <- Total_package_cost
              
            }
          } else if((nn==1) && (NPV_with_capital_rate_list<=0)) {
            
            Optimal_year_count_list <- 0
            Total_Expense_NPV_list <- Expense_list[1]
            Revenue_NPV_list <- Revenue_CR_list[1]
            Revenue_NPV_list_non_npv <- Revenue_list_non_npv[1]
            Storage_cost_NPV_list <- Storage_cost_CR_list[1]
            Freight_cost_NPV_list <- Freight_cost_CR_list[1]
            Processing_cost_NPV_list <- Processing_cost_CR_list[1]
            Material_cost_NPV_list <- Material_cost_CR_list[1]
            
            transport_cost_list <- transport_cost[1]
            offsite_transport_cost_list <- offsite_transport_cost[1]
            offsite_labor_cost_list <- offsite_labor_cost[1]
            process_cost_list <- process_cost[1]
            package_cost_list <- packaging_cost[1]
          }
        }
        
        if(offsite_transport_cost_list < 0 )
        {
          offsite_transport_cost_list <- 0
        }
        if(offsite_labor_cost_list < 0)
        {
          offsite_labor_cost_list <- 0
        }
        
        LTBQ_list <- LTBQ_list - Current_Inventory
        
        if(LTBQ_list <= 0)
        {
          LTBQ_list = 0
        }
        Extended_optimal_buy_cost <- LTBQ_list * part_c_3
        
        Material_cost_list_non_npv <- (Material_cost_NPV_list / (1-(0.15/12)))
        Scenario_2_optimal <- data.frame(lapply(Scenario_2_optimal, as.character), stringsAsFactors=FALSE)
        Scenario_2_optimal <- rbind(Scenario_2_optimal, c(ATB_ADS[jj,1],Storage_cost_NPV_list,Freight_cost_NPV_list,Processing_cost_NPV_list,
                                                          Material_cost_NPV_list,Total_Expense_NPV_list,Revenue_NPV_list,final_NPV_list,
                                                          Optimal_year_count_list,LTBQ_list,Revenue_NPV_list_non_npv, Material_cost_list_non_npv,
                                                          transport_cost_list, offsite_transport_cost_list, offsite_labor_cost_list, process_cost_list,
                                                          setup_cost,DLR_Price_3, Dealer_Price_OES, Dealer_Price_Allied_Export, wd_price,Dealer_Price_IAM,
                                                          ATB_ADS$Discount_iam_percent[jj], ATB_ADS$Discount_oes_percent[jj], ATB_ADS$Discount_allied_export_percent[jj],
                                                          package_cost_list, Extended_optimal_buy_cost, add_cost, Current_Inventory))
        
        NPV_Data <- data.frame(ATB_ADS[jj,1],Year_list,FCST_list,Storage_cost_CR_list,Freight_cost_CR_list,Processing_cost_CR_list,Material_cost_CR_list,Buy_quantity_list,Expense_list,Revenue_CR_list,NPV_CR_list)
      }
      colnames(Scenario_2_optimal) <- c("Part_Nbr","Optimal_Storage_Cost_Scenario_2","Optimal_Transportation_Cost_Scenario_2",
                                        "Optimal_Processing_Cost_Scenario_2","Optimal_Material_Cost_Scenario_2","Optimal_Expense_Scenario_2",
                                        "Optimal_Revenue_Scenario_2","Optimal_NPV_Scenario_2","Optimal_year_count_Scenario_2","Optimal_ATB_Quantity_Scenario_2",
                                        "Optimal_Revenue_Non_Npv_Scenario_2", "Optimal_Material_cost_non_npv_Scenario_2", "Optimal_Total_transport_cost_Scenario_2",
                                        "Optimal_Total_offsite_transport_cost_Scenario_2","Optimal_Total_offsite_labor_cost_Scenario_2",
                                        "Optimal_Total_process_cost_Scenario_2", "Optimal_Setup_cost_Scenario_2", "Proposed_Dealer_Price_2",
                                        "Dealer_Price_OES_2", "Dealer_Price_Allied_Export_2", "Proposed_Wd_Price_2", "Dealer_Price_IAM_2", 
                                        "Discount_iam_percent", "Discount_oes_percent", "Discount_allied_export_percent", "Optimal_Packaging_cost_Scenario_2",
                                        "Extended_optimal_buy_cost_2", "Additional_Cost_2", "Total_Inventory")
      
      Scenario_2_optimal <- data.frame(lapply(Scenario_2_optimal, as.character), stringsAsFactors=FALSE)
      Scenario_2_optimal <- data.frame(lapply(Scenario_2_optimal, as.numeric), stringsAsFactors=FALSE)
      Scenario_2_optimal <- Scenario_2_optimal %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      Scenario_2_optimal$Part_Nbr <- str_pad(Scenario_2_optimal$Part_Nbr, width=8, side="left", pad="0")
      
      incProgress(1/4, detail = "Running Calculations")
      
      ########## Code for Scenario-2: Current 
      BQ_S2 <- as.numeric(input$Buy_qty_s22)
      
      if(is.na(BQ_S2))
      {
        Scenario_2_current <- data.frame()
        shinyjs::enable("download_income_report_s_2")
        for(j in (1:nrow(ATB_ADS)))
        {
          cat("\nsc_2_cur Part Number: ",j," : ", ATB_ADS[j,1])
          FCST <- c()
          Curr_Inv <- round(as.numeric(scenario_2$Values[18]), 4)
          Curr_Inv_copy <- Curr_Inv
          Revenue <- c()
          
          Revenue_Allied <- c()
          Revenue_OES <- c()
          Revenue_IAM <- c()
          
          Revenue_non_npv <- c()
          AMD <- c()
          AMD_iam <- c()
          AMD_oes <- c()
          AMD_allied <- c()
          
          First_buy <- 0
          Last_sale <- 0
          Last_buy <- 0
          flag <- 0
          flag_last_buy <- 0
          
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
            Revenue[n] <- 0
            Revenue_Allied[n] <- 0
            Revenue_OES[n] <- 0
            Revenue_IAM[n] <- 0
            
            Revenue_non_npv[n] <- 0
          }
          
          FCST[1] <- ATB_ADS$CURRENT_YEAR[j] + FCST[1]
          #FCST <- Updated_FCST
          
          Total_FCST <- sum(FCST)
          
          if(FCST[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          ###########          
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam <- round(FCST * iam_weight, digits = 0)
          FCST_oes <- round(FCST * oes_weight, digits = 0)
          FCST_allied <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Total_FCST
          
          if(Total_FCST > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          ###########          
          for(n in (1:30)){
            AMD[n] <- FCST[n]/12
            AMD_oes[n] <- FCST_oes[n] / 12
            AMD_iam[n] <- FCST_iam[n] / 12
            AMD_allied[n] <- FCST_allied[n] / 12
          }
          
          
          for(k in (1:30))
          {
            CR <- ((1-(0.15/12))^(k*12))
            Revenue[k] <- Revenue[k] + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
            
            Revenue_Allied[k] <- Revenue_Allied[k] + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
            Revenue_OES[k] <- Revenue_OES[k] + (FCST_oes[k] * CR * (Dealer_Price_OES))
            Revenue_IAM[k] <- Revenue_IAM[k] + (FCST_iam[k] * CR * (Dealer_Price_IAM))
            
            Revenue_non_npv[k] <- Revenue_non_npv[k] + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
            
            
          }
          
          Revenue_OES_non_npv_no_discount <- Total_FCST * DLR_Price_3 * ATB_ADS$OES_FRACTION[j]
          Revenue_IAM_non_npv_no_discount <- Total_FCST * wd_price * ATB_ADS$IAM_FRACTION[j]
          Revenue_Allied_non_npv_no_discount <- Total_FCST * DLR_Price_3 * ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          Revenue_OES_non_npv_discount <- sum(FCST_oes) * Dealer_Price_OES
          Revenue_IAM_non_npv_discount <- sum(FCST_iam) * Dealer_Price_IAM 
          Revenue_Allied_non_npv_discount <- sum(FCST_allied) * Dealer_Price_Allied_Export
          
          Revenue_Allied_discount <- sum(Revenue_Allied)
          Revenue_OES_discount <- sum(Revenue_OES)
          Revenue_IAM_discount <- sum(Revenue_IAM)
          
          year <- 0
          month <- 0
          get_demand <- 0
          
          for(i in 1:30)
          {
            get_demand = get_demand + FCST[i]
            if(Curr_Inv > get_demand)
            {
              year = year + 1
            } else if(Curr_Inv <= FCST[1])
            {
              remain = Curr_Inv
              
              year_remain = FCST[1] - remain
              
              month = 1
              demand_for_break_year = 0
              for(i in 1:12)
              {
                demand_for_break_year = demand_for_break_year + (FCST[1] / 12)
                if(remain > demand_for_break_year)
                {
                  month = month + 1
                }
              }
              
              FCST[year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(year+1)])
              break()
            }
          }
          
          ###
          if(Curr_Inv > FCST[1] & year < 30)
          {
            remain <- Curr_Inv - sum(FCST[1:year])
            
            year_remain <- FCST[(year+1)] - remain
            
            month = 1
            demand_for_break_year = 0
            for(i in 1:12)
            {
              demand_for_break_year = demand_for_break_year + (FCST[year+1] / 12)
              if(remain > demand_for_break_year)
              {
                month = month+1
              }
            }
            
            FCST[year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(year+1)])
          } else if(year >= 30)
          {
            remain <- Curr_Inv - sum(FCST[1:year])
            FCST[year+1] <- 0
            year_remain <- 0
            Sum_Forecast <- sum(FCST[1:(year + 1)])
            month <- 0
          }
          
          
          BQ <- ceiling(Curr_Inv)
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(year))) {
            storage_qty <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + storage_qty
            yr_qty[i+1] <- storage_qty
          }
          
          yr_qty[1] <- (2*BQ - FCST[1])/2        
          yr_qty[year + 2] <- 0
          
          Storage_Cost_Curr_Inv <- 0
          Storage_Cost_Curr_Inv_non_npv <- 0
          
          
          for(k in (1 : (year + 1)))
          {
            CR <- ((1-(0.15/12))^(k*12))
            Storage_Cost_Curr_Inv <- Storage_Cost_Curr_Inv + ((yr_qty[k])* Monthly_square_feet_cpp1 * CR)
            Storage_Cost_Curr_Inv_non_npv <- Storage_Cost_Curr_Inv_non_npv + (yr_qty[k]) * Monthly_square_feet_cpp1
            
          }
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost_curr_inv <- Offsite_transportation_cpp1 * offsite_quantity
          transport_cost_curr_inv <- Onsite_trans_cpp1 * BQ * (1-(0.15/12))
          transport_cost_curr_inv_non_npv <- Onsite_trans_cpp1 * BQ 
          
          Freight_cost_curr_inv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv) * (1-(0.15/12))
          Freight_cost_curr_inv_non_npv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv)
          
          Offsite_labour_cost_curr_inv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1) * (1-(0.15/12))
          Offsite_labour_cost_curr_inv_non_npv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          
          process_cost_curr_inv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ * (1-(0.15/12))
          process_cost_curr_inv_non_npv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ
          
          package_cost_curr_inv <- Average_Processing_cpp1 * BQ * (1-(0.15/12))  
          package_cost_curr_inv_non_npv <- Average_Processing_cpp1 * BQ
          
          Total_Processing_cost_curr_inv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost_curr_inv) * (1-(0.15/12))
          Material_cost_curr_inv <- BQ * part_c_3 * (1-(0.15/12))
          Material_cost_curr_inv_non_npv <- BQ * part_c_3 
          
          
          FCST[year+1] <- year_remain
          
          Adj_Dem <- c()
          BF_BQ <- c()
          Curr_Inv <- c()
          BQ <- c()
          Purchase_times <- c()
          Yearly_BQ <- c()
          Storage_Cost <- c()
          Storage_Cost_non_npv <- c()
          Offsite_Qty <- c()
          Freight_cost <- c()
          Freight_cost_non_npv <- c()
          transport_cost <- c()
          offsite_transport_cost <- c()
          transport_cost_non_npv <- c()
          offsite_transport_cost_non_npv <- c()
          Processing_cost <- c()
          offsite_labor_cost <- c()
          offsite_labor_cost_non_npv <- c()
          process_cost <- c()
          process_cost_non_npv <- c()
          package_cost <- c()
          package_cost_non_npv <- c()
          Material_cost <- c()
          Material_cost_non_npv <- c()
          All_Expense <- c()
          
          for(i in 1:year)
          {
            Adj_Dem[i] = 0
            BF_BQ[i] = 0
            Curr_Inv[i] = 0
            BQ[i] = 0
            Purchase_times[i] = 0
            Yearly_BQ[i] = 0
            Storage_Cost[i] = 0
            Storage_Cost_non_npv[i] = 0
            Offsite_Qty[i] = 0
            Freight_cost[i] = 0
            Freight_cost_non_npv[i] = 0
            transport_cost[i] = 0
            offsite_transport_cost[i] = 0
            transport_cost_non_npv[i] = 0
            offsite_transport_cost_non_npv[i] = 0
            Processing_cost[i] = 0
            offsite_labor_cost[i] = 0
            offsite_labor_cost_non_npv[i] = 0
            process_cost[i] = 0
            process_cost_non_npv[i] = 0
            package_cost[i] = 0
            package_cost_non_npv[i] = 0
            Material_cost[i] = 0
            Material_cost_non_npv[i] = 0
            All_Expense[i] = 0
          }
          
          Total_BQ <- 0
          
          if((year + 1) < 31)
          {
            Curr_Inv[(year + 1)] <- 0
            for(k in ((year + 1) : 30)){
              Adj_Dem[k] <- (FCST[k] - Curr_Inv[k])
              BF_BQ[k] <- ifelse(k == (year + 1),((ATB_ADS$BUY_FREQ[j]*(AMD[k]/4.33)) * (12-month)/12),(ATB_ADS$BUY_FREQ[j]*(((Adj_Dem[k])/12)/4.33)))
              
              BQ[k] <- ceiling(ifelse((Curr_Inv[k] < Adj_Dem[k]),(max(moq, std_p, BF_BQ[k])), 0))
              Purchase_times[k] <- ifelse((BQ[k]!=0),(ceiling(Adj_Dem[k]/BQ[k])),0)
              Yearly_BQ[k] <- BQ[k] * Purchase_times[k]
              Curr_Inv[k+1] <- Yearly_BQ[k] - Adj_Dem[k]
              Storage_Cost[k] <- 0
              Storage_Cost_non_npv[k] <- 0
            }
            
            Total_BQ <- ceiling(sum(Yearly_BQ))
            scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
            adjusment_factor <- Total_BQ%%std_p
            
            if(adjusment_factor > scrap_amount)
            {
              Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] + (std_p - Total_BQ%%std_p)
              Total_BQ <- Total_BQ + (std_p - Total_BQ%%std_p)
              
              BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
            } else if(adjusment_factor <= scrap_amount)
            {
              Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] - Total_BQ%%std_p
              Total_BQ <- Total_BQ - Total_BQ%%std_p
              
              BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
            }
            
            for(i in ((year + 1):30))
            {
              if(Yearly_BQ[i] == 0 & flag_last_buy != 1)
              {
                if(i != (year + 1))
                {
                  Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                  flag_last_buy = 1
                } else
                {
                  Last_buy <- 0
                  flag_last_buy = 1
                }
              } 
            }
            if(flag_last_buy != 1)
            {
              Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
            }
            
            
            for(k in ((year + 1):30))
            {
              CR <- ((1-(0.15/12))^(k*12))
              Storage_Cost[k] <- Storage_Cost[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv[k] <- Storage_Cost_non_npv[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1)
              
            }
            
            for(k in ((year + 1):30)){
              
              CR <- (1-(0.15/12))^(k*12)
              Offsite_Qty[k] <- ifelse((BQ[k] > (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),(BQ[k] - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),0)
              Freight_cost[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k] * CR
              Freight_cost_non_npv[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k]
              
              transport_cost[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] * CR
              offsite_transport_cost[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k] * CR
              transport_cost_non_npv[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] 
              offsite_transport_cost_non_npv[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k]
              
              Processing_cost[k] <- ((Onsite_procs_cpp1 * BQ[k]) + (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1))) * Purchase_times[k] * CR
              
              offsite_labor_cost[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k] * CR
              offsite_labor_cost_non_npv[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k]
              
              process_cost[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k] * CR
              process_cost_non_npv[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k]
              
              package_cost[k] <- Average_Processing_cpp1 * BQ[k] * CR * Purchase_times[k]
              package_cost_non_npv[k] <- Average_Processing_cpp1 * BQ[k] * Purchase_times[k]
              
              Material_cost[k] <- (part_c_3 * BQ[k]) * Purchase_times[k] * CR
              Material_cost_non_npv[k] <- (part_c_3 * BQ[k]) * Purchase_times[k]
              All_Expense[k] <- Storage_Cost[k] + Freight_cost[k] + Processing_cost[k] + Material_cost[k]
              
            }
          } else
          {
            Last_buy <- 0
          }
          
          scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
          
          Total_Storage_Cost_current <- sum(Storage_Cost) + Storage_Cost_Curr_Inv
          Total_Storage_Cost_current_non_npv <- sum(Storage_Cost_non_npv) + Storage_Cost_Curr_Inv_non_npv
          
          Total_Freight_cost_current <- sum(Freight_cost) + Freight_cost_curr_inv
          Total_Freight_cost_current_non_npv <- sum(Freight_cost_non_npv) + Freight_cost_curr_inv_non_npv
          
          Total_Processing_cost_current <-sum(Processing_cost) + Total_Processing_cost_curr_inv
          Total_Material_cost_current <- sum(Material_cost) + Material_cost_curr_inv
          Total_Material_cost_non_npv_current <- sum(Material_cost_non_npv) + Material_cost_curr_inv_non_npv
          Total_Revenue_current <- Revenue_Allied_discount + Revenue_OES_discount + Revenue_IAM_discount
          Total_Revenue_non_npv_current <- Revenue_OES_non_npv_discount + Revenue_IAM_non_npv_discount + Revenue_Allied_non_npv_discount
          
          Total_transport_cost <- sum(transport_cost) + transport_cost_curr_inv
          Total_offsite_transport_cost <- sum(offsite_transport_cost) + Offsite_trans_cost_curr_inv
          Total_transport_cost_non_npv <- sum(transport_cost_non_npv) + transport_cost_curr_inv_non_npv
          Total_offsite_transport_cost_non_npv <- sum(offsite_transport_cost_non_npv) + Offsite_trans_cost_curr_inv
          
          Total_offsite_labor_cost <- sum(offsite_labor_cost) + Offsite_labour_cost_curr_inv
          Total_offsite_labor_cost_non_npv <- sum(offsite_labor_cost_non_npv) + Offsite_labour_cost_curr_inv_non_npv
          
          Total_process_cost <- sum(process_cost) + process_cost_curr_inv
          
          
          Total_process_cost_non_npv <- sum(process_cost_non_npv) + process_cost_curr_inv_non_npv
          Total_package_cost <- sum(package_cost) + package_cost_curr_inv
          Total_package_cost_non_npv <- sum(package_cost_non_npv) + package_cost_curr_inv_non_npv
          Total_Expense_current_non_npv <- Total_Storage_Cost_current_non_npv + Total_Freight_cost_current_non_npv + Total_Material_cost_non_npv_current + Total_offsite_labor_cost_non_npv + Total_package_cost_non_npv + Total_process_cost_non_npv + setup_cost + add_cost
          Total_Expense_current <- Total_Storage_Cost_current + Total_Freight_cost_current + Total_process_cost + Total_package_cost + Total_offsite_labor_cost + Total_Material_cost_current  + setup_cost + add_cost
          
          Total_NPV <- Total_Revenue_current - Total_Expense_current 
          
          Total_NPV_non_npv <-  Total_Revenue_non_npv_current - Total_Expense_current_non_npv
          
          Total_Purchase_Qty <- Total_BQ
          Total_Inventory_Purchase <- Total_Purchase_Qty + Curr_Inv_copy
          BQ_S2_check <- ifelse(is.na(BQ_S2), 0, BQ_S1)
          Extended_purchase_cost <- BQ_S2_check * part_c_3
          
          Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
          
          Scenario_2_current <- rbind(Scenario_2_current, c(ATB_ADS[j,1],Total_Storage_Cost_current,Total_Storage_Cost_current_non_npv, Total_Freight_cost_current, 
                                                            Total_Freight_cost_current_non_npv, Total_Processing_cost_current,
                                                            Total_Material_cost_current,Total_Expense_current,Total_Expense_current_non_npv, Total_Revenue_current,
                                                            Total_NPV,Total_NPV_non_npv, Total_BQ,Total_FCST, 
                                                            Total_Material_cost_non_npv_current, Total_Revenue_non_npv_current, Total_transport_cost, Total_offsite_transport_cost,Total_offsite_labor_cost, Total_offsite_labor_cost_non_npv,
                                                            Total_transport_cost_non_npv, Total_offsite_transport_cost_non_npv, Total_process_cost,Total_process_cost_non_npv,
                                                            setup_cost, BQ_S2_check, First_buy, Last_sale,
                                                            Last_buy, Total_package_cost, Total_package_cost_non_npv, scrap_amount, DLR_Price_3,
                                                            wd_price ,
                                                            Revenue_OES_non_npv_no_discount, Revenue_IAM_non_npv_no_discount, Revenue_Allied_non_npv_no_discount,
                                                            Revenue_OES_non_npv_discount, Revenue_IAM_non_npv_discount, Revenue_Allied_non_npv_discount, add_cost,
                                                            Revenue_Allied_discount, Revenue_OES_discount, Revenue_IAM_discount, Total_Purchase_Qty,
                                                            Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST))
          
        }
        
        colnames(Scenario_2_current) <- c("Part_Nbr","Storage_Cost_Scenario_2","Storage_Cost_non_npv_Scenario_2", "Transportation_Cost_Scenario_2", "Transportation_cost_non_npv_Scenario_2",
                                          "Processing_Cost_Scenario_2","Part_Cost_Scenario_2","Expense_Scenario_2", "Expense_non_npv_Scenario_2", "Revenue_Scenario_2", "NPV_Scenario_2", "Profit_Non_NPV_Scenario_2",
                                          "Buy_Quantity_Scenario_2","Total_Forecast_Scenario_2", "Material_cost_non_npv_Scenario_2", "Revenue_non_npv_Scenario_2",
                                          "Total_transport_cost_Scenario_2", "Total_offsite_transport_cost_Scenario_2",
                                          "Total_offsite_labor_cost_Scenario_2", "Total_offsite_labor_cost_non_npv_Scenario_2", 
                                          "Total_transport_cost_non_npv_Scenario_2", "Total_offsite_transport_cost_non_npv_Scenario_2","Total_process_cost_Scenario_2", "Total_process_cost_non_npv_Scenario_2", "Setup_cost_Scenario_2", "LTB_Buy_Quantity_Scenario_2",
                                          "First_buy",
                                          "Last_sale", "Last_buy", "Package_cost_Scenario_2", "Package_cost_non_npv_Scenario_2", "Scrap_amount_Scenario_2", "Dealer_price_Scenario_2", "WD_dealer_price_Scenario_2", 
                                          'Revenue_OES_non_npv_no_discount_2', 
                                          'Revenue_IAM_non_npv_no_discount_2', 'Revenue_Allied_non_npv_no_discount_2',
                                          'Revenue_OES_non_npv_discount_2', 'Revenue_IAM_non_npv_discount_2', 'Revenue_Allied_non_npv_discount_2', "Additional_cost_Scenario_2",
                                          'Revenue_Allied_discount_2', 'Revenue_OES_discount_2', 'Revenue_IAM_discount_2', "Total_Purchase_Qty_2",
                                          "Total_Inventory_Purchase_2", "Extended_purchase_cost_2", "total_forecast")
        
        Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
        Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.numeric), stringsAsFactors=FALSE)
        Scenario_2_current <- Scenario_2_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        Scenario_2_current$Part_Nbr <- str_pad(Scenario_2_current$Part_Nbr, width=8, side="left", pad="0")
        
      } else
      { 
        Scenario_2_current <- data.frame()
        
        for (j in (1:nrow(ATB_ADS))) {
          
          cat("\nsc_2_cur Part Number: ",j," : ", ATB_ADS[j,1])
          final_NPV <- 0
          Optimal_year_count <- 1
          LTBQ <- 0
          Year <- c()
          FCST <- c()
          NPV_CR <- c()
          
          transport_cost <- c()
          offsite_transport_cost <- c()
          offsite_labor_cost <- c()
          process_cost <- c()
          
          Curr_Inv <- round(as.numeric(scenario_2$Values[18]), 4)
          Material_cost_CR_list <- c()
          Buy_Qty <- BQ_S2
          Total_Purchase_Qty <- BQ_S2
          
          Buy_Qty <- Buy_Qty + Curr_Inv
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
          }
          
          FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
          #FCST <- Updated_FCST
          Total_FCST <- sum(FCST)
          
          ## Calculating First Buy, Last Sale and Last Buy
          First_buy <- 0
          Last_sale <- 0
          Last_buy <- 0
          flag <- 0
          
          
          if(FCST[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          Last_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          
          p_to_get_year = 0
          q_to_get_demand = 0
          
          for(i in 1:30)
          {
            q_to_get_demand = q_to_get_demand + FCST[i]
            if(Buy_Qty > q_to_get_demand)
            {
              p_to_get_year = p_to_get_year + 1
            } else if(Buy_Qty <= FCST[1])
            {
              remain <- Buy_Qty
              
              c = 1
              d = 0
              for(i in 1:12)
              {
                d = d + (FCST[p_to_get_year+1] / 12)
                if(remain > d)
                {
                  c = c+1
                }
              }
              
              FCST[p_to_get_year+1] <- remain
              
              Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
              break()
            }
          }
          
          if(Buy_Qty > FCST[1] & p_to_get_year < 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
          } else if(p_to_get_year >= 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            FCST[p_to_get_year+1] <- 0
            Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
            c <- 0
          }
          
          if(p_to_get_year < 29)
          {
            for(i in ((p_to_get_year + 2) : 30))
            {
              FCST[i] <- 0
            }
          }
          
          ###########
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam <- round(FCST * iam_weight, digits = 0)
          FCST_oes <- round(FCST * oes_weight, digits = 0)
          FCST_allied <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Sum_Forecast
          
          if(Buy_Qty > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          ###########           
          BQ <- Buy_Qty
          
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(p_to_get_year))) {
            s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + s
            yr_qty[i+1] <- s
          }
          
          yr_qty[1] <- (2*BQ - FCST[1])/2        
          yr_qty[p_to_get_year + 2] <- 0
          
          Total_storage_qty <- sum(yr_qty)
          
          Storage_Cost <- 0
          revenue <- 0
          revenue_non <- 0
          revenue_allied <- 0
          revenue_oes <- 0
          revenue_iam <- 0
          revenue_non_npv_allied <- 0
          revenue_non_npv_oes <- 0
          revenue_non_npv_iam <- 0
          Storage_Cost_non_npv <- 0
          Revenue_OES_non_npv_no_discount_2 <- 0
          Revenue_IAM_non_npv_no_discount_2 <- 0
          Revenue_Allied_non_npv_no_discount_2 <- 0
          Revenue_OES_non_npv_discount_2 <- 0
          Revenue_IAM_non_npv_discount_2 <- 0
          Revenue_Allied_non_npv_discount_2 <- 0
          
          if(p_to_get_year > 0)
          {
            
            for(k in (1 : (p_to_get_year + 1)))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_allied <- revenue_allied + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
              revenue_oes <- revenue_oes + (FCST_oes[k] * CR * (Dealer_Price_OES))
              revenue_iam <- revenue_iam + (FCST_iam[k] * CR * (Dealer_Price_IAM))
              
              #revenue_non_npv_allied <- revenue_non_npv_allied + (FCST_allied[k] *  (Dealer_Price_Allied_Export))
              #revenue_non_npv_oes <- revenue_non_npv_oes + (FCST_oes[k] * (Dealer_Price_OES))
              #revenue_non_npv_iam <- revenue_non_npv_iam + (FCST_iam[k] *  (Dealer_Price_IAM))
              #revenue_non<-round(revenue_non_npv_allied,2)+round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)
              revenue_non <- revenue_non + ((FCST[k]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              
              Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
              
            }
          }
          
          
          if(p_to_get_year == 0)
          {
            
            for(k in (1:1))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + ((FCST[1]) * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_allied <- revenue_allied + (FCST_allied[1] * CR * (Dealer_Price_Allied_Export))
              revenue_oes <- revenue_oes + (FCST_oes[1] * CR * (Dealer_Price_OES))
              revenue_iam <- revenue_iam + (FCST_iam[1] * CR * (Dealer_Price_IAM))
              
              #revenue_non_npv_allied <- revenue_non_npv_allied + (FCST_allied[1] *  (Dealer_Price_Allied_Export))
              #revenue_non_npv_oes <- revenue_non_npv_oes + (FCST_oes[1] *  (Dealer_Price_OES))
              #revenue_non_npv_iam <- revenue_non_npv_iam + (FCST_iam[1] *  (Dealer_Price_IAM))
              #revenue_non<-round(revenue_non_npv_allied,2)+round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)
              revenue_non <- revenue_non + ((FCST[1]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
            }
          }
          
          Revenue_OES_non_npv_no_discount_2 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$OES_FRACTION[j]
          Revenue_IAM_non_npv_no_discount_2 <- Sum_Forecast * wd_price * ATB_ADS$IAM_FRACTION[j]
          Revenue_Allied_non_npv_no_discount_2 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          Revenue_OES_non_npv_discount_2 <- sum(FCST_oes) * Dealer_Price_OES 
          Revenue_IAM_non_npv_discount_2 <- sum(FCST_iam) * Dealer_Price_IAM
          Revenue_Allied_non_npv_discount_2 <- sum(FCST_allied) * Dealer_Price_Allied_Export
          
          revenue_non <- Revenue_OES_non_npv_discount_2 + Revenue_IAM_non_npv_discount_2 + Revenue_Allied_non_npv_discount_2
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
          Freight_cost <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost) * (1-(0.15/12))
          Freight_cost_non_npv <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost)
          
          Offsite_labour_cost <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          Total_Processing_cost <- (((Onsite_procs_cpp1 ) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
          Total_Processing_cost_non_npv <- ((Onsite_procs_cpp1  * BQ) + Offsite_labour_cost)
          
          package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
          package_cost_non_npv <- Average_Processing_cpp1 * BQ
          
          Material_cost <- (part_c_3 * BQ)*(1-(0.15/12))
          Material_cost_non_npv <- (part_c_3 * BQ)
          
          Total_transport_cost <- (Onsite_trans_cpp1 * BQ) * (1-(0.15/12))
          Total_offsite_transport_cost <- Offsite_trans_cost * (1-(0.15/12))
          Total_offsite_labor_cost <- Offsite_labour_cost * (1-(0.15/12))
          Total_transport_cost_non_npv <- (Onsite_trans_cpp1 * BQ) 
          
          Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1)  * BQ) * (1-(0.15/12))
          Total_process_cost_non_npv <- ((Onsite_procs_cpp1 - Average_Processing_cpp1)  * BQ)
          
          
          Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + setup_cost + Material_cost
          revenue <- (revenue_allied + revenue_oes + revenue_iam)
          NPV_with_capital_rate <- revenue - Total_Expense
          
          Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + setup_cost +  Material_cost_non_npv
          NPV_non_npv <- revenue_non - Total_Expense_non_npv
          Total_Inventory_Purchase <- Buy_Qty
          
          scrap_amount <- Buy_Qty - sum(FCST)
          scrap_amount <- ifelse(scrap_amount < 0, 0, scrap_amount)
          Extended_purchase_cost <- BQ_S2 * part_c_3
          
          Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
          Scenario_2_current <- rbind(Scenario_2_current, c(ATB_ADS[j,1],Storage_Cost,Freight_cost,Total_Processing_cost,
                                                            Material_cost, Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                                            sum(FCST), Material_cost_non_npv, revenue_non, Total_transport_cost,Total_transport_cost_non_npv,
                                                            Total_offsite_transport_cost,Offsite_trans_cost, Total_offsite_labor_cost, Total_process_cost, setup_cost, BQ_S2, scrap_amount,
                                                            Storage_Cost_non_npv, Freight_cost_non_npv, Total_Processing_cost_non_npv, add_cost, package_cost_non_npv, 
                                                            package_cost, Offsite_labour_cost, Total_process_cost_non_npv, Total_Expense_non_npv,
                                                            NPV_non_npv, Revenue_OES_non_npv_no_discount_2, Revenue_IAM_non_npv_no_discount_2,
                                                            Revenue_Allied_non_npv_no_discount_2, Revenue_OES_non_npv_discount_2,
                                                            Revenue_IAM_non_npv_discount_2, Revenue_Allied_non_npv_discount_2,
                                                            revenue_allied, revenue_oes, revenue_iam, First_buy, Last_sale, Last_buy, Total_Purchase_Qty,
                                                            Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST
          ))
          
          colnames(Scenario_2_current) <- c("Part_Nbr","Storage_Cost_Scenario_2","Transportation_Cost_Scenario_2","Processing_Cost_Scenario_2",
                                            "Part_Cost_Scenario_2","Expense_Scenario_2","Revenue_Scenario_2","NPV_Scenario_2","Buy_Quantity_Scenario_2",
                                            "Total_Forecast_Scenario_2", "Material_cost_non_npv_Scenario_2","Revenue_non_npv_Scenario_2", 
                                            "Total_transport_cost_Scenario_2","Total_transport_cost_non_npv_Scenario_2","Total_offsite_transport_cost_Scenario_2","Total_offsite_transport_cost_non_npv_Scenario_2","Total_offsite_labor_cost_Scenario_2",
                                            "Total_process_cost_Scenario_2", "Setup_cost_Scenario_2", "LTB_Buy_Quantity_Scenario_2", "Scrap_amount_Scenario_2",
                                            "Storage_Cost_non_npv_Scenario_2", "Transportation_cost_non_npv_Scenario_2","Processing_Cost_non_npv_Scenario_2",
                                            "Additional_cost_Scenario_2", "Package_cost_non_npv_Scenario_2", "Package_cost_Scenario_2", "Total_offsite_labor_cost_non_npv_Scenario_2",
                                            "Total_process_cost_non_npv_Scenario_2", "Expense_non_npv_Scenario_2", "Profit_Non_NPV_Scenario_2", "Revenue_OES_non_npv_no_discount_2",
                                            "Revenue_IAM_non_npv_no_discount_2", "Revenue_Allied_non_npv_no_discount_2", "Revenue_OES_non_npv_discount_2", "Revenue_IAM_non_npv_discount_2",
                                            "Revenue_Allied_non_npv_discount_2", "Revenue_Allied_discount_2", "Revenue_OES_discount_2", "Revenue_IAM_discount_2",
                                            "First_buy", "Last_sale", "Last_buy", "Total_Purchase_Qty_2", "Total_Inventory_Purchase_2", "Extended_purchase_cost_2",
                                            "total_forecast")
          
        }
        
        Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
        Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.numeric), stringsAsFactors=FALSE)
        Scenario_2_current <- Scenario_2_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        Scenario_2_current$Part_Nbr <- str_pad(Scenario_2_current$Part_Nbr, width=8, side="left", pad="0")
      }
      
      scrap_amount <- Scenario_2_current$Scrap_amount_Scenario_2[1]
      
      incProgress(1/4, detail = "Running Calculations")
      
      ########## Code for Scenario-2: Selldown calculation
      
      Selldown_NPV_Scenario_2 <- data.frame()
      Buy_Qty <- round(as.numeric(scenario_2$Values[18]), 4)
      
      for (j in (1:nrow(ATB_ADS))) {
        
        cat("\nsc_2_sell Part Number: ",j," : ", ATB_ADS[j,1])
        final_NPV <- 0
        Optimal_year_count <- 1
        LTBQ <- 0
        Year <- c()
        FCST <- c()
        NPV_CR <- c()
        Revenue_CR <- c()
        Expense <- c()
        Storage_cost_CR <- c()
        Freight_cost_CR <- c()
        Processing_cost_CR <- c()
        
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        for(n in (1:30)){
          FCST[n] <- ATB_ADS[j,(YI-1+n)]
        }
        
        FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
        
        p_to_get_year = 0
        q_to_get_demand = 0
        
        for(i in 1:30)
        {
          q_to_get_demand = q_to_get_demand + FCST[i]
          if(Buy_Qty > q_to_get_demand)
          {
            p_to_get_year = p_to_get_year + 1
          } else if(Buy_Qty <= FCST[1])
          {
            remain <- Buy_Qty
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
            break()
          }
        }
        
        if(Buy_Qty > FCST[1] & p_to_get_year < 30)
        {
          remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
          c = 1
          d = 0
          for(i in 1:12)
          {
            d = d + (FCST[p_to_get_year+1] / 12)
            if(remain > d)
            {
              c = c+1
            }
          }
          
          FCST[p_to_get_year+1] <- remain
          Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
        } else if(p_to_get_year >= 30)
        {
          remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
          FCST[p_to_get_year+1] <- 0
          Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
          c <- 0
        }
        
        if(p_to_get_year < 29)
        {
          for(i in ((p_to_get_year + 2) : 30))
          {
            FCST[i] <- 0
          }
        }
        
        ###########
        
        iam_weight <- ATB_ADS$IAM_FRACTION[j]
        oes_weight <- ATB_ADS$OES_FRACTION[j]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
        
        FCST_iam_selldown <- round(FCST * iam_weight, digits = 0)
        FCST_oes_selldown <- round(FCST * oes_weight, digits = 0)
        FCST_allied_selldown <- round(FCST * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam_selldown) + sum(FCST_oes_selldown) + sum(FCST_allied_selldown)
        
        Diff_FCST <- Sum_FCST - Sum_Forecast
        
        
        if(Buy_Qty > 0 & Sum_Forecast > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes_selldown!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam_selldown!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied_selldown!=0),1)
          } else
          {
            index <- 1
          }
          
        } else
        {
          index <- 1
        }
        
        if(length(index)==0)
        {
          index <- 1
        }
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes_selldown[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam_selldown[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied_selldown[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes_selldown[index] < FCST_iam_selldown[index] & FCST_oes_selldown[index] < FCST_allied_selldown[index] & oes_weight != 0)
        {
          FCST_oes_selldown[index] <- FCST_oes_selldown[index] - Diff_FCST
          
        } else if(FCST_iam_selldown[index] <= FCST_oes_selldown[index] & FCST_iam_selldown[index] <= FCST_allied_selldown[index] & iam_weight != 0)
        {
          FCST_iam_selldown[index] <- FCST_iam_selldown[index] - Diff_FCST
          
        } else if(FCST_allied_selldown[index] <= FCST_oes_selldown[index] & FCST_allied_selldown[index] <= FCST_iam_selldown[index] & allied_weight != 0)
        {
          FCST_allied_selldown[index] <- FCST_allied_selldown[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes_selldown[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam_selldown[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied_selldown[index] <- 0
        }
        
        ###########
        
        
        BQ <- Buy_Qty
        qty <- 0
        yr_qty <- c()
        
        for (i in (1:(p_to_get_year))) {
          s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
          qty <- qty + s
          yr_qty[i+1] <- s
        }
        
        yr_qty[1] <- (2*BQ - FCST[1])/2        
        yr_qty[p_to_get_year + 2] <- 0
        
        Total_storage_qty <- sum(yr_qty)
        
        Storage_Cost <- 0
        Storage_Cost_non_npv <- 0
        revenue <- 0
        revenue_iam <- 0
        revenue_oes <- 0
        revenue_allied <- 0
        revenue_non_npv <- 0
        revenue_non_npv_iam <- 0
        revenue_non_npv_oes <- 0
        revenue_non_npv_allied <- 0
        
        
        if(p_to_get_year > 0)
        {
          
          for(k in (1 : (p_to_get_year + 1)))
          {
            CR <- ((1-(0.15/12))^(k*12))
            
            revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            #revenue_non_npv <- revenue_non_npv + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam_selldown[k] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes_selldown[k] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied_selldown[k] * CR * (Dealer_Price_Allied_Export))
            
            revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[k] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
            revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[k] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
            revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[k] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
            revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
            
            Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
            Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
            
            
          }
        }
        
        if(p_to_get_year == 0)
        {
          
          for(k in (1:1))
          {
            CR <- ((1-(0.15/12))^(k*12))
            revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            #revenue_non_npv <- revenue_non_npv + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam_selldown[1] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes_selldown[1] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied_selldown[1] * CR * (Dealer_Price_Allied_Export))
            
            revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[1] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
            revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[1] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
            revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[1] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
            revenue_non_npv <-  round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
            
            Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
            Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
          }
        }
        
        offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
        
        Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
        Freight_cost <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost) * (1-(0.15/12))
        Freight_cost_non_npv <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost)
        
        Offsite_labour_cost <- offsite_quantity*as.numeric(Offsite_Labor_cpp1)
        Total_Processing_cost <- (((Onsite_procs_cpp1 ) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
        Total_Processing_cost_non_npv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost)
        
        package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
        package_cost_non_npv <- Average_Processing_cpp1 * BQ
        
        Total_Processing_cost <- Total_Processing_cost - package_cost
        Total_Processing_cost_non_npv <- Total_Processing_cost_non_npv - package_cost_non_npv
        
        Material_cost <- BQ * part_c_3 * (1-(0.15/12))
        Material_cost_non_npv <- BQ * part_c_3
        
        Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + Material_cost  + setup_cost + package_cost
        revenue <- revenue_iam + revenue_oes + revenue_allied
        NPV_with_capital_rate <- revenue - Total_Expense
        
        Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + Material_cost_non_npv + setup_cost + package_cost_non_npv
        NPV_with_capital_rate_non_npv <- revenue_non_npv - Total_Expense_non_npv
        
        Selldown_NPV_Scenario_2 <- data.frame(lapply(Selldown_NPV_Scenario_2, as.character), stringsAsFactors=FALSE)
        Selldown_NPV_Scenario_2 <- rbind(Selldown_NPV_Scenario_2, c(ATB_ADS[j,1], Material_cost, Storage_Cost,Freight_cost,Total_Processing_cost,Total_Expense,
                                                                    revenue,NPV_with_capital_rate,Buy_Qty,
                                                                    Material_cost_non_npv, Storage_Cost_non_npv, Freight_cost_non_npv,
                                                                    Total_Processing_cost_non_npv, add_cost, package_cost_non_npv,
                                                                    setup_cost, package_cost, revenue_non_npv, NPV_with_capital_rate_non_npv,
                                                                    revenue_iam, revenue_oes, revenue_allied, revenue_non_npv_iam, revenue_non_npv_oes, revenue_non_npv_allied))
        
        colnames(Selldown_NPV_Scenario_2) <- c("Part_Nbr","Selldown_Material_cost_Scenario_2","Selldown_Storage_Cost_Scenario_2","Selldown_Freight_cost_Scenario_2",
                                               "Selldown_Processing_Cost_Scenario_2","Total_Expense_Scenario_2","Selldown_Revenue_Scenario_2",
                                               "Selldown_NPV_Scenario_2","Total_BQ_Scenario_2", "Selldown_Material_cost_non_npv_Scenario_2", "Selldown_Storage_Cost_non_npv_Scenario_2",
                                               "Selldown_Freight_cost_non_npv_Scenario_2", "Selldown_Processing_Cost_non_npv_Scenario_2", "Selldown_Additional_Cost_Scenario_2",
                                               "Selldown_Package_Cost_non_npv_Scenario_2", "Selldown_Setup_Cost_Scenario_2", "Selldown_Package_Cost_Scenario_2",
                                               "Selldown_Revenue_non_npv_Scenario_2", "Selldown_NPV_non_npv_Scenario_2", "Selldown_Revenue_Scenario_2_IAM", 
                                               "Selldown_Revenue_Scenario_2_OES", "Selldown_Revenue_Scenario_2_Allied", "Selldown_Revenue_non_npv_Scenario_2_IAM",
                                               "Selldown_Revenue_non_npv_Scenario_2_OES", "Selldown_Revenue_non_npv_Scenario_2_Allied")
        
      }
      Selldown_NPV_Scenario_2 <- data.frame(lapply(Selldown_NPV_Scenario_2, as.character), stringsAsFactors=FALSE)
      Selldown_NPV_Scenario_2 <- data.frame(lapply(Selldown_NPV_Scenario_2, as.numeric), stringsAsFactors=FALSE)
      Selldown_NPV_Scenario_2 <- Selldown_NPV_Scenario_2 %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      
      Selldown_NPV_Scenario_2$Part_Nbr <- str_pad(Selldown_NPV_Scenario_2$Part_Nbr, width=8, side="left", pad="0")
      incProgress(1/4, detail = "Running Calculations")
      
      ###################
      shinyjs::show("line_2")
      output$line_2 <- renderHighchart({
        
        graph <- NPV_Data
        graph <- as.data.frame(graph)
        graph$Buy_quantity_list <- as.numeric(as.character(graph$Buy_quantity_list))
        graph$NPV_CR_list <- as.numeric(as.character(graph$NPV_CR_list))
        
        highchart() %>% 
          hc_title(text="NPV variation with Buy Qty") %>%
          hc_chart(type = "line") %>%
          hc_xAxis(title=list(text="Buy Quantity"),categories= as.vector(graph$Buy_quantity_list))  %>%
          hc_yAxis(title=list(text="NPV"))  %>% 
          hc_add_theme(hc_theme_sandsignika()) %>%
          hc_add_series(name = "NPV", data = as.vector(graph$NPV_CR_list))
        
      })
      x<-data.frame(1)
      x$DLR_Price_3<-DLR_Price_3
      x$wd_price <- wd_price
      x$part_c_3 <- part_c_3
      x$moq <-moq
      x$std_p <-std_p
      x$setup_cost<-setup_cost
      x$add_cost <- add_cost
      x$Monthly_square_feet_cpp1<-Monthly_square_feet_cpp1
      x$Offsite_transportation_cpp1<-Offsite_transportation_cpp1
      x$Redistribution_cpp1<-Redistribution_cpp1
      x$Offsite_Labor_cpp1 <- Offsite_Labor_cpp1
      x$Inbound_Labor_cpp1 <- Inbound_Labor_cpp1
      x$Outbound_Labor_cpp1<-Outbound_Labor_cpp1
      x$Average_Labor_cpp1<-Average_Labor_cpp1
      x$Average_Processing_cpp1<-Average_Processing_cpp1
      x$Inbound_Transportation_cpp1<-Inbound_Transportation_cpp1
      x$Outbound_Transportation_cpp1<-Outbound_Transportation_cpp1
      x$Part_Nbr<-t_scenario_2$Part_Nbr
      
      
      ## Creating Download Report of Scenario-2 
      result_scenario_2 <- merge(Scenario_2_current, Scenario_2_optimal, by = "Part_Nbr")
      result_scenario_2 <- merge(result_scenario_2, Selldown_NPV_Scenario_2, by = "Part_Nbr")
      result_scenario_2 <- merge(result_scenario_2, x, by = "Part_Nbr")
      result_scenario_2$First_buy_s_2 <- First_buy
      result_scenario_2$Last_buy_s_2 <- Last_buy
      result_scenario_2$scrappage_s_2 <- scrap_amount
      result_scenario_2$Last_sale_s_2 <- Last_sale
      
      result_scenario_2 <- result_scenario_2 %>% select(Part_Nbr, NPV_Scenario_2,
                                                        Selldown_NPV_Scenario_2,Selldown_NPV_non_npv_Scenario_2, Revenue_Scenario_2,Revenue_non_npv_Scenario_2,Part_Cost_Scenario_2,Material_cost_non_npv_Scenario_2,
                                                        Setup_cost_Scenario_2 ,Total_transport_cost_Scenario_2,Total_transport_cost_non_npv_Scenario_2,Storage_Cost_Scenario_2,Storage_Cost_non_npv_Scenario_2,
                                                        Total_process_cost_Scenario_2,  Total_process_cost_non_npv_Scenario_2,Package_cost_Scenario_2,Package_cost_non_npv_Scenario_2,
                                                        Total_offsite_labor_cost_Scenario_2,Total_offsite_labor_cost_non_npv_Scenario_2,Total_offsite_transport_cost_Scenario_2,Total_offsite_transport_cost_non_npv_Scenario_2, 
                                                        Additional_Cost_2,Selldown_Revenue_Scenario_2,Selldown_Revenue_non_npv_Scenario_2,
                                                        Selldown_Material_cost_Scenario_2,Selldown_Material_cost_non_npv_Scenario_2,
                                                        Selldown_Freight_cost_Scenario_2,Selldown_Freight_cost_non_npv_Scenario_2,Selldown_Storage_Cost_Scenario_2,Selldown_Storage_Cost_non_npv_Scenario_2, Selldown_Processing_Cost_Scenario_2,
                                                        Selldown_Processing_Cost_non_npv_Scenario_2,Selldown_Package_Cost_Scenario_2,Selldown_Package_Cost_non_npv_Scenario_2,
                                                        Total_Inventory,
                                                        First_buy_s_2, Last_buy_s_2,
                                                        Last_sale_s_2, scrappage_s_2, LTB_Buy_Quantity_Scenario_2,
                                                        Total_Purchase_Qty_2, Total_Forecast_Scenario_2,
                                                        Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2,
                                                        Optimal_Material_Cost_Scenario_2,Optimal_Setup_cost_Scenario_2,Optimal_Total_transport_cost_Scenario_2,
                                                        Optimal_Total_offsite_transport_cost_Scenario_2, 
                                                        Optimal_Storage_Cost_Scenario_2, Optimal_Total_process_cost_Scenario_2, Optimal_Packaging_cost_Scenario_2,
                                                        Optimal_Total_offsite_labor_cost_Scenario_2,
                                                        Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2, Extended_purchase_cost_2,DLR_Price_3,wd_price,part_c_3,moq,std_p,setup_cost,add_cost,Monthly_square_feet_cpp1,Offsite_transportation_cpp1,
                                                        Redistribution_cpp1,Offsite_Labor_cpp1,Inbound_Labor_cpp1,Outbound_Labor_cpp1,Average_Labor_cpp1,Average_Processing_cpp1,Inbound_Transportation_cpp1,Outbound_Transportation_cpp1)
      
      result_scenario_2$Part_Nbr <- str_pad(result_scenario_2$Part_Nbr, width=8, side="left", pad="0")
      write.csv(result_scenario_2, file = "Result_scenario_2.csv", row.names = FALSE)
      
      output$downloadData_s_2 <- downloadHandler(
        filename = function() { 
          paste("Part_view_Scenario-2",".csv", sep="") 
        },
        content = function(file) {
          abc <- result_scenario_2
          abc$Part_Nbr <- str_pad(abc$Part_Nbr, width=8, side="left", pad="0")
          abc <- data.frame(Part_Nbr = abc[,1],
                            lapply(abc[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                            lapply(abc[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                            lapply(abc[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                            formatC(abc[,53] , big.mark=",", digits=0, format="f"),
                            lapply(abc[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                            lapply(abc[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                            lapply(abc[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                            lapply(abc[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                            stringsAsFactors = FALSE)
          
          colnames(abc) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                             "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                             "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                             "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                             "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                             "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                             "Current Inventory",
                             "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                             "Total Purchase Scenario-2", "Total Sales Scenario-2",
                             "Optimal NPV  Scenario-2",
                             "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                             "Optimal Offsite transport cost Scenario-2",
                             "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                             "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                             "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                             "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
          
          write.csv(abc, file)
          
        },
        contentType = "csv"
      )
      
      ## Downloading all Scenarios
      output$download_all_scenario<- downloadHandler(
        filename = function() {
          paste("All_Scenarios",".xlsx", sep="") 
        },
        content = function(file) {
          scenario_current <- read.csv("current_scenario.csv", stringsAsFactors = FALSE)
          scenario_1 <- read.csv("Result_scenario_1.csv", stringsAsFactors = FALSE)
          scenario_2 <- read.csv("Result_scenario_2.csv", stringsAsFactors = FALSE)
          
          scenario_current <- data.frame(Part_Nbr = scenario_current[,1],
                                         lapply(scenario_current[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                         lapply(scenario_current[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                         lapply(scenario_current[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(scenario_current[,53] , big.mark=",", digits=0, format="f"),
                                         lapply(scenario_current[,54:60], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                         lapply(scenario_current[,61:63], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                         paste("$", formatC(scenario_current[,64] , big.mark=",", digits=0, format="f")),
                                         lapply(scenario_current[,65:66], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                         lapply(scenario_current[,67:78], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                         scenario_current[,79:83],
                                         stringsAsFactors = FALSE)
          
          
          colnames(scenario_current) <- c("Part Number",
                                          "NPV", "Selldown NPV","Selldown Non NPV",
                                          "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                                          "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                                          "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                                          "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                                          "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                                          "Current Inventory",
                                          "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                                          "Total Purchase", "Total Sales", "Optimal NPV",
                                          "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                                          "Optimal Storage Cost",
                                          "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                                          "Optimal ATB Quantity","Optimal payback period", "Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export", ## change 786
                                          "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                                          "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                                          "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                                          "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)","Simple payabck period","Discounted payback period","2 year payback ATB","2 year payback NPV")
          
          scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                                   lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                                   lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                   lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   stringsAsFactors = FALSE)
          scenario_1$Part_Nbr <- str_pad(scenario_1$Part_Nbr, width=8, side="left", pad="0")
          
          colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                    "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                    "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                    "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                    "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                    "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                    "Current Inventory",
                                    "First Buy","Last Buy","Last Sale","Scrap Scenario-1",  "Entered Buy Quantity Scenario-1",
                                    "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                    "Optimal NPV  Scenario-1",
                                    "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                    "Optimal Offsite transport cost Scenario-1",
                                    "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                    "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                    "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                    "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
          
          scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],
                                   lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                                   lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                   lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   stringsAsFactors = FALSE)
          scenario_2$Part_Nbr <- str_pad(scenario_2$Part_Nbr, width=8, side="left", pad="0")
          
          colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                    "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                    "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                    "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                    "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                    "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                    "Current Inventory",
                                    "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                    "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                    "Optimal NPV  Scenario-2",
                                    "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                    "Optimal Offsite transport cost Scenario-2",
                                    "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                    "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                    "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                    "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
          
          write.xlsx2(scenario_current, file, sheetName="Current", row.names=FALSE)
          write.xlsx2(scenario_1, file, sheetName="Scenario-1", append=TRUE, row.names=FALSE)
          write.xlsx2(scenario_2, file, sheetName="Scenario-2", append=TRUE, row.names=FALSE)
          
        }
      )
      
      ## Refreshing data at the back end
      spl_7 <- Scenario_2_current
      spl_7$Part_Nbr <- str_pad(spl_7$Part_Nbr, width=8, side="left", pad="0")
      spl_8 <- Scenario_2_optimal
      spl_8$Part_Nbr <- str_pad(spl_8$Part_Nbr, width=8, side="left", pad="0")
      spl_9 <- Selldown_NPV_Scenario_2
      spl_9$Part_Nbr <- str_pad(spl_9$Part_Nbr, width=8, side="left", pad="0")
      spl_x2 <- t_scenario_2
      spl_78 <- merge(spl_7, spl_8, by = "Part_Nbr")
      spl_789 <- merge(spl_78, spl_9, by = "Part_Nbr")
      spl_789 <- merge(spl_789, x, by = "Part_Nbr")
      global_scenario_2$df_data_sce_2 <- spl_789
      
      spl_789_result <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2, Selldown_NPV_Scenario_2, Revenue_Scenario_2, Revenue_non_npv_Scenario_2,
                                           Optimal_NPV_Scenario_2, Optimal_ATB_Quantity_Scenario_2,total_forecast)
      
      spl_789_result <- as.data.frame(spl_789_result)
      spl_789_result <- data.frame(lapply(spl_789_result, as.character), stringsAsFactors=FALSE)
      spl_789_result <- data.frame(lapply(spl_789_result, as.numeric), stringsAsFactors=FALSE)
      
      shinyjs::show("analysis_sce_2")
      if (input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
      {
        scenario_2_display <- read.csv("spl_789_result.csv", stringsAsFactors = FALSE)
        
        scenario_2_display[scenario_2_display$Part_Nbr == spl_789_result$Part_Nbr[1], ] <- spl_789_result[1,]
        write.csv(scenario_2_display, file = "spl_789_result.csv", row.names = FALSE)
        
        scenario_2_display$Part_Nbr <- str_pad(scenario_2_display$Part_Nbr, width=8, side="left", pad="0")
        
        output$analysis_sce_2 <- renderHotable({
          scenario_2_display <- data.frame(Part_Nbr = scenario_2_display[,1], lapply(scenario_2_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                           formatC(scenario_2_display[,7] , big.mark=",", digits=0, format="f"), formatC(scenario_2_display[,8] , big.mark=",", digits=0, format="f") ,stringsAsFactors = FALSE)
          colnames(scenario_2_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
          
          scenario_2_display
        })
        
      } else
      {
        scenario_2_display <- read.csv("spl_123_result_s2.csv", stringsAsFactors = FALSE)
        scenario_2_display[scenario_2_display$Part_Nbr == spl_789_result$Part_Nbr[1], ] <- spl_789_result[1,]
        write.csv(scenario_2_display, file = "spl_123_result_s2.csv", row.names = FALSE)
        
        scenario_2_display$Part_Nbr <- str_pad(scenario_2_display$Part_Nbr, width=8, side="left", pad="0")
        
        output$analysis_sce_2 <- renderHotable({
          scenario_2_display <- data.frame(Part_Nbr = scenario_2_display[,1], lapply(scenario_2_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                           formatC(scenario_2_display[,7] , big.mark=",", digits=0, format="f"), formatC(scenario_2_display[,8] , big.mark=",", digits=0, format="f") ,stringsAsFactors = FALSE)
          
          colnames(scenario_2_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
          scenario_2_display
        })
      }
      
      ## Refreshing Cost Element data for Part List Tab
      scenario_2_cost <- reflect_cost_scenario_2$df_data_cost_scenario_2
      scenario_2_cost[scenario_2_cost$PART_NBR == input$Part_Number, 2:9] <- c(part_c_3, moq, round(as.numeric(scenario_2$Values[5]), 0), BQ_S2,
                                                                               setup_cost, add_cost, DLR_Price_3, wd_price)
      reflect_cost_scenario_2$df_data_cost_scenario_2 <- scenario_2_cost
      
      shinyjs::show("cost_sce_2")
      output$cost_sce_2 <- renderHotable({
        
        scenario_2_cost <- reflect_cost_scenario_2$df_data_cost_scenario_2
        
        scenario_2_cost <- data.frame(PART_NBR = scenario_2_cost[,1], paste("$", formatC(scenario_2_cost[,2] , big.mark=",", digits=2, format="f"), sep = " "),
                                      lapply(scenario_2_cost[,3:5], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                      lapply(scenario_2_cost[,6:9], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), stringsAsFactors = FALSE)
        
        colnames(scenario_2_cost) <- c("Part Number","Material Cost", "MOQ", "Standard Pack", "Buy Quantity", "Setup Cost", 
                                       "Additional Cost","Proposed Dealer Price", "Proposed WD Price")
        
        scenario_2_cost
      }, readOnly = TRUE)
      
      ## Refreshing data in download reports
      reflect_back_scenario_2 <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2,
                                                    Selldown_NPV_Scenario_2,Selldown_NPV_non_npv_Scenario_2, Revenue_Scenario_2,Revenue_non_npv_Scenario_2,Part_Cost_Scenario_2,Material_cost_non_npv_Scenario_2,
                                                    Setup_cost_Scenario_2 ,Total_transport_cost_Scenario_2,Total_transport_cost_non_npv_Scenario_2,Storage_Cost_Scenario_2,Storage_Cost_non_npv_Scenario_2,
                                                    Total_process_cost_Scenario_2,  Total_process_cost_non_npv_Scenario_2,Package_cost_Scenario_2,Package_cost_non_npv_Scenario_2,
                                                    Total_offsite_labor_cost_Scenario_2,Total_offsite_labor_cost_non_npv_Scenario_2,Total_offsite_transport_cost_Scenario_2,Total_offsite_transport_cost_non_npv_Scenario_2, 
                                                    Additional_Cost_2,Selldown_Revenue_Scenario_2,Selldown_Revenue_non_npv_Scenario_2,
                                                    Selldown_Material_cost_Scenario_2,Selldown_Material_cost_non_npv_Scenario_2,
                                                    Selldown_Freight_cost_Scenario_2,Selldown_Freight_cost_non_npv_Scenario_2,Selldown_Storage_Cost_Scenario_2,Selldown_Storage_Cost_non_npv_Scenario_2, Selldown_Processing_Cost_Scenario_2,
                                                    Selldown_Processing_Cost_non_npv_Scenario_2,Selldown_Package_Cost_Scenario_2,Selldown_Package_Cost_non_npv_Scenario_2,
                                                    Total_Inventory,
                                                    First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_2, LTB_Buy_Quantity_Scenario_2,
                                                    Total_Purchase_Qty_2, Total_Forecast_Scenario_2,
                                                    Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2, Optimal_Material_Cost_Scenario_2, Optimal_Setup_cost_Scenario_2,
                                                    Optimal_Total_transport_cost_Scenario_2,
                                                    Optimal_Total_offsite_transport_cost_Scenario_2, Optimal_Storage_Cost_Scenario_2, Optimal_Total_process_cost_Scenario_2,
                                                    Optimal_Packaging_cost_Scenario_2,
                                                    Optimal_Total_offsite_labor_cost_Scenario_2, Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2,
                                                    Extended_purchase_cost_2,DLR_Price_3,wd_price,part_c_3,moq,std_p,setup_cost,add_cost,Monthly_square_feet_cpp1,Offsite_transportation_cpp1,
                                                    Redistribution_cpp1,Offsite_Labor_cpp1,Inbound_Labor_cpp1,Outbound_Labor_cpp1,Average_Labor_cpp1,Average_Processing_cpp1,Inbound_Transportation_cpp1,Outbound_Transportation_cpp1)
      
      report_update <- global_scenario_2_down$df_data_scenario_2_down
      report_update[report_update$Part_Nbr == reflect_back_scenario_2$Part_Nbr[1], 2:72] <- reflect_back_scenario_2[1, 2:72]
      global_scenario_2_down$df_data_scenario_2_down <- report_update
      
      report_update <- global_current_sce_down$df_data_current
      report_update$Part_Nbr <- str_pad(report_update$Part_Nbr, width=8, side="left", pad="0")
      report_update[report_update$Part_Nbr == input$Part_Number, 79] <- as.character("None")
      global_current_sce_down$df_data_current <- report_update
      
      ##--------------------------
      ## Management Report Code:
      ##--------------------------
      
      management_report_2 <- global_scenario_2_down$df_data_scenario_2_down
      management_report_2 <- management_report_2 %>% select(Part_Nbr, NPV_Scenario_2, Revenue_Scenario_2, LTB_Buy_Quantity_Scenario_2, Extended_purchase_cost_2, 
                                                            Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2, Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2)
      
      management_report_2 <- management_report_2[management_report_2$LTB_Buy_Quantity_Scenario_2 > 0,]
      
      if(nrow(management_report_2) > 0)
      {
        
        management_report_2$NPV_impact_2 <- management_report_2$Optimal_NPV_Scenario_2 - management_report_2$NPV_Scenario_2
        management_report_2$Revenue_impact_2 <- management_report_2$Optimal_Revenue_Scenario_2 - management_report_2$Revenue_Scenario_2
        management_report_2$Buy_impact_2 <- management_report_2$Extended_optimal_buy_cost_2 - management_report_2$Extended_purchase_cost_2
        colnames(management_report_2)[4] <- "Entered_Buy_Quantity_2"
        colnames(management_report_2)[8] <- "Optimal_Quantity_Scenario_2"
        management_report_2$Time_stamp_2 <- Sys.Date()
        management_report_2$Day_2 <- day(Sys.Date())
        management_report_2$Month_2 <- month(Sys.Date())
        management_report_2$Year_2 <- year(Sys.Date())
        
        management_report_2$Part_Nbr <- as.character(str_pad(management_report_2$Part_Nbr, width=8, side="left", pad="0"))
        management_report_2$Time_stamp_2 <- as.character(management_report_2$Time_stamp_2)
        management_report_2$Day_2 <- as.character(management_report_2$Day_2)
        management_report_2$Month_2 <- as.character(management_report_2$Month_2)
        management_report_2$Year_2 <- as.character(management_report_2$Year_2)
        
        management_report_2$RAT_NUMBER <- "-"
        management_report_2$GM_ID <- test$gm_id[1]
        
        dbWriteTable(conn = con,
                     name = TEMP_MAN_REP_2_NAME,
                     value = management_report_2, overwrite = TRUE, append = FALSE)
        
        dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_2 IN EXCLUSIVE MODE")
        
        sql_management_rep_2 <- paste("UPDATE MANAGEMENT_TABLE_2 A
                                      SET (A.NPV_SCENARIO_2, A.REVENUE_SCENARIO_2, A.ENTERED_BUY_QUANTITY_2, A.EXTENDED_PURCHASE_COST_2, A.OPTIMAL_NPV_SCENARIO_2, A.OPTIMAL_REVENUE_SCENARIO_2,
                                      A.OPTIMAL_QUANTITY_SCENARIO_2, A.EXTENDED_OPTIMAL_BUY_COST_2, A.NPV_IMPACT_2, A.REVENUE_IMPACT_2, A.BUY_IMPACT_2, 
                                      A.TIME_STAMP, A.DAY_2, A.MONTH_2, A.YEAR_2, A.RAT_NUMBER, A.GM_ID) =
                                      (SELECT B.NPV_Scenario_2, B.Revenue_Scenario_2, B.Entered_Buy_Quantity_2, B.Extended_purchase_cost_2, 
                                      B.Optimal_NPV_Scenario_2, B.Optimal_Revenue_Scenario_2, B.Optimal_Quantity_Scenario_2, B.Extended_optimal_buy_cost_2, 
                                      B.NPV_impact_2,B.Revenue_impact_2, B.Buy_impact_2, B.Time_stamp_2, B.Day_2, B.Month_2, B.Year_2, B.RAT_NUMBER, B.GM_ID
                                      FROM",
                                      TEMP_MAN_REP_2_NAME, "B
                                      WHERE 
                                      LPAD(A.PART_NBR, 8, '0') = LPAD(B.Part_Nbr, 8, '0'))
                                      WHERE EXISTS (SELECT NPV_SCENARIO_2
                                      FROM",
                                      TEMP_MAN_REP_2_NAME, "C WHERE
                                      LPAD(C.PART_NBR, 8, '0')= LPAD(A.PART_NBR, 8, '0'))")
        
        value_management_rep_2 <- dbSendUpdate(con, sql_management_rep_2)
        
        dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_2 IN EXCLUSIVE MODE")
        
        sql_management_rep_insert_2 <- paste("INSERT INTO MANAGEMENT_TABLE_2 
                                             SELECT A.* FROM", TEMP_MAN_REP_2_NAME," A
                                             WHERE A.PART_NBR NOT IN (SELECT DISTINCT PART_NBR FROM MANAGEMENT_TABLE_2)")
        
        value_management_rep_insert_2 <- dbSendUpdate(con, sql_management_rep_insert_2)
        
        dbSendUpdate(con, paste("BEGIN
                                EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_2_NAME , "';
                                EXCEPTION
                                WHEN OTHERS THEN NULL;
                                END;"))
        
      }
      
      
      ## Generating income report for Scenario-2
      
      income_report_scenario_2 <- c(1:52)
      income_report_scenario_2<- as.data.frame(income_report_scenario_2)
      income_report_scenario_2$Fields <-  c('Dealer Price', 'Wd price', 'Allied Price', 'Dealer discount %', 'Wd discount %', 'Allied Discount %', 'Net Dealer', 'Net Wd',
                                            'Net Allied',
                                            'Lifetime Revenue(Non NPV)',
                                            'Lifetime Revenue(NPV)',
                                            'Sell Down Revenue(Non NPV) - OES',
                                            'Sell Down Revenue(Non NPV) - IAM',
                                            'Sell Down Revenue(Non NPV) - Allied/Export',
                                            'Sell Down Revenue(Non NPV',
                                            'Selldown Revenue (NPV)',
                                            'Material Cost(Non NPV)',
                                            'Material Cost(NPV)',
                                            'Sell Down Material Non Npv',
                                            'Sell Down Material (NPV)',
                                            'Transportation Cost(NON NPV)',
                                            'Transportation Cost(NPV)',
                                            'Sell Down Transportation cost (Non NPV)',
                                            'Sell Down Transportation cost (NPV)',
                                            'Labor Cost(NON NPV)',
                                            'Labor Cost(NPV)',
                                            'Sell Down Labor (NON NPV)',
                                            'Sell Down Labor (NPV)',
                                            'Storage Cost (Non NPV)',
                                            'Storage Cost(NPV)',
                                            'Sell Down Storage(Non NPV)',
                                            'Sell Down Storage(NPV)',
                                            'Packaging Cost(NON NPV)',
                                            'Packaging Cost(NPV)',
                                            'Sell Down Packaging Cost (NON NPV)',
                                            'Sell Down Packaging Cost (NPV)',
                                            'Set up Cost (NON NPV)',
                                            'Setup Cost(NPV)',
                                            'Additional Cost($)',
                                            'Total Expense(NON NPV)',
                                            'Total Expense(NPV)',
                                            'Profit (Non NPV)',
                                            'NPV',
                                            'Selldown (non Npv)',
                                            'Selldown NPV',
                                            'National Inventory',
                                            'Total Purchase',
                                            'Total Inventory and Purchase',
                                            'Total Sales',
                                            'Scrap',
                                            'MOQ',
                                            'Standard Pack')
      
      sales_oes <- sum(FCST_oes)
      sales_iam <- sum(FCST_iam)
      sales_allied <- sum(FCST_allied)
      
      inventory_oes <- round(Current_Inventory * ATB_ADS$OES_FRACTION[1], digits = 0)
      inventory_iam <- round(Current_Inventory * ATB_ADS$IAM_FRACTION[1], digits = 0)
      inventory_allied <- round(Current_Inventory * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
      
      if(is.na(BQ_S2))
      {
        
        purchase_oes <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
        purchase_iam <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
        purchase_allied <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        ## Calculating the difference in sales, inventory and purchase before and after rounding
        diff_sales <- Scenario_2_current$Total_Forecast_Scenario_2[1] - (sales_oes + sales_iam + sales_allied)
        diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
        diff_purchase <- ceiling(Scenario_2_current$Buy_Quantity_Scenario_2[1]) - (purchase_oes + purchase_iam + purchase_allied)
        
        ## Calling function to adjust the rounding error in sales, purcahse and inventory
        sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
        sales_values <- unlist(sales_values)
        sales_oes <- sales_values[1]
        sales_iam <- sales_values[2]
        sales_allied <- sales_values[3]
        
        inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
        inventory_values <- unlist(inventory_values)
        inventory_oes <- inventory_values[1]
        inventory_iam <- inventory_values[2]
        inventory_allied <- inventory_values[3]
        
        purchase_values <- Round_fn(purchase_oes, purchase_iam, purchase_allied, diff_purchase)
        purchase_values <- unlist(purchase_values)
        purchase_oes <- purchase_values[1]
        purchase_iam <- purchase_values[2]
        purchase_allied <- purchase_values[3]
        
        purchase_inventory <- ceiling((Current_Inventory + Scenario_2_current$Buy_Quantity_Scenario_2[1]))
        purchase_inventory_oes <- inventory_oes + purchase_oes
        purchase_inventory_iam <- inventory_iam + purchase_iam
        purchase_inventory_allied <- inventory_allied + purchase_allied
        income_report_scenario_2$income_report_scenario_2 <- NULL
        
        income_report_scenario_2$Per_unit <- c(Scenario_2_optimal$Proposed_Dealer_Price_2[1], Scenario_2_optimal$Proposed_Wd_Price_2[1], 
                                               Scenario_2_optimal$Proposed_Dealer_Price_2[1], ATB_ADS$Discount_oes_percent[1], 
                                               ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                               Scenario_2_current$Revenue_OES_non_npv_discount_2[1], Scenario_2_current$Revenue_IAM_non_npv_discount_2[1], 
                                               Scenario_2_current$Revenue_Allied_non_npv_discount_2[1], 
                                               Scenario_2_current$Revenue_non_npv_Scenario_2[1], Scenario_2_current$Revenue_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_OES[1], Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_IAM[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_Allied[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2[1], part_c_3, 
                                               Scenario_2_current$Part_Cost_Scenario_2[1],
                                               part_c_3, Selldown_NPV_Scenario_2$Selldown_Material_cost_Scenario_2[1], 
                                               Scenario_2_current$Transportation_cost_non_npv_Scenario_2[1], Scenario_2_current$Transportation_Cost_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Freight_cost_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Freight_cost_Scenario_2[1], 
                                               (Scenario_2_current$Total_offsite_labor_cost_non_npv_Scenario_2[1] + Scenario_2_current$Total_process_cost_non_npv_Scenario_2[1]), 
                                               (Scenario_2_current$Total_offsite_labor_cost_Scenario_2[1] + Scenario_2_current$Total_process_cost_Scenario_2[1]),
                                               Selldown_NPV_Scenario_2$Selldown_Processing_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Processing_Cost_Scenario_2[1],
                                               Scenario_2_current$Storage_Cost_non_npv_Scenario_2[1],
                                               Scenario_2_current$Storage_Cost_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Storage_Cost_non_npv_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Storage_Cost_Scenario_2[1],
                                               Scenario_2_current$Package_cost_non_npv_Scenario_2[1], Scenario_2_current$Package_cost_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Package_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Package_Cost_Scenario_2[1],
                                               Scenario_2_current$Setup_cost_Scenario_2[1], Scenario_2_current$Setup_cost_Scenario_2[1],
                                               Scenario_2_current$Additional_cost_Scenario_2[1], Scenario_2_current$Expense_non_npv_Scenario_2[1], Scenario_2_current$Expense_Scenario_2[1],
                                               Scenario_2_current$Profit_Non_NPV_Scenario_2[1], Scenario_2_current$NPV_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_NPV_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1], Current_Inventory, ceiling(Scenario_2_current$Buy_Quantity_Scenario_2[1]),
                                               ceiling((Current_Inventory + Scenario_2_current$Buy_Quantity_Scenario_2[1])),
                                               Scenario_2_current$Total_Forecast_Scenario_2[1], Scenario_2_current$Scrap_amount_Scenario_2[1], moq,
                                               std_p)
        
      } else
      {
        purchase_inventory <- Scenario_2_current$Buy_Quantity_Scenario_2[1]
        purchase_inventory_oes <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
        purchase_inventory_iam <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
        purchase_inventory_allied <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        ## Calculating the difference in sales, inventory and purchase before and after rounding
        diff_sales <- Scenario_2_current$Total_Forecast_Scenario_2[1] - (sales_oes + sales_iam + sales_allied)
        diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
        diff_purchase_inventory <- ceiling(Scenario_2_current$Buy_Quantity_Scenario_2[1]) - (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied)
        
        ## Calling function to adjust the rounding error in sales, purcahse and inventory
        sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
        sales_values <- unlist(sales_values)
        sales_oes <- sales_values[1]
        sales_iam <- sales_values[2]
        sales_allied <- sales_values[3]
        
        inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
        inventory_values <- unlist(inventory_values)
        inventory_oes <- inventory_values[1]
        inventory_iam <- inventory_values[2]
        inventory_allied <- inventory_values[3]
        
        purchase_inventory_values <- Round_fn(purchase_inventory_oes, purchase_inventory_iam, purchase_inventory_allied, diff_purchase_inventory)
        purchase_inventory_values <- unlist(purchase_inventory_values)
        purchase_inventory_oes <- purchase_inventory_values[1]
        purchase_inventory_iam <- purchase_inventory_values[2]
        purchase_inventory_allied <- purchase_inventory_values[3]
        
        purchase_values <- Scenario_2_current$Buy_Quantity_Scenario_2[1] - Current_Inventory
        purchase_oes <- purchase_inventory_oes - inventory_oes
        purchase_iam <- purchase_inventory_iam - inventory_iam
        purchase_allied <- purchase_inventory_allied - inventory_allied
        
        income_report_scenario_2$income_report_scenario_2 <- NULL
        
        income_report_scenario_2$Per_unit <- c(Scenario_2_optimal$Proposed_Dealer_Price_2[1], Scenario_2_optimal$Proposed_Wd_Price_2[1], 
                                               Scenario_2_optimal$Proposed_Dealer_Price_2[1], ATB_ADS$Discount_oes_percent[1], 
                                               ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                               Scenario_2_current$Revenue_OES_non_npv_discount_2[1], Scenario_2_current$Revenue_IAM_non_npv_discount_2[1], 
                                               Scenario_2_current$Revenue_Allied_non_npv_discount_2[1], 
                                               Scenario_2_current$Revenue_non_npv_Scenario_2[1], Scenario_2_current$Revenue_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_OES[1], Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_IAM[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_Allied[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2[1], part_c_3, 
                                               Scenario_2_current$Part_Cost_Scenario_2[1],
                                               part_c_3, Selldown_NPV_Scenario_2$Selldown_Material_cost_Scenario_2[1], 
                                               Scenario_2_current$Transportation_cost_non_npv_Scenario_2[1], Scenario_2_current$Transportation_Cost_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Freight_cost_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Freight_cost_Scenario_2[1], 
                                               (Scenario_2_current$Total_offsite_labor_cost_non_npv_Scenario_2[1] + Scenario_2_current$Total_process_cost_non_npv_Scenario_2[1]), 
                                               (Scenario_2_current$Total_offsite_labor_cost_Scenario_2[1] + Scenario_2_current$Total_process_cost_Scenario_2[1]),
                                               Selldown_NPV_Scenario_2$Selldown_Processing_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Processing_Cost_Scenario_2[1],
                                               Scenario_2_current$Storage_Cost_non_npv_Scenario_2[1],
                                               Scenario_2_current$Storage_Cost_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Storage_Cost_non_npv_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Storage_Cost_Scenario_2[1],
                                               Scenario_2_current$Package_cost_non_npv_Scenario_2[1], Scenario_2_current$Package_cost_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Package_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Package_Cost_Scenario_2[1],
                                               Scenario_2_current$Setup_cost_Scenario_2[1], Scenario_2_current$Setup_cost_Scenario_2[1],
                                               Scenario_2_current$Additional_cost_Scenario_2[1], Scenario_2_current$Expense_non_npv_Scenario_2[1], Scenario_2_current$Expense_Scenario_2[1],
                                               Scenario_2_current$Profit_Non_NPV_Scenario_2[1], Scenario_2_current$NPV_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_NPV_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1], Current_Inventory, (purchase_oes + purchase_iam + purchase_allied),
                                               (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied),
                                               Scenario_2_current$Total_Forecast_Scenario_2[1], Scenario_2_current$Scrap_amount_Scenario_2[1], moq,
                                               std_p)
        
      }
      income_report_scenario_2$Per_unit[c(10:11)] <- income_report_scenario_2$Per_unit[c(10:11)] / Scenario_2_current$Total_Forecast_Scenario_2[1]
      
      div_oes <- ifelse(inventory_oes > sales_oes, sales_oes, inventory_oes)
      div_iam <- ifelse(inventory_iam > sales_iam, sales_iam, inventory_iam)
      div_allied <- ifelse(inventory_allied > sales_allied, sales_allied, inventory_allied)
      div_inventory <- ifelse(Current_Inventory > Scenario_2_current$Total_Forecast_Scenario_2, Scenario_2_current$Total_Forecast_Scenario_2, Current_Inventory)
      
      
      income_report_scenario_2$Per_unit[c(15:16)] <- income_report_scenario_2$Per_unit[c(15:16)] / div_inventory
      income_report_scenario_2$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] <- income_report_scenario_2$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] / purchase_inventory
      income_report_scenario_2$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] <- income_report_scenario_2$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] / Current_Inventory
      income_report_scenario_2$Per_unit <- ifelse(is.nan(income_report_scenario_2$Per_unit), 0, income_report_scenario_2$Per_unit)
      
      income_report_scenario_2$OES <- 0
      income_report_scenario_2$IAM <- 0
      income_report_scenario_2$Allied_export <- 0
      income_report_scenario_2$Total <- 0
      
      income_report_scenario_2$OES[1] <- income_report_scenario_2$Per_unit[1] * sales_oes
      income_report_scenario_2$OES[4] <- (ATB_ADS$Discount_oes_percent[1]/100) * income_report_scenario_2$OES[1]
      income_report_scenario_2$OES[7] <- income_report_scenario_2$OES[1] - income_report_scenario_2$OES[4]
      income_report_scenario_2$Per_unit[7] <- income_report_scenario_2$OES[7] / sales_oes
      income_report_scenario_2$OES[10] <-  income_report_scenario_2$OES[7]
      
      income_report_scenario_2$IAM[2] <- income_report_scenario_2$Per_unit[2] * sales_iam
      income_report_scenario_2$IAM[5] <- (ATB_ADS$Discount_iam_percent[1]/100) * income_report_scenario_2$IAM[2]
      income_report_scenario_2$IAM[8] <- income_report_scenario_2$IAM[2] - income_report_scenario_2$IAM[5]
      income_report_scenario_2$Per_unit[8] <- income_report_scenario_2$IAM[8] / sales_iam
      income_report_scenario_2$IAM[10] <-  income_report_scenario_2$IAM[8]
      
      income_report_scenario_2$Allied_export[3] <- income_report_scenario_2$Per_unit[3] * sales_allied
      income_report_scenario_2$Allied_export[6] <- (ATB_ADS$Discount_allied_export_percent[1]/100) * income_report_scenario_2$Allied_export[3]
      income_report_scenario_2$Allied_export[9] <- income_report_scenario_2$Allied_export[3] - income_report_scenario_2$Allied_export[6]
      income_report_scenario_2$Per_unit[9] <- income_report_scenario_2$Allied_export[9] / sales_allied
      income_report_scenario_2$Allied_export[10] <-  income_report_scenario_2$Allied_export[9]
      
      income_report_scenario_2$Per_unit[12] <- income_report_scenario_2$Per_unit[7]
      income_report_scenario_2$Per_unit[13] <- income_report_scenario_2$Per_unit[8]
      income_report_scenario_2$Per_unit[14] <- income_report_scenario_2$Per_unit[9]
      
      income_report_scenario_2$OES[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] <- income_report_scenario_2$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] * purchase_inventory_oes
      income_report_scenario_2$OES[11:16] <-c( Scenario_2_current$Revenue_OES_discount_2[1],(income_report_scenario_2$Per_unit[12] * div_oes), 0,0,
                                               (income_report_scenario_2$Per_unit[12] * div_oes),
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2_OES[1])
      
      income_report_scenario_2$OES[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_2$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_oes
      income_report_scenario_2$OES[44] <- income_report_scenario_2$OES[15] - sum(income_report_scenario_2$OES[c(19,23,27,31,35)])
      income_report_scenario_2$OES[45] <- income_report_scenario_2$OES[16] - sum(income_report_scenario_2$OES[c(20,24,28,32,36)])
      
      income_report_scenario_2$OES[c(46:49)] <- c(inventory_oes, purchase_oes, purchase_inventory_oes, sales_oes)
      
      income_report_scenario_2$OES[40] <- income_report_scenario_2$OES[17] + income_report_scenario_2$OES[21] + income_report_scenario_2$OES[25] + income_report_scenario_2$OES[29] + income_report_scenario_2$OES[33] + income_report_scenario_2$OES[37] + income_report_scenario_2$OES[39]
      income_report_scenario_2$OES[41] <- income_report_scenario_2$OES[18] + income_report_scenario_2$OES[22] + income_report_scenario_2$OES[26] + income_report_scenario_2$OES[30] + income_report_scenario_2$OES[34] + income_report_scenario_2$OES[38] + income_report_scenario_2$OES[39]
      
      income_report_scenario_2$OES[42] <- income_report_scenario_2$OES[10] - income_report_scenario_2$OES[40]
      income_report_scenario_2$OES[43] <- income_report_scenario_2$OES[11] - income_report_scenario_2$OES[41]
      
      ##
      income_report_scenario_2$IAM[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_2$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_iam
      income_report_scenario_2$IAM[11:16] <-c( Scenario_2_current$Revenue_IAM_discount_2[1], 0, (income_report_scenario_2$Per_unit[13] * div_iam), 0,
                                               (income_report_scenario_2$Per_unit[13] * div_iam),
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2_IAM[1])
      
      income_report_scenario_2$IAM[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_2$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_iam
      income_report_scenario_2$IAM[44] <- income_report_scenario_2$IAM[15] - sum(income_report_scenario_2$IAM[c(19,23,27,31,35)])
      income_report_scenario_2$IAM[45] <- income_report_scenario_2$IAM[16] - sum(income_report_scenario_2$IAM[c(20,24,28,32,36)])
      
      income_report_scenario_2$IAM[c(46:49)] <- c(inventory_iam, purchase_iam, purchase_inventory_iam, sales_iam)
      
      income_report_scenario_2$IAM[40] <- income_report_scenario_2$IAM[17] + income_report_scenario_2$IAM[21] + income_report_scenario_2$IAM[25] + income_report_scenario_2$IAM[29] + income_report_scenario_2$IAM[33] + income_report_scenario_2$IAM[37] + income_report_scenario_2$IAM[39]
      income_report_scenario_2$IAM[41] <- income_report_scenario_2$IAM[18] + income_report_scenario_2$IAM[22] + income_report_scenario_2$IAM[26] + income_report_scenario_2$IAM[30] + income_report_scenario_2$IAM[34] + income_report_scenario_2$IAM[38] + income_report_scenario_2$IAM[39]
      
      income_report_scenario_2$IAM[42] <- income_report_scenario_2$IAM[10] - income_report_scenario_2$IAM[40]
      income_report_scenario_2$IAM[43] <- income_report_scenario_2$IAM[11] - income_report_scenario_2$IAM[41]
      
      ####
      income_report_scenario_2$Allied_export[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_2$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_allied
      income_report_scenario_2$Allied_export[11:16] <-c( Scenario_2_current$Revenue_Allied_discount_2[1], 0, 0, (income_report_scenario_2$Per_unit[14] * div_allied),
                                                         (income_report_scenario_2$Per_unit[14] * div_allied),
                                                         Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2_Allied[1])
      
      income_report_scenario_2$Allied_export[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_2$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_allied
      income_report_scenario_2$Allied_export[44] <- income_report_scenario_2$Allied_export[15] - sum(income_report_scenario_2$Allied_export[c(19,23,27,31,35)])
      income_report_scenario_2$Allied_export[45] <- income_report_scenario_2$Allied_export[16] - sum(income_report_scenario_2$Allied_export[c(20,24,28,32,36)])
      
      income_report_scenario_2$Allied_export[c(46:49)] <- c(inventory_allied, purchase_allied, purchase_inventory_allied, sales_allied)
      
      income_report_scenario_2$Allied_export[40] <- income_report_scenario_2$Allied_export[17] + income_report_scenario_2$Allied_export[21] + income_report_scenario_2$Allied_export[25] + income_report_scenario_2$Allied_export[29] + income_report_scenario_2$Allied_export[33] + income_report_scenario_2$Allied_export[37] + income_report_scenario_2$Allied_export[39]
      income_report_scenario_2$Allied_export[41] <- income_report_scenario_2$Allied_export[18] + income_report_scenario_2$Allied_export[22] + income_report_scenario_2$Allied_export[26] + income_report_scenario_2$Allied_export[30] + income_report_scenario_2$Allied_export[34] + income_report_scenario_2$Allied_export[38] + income_report_scenario_2$Allied_export[39]
      
      income_report_scenario_2$Allied_export[42] <- income_report_scenario_2$Allied_export[10] - income_report_scenario_2$Allied_export[40]
      income_report_scenario_2$Allied_export[43] <- income_report_scenario_2$Allied_export[11] - income_report_scenario_2$Allied_export[41]
      
      income_report_scenario_2$Per_unit <- ifelse(is.nan(income_report_scenario_2$Per_unit), 0, income_report_scenario_2$Per_unit)
      income_report_scenario_2$OES <- ifelse(is.nan(income_report_scenario_2$OES), 0, income_report_scenario_2$OES)
      income_report_scenario_2$IAM <- ifelse(is.nan(income_report_scenario_2$IAM), 0, income_report_scenario_2$IAM)
      income_report_scenario_2$Allied_export <- ifelse(is.nan(income_report_scenario_2$Allied_export), 0, income_report_scenario_2$Allied_export)
      income_report_scenario_2$Total <- ifelse(is.nan(income_report_scenario_2$Total), 0, income_report_scenario_2$Total)
      
      income_report_scenario_2$Total <- income_report_scenario_2$Allied_export + income_report_scenario_2$IAM + income_report_scenario_2$OES
      
      income_report_scenario_2$Total[50:52] <- income_report_scenario_2$Per_unit[50:52]
      
      revenue_non <- income_report_scenario_2$Total[10]
      material_non <- income_report_scenario_2$Total[17]
      
      ## Displaying results for Scenario-2
      shinyjs::show("Scen_2")
      output$Scen_2 <- renderHotable({
        
        part_view <- 0
        part_view<- as.data.frame(part_view)
        part_view$part_view <- NULL
        part_view$Fields <- "NPV($)"
        part_view[2,1]<- "Selldown NPV($)"
        part_view[3,1]<- "Net"
        part_view[4,1]<- "Scrap"
        part_view[5,1]<- "Dealer Price($): OES"
        part_view[6,1]<- "Dealer Price($): Allied/Export"
        part_view[7,1]<- "Dealer Price($): IAM"
        part_view[8,1]<- "First Buy"
        part_view[9,1]<- "Last Buy"
        part_view[10,1]<- "Last Sale"
        part_view[11,1]<- "Lifetime Revenue(NPV)"
        part_view[12,1]<- "Lifetime Revenue(Non NPV)"
        part_view[13,1]<- "Material Cost(NPV)"
        part_view[14,1]<- "Material Cost(Non NPV)"
        part_view[15,1]<- "Setup Cost(NPV)"
        part_view[16,1]<- "Transportation Cost(NPV)"
        part_view[17,1]<- "Labor Cost(NPV)"
        part_view[18,1]<- "Storage Cost(NPV)"
        part_view[19,1]<- "Packaging Cost(NPV)"
        part_view[20,1]<- "Offsite Labor Cost(NPV)"
        part_view[21,1]<- "Offsite Trans Cost(NPV)"
        part_view[22,1]<- "Total Expense(NPV)"
        part_view[23,1]<- "Optimal NPV"
        part_view[24,1]<- "Optimal Buy Qty"
        part_view[25,1]<- "Total Purchase"
        part_view[26,1]<- "Inventory and Purchase"
        part_view[27,1]<- "Extended Optimal Buy Cost"
        part_view[28,1]<- "Extended Buy Qty Cost"
        
        part_view$Values <-  paste("$", formatC(Scenario_2_current$NPV_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[2, 2] <-  paste("$", formatC(Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[3, 2] <-  paste("$", formatC((Scenario_2_current$NPV_Scenario_2[1] - Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[4, 2] <- round(scrap_amount, 0)
        part_view[5, 2] <- paste("$", formatC(Scenario_2_optimal$Dealer_Price_OES_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[6, 2] <- paste("$", formatC(Scenario_2_optimal$Dealer_Price_Allied_Export_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[7, 2] <- paste("$", formatC(Scenario_2_optimal$Dealer_Price_IAM_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[8, 2] <- as.character(round(First_buy,0))
        part_view[9, 2] <- as.character(round(Last_buy,0))
        part_view[10, 2] <- as.character(round(Last_sale,0))
        part_view[11, 2] <-  paste("$", formatC(Scenario_2_current$Revenue_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[12, 2] <-  paste("$", formatC(Scenario_2_current$Revenue_non_npv_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[13, 2] <-  paste("$", formatC(Scenario_2_current$Part_Cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[14, 2] <- paste("$", formatC(Scenario_2_current$Material_cost_non_npv_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[15, 2] <-  paste("$", formatC(setup_cost, big.mark=",", digits=2, format="f"), sep = " ")
        part_view[16, 2] <- paste("$", formatC(Scenario_2_current$Total_transport_cost_Scenario_2[1] , big.mark=",", digits=2, format="f"), sep = " ")
        part_view[17, 2] <-  paste("$", formatC((Scenario_2_current$Total_process_cost_Scenario_2[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[18, 2] <-  paste("$", formatC(Scenario_2_current$Storage_Cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[19, 2] <-  paste("$", formatC((Scenario_2_current$Package_cost_Scenario_2[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[20, 2] <-  paste("$", formatC(Scenario_2_current$Total_offsite_labor_cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[21, 2] <- paste("$", formatC( Scenario_2_current$Total_offsite_transport_cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[22, 2] <- paste("$", formatC(Scenario_2_current$Expense_Scenario_2[1] , big.mark=",", digits=2, format="f"), sep = " ")
        part_view[23, 2] <-  paste("$", formatC(Scenario_2_optimal$Optimal_NPV_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[24, 2] <- paste(formatC(ceiling(Scenario_2_optimal$Optimal_ATB_Quantity_Scenario_2[1]), big.mark=",", digits=0, format="f"), sep = " ")
        part_view[25,2] <-  paste(formatC((Scenario_2_current$Total_Purchase_Qty_2[1]), big.mark=",", digits=0, format="f"))
        part_view[26,2] <-  paste(formatC(Scenario_2_current$Total_Inventory_Purchase_2[1], big.mark=",", digits=0, format="f"), sep = " ")
        part_view[27, 2] <-  paste("$", formatC(Scenario_2_optimal$Extended_optimal_buy_cost_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[28, 2] <-  paste("$", formatC(Scenario_2_current$Extended_purchase_cost_2[1], big.mark=",", digits=2, format="s"), sep = " ")
        
        part_view
        
      }, readOnly = TRUE)
      
      ## Formatting results for income report
      income_report_scenario_2$Per_unit[c(1:3, 7:16, 18, 20:45)] <- paste("$", formatC(income_report_scenario_2$Per_unit[c(1:3, 7:16, 18, 20:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_2$Per_unit[c(17, 19)] <- paste("$", formatC(income_report_scenario_2$Per_unit[c(17, 19)], big.mark=",", digits=7, format="f"), sep = " ")
      
      income_report_scenario_2$Per_unit[c(4:6)] <- paste(formatC(income_report_scenario_2$Per_unit[c(4:6)], big.mark=",", digits=20, format="f"), "%" , sep = " ")
      income_report_scenario_2$Per_unit[c(46:52)] <- paste(formatC(income_report_scenario_2$Per_unit[c(46:52)], big.mark=",", digits=20, format="f"))
      
      income_report_scenario_2$OES[c(1:45)] <- paste("$", formatC(income_report_scenario_2$OES[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_2$OES[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_2$OES[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_2$IAM[c(1:45)] <- paste("$", formatC(income_report_scenario_2$IAM[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_2$IAM[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_2$IAM[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_2$Allied_export[c(1:45)] <- paste("$", formatC(income_report_scenario_2$Allied_export[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_2$Allied_export[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_2$Allied_export[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_2$Total[c(1:45)] <- paste("$", formatC(income_report_scenario_2$Total[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_2$Total[c(46:52)] <- paste(formatC(income_report_scenario_2$Total[c(46:52)], big.mark=",", digits=20, format="f"))
      
      income_report_scenario_2$Per_unit[c(10,11,15,16,40:45)] <- "-"
      income_report_scenario_2[c(12:16, 19,20,23,24,27,28,31,32,35,36,44,45), c(2:6)] <- "-"
      
      
      
      output$download_income_report_s_2 <- downloadHandler(
        filename = function() {
          paste("Income_statement_report_s_2", ".csv", sep="")
        },
        content = function(file) {
          abc <- income_report_scenario_2
          
          write.csv(abc, file)
          
        }
      )
      
    } # Closing for Progress Indicator
        )
    })
  
  observeEvent({
    input$finalize 
  }, {
    if(input$selected_scenario == "Scenario_1")
    {
      report_update <- global_current_sce_down$df_data_current
      report_update$Part_Nbr <- str_pad(report_update$Part_Nbr, width=8, side="left", pad="0")
      if(nrow(global_scenario_1$df_data_sce_1) <= 0)
      {
        showModal(modalDialog(title="Attention!", "Please, create Scenario-1 before finalizing it!"))
        
      } else
      {
        
        report_update[report_update$Part_Nbr == input$Part_Number, 41] <- as.character("Scenario-1")
        global_current_sce_down$df_data_current <- report_update
        
        showModal(modalDialog(title="Success!", "View Finalized.!", footer=NULL))
        Sys.sleep(2)
        removeModal() 
      }
    } else if(input$selected_scenario == "Scenario_2")
    {
      report_update <- global_current_sce_down$df_data_current
      report_update$Part_Nbr <- str_pad(report_update$Part_Nbr, width=8, side="left", pad="0")
      
      if(nrow(global_scenario_2$df_data_sce_2) <= 0)
      {
        showModal(modalDialog(title="Attention!", "Please, create Scenario-2 before finalizing it!"))
        
      } else
      {
        report_update[report_update$Part_Nbr == input$Part_Number, 41] <- as.character("Scenario-2")
        global_current_sce_down$df_data_current <- report_update
        
        showModal(modalDialog(title="Success!", "View Finalized.!", footer=NULL))
        Sys.sleep(2)
        removeModal()
      }
    } else if(input$selected_scenario == "None")
    {
      report_update <- global_current_sce_down$df_data_current
      report_update$Part_Nbr <- str_pad(report_update$Part_Nbr, width=8, side="left", pad="0")
      report_update[report_update$Part_Nbr == input$Part_Number, 41] <- as.character("None")
      global_current_sce_down$df_data_current <- report_update
      
      
      showModal(modalDialog(title="Success!", "View Finalized.!", footer=NULL))
      Sys.sleep(2)
      removeModal()
    }
  })
  
  
  ## Code for Manualy Modifying Forecast in Part View
  observeEvent({
    input$modify_forecast
  }, {
    
    TEMP_MAN_REP_1_NAME <- ""
    TEMP_MAN_REP_2_NAME <- ""
    test <- read.csv('gm_id.csv', stringsAsFactors = FALSE)
    
    if(!is.na(test$gm_id))
    {
      my_email <- test$gm_id[1]
      
      user_id <- my_email
      user_id <- gsub("\\ ", "_", user_id)
      TEMP_MAN_REP_1_NAME <- paste("TEMP_MAN_REP_1", user_id, sep = "_")
      TEMP_MAN_REP_2_NAME <- paste("TEMP_MAN_REP_2", user_id, sep = "_")
      
    }
    
    dbSendUpdate(con, paste("BEGIN
                            EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_1_NAME , "';
                            EXCEPTION
                            WHEN OTHERS THEN NULL;
                            END;"))
    
    dbSendUpdate(con, paste("BEGIN
                            EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_2_NAME , "';
                            EXCEPTION
                            WHEN OTHERS THEN NULL;
                            END;"))
    
    part_info <- global_ads$df_data_ads
    
    part_inform <- as.data.frame(part_info)
    # part_inform$X <- NULL
    part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
    
    ATB_ADS <- part_inform[which(part_inform$PART_NBR == input$Part_Number),]
    
    updated_forecast <- hot.to.df(input$fore_dem)
    
    Updated_FCST <- c()
    
    for(i in 1:30)
    {
      Updated_FCST[i] <- 0
    }
    
    k <- 1
    for(i in 1:3)
    {
      for(j in 2:11)
      {
        Updated_FCST[k] <- updated_forecast[i,j]
        k <- k + 1
      }
    }
    
    YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
    
    for(nn in (1:30)){
      ATB_ADS[1,(YI-1+nn)] <- Updated_FCST[nn]
    }
    ATB_ADS[1,YI] <- ATB_ADS[1,YI] - ATB_ADS$CURRENT_YEAR[1]
    
    modify_ads_forecast <- global_ads$df_data_ads
    modify_ads_forecast[modify_ads_forecast$PART_NBR == input$Part_Number, ] <- ATB_ADS
    global_ads$df_data_ads <- modify_ads_forecast
    
    ATB_ADS$X <- NULL
    
    print(paste("Updated Forecast", Updated_FCST, sep = "--"))
    
    shinyjs::hide("Scen_1")
    shinyjs::hide("Scen_2")
    shinyjs::hide("line_1")
    shinyjs::hide("line_2")
    shinyjs::disable("download_all_scenario")
    shinyjs::disable("downloadData_s_1")
    shinyjs::disable("downloadData_s_2")
    shinyjs::disable("download_income_report_s_1")
    shinyjs::disable("download_income_report_s_2")
    
    global_scenario_1$df_data_sce_1 <- data.frame(NULL)
    global_scenario_2$df_data_sce_2 <- data.frame(NULL)
    
    output$scenario_selector <- renderUI({
      radioButtons("selected_scenario", "Choose the best scenario for this part",
                   c("None" = "None",
                     "Scenario-1" = "Scenario_1",
                     "Scenario-2" = "Scenario_2"),
                   selected = "None", inline = TRUE
      )
    })
    
    p_info <- global_ads$df_data_ads
    p_info <- as.data.frame(p_info)
    p_info$PART_NBR<- str_pad(p_info$PART_NBR, width=8, side="left", pad="0")
    p_info <- p_info[which(p_info$PART_NBR == input$Part_Number),]
    p_info$X <- NULL
    
    if(input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
    {
      output$Buy_qty_s1 <- renderUI({
        textInput("Buy_qty_s11", "Buy Qty", value = as.character(p_info$Buy_Quantity_Scenario_1[1]) )
      })
      
      output$Buy_qty_s2 <- renderUI({
        textInput("Buy_qty_s22", "Buy Qty", value = as.character(p_info$Buy_Quantity_Scenario_2[1]) )
      })
    } else
    {
      
      output$Buy_qty_s1 <- renderUI({
        textInput("Buy_qty_s11", "Buy Qty", value = "Enter Buy Quantity" )
      })
      
      output$Buy_qty_s2 <- renderUI({
        textInput("Buy_qty_s22", "Buy Qty", value = "Enter Buy Quantity" )
      })
      
    }
    
    
    withProgress(message = 'Processing:', value = 0, {
      
      #### Part Number Selector Dropdown
      output$ui <- renderUI({
        
        part_info <- global_ads$df_data_ads
        part_info$PART_NBR<- str_pad(part_info$PART_NBR, width=8, side="left", pad="0")
        selected_check <- selected_part$data
        selectInput("Part_Number", "Part Number", choices = as.vector(part_info$PART_NBR), selected = selected_check)
        
      })
      
      
      shinyjs::show("Part_det")
      output$Part_det <- renderTable({
        
        part<- part_inform[which(part_inform$PART_NBR == isolate(input$Part_Number)), ]
        part1<- 0
        part1<- as.data.frame(part1)
        part1$Fields<- "Part Number"
        part1$part1<- NULL
        part1[2,1] <-"Part Name"
        part1[3,1] <-"USB Code"
        part1[4,1] <-"Unit Load Qty"
        part1[5,1] <-"Last Cost($)"
        part1[6,1] <-"Alpha Warehouse Class"
        part1[7,1] <-"Mandatory Year Retention"
        part1[8,1] <-"Country"
        part1[9,1] <- "% OES Sales"
        part1[10,1] <- "% Allied Export Sales"
        part1[11,1] <- "% IAM Sales"
        
        part1$Attributes <- part[1,1]
        part1[2,2] <- as.character(part[1,2])
        part1[3,2] <- as.character(part$USB_CD[1])
        part1[4,2] <- part$UNIT_LOAD_QTY[1]
        part1[5,2] <- part$LAST_COST[1]
        part1[6,2] <- as.character(part$RB1_ALPHA_WHSE_CLASS[1])
        part1[7,2] <- max(part$SBR_LAST_MANDATORY_YEAR[1], part$SBR_LAST_MANDATORY_YEAR_MEX[1], na.rm = TRUE)
        part1[9,2] <- round((part$OES_FRACTION[1] * 100), 2)
        part1[10,2] <- round((part$ALLIED_EXPORT_FRACTION[1] * 100), 2)
        part1[11,2] <- round((part$IAM_FRACTION[1] * 100), 2)
        
        if(part1[7,2] == part$SBR_LAST_MANDATORY_YEAR[1])
        {
          part1[8,2]<- "USA"
        } else
        {
          part1[8,2] <- "Mexico"
        }
        
        part1
        
      })
      
      ##### Giving values for Scenario- 1
      scenario_1 <- c(1:18)
      scenario_1 <- as.data.frame(scenario_1)
      
      scenario_1$Fields <- c("Proposed Dealer Price($)", "Proposed WD Price($)", "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                             "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                             "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)", "National Inventory")
      
      scenario_1$scenario_1 <- NULL
      
      if (input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
      {
        scenario_1$Values <- c(p_info$Proposed_Dealer_Price_1[1], p_info$Proposed_Wd_Price_1[1], p_info$Material_cost_Scenario_1[1],p_info$Moq_1[1],p_info$Standard_Pack_1[1],
                               p_info$Setup_Cost_Scenario_1[1], p_info$Additional_Cost_Scenario_1[1],
                               round(as.numeric(as.character(p_info$MTH_SQ_FT_COST_PER_PEICE[1])),5),
                               round(as.numeric(as.character(p_info$OFFSITE_TRANS_COST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$REDISTRIBUTION_COST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$OFFSITE_LCPP[1])), 5),
                               round(as.numeric(as.character(p_info$IB_LABOR_COST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$OB_LABOR_COST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$AVG_LCPP[1])), 5), 
                               round(as.numeric(as.character(p_info$AVG_PCPP[1])), 5),
                               round(as.numeric(as.character(p_info$IB_TRANS_CST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$OB_TRANS_CST_PP[1])), 5), p_info$TOTAL_INVENTORY[1])
        print("This is true")
        t_scenario_1<- transpose(scenario_1)
        colnames(t_scenario_1) <- scenario_1$Fields
        
        t_scenario_1$Part_Nbr<-input$Part_Number
        t_scenario_1 <- t_scenario_1[-c(1), ]
        rownames(t_scenario_1) <- NULL
        colnames(t_scenario_1)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s1","Additional_Cost_s1","Monthly_square_feet_cpp",
                                   "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                   "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                   "National_Inventory","Part_Nbr")
      } else
      {
        scenario_1$Values <- c(p_info$DEALER_PRICE_NO_DISCOUNT[1], p_info$WD_DEALER_PRICE_NO_DISCOUNT[1], p_info$LAST_COST[1],
                               p_info$MINIMUM_BUY_QTY[1],p_info$STD_PACK_QTY[1],p_info$Setup_cost[1],
                               p_info$Additional_cost[1], 
                               round(as.numeric(as.character(p_info$MTH_SQ_FT_COST_PER_PEICE[1])), 5), 
                               round(as.numeric(as.character(p_info$OFFSITE_TRANS_COST_PP[1])), 5),
                               round(as.numeric(as.character(p_info$REDISTRIBUTION_COST_PP[1])), 5),
                               round(as.numeric(as.character(p_info$OFFSITE_LCPP[1])), 5), 
                               round(as.numeric(as.character(p_info$IB_LABOR_COST_PP[1])), 5),
                               round(as.numeric(as.character(p_info$OB_LABOR_COST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$AVG_LCPP[1])),5),
                               round(as.numeric(as.character(p_info$AVG_PCPP[1])), 5),
                               round(as.numeric(as.character(p_info$IB_TRANS_CST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$OB_TRANS_CST_PP[1])), 5), 
                               p_info$TOTAL_INVENTORY[1])
        t_scenario_1<- transpose(scenario_1)
        colnames(t_scenario_1) <- scenario_1$Fields
        
        t_scenario_1$Part_Nbr<-input$Part_Number
        t_scenario_1 <- t_scenario_1[-c(1), ]
        rownames(t_scenario_1) <- NULL
        colnames(t_scenario_1)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s1","Additional_Cost_s1","Monthly_square_feet_cpp",
                                   "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                   "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                   "National_Inventory","Part_Nbr")
      }
      
      output$hotable_sce1 <- renderHotable({
        scenario_1
      }, readOnly = FALSE)
      
      
      ##### Giving values for Current Scenario
      scenario_curr <- c(1:25)
      scenario_curr <- as.data.frame(scenario_curr)
      
      scenario_curr$Fields <- c("Dealer Price($)", "Discount Percent(%): OES", "Discount Percent(%): Allied/Export", "Dealer Price($): OES", "Dealer Price($): Allied/Export",
                                "WD Price($)", "Discount Percent(%): IAM", "Dealer Price($): IAM",
                                "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                                "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                                "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)",
                                "National Inventory","Payback period")
      
      scenario_curr$scenario_curr <- NULL
      scenario_curr$Values <- c(p_info$DEALER_PRICE_NO_DISCOUNT[1], 
                                round(as.numeric(as.character(p_info$Discount_oes_percent[1])),2) , 
                                round(as.numeric(as.character(p_info$Discount_allied_export_percent[1])),2), 
                                round(as.numeric(as.character(p_info$Dealer_Price_OES[1])), 2), 
                                round(as.numeric(as.character(p_info$Dealer_Price_Allied_Export[1])), 2), 
                                p_info$WD_DEALER_PRICE_NO_DISCOUNT[1], 
                                round((as.numeric(as.character(p_info$Discount_iam_percent[1]))),2),
                                round(as.numeric(as.character(p_info$Dealer_Price_IAM[1])), 2), 
                                p_info$LAST_COST[1],p_info$MINIMUM_BUY_QTY[1],p_info$STD_PACK_QTY[1],p_info$Setup_cost[1],
                                p_info$Additional_cost[1],
                                round(as.numeric(as.character(p_info$MTH_SQ_FT_COST_PER_PEICE[1])), 5), 
                                round(as.numeric(as.character(p_info$OFFSITE_TRANS_COST_PP[1])), 5), 
                                round(as.numeric(as.character(p_info$REDISTRIBUTION_COST_PP[1])), 5),
                                round(as.numeric(as.character(p_info$OFFSITE_LCPP[1])), 5), 
                                round(as.numeric(as.character(p_info$IB_LABOR_COST_PP[1])), 5), 
                                round(as.numeric(as.character(p_info$OB_LABOR_COST_PP[1])), 5),
                                round(as.numeric(as.character(p_info$AVG_LCPP[1])),5),
                                round(as.numeric(as.character(p_info$AVG_PCPP[1])), 5),
                                round(as.numeric(as.character(p_info$IB_TRANS_CST_PP[1])), 5), 
                                round(as.numeric(as.character(p_info$OB_TRANS_CST_PP[1])), 5), p_info$TOTAL_INVENTORY[1],2)
      
      shinyjs::show("hotable_curr")
      output$hotable_curr <- renderHotable({
        scenario_curr
      }, readOnly = FALSE)
      t_scenario_curr<- transpose(scenario_curr)
      colnames(t_scenario_curr) <- scenario_curr$Fields
      t_scenario_curr$Part_Nbr<-input$Part_Number
      t_scenario_curr <- t_scenario_curr[-c(1), ]
      rownames(t_scenario_curr) <- NULL
      colnames(t_scenario_curr)<- c("Dealer_Price", "Discount_Percent_OES", "Discount_Percent_Allied_Export", "Dealer_OES_Price", "Dealer_Allied_Export_Price",
                                    "WD_Price", "Discount_Percent_IAM", "Dealer_IAM_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_curr","Additional_Cost_curr","Monthly_square_feet_cpp",
                                    "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                    "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                    "National_Inventory","Payback","Part_Nbr")
      
      
      
      ##### Giving values for Scenario- 2
      scenario_2 <- c(1:18)
      scenario_2 <- as.data.frame(scenario_2)
      
      scenario_2$Fields <- c("Proposed Dealer Price($)", "Proposed WD Price($)", "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                             "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                             "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)",
                             "National Inventory")
      scenario_2$scenario_2 <- NULL
      
      if (input$sel == "Cost" | input$sel =="Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
      {
        
        scenario_2$Values <- c(p_info$Proposed_Dealer_Price_2[1], p_info$Proposed_Wd_Price_2[1], p_info$Material_cost_Scenario_2[1],p_info$Moq_2[1],p_info$Standard_Pack_2[1],
                               p_info$Setup_Cost_Scenario_2[1], p_info$Additional_Cost_Scenario_2[1],
                               round(as.numeric(as.character(p_info$MTH_SQ_FT_COST_PER_PEICE[1])),5),
                               round(as.numeric(as.character(p_info$OFFSITE_TRANS_COST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$REDISTRIBUTION_COST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$OFFSITE_LCPP[1])), 5),
                               round(as.numeric(as.character(p_info$IB_LABOR_COST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$OB_LABOR_COST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$AVG_LCPP[1])), 5), 
                               round(as.numeric(as.character(p_info$AVG_PCPP[1])), 5),
                               round(as.numeric(as.character(p_info$IB_TRANS_CST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$OB_TRANS_CST_PP[1])), 5), p_info$TOTAL_INVENTORY[1])
        t_scenario_2<- transpose(scenario_2)
        colnames(t_scenario_2) <- scenario_2$Fields
        t_scenario_2$Part_Nbr<-input$Part_Number
        t_scenario_2 <- t_scenario_2[-c(1), ]
        rownames(t_scenario_2) <- NULL
        colnames(t_scenario_2)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s2","Additional_Cost_s2","Monthly_square_feet_cpp",
                                   "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                   "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                   "National_Inventory","Part_Nbr") 
      } else
      {
        
        scenario_2$Values <- c(p_info$DEALER_PRICE_NO_DISCOUNT[1], p_info$WD_DEALER_PRICE_NO_DISCOUNT[1], p_info$LAST_COST[1],
                               p_info$MINIMUM_BUY_QTY[1],p_info$STD_PACK_QTY[1],p_info$Setup_cost[1],
                               p_info$Additional_cost[1], 
                               round(as.numeric(as.character(p_info$MTH_SQ_FT_COST_PER_PEICE[1])), 5), 
                               round(as.numeric(as.character(p_info$OFFSITE_TRANS_COST_PP[1])), 5),
                               round(as.numeric(as.character(p_info$REDISTRIBUTION_COST_PP[1])), 5),
                               round(as.numeric(as.character(p_info$OFFSITE_LCPP[1])), 5), 
                               round(as.numeric(as.character(p_info$IB_LABOR_COST_PP[1])), 5),
                               round(as.numeric(as.character(p_info$OB_LABOR_COST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$AVG_LCPP[1])),5),
                               round(as.numeric(as.character(p_info$AVG_PCPP[1])), 5),
                               round(as.numeric(as.character(p_info$IB_TRANS_CST_PP[1])), 5), 
                               round(as.numeric(as.character(p_info$OB_TRANS_CST_PP[1])), 5), 
                               p_info$TOTAL_INVENTORY[1])
        t_scenario_2<- transpose(scenario_2)
        colnames(t_scenario_2) <- scenario_2$Fields
        t_scenario_2$Part_Nbr<-input$Part_Number
        t_scenario_2 <- t_scenario_2[-c(1), ]
        rownames(t_scenario_2) <- NULL
        colnames(t_scenario_2)<- c("Proposed_Dealer_Price", "Proposed_WD_Price", "Material_Cost", "MOQ","Standard_Pack","Setup_Cost_s2","Additional_Cost_s2","Monthly_square_feet_cpp",
                                   "Offsite_transportation_cpp","Redistribution_cpp","Offsite_Labor_cpp","Inbound_Labor_cpp","Outbound_Labor_cpp",
                                   "Average_Labor_cpp","Average_Processing_cpp","Inbound_Transportation_cpp","Outbound_Transportation_cpp",
                                   "National_Inventory","Part_Nbr")
      }
      
      output$hotable_sce2 <- renderHotable({
        scenario_2
      }, readOnly = FALSE)
      
      incProgress(1/5, detail = "Running Calculations")
      
      output$Total_Forecast <- renderInfoBox({
        total_forcast <- sum(ATB_ADS$FORECAST_YR_1[1] + ATB_ADS$CURRENT_YEAR[1] + ATB_ADS$FORECAST_YR_2[1] + ATB_ADS$FORECAST_YR_3[1] + ATB_ADS$FORECAST_YR_4[1] +
                               ATB_ADS$FORECAST_YR_5[1] + ATB_ADS$FORECAST_YR_6[1] + ATB_ADS$FORECAST_YR_7[1] + ATB_ADS$FORECAST_YR_8[1] + ATB_ADS$FORECAST_YR_9[1] +
                               ATB_ADS$FORECAST_YR_10[1] + ATB_ADS$FORECAST_YR_11[1] + ATB_ADS$FORECAST_YR_12[1] + ATB_ADS$FORECAST_YR_13[1] + ATB_ADS$FORECAST_YR_14[1] +
                               ATB_ADS$FORECAST_YR_15[1] + ATB_ADS$FORECAST_YR_16[1] + ATB_ADS$FORECAST_YR_17[1] + ATB_ADS$FORECAST_YR_18[1] + ATB_ADS$FORECAST_YR_19[1] +
                               ATB_ADS$FORECAST_YR_20[1] + ATB_ADS$FORECAST_YR_21[1] + ATB_ADS$FORECAST_YR_22[1] + ATB_ADS$FORECAST_YR_23[1] + ATB_ADS$FORECAST_YR_24[1] +
                               ATB_ADS$FORECAST_YR_25[1] + ATB_ADS$FORECAST_YR_26[1] + ATB_ADS$FORECAST_YR_27[1] + ATB_ADS$FORECAST_YR_28[1] + ATB_ADS$FORECAST_YR_29[1] + 
                               ATB_ADS$FORECAST_YR_30[1])
        
        infoBox(
          "Total Forecast", paste0( total_forcast), icon = icon("cogs"),
          color = "blue", fill = TRUE
        )
      })
      
      ############## Code for Scenario- Optimal
      Original_optimal <- data.frame()
      print("Original optimal")
      
      for (jj in (1:nrow(ATB_ADS))) {
        
        cat("\nPart Number: ",jj," : ", ATB_ADS[jj,1])
        final_NPV_list <- 0
        Optimal_year_count_list <- 1
        LTBQ_list <- 0
        Year_list <- c()
        FCST_list <- c()
        NPV_CR_list <- c()
        Revenue_CR_list <- c()
        Revenue_list <- c()
        Expense_list <- c()
        Storage_cost_CR_list <- c()
        Freight_cost_CR_list <- c()
        Processing_cost_CR_list <- c()
        
        transport_cost <- c()
        offsite_transport_cost <- c()
        offsite_labor_cost <- c()
        process_cost <- c()
        packaging_cost <- c()
        
        Material_cost_CR_list <- c()
        Material_cost_list_non_npv <- c()
        Buy_quantity_list <- c()
        FCST_list1 <- c()
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        
        for(nn in (1:30)){
          FCST_list[nn] <- ATB_ADS[jj,(YI-1+nn)]
        }
        
        FCST_list[1] <- FCST_list[1] + ATB_ADS$CURRENT_YEAR[jj]
        
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1") # change 999
        
        for(nn in (1:30)){
          FCST_list1[nn] <- ATB_ADS[jj,(YI-1+nn)]
        }
        
        FCST_list1[1] <- FCST_list1[1] + ATB_ADS$CURRENT_YEAR[jj] + ATB_ADS$PROJECTED_SALES_CURR_YEAR[jj] 
        
        FCST_list <- Updated_FCST
        ###########
        Sum_Forecast <- sum(FCST_list)
        
        iam_weight <- ATB_ADS$IAM_FRACTION[jj]
        oes_weight <- ATB_ADS$OES_FRACTION[jj]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[jj]
        
        FCST_iam <- round(FCST_list * iam_weight, digits = 0)
        FCST_oes <- round(FCST_list * oes_weight, digits = 0)
        FCST_allied <- round(FCST_list * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
        
        Diff_FCST <- Sum_FCST - Sum_Forecast
        
        if(Sum_Forecast > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied!=0),1)
          } else
          {
            index <- 1
          }
        } else
        {
          index <- 1
        }
        
        if(length(index)==0)
        {
          index <- 1
        }
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
        {
          FCST_oes[index] <- FCST_oes[index] - Diff_FCST
          
        } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
        {
          FCST_iam[index] <- FCST_iam[index] - Diff_FCST
          
        } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
        {
          FCST_allied[index] <- FCST_allied[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied[index] <- 0
        }
        
        for(i in 1:30)
        {
          FCST_list[i] <- FCST_allied[i] + FCST_iam[i] + FCST_oes[i]
        }
        ###########
        
        for (nn in (1:30)) {
          Sum_Forecast_list <- sum(FCST_list[1:nn])
          BQ_list <- Sum_Forecast_list
          qty_list <- 0
          yr_qty_list <- c()
          
          if(nn > 1){
            for (ii in (1:(nn-1))) {
              ss <- ((BQ_list - sum(FCST_list[1:ii])) + (BQ_list - sum(FCST_list[1:(1+ii)])))/2
              qty_list <- qty_list + ss 
              yr_qty_list[ii+1] <- ss
            }
          }
          yr_qty_list[1] <- (2*BQ_list - FCST_list[1])/2        
          
          Total_storage_qty_list <- sum(yr_qty_list)
          
          Storage_Cost_list <- 0
          revenue_list <- 0
          revenue_list_non_npv <- 0
          revenue_iam <- 0
          revenue_oes <- 0
          revenue_allied <- 0
          
          for(kk in (1: (nn) ))
          {
            CR <- ((1-(0.15/12))^(kk*12))
            revenue_list <- revenue_list + (FCST_list[kk] * CR *((ATB_ADS$Dealer_Price_Allied_Export[jj] * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (ATB_ADS$Dealer_Price_OES[jj] * ATB_ADS$OES_FRACTION[jj]) + (ATB_ADS$Dealer_Price_IAM[jj] * ATB_ADS$IAM_FRACTION[jj]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam[kk] * CR * (ATB_ADS$Dealer_Price_IAM[jj]))
            revenue_oes <- revenue_oes + (FCST_oes[kk] * CR * (ATB_ADS$Dealer_Price_OES[jj]))
            revenue_allied <- revenue_allied + (FCST_allied[kk] * CR * (ATB_ADS$Dealer_Price_Allied_Export[jj]))
            
            revenue_list_non_npv <- revenue_list_non_npv + ((FCST_list[kk]) * ((ATB_ADS$Dealer_Price_Allied_Export[jj] * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (ATB_ADS$Dealer_Price_OES[jj] * ATB_ADS$OES_FRACTION[jj]) + (ATB_ADS$Dealer_Price_IAM[jj] * ATB_ADS$IAM_FRACTION[jj])))
            Storage_Cost_list <- Storage_Cost_list + ((yr_qty_list[kk])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[jj] * CR)
            
          }
          
          offsite_quantity <- ifelse((BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))) > 0, (BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))), 0)
          
          Offsite_trans_cost_list <- ATB_ADS$OFFSITE_TRANS_COST_PP[jj] * offsite_quantity
          Freight_cost_list <- ((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[jj] * BQ_list) + Offsite_trans_cost_list) * (1-(0.15/12))
          Offsite_labour_cost_list <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[jj])
          Total_Processing_cost_list <- ((ATB_ADS$ONSITE_PRCS_COST_PP[jj] * BQ_list) + Offsite_labour_cost_list) * (1-(0.15/12))
          
          Material_cost_list <- (ATB_ADS$LAST_COST[jj]*BQ_list)*(1-(0.15/12))
          
          Total_transport_cost <- (ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[jj] * BQ_list) * (1-(0.15/12))
          Total_offsite_transport_cost <- Offsite_trans_cost_list * (1-(0.15/12))
          Total_offsite_labor_cost <- Offsite_labour_cost_list * (1-(0.15/12))
          Total_process_cost<- ((ATB_ADS$ONSITE_PRCS_COST_PP[jj] - ATB_ADS$AVG_PCPP[jj]) * BQ_list) * (1-(0.15/12))
          Total_package_cost <- ATB_ADS$AVG_PCPP[jj] * BQ_list * (1-(0.15/12))
          
          Material_cost_list_non <- (ATB_ADS$LAST_COST[jj]*BQ_list)
          
          Total_Expense_list <- Storage_Cost_list + Freight_cost_list + Total_Processing_cost_list + Material_cost_list + ATB_ADS$Setup_cost[jj] + ATB_ADS$Additional_cost[jj]
          revenue_list <- revenue_iam + revenue_oes + revenue_allied
          
          NPV_with_capital_rate_list <- revenue_list - Total_Expense_list
          Year_list[nn] <- nn
          NPV_CR_list[nn] <- NPV_with_capital_rate_list
          Expense_list[nn] <- Total_Expense_list
          Revenue_CR_list[nn] <- revenue_list
          Revenue_list[nn] <- revenue_list_non_npv
          Storage_cost_CR_list[nn] <- Storage_Cost_list
          Freight_cost_CR_list[nn] <- Freight_cost_list
          Processing_cost_CR_list[nn] <- Total_Processing_cost_list
          Material_cost_CR_list[nn] <- Material_cost_list
          Material_cost_list_non_npv[nn] <- Material_cost_list_non
          Buy_quantity_list[nn] <- BQ_list
          
          transport_cost[nn] <- Total_transport_cost
          offsite_transport_cost[nn] <- Total_offsite_transport_cost
          offsite_labor_cost[nn] <- Total_offsite_labor_cost
          process_cost[nn] <- Total_process_cost
          packaging_cost[nn] <- Total_package_cost
          
          if(NPV_with_capital_rate_list>0) {
            if(final_NPV_list<NPV_with_capital_rate_list){
              final_NPV_list <- NPV_with_capital_rate_list
              Optimal_year_count_list <- nn
              LTBQ_list <- BQ_list
              Total_Expense_NPV_list <- Total_Expense_list
              Revenue_NPV_list <- revenue_list
              Revenue_non_NPV_list <- revenue_list_non_npv
              Storage_cost_NPV_list <- Storage_Cost_list
              Freight_cost_NPV_list <- Freight_cost_list
              Processing_cost_NPV_list <- Total_Processing_cost_list
              Material_cost_NPV_list <- Material_cost_list
              Material_cost_NPV_list_non_npv <- Material_cost_list_non
              transport_cost_list <- Total_transport_cost
              offsite_transport_cost_list <- Total_offsite_transport_cost
              offsite_labor_cost_list <- Total_offsite_labor_cost
              process_cost_list <- Total_process_cost
              package_cost_list <- Total_package_cost
              
            }
          } else if((nn==1) && (NPV_with_capital_rate_list<=0)) {
            Optimal_year_count_list <- 0
            Total_Expense_NPV_list <- Expense_list[1]
            Revenue_NPV_list <- Revenue_CR_list[1]
            Revenue_non_NPV_list <- Revenue_list[1]
            Storage_cost_NPV_list <- Storage_cost_CR_list[1]
            Freight_cost_NPV_list <- Freight_cost_CR_list[1]
            Processing_cost_NPV_list <- Processing_cost_CR_list[1]
            Material_cost_NPV_list <- Material_cost_CR_list[1]
            Material_cost_NPV_list_non_npv <- Material_cost_list_non_npv[1]
            
            transport_cost_list <- transport_cost[1]
            offsite_transport_cost_list <- offsite_transport_cost[1]
            offsite_labor_cost_list <- offsite_labor_cost[1]
            process_cost_list <- process_cost[1]
            package_cost_list <- packaging_cost[1]
            
          }
        }
        
        if(offsite_transport_cost_list < 0 )
        {
          offsite_transport_cost_list <- 0
        }
        if(offsite_labor_cost_list < 0)
        {
          offsite_labor_cost_list <- 0
        }
        
        LTBQ_list <- LTBQ_list - ATB_ADS$TOTAL_INVENTORY[jj]
        
        if(LTBQ_list <= 0)
        {
          LTBQ_list = 0
        }
        Extended_optimal_buy_cost <- LTBQ_list * ATB_ADS$LAST_COST[jj]
        
        Original_optimal <- data.frame(lapply(Original_optimal, as.character), stringsAsFactors=FALSE)
        Original_optimal <- rbind(Original_optimal, c(ATB_ADS[jj,1],Storage_cost_NPV_list,Freight_cost_NPV_list,Processing_cost_NPV_list,
                                                      Material_cost_NPV_list,Total_Expense_NPV_list,Revenue_NPV_list,final_NPV_list,
                                                      Optimal_year_count_list,LTBQ_list, Revenue_non_NPV_list, Material_cost_NPV_list_non_npv,
                                                      transport_cost_list, offsite_transport_cost_list, offsite_labor_cost_list, process_cost_list,
                                                      package_cost_list, ATB_ADS$Setup_cost[jj], Extended_optimal_buy_cost))
      }
      colnames(Original_optimal) <- c("Part_Nbr","Optimal_Storage_Cost","Optimal_Transportation_Cost","Optimal_Processing_Cost",
                                      "Optimal_Material_Cost","Optimal_Expense","Optimal_Revenue","Optimal_NPV",
                                      "Optimal_year_count","Optimal_ATB_Quantity", 
                                      "Optimal_Revenue_non_npv", "Optimal_Material_cost_non_npv", "Optimal_Total_transport_cost",
                                      "Optimal_Total_offsite_transport_cost","Optimal_Total_offsite_labor_cost",
                                      "Optimal_Total_process_cost", "Optimal_Packaging_cost", "Optimal_setup_cost", "Extended_optimal_buy_cost")
      
      Original_optimal <- data.frame(lapply(Original_optimal, as.character), stringsAsFactors=FALSE)
      Original_optimal <- data.frame(lapply(Original_optimal, as.numeric), stringsAsFactors=FALSE)
      Original_optimal <- Original_optimal %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      Original_optimal$Part_Nbr <- str_pad(Original_optimal$Part_Nbr, width=8, side="left", pad="0")
      
      Original_optimal[,2:19] <- 0
      FCST_demand <- FCST_list
      Year_demand <- Year_list
      
      
      print("Original Optimal done")
      
      incProgress(1/5, detail = "Running Calculations")
      
      ################# Code for Scenario- Current    
      Original_current <- data.frame()
      
      for(j in (1:nrow(ATB_ADS)))
      {
        cat("\nPart Number: ",j," : ", ATB_ADS[j,1])
        FCST <- c()
        FCST_iam <- c()
        FCST_oes <- c()
        FCST_allied <- c()
        
        Curr_Inv <- ATB_ADS$TOTAL_INVENTORY[j]
        
        Revenue <- c()
        Revenue_Allied <- c()
        Revenue_OES <- c()
        Revenue_IAM <- c()
        
        ATB_ADS$STD_PACK_QTY[j] <- ifelse(ATB_ADS$STD_PACK_QTY[j] == 0, 1, ATB_ADS$STD_PACK_QTY[j])
        
        Revenue_non_npv <- c()
        Revenue_non_npv_Allied <- c()
        Revenue_non_npv_OES <- c()
        Revenue_non_npv_IAM <- c()
        
        AMD <- c()
        AMD_iam <- c()
        AMD_oes <- c()
        AMD_allied <- c()
        
        First_buy <- 0
        Last_sale <- 0
        Last_buy <- 0
        flag <- 0
        flag_last_buy <- 0
        
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        for(n in (1:30)){
          FCST[n] <- ATB_ADS[j,(YI-1+n)]
          Revenue[n] <- 0
          Revenue_Allied[n] <- 0
          Revenue_OES[n] <- 0
          Revenue_IAM[n] <- 0
          
          Revenue_non_npv[n] <- 0
          Revenue_non_npv_Allied[n] <- 0
          Revenue_non_npv_OES[n] <- 0
          Revenue_non_npv_IAM[n] <- 0
          
        }
        
        FCST[1] <- ATB_ADS$CURRENT_YEAR[j] + FCST[1]
        FCST <- Updated_FCST
        
        Total_FCST <- sum(FCST)
        
        if(FCST[1] != 0)
        {
          First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
        } else
        {
          First_buy <- 0
        }
        
        for(i in 1:30)
        {
          if(FCST[i] == 0 & flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
            flag = 1
          } 
        }
        if(flag != 1)
        {
          Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
        }
        
        ###########          
        
        iam_weight <- ATB_ADS$IAM_FRACTION[j]
        oes_weight <- ATB_ADS$OES_FRACTION[j]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
        
        FCST_iam <- round(FCST * iam_weight, digits = 0)
        FCST_oes <- round(FCST * oes_weight, digits = 0)
        FCST_allied <- round(FCST * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
        
        Diff_FCST <- Sum_FCST - Total_FCST
        
        
        if(Total_FCST > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied!=0),1)
          } else
          {
            index <- 1
          }
        } else
        {
          index <- 1
        }
        
        if(length(index)==0)
        {
          index <- 1
        }
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
        {
          FCST_oes[index] <- FCST_oes[index] - Diff_FCST
          
        } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
        {
          FCST_iam[index] <- FCST_iam[index] - Diff_FCST
          
        } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
        {
          FCST_allied[index] <- FCST_allied[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied[index] <- 0
        }
        
        ###########          
        for(n in (1:30)){
          AMD[n] <- FCST[n]/12
          AMD_oes[n] <- FCST_oes[n] / 12
          AMD_iam[n] <- FCST_iam[n] / 12
          AMD_allied[n] <- FCST_allied[n] / 12
        }
        
        for(k in 1:30)
        {
          CR <- ((1-(0.15/12))^(k*12))
          Revenue[k] <- Revenue[k] + (FCST[k] * CR * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j])))
          
          Revenue_Allied[k] <- Revenue_Allied[k] + (FCST_allied[k] * CR * (ATB_ADS$Dealer_Price_Allied_Export[j]))
          Revenue_OES[k] <- Revenue_OES[k] + (FCST_oes[k] * CR * (ATB_ADS$Dealer_Price_OES[j]))
          Revenue_IAM[k] <- Revenue_IAM[k] + (FCST_iam[k] * CR * (ATB_ADS$Dealer_Price_IAM[j]))
          
          Revenue_non_npv[k] <- Revenue_non_npv[k] + (FCST[k] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j])))
          Revenue_non_npv_Allied[k] <- Revenue_non_npv_Allied[k] + (FCST_allied[k] * (ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
          Revenue_non_npv_OES[k] <- Revenue_non_npv_OES[k] + (FCST_oes[k] * (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]))
          Revenue_non_npv_IAM[k] <- Revenue_non_npv_IAM[k] + (FCST_iam[k] * (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))
          
        }
        
        Revenue_OES_non_npv_no_discount <- sum(FCST_oes) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
        Revenue_IAM_non_npv_no_discount <- sum(FCST_iam) * ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[j]
        Revenue_Allied_non_npv_no_discount <- sum(FCST_allied) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
        
        Revenue_OES_non_npv_discount <- sum(FCST_oes) * ATB_ADS$Dealer_Price_OES[j] 
        Revenue_IAM_non_npv_discount <- sum(FCST_iam) * ATB_ADS$Dealer_Price_IAM[j] 
        Revenue_Allied_non_npv_discount <- sum(FCST_allied) * ATB_ADS$Dealer_Price_Allied_Export[j]
        
        Revenue_Allied_discount <- sum(Revenue_Allied)
        Revenue_OES_discount <- sum(Revenue_OES)
        Revenue_IAM_discount <- sum(Revenue_IAM)
        
        year <- 0
        month <- 0
        get_demand <- 0
        
        for(i in 1:30)
        {
          get_demand = get_demand + FCST[i]
          if(Curr_Inv > get_demand)
          {
            year = year + 1
          } else if(Curr_Inv <= FCST[1])
          {
            remain = Curr_Inv
            
            year_remain = FCST[1] - remain
            
            month = 1
            demand_for_break_year = 0
            for(i in 1:12)
            {
              demand_for_break_year = demand_for_break_year + (FCST[1] / 12)
              if(remain > demand_for_break_year)
              {
                month = month + 1
              }
            }
            
            FCST[year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(year+1)])
            break()
          }
        }
        
        ###
        if(Curr_Inv > FCST[1] & year < 30)
        {
          remain <- Curr_Inv - sum(FCST[1:year])
          
          year_remain <- FCST[(year+1)] - remain
          
          month = 1
          demand_for_break_year = 0
          for(i in 1:12)
          {
            demand_for_break_year = demand_for_break_year + (FCST[year+1] / 12)
            if(remain > demand_for_break_year)
            {
              month = month+1
            }
          }
          
          FCST[year+1] <- remain
          Sum_Forecast <- sum(FCST[1:(year+1)])
        } else if(year >= 30)
        {
          remain <- Curr_Inv - sum(FCST[1:year])
          FCST[year+1] <- 0
          year_remain <- 0
          Sum_Forecast <- sum(FCST[1:(year + 1)])
          month <- 0
        }
        
        
        BQ <- ceiling(Curr_Inv)
        qty <- 0
        yr_qty <- c()
        
        for (i in (1:(year))) {
          storage_qty <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
          qty <- qty + storage_qty
          yr_qty[i+1] <- storage_qty
        }
        
        yr_qty[1] <- (2*BQ - FCST[1])/2        
        yr_qty[year + 2] <- 0
        
        Storage_Cost_Curr_Inv <- 0
        Storage_Cost_Curr_Inv_non_npv <- 0
        
        
        for(k in (1 : (year + 1)))
        {
          CR <- ((1-(0.15/12))^(k*12))
          Storage_Cost_Curr_Inv <- Storage_Cost_Curr_Inv + ((yr_qty[k])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
          Storage_Cost_Curr_Inv_non_npv <- Storage_Cost_Curr_Inv_non_npv + (yr_qty[k])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j]
          
        }
        
        offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
        
        Offsite_trans_cost_curr_inv <- ATB_ADS$OFFSITE_TRANS_COST_PP[j] * offsite_quantity
        transport_cost_curr_inv <- ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ * (1-(0.15/12))
        transport_cost_curr_inv_non_npv <- ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ 
        
        Freight_cost_curr_inv <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost_curr_inv) * (1-(0.15/12))
        Freight_cost_curr_inv_non_npv <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost_curr_inv)
        
        Offsite_labour_cost_curr_inv <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[j]) * (1-(0.15/12))
        Offsite_labour_cost_curr_inv_non_npv <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[j])
        
        process_cost_curr_inv <- (ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ * (1-(0.15/12))
        process_cost_curr_inv_non_npv <- (ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ
        
        package_cost_curr_inv <- ATB_ADS$AVG_PCPP[j] * BQ * (1-(0.15/12))  
        package_cost_curr_inv_non_npv <- ATB_ADS$AVG_PCPP[j] * BQ
        
        Total_Processing_cost_curr_inv <- (((ATB_ADS$ONSITE_PRCS_COST_PP[j]) * BQ) + Offsite_labour_cost_curr_inv) * (1-(0.15/12)) 
        Material_cost_curr_inv <- BQ * ATB_ADS$LAST_COST[j] * (1-(0.15/12)) 
        Material_cost_curr_inv_non_npv <- BQ * ATB_ADS$LAST_COST[j] 
        
        
        FCST[year+1] <- year_remain
        
        Adj_Dem <- c()
        BF_BQ <- c()
        Curr_Inv <- c()
        BQ <- c()
        Purchase_times <- c()
        Yearly_BQ <- c()
        Storage_Cost <- c()
        Storage_Cost_non_npv <- c()
        Offsite_Qty <- c()
        Freight_cost <- c()
        Freight_cost_non_npv <- c()
        transport_cost <- c()
        offsite_transport_cost <- c()
        transport_cost_non_npv <- c()
        offsite_transport_cost_non_npv <- c()
        Processing_cost <- c()
        offsite_labor_cost <- c()
        offsite_labor_cost_non_npv <- c()
        process_cost <- c()
        process_cost_non_npv <- c()
        package_cost <- c()
        package_cost_non_npv <- c()
        Material_cost <- c()
        Material_cost_non_npv <- c()
        All_Expense <- c()
        
        for(i in 1:year)
        {
          Adj_Dem[i] = 0
          BF_BQ[i] = 0
          Curr_Inv[i] = 0
          BQ[i] = 0
          Purchase_times[i] = 0
          Yearly_BQ[i] = 0
          Storage_Cost[i] = 0
          Storage_Cost_non_npv[i] = 0
          Offsite_Qty[i] = 0
          Freight_cost[i] = 0
          Freight_cost_non_npv[i] = 0
          transport_cost[i] = 0
          offsite_transport_cost[i] = 0
          transport_cost_non_npv[i] = 0
          offsite_transport_cost_non_npv[i] = 0
          Processing_cost[i] = 0
          offsite_labor_cost[i] = 0
          offsite_labor_cost_non_npv[i] = 0
          process_cost[i] = 0
          process_cost_non_npv[i] = 0
          package_cost[i] = 0
          package_cost_non_npv[i] = 0
          Material_cost[i] = 0
          Material_cost_non_npv[i] = 0
          All_Expense[i] = 0
        }
        
        Total_BQ <- 0
        
        if((year + 1) < 31)
        {
          Curr_Inv[(year + 1)] <- 0
          for(k in ((year + 1) : 30)){
            Adj_Dem[k] <- (FCST[k] - Curr_Inv[k])
            BF_BQ[k] <- ifelse(k == (year + 1),((ATB_ADS$BUY_FREQ[j]*(AMD[k]/4.33)) * (12-month)/12),(ATB_ADS$BUY_FREQ[j]*(((Adj_Dem[k])/12)/4.33)))
            
            BQ[k] <- ceiling(ifelse((Curr_Inv[k] < Adj_Dem[k]),(max(ATB_ADS$MINIMUM_BUY_QTY[j],ATB_ADS$STD_PACK_QTY[j],BF_BQ[k])), 0))
            Purchase_times[k] <- ifelse((BQ[k]!=0),(ceiling(Adj_Dem[k]/BQ[k])),0)
            Yearly_BQ[k] <- BQ[k] * Purchase_times[k]
            Curr_Inv[k+1] <- Yearly_BQ[k] - Adj_Dem[k]
            Storage_Cost[k] <- 0
            Storage_Cost_non_npv[k] <- 0
          }
          
          Total_BQ <- ceiling(sum(Yearly_BQ))
          scrap_amount <- ATB_ADS$TOTAL_INVENTORY[j] + Total_BQ - Total_FCST
          adjusment_factor <- Total_BQ%%ATB_ADS$STD_PACK_QTY[j]
          
          if(adjusment_factor > scrap_amount)
          {
            Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] + (ATB_ADS$STD_PACK_QTY[j] - Total_BQ%%ATB_ADS$STD_PACK_QTY[j])
            Total_BQ <- Total_BQ + (ATB_ADS$STD_PACK_QTY[j] - Total_BQ%%ATB_ADS$STD_PACK_QTY[j])
            
            BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
          } else if(adjusment_factor <= scrap_amount)
          {
            Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] - Total_BQ%%ATB_ADS$STD_PACK_QTY[j]
            Total_BQ <- Total_BQ - Total_BQ%%ATB_ADS$STD_PACK_QTY[j]
            
            BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
          }
          
          
          for(i in ((year + 1):30))
          {
            if(Yearly_BQ[i] == 0 & flag_last_buy != 1)
            {
              if(i != (year + 1))
              {
                Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                flag_last_buy = 1
              } else
              {
                Last_buy <- 0
                flag_last_buy = 1
              }
            } 
          }
          if(flag_last_buy != 1)
          {
            Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          
          for(k in ((year + 1):30))
          {
            CR <- ((1-(0.15/12))^(k*12))
            Storage_Cost[k] <- Storage_Cost[k] + ((BQ[k]*6) * ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
            Storage_Cost_non_npv[k] <- Storage_Cost_non_npv[k] + (BQ[k]*6 * ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j])
            
          }
          
          for(k in ((year + 1):30)){
            
            CR <- (1-(0.15/12))^(k*12)
            Offsite_Qty[k] <- ifelse((BQ[k] > (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),(BQ[k] - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),0)
            Freight_cost[k] <- ((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) + (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])) * Purchase_times[k] * CR
            Freight_cost_non_npv[k] <- ((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) + (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])) * Purchase_times[k]
            
            transport_cost[k] <- (ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) * Purchase_times[k] * CR
            offsite_transport_cost[k] <- (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])* Purchase_times[k] * CR
            transport_cost_non_npv[k] <- (ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j] * BQ[k]) * Purchase_times[k] 
            offsite_transport_cost_non_npv[k] <- (ATB_ADS$OFFSITE_TRANS_COST_PP[j] * Offsite_Qty[k])* Purchase_times[k]
            
            Processing_cost[k] <- ((ATB_ADS$ONSITE_PRCS_COST_PP[j] * BQ[k]) + (Offsite_Qty[k] * as.numeric(ATB_ADS$OFFSITE_LCPP[j]))) * Purchase_times[k] * CR
            
            offsite_labor_cost[k] <- (Offsite_Qty[k] * as.numeric(ATB_ADS$OFFSITE_LCPP[j])) * Purchase_times[k] * CR
            offsite_labor_cost_non_npv[k] <- (Offsite_Qty[k] * as.numeric(ATB_ADS$OFFSITE_LCPP[j])) * Purchase_times[k]
            
            process_cost[k] <- ((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ[k]) * Purchase_times[k] * CR
            process_cost_non_npv[k] <- ((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ[k]) * Purchase_times[k]
            
            package_cost[k] <- ATB_ADS$AVG_PCPP[j] * BQ[k] * CR * Purchase_times[k]
            package_cost_non_npv[k] <- ATB_ADS$AVG_PCPP[j] * BQ[k] * Purchase_times[k]
            
            Material_cost[k] <- (ATB_ADS$LAST_COST[j] * BQ[k]) * Purchase_times[k] * CR
            Material_cost_non_npv[k] <- (ATB_ADS$LAST_COST[j] * BQ[k]) * Purchase_times[k]
            All_Expense[k] <- Storage_Cost[k] + Freight_cost[k] + Processing_cost[k] + Material_cost[k]
            
          }
        } else
        {
          Last_buy <- 0
        }
        
        scrap_amount <- ATB_ADS$TOTAL_INVENTORY[j] + Total_BQ - Total_FCST
        
        Total_Storage_Cost_current <- sum(Storage_Cost) + Storage_Cost_Curr_Inv
        Total_Storage_Cost_current_non_npv <- sum(Storage_Cost_non_npv) + Storage_Cost_Curr_Inv_non_npv
        Total_Freight_cost_current <- sum(Freight_cost) + Freight_cost_curr_inv
        Total_Freight_cost_current_non_npv <- sum(Freight_cost_non_npv) + Freight_cost_curr_inv_non_npv
        Total_Processing_cost_current <-sum(Processing_cost) + Total_Processing_cost_curr_inv
        Total_Material_cost_current <- sum(Material_cost) + Material_cost_curr_inv
        Total_Material_cost_non_npv_current <- sum(Material_cost_non_npv) + Material_cost_curr_inv_non_npv
        Total_Revenue_current <- Revenue_OES_discount + Revenue_IAM_discount + Revenue_Allied_discount
        
        Total_Revenue_non_npv_current <- Revenue_OES_non_npv_discount + Revenue_IAM_non_npv_discount + Revenue_Allied_non_npv_discount
        
        Total_transport_cost <- sum(transport_cost) + transport_cost_curr_inv
        Total_offsite_transport_cost <- sum(offsite_transport_cost) + Offsite_trans_cost_curr_inv
        Total_transport_cost_non_npv <- sum(transport_cost_non_npv) + transport_cost_curr_inv_non_npv
        Total_offsite_transport_cost_non_npv <- sum(offsite_transport_cost_non_npv) + Offsite_trans_cost_curr_inv
        
        Total_offsite_labor_cost <- sum(offsite_labor_cost) + Offsite_labour_cost_curr_inv
        Total_offsite_labor_cost_non_npv <- sum(offsite_labor_cost_non_npv) + Offsite_labour_cost_curr_inv_non_npv
        
        Total_process_cost <- sum(process_cost) + process_cost_curr_inv
        Total_process_cost_non_npv <- sum(process_cost_non_npv) + process_cost_curr_inv_non_npv
        Total_package_cost <- sum(package_cost) + package_cost_curr_inv
        Total_package_cost_non_npv <- sum(package_cost_non_npv) + package_cost_curr_inv_non_npv
        
        Total_Expense_current <- Total_Storage_Cost_current + Total_Freight_cost_current + Total_process_cost + Total_package_cost + Total_offsite_labor_cost + Total_Material_cost_current  + ATB_ADS$Setup_cost[j] + ATB_ADS$Additional_cost[j]
        Total_Expense_current_non_npv <- Total_Storage_Cost_current_non_npv + Total_Freight_cost_current_non_npv + Total_Material_cost_non_npv_current + Total_offsite_labor_cost_non_npv + Total_package_cost_non_npv + Total_process_cost_non_npv + ATB_ADS$Setup_cost[j] + ATB_ADS$Additional_cost[j]
        
        Total_NPV <- Total_Revenue_current - Total_Expense_current
        Total_NPV_non_npv <-  Total_Revenue_non_npv_current - Total_Expense_current_non_npv
        Extended_purchase_cost <- ATB_ADS$Entered_Buy_Qty[j] * ATB_ADS$LAST_COST[j]
        
        Original_current <- data.frame(lapply(Original_current, as.character), stringsAsFactors=FALSE)
        
        Original_current <- rbind(Original_current, c(ATB_ADS[j,1],Total_Storage_Cost_current,Total_Storage_Cost_current_non_npv, Total_Freight_cost_current, 
                                                      Total_Freight_cost_current_non_npv, Total_Processing_cost_current,
                                                      Total_Material_cost_current,Total_Expense_current,Total_Expense_current_non_npv, Total_Revenue_current,
                                                      Total_NPV,Total_NPV_non_npv, Total_BQ,Total_FCST, 
                                                      Total_Material_cost_non_npv_current, Total_Revenue_non_npv_current, Total_transport_cost,Total_transport_cost_non_npv, Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,
                                                      Total_offsite_labor_cost, Total_offsite_labor_cost_non_npv, Total_process_cost,Total_process_cost_non_npv,
                                                      ATB_ADS$Setup_cost[j], First_buy, Last_sale,
                                                      Last_buy, Total_package_cost, Total_package_cost_non_npv, scrap_amount, ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j],
                                                      ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[j],
                                                      ATB_ADS$Discount_iam_percent[j], ATB_ADS$Discount_oes_percent[j] ,ATB_ADS$Discount_allied_export_percent[j],
                                                      ATB_ADS$Dealer_Price_IAM[j], ATB_ADS$Dealer_Price_OES[j], ATB_ADS$Dealer_Price_Allied_Export[j],
                                                      Revenue_OES_non_npv_no_discount, Revenue_IAM_non_npv_no_discount, Revenue_Allied_non_npv_no_discount,
                                                      Revenue_OES_non_npv_discount, Revenue_IAM_non_npv_discount, Revenue_Allied_non_npv_discount, Revenue_Allied_discount,
                                                      Revenue_OES_discount, Revenue_IAM_discount, ATB_ADS$Entered_Buy_Qty[j], Extended_purchase_cost,
                                                      ATB_ADS$Additional_cost[j]))
        
      }
      
      colnames(Original_current) <- c("Part_Nbr","Storage_Cost","Storage_Cost_non_npv", "Transportation_cost", "Transportation_cost_non_npv",
                                      "Processing_cost","Part_cost","Expense", "Expense_non_npv", "Revenue", "NPV", "Profit_Non_NPV",
                                      "Buy_Quantity","Total_Forecast", "Material_cost_non_npv", "Revenue_non_npv","Total_transport_cost", "Total_transport_cost_non_npv",
                                      "Total_offsite_transport_cost","Total_offsite_transport_cost_non_npv","Total_offsite_labor_cost", "Total_offsite_labor_cost_non_npv", 
                                      "Total_process_cost", "Total_process_cost_non_npv", "Setup_cost", "First_buy",
                                      "Last_sale", "Last_buy", "Package_cost", "Package_cost_non_npv", "Scrap_amount", "Dealer_price", "WD_dealer_price", 
                                      "Discount_iam_percent", "Discount_oes_percent", "Discount_allied_export_percent",
                                      "Dealer_Price_IAM","Dealer_Price_OES", "Dealer_Price_Allied_Export", 'Revenue_OES_non_npv_no_discount', 
                                      'Revenue_IAM_non_npv_no_discount', 'Revenue_Allied_non_npv_no_discount',
                                      'Revenue_OES_non_npv_discount', 'Revenue_IAM_non_npv_discount', 'Revenue_Allied_non_npv_discount',
                                      'Revenue_Allied_discount', 'Revenue_OES_discount', 'Revenue_IAM_discount', "Entered_Buy_Quantity",
                                      "Extended_purchase_cost", "Additional_Cost")
      
      Original_current <- data.frame(lapply(Original_current, as.character), stringsAsFactors=FALSE)
      Original_current <- data.frame(lapply(Original_current, as.numeric), stringsAsFactors=FALSE)
      Original_current <- Original_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      Original_current$Part_Nbr <- str_pad(Original_current$Part_Nbr, width=8, side="left", pad="0")
      
      incProgress(1/5, detail = "Running Calculations")
      
      ########## Code for Selldown Calculation (Current)
      Selldown_NPV <- data.frame()
      
      
      for (j in (1:nrow(ATB_ADS))) {
        
        cat("\nPart Number: ",j," : ", ATB_ADS[j,1])
        final_NPV <- 0
        Optimal_year_count <- 1
        LTBQ <- 0
        Year <- c()
        FCST <- c()
        NPV_CR <- c()
        Revenue_CR <- c()
        Expense <- c()
        Storage_cost_CR <- c()
        Freight_cost_CR <- c()
        Processing_cost_CR <- c()
        Buy_quantity <- c()
        Buy_Qty <- ATB_ADS$TOTAL_INVENTORY[j]
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        
        for(n in (1:30)){
          FCST[n] <- ATB_ADS[j,(YI-1+n)]
        }
        
        FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
        
        FCST <- Updated_FCST
        p_to_get_year = 0
        q_to_get_demand = 0
        
        for(i in 1:30)
        {
          q_to_get_demand = q_to_get_demand + FCST[i]
          if(Buy_Qty > q_to_get_demand)
          {
            p_to_get_year = p_to_get_year + 1
          } else if(Buy_Qty <= FCST[1])
          {
            remain <- Buy_Qty
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
            break()
          }
        }
        
        if(Buy_Qty > FCST[1] & p_to_get_year < 30)
        {
          remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
          c = 1
          d = 0
          for(i in 1:12)
          {
            d = d + (FCST[p_to_get_year+1] / 12)
            if(remain > d)
            {
              c = c+1
            }
          }
          
          FCST[p_to_get_year+1] <- remain
          Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
        } else if(p_to_get_year >= 30)
        {
          remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
          FCST[p_to_get_year+1] <- 0
          Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
          c <- 0
        }
        
        if(p_to_get_year < 29)
        {
          for(i in ((p_to_get_year + 2) : 30))
          {
            FCST[i] <- 0
          }
        }
        
        ###########
        
        iam_weight <- ATB_ADS$IAM_FRACTION[j]
        oes_weight <- ATB_ADS$OES_FRACTION[j]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
        
        FCST_iam_selldown <- round(FCST * iam_weight, digits = 0)
        FCST_oes_selldown <- round(FCST * oes_weight, digits = 0)
        FCST_allied_selldown <- round(FCST * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam_selldown) + sum(FCST_oes_selldown) + sum(FCST_allied_selldown)
        
        Diff_FCST <- Sum_FCST - Sum_Forecast
        
        
        if(Buy_Qty > 0 & Sum_Forecast > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes_selldown!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam_selldown!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied_selldown!=0),1)
          } else
          {
            index <- 1
          }
        } else
        {
          index <- 1
        }
        
        if(length(index)==0)
        {
          index <- 1
        }
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes_selldown[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam_selldown[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied_selldown[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes_selldown[index] < FCST_iam_selldown[index] & FCST_oes_selldown[index] < FCST_allied_selldown[index] & oes_weight != 0)
        {
          FCST_oes_selldown[index] <- FCST_oes_selldown[index] - Diff_FCST
          
        } else if(FCST_iam_selldown[index] <= FCST_oes_selldown[index] & FCST_iam_selldown[index] <= FCST_allied_selldown[index] & iam_weight != 0)
        {
          FCST_iam_selldown[index] <- FCST_iam_selldown[index] - Diff_FCST
          
        } else if(FCST_allied_selldown[index] <= FCST_oes_selldown[index] & FCST_allied_selldown[index] <= FCST_iam_selldown[index] & allied_weight != 0)
        {
          FCST_allied_selldown[index] <- FCST_allied_selldown[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes_selldown[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam_selldown[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied_selldown[index] <- 0
        }
        
        ###########
        
        BQ <- Buy_Qty
        qty <- 0
        yr_qty <- c()
        
        for (i in (1:(p_to_get_year))) {
          s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
          qty <- qty + s
          yr_qty[i+1] <- s
        }
        
        yr_qty[1] <- (2*BQ - FCST[1])/2       
        yr_qty[p_to_get_year + 2] <- 0
        
        Total_storage_qty <- sum(yr_qty)
        
        Storage_Cost <- 0
        Storage_Cost_non_npv <- 0
        revenue <- 0
        revenue_iam <- 0
        revenue_oes <- 0
        revenue_allied <- 0
        
        revenue_non_npv <- 0
        revenue_non_npv_iam <- 0
        revenue_non_npv_oes <- 0
        revenue_non_npv_allied <- 0
        
        if(p_to_get_year > 0)
        {
          
          for(k in 1 : (p_to_get_year + 1))
          {
            CR <- ((1-(0.15/12))^(k*12))
            revenue <- revenue + (FCST[k] * CR * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
            revenue_iam <- revenue_iam + (FCST_iam_selldown[k] * CR * (ATB_ADS$Dealer_Price_IAM[j]))
            revenue_oes <- revenue_oes + (FCST_oes_selldown[k] * CR * (ATB_ADS$Dealer_Price_OES[j]))
            revenue_allied <- revenue_allied + (FCST_allied_selldown[k] * CR * (ATB_ADS$Dealer_Price_Allied_Export[j]))
            
            ##revenue_non_npv <- revenue_non_npv + (FCST[k] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
            revenue_non_npv_iam <- revenue_non_npv_iam + (FCST_iam_selldown[k] * (ATB_ADS$Dealer_Price_IAM[j]))
            revenue_non_npv_oes <- revenue_non_npv_oes + (FCST_oes_selldown[k] * (ATB_ADS$Dealer_Price_OES[j]))
            revenue_non_npv_allied <- revenue_non_npv_allied + (FCST_allied_selldown[k] * (ATB_ADS$Dealer_Price_Allied_Export[j]))
            revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
            
            Storage_Cost <- Storage_Cost + (yr_qty[k]*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
            Storage_Cost_non_npv <- Storage_Cost_non_npv + (yr_qty[k]*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] )
            
            
          }
        }
        
        if(p_to_get_year == 0)
        {
          
          for(k in (1:1))
          {
            CR <- ((1-(0.15/12))^(k*12))
            revenue <- revenue + ((FCST[1]) * CR * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
            revenue_iam <- revenue_iam + (FCST_iam_selldown[1] * CR * (ATB_ADS$Dealer_Price_IAM[j]))
            revenue_oes <- revenue_oes + (FCST_oes_selldown[1] * CR * (ATB_ADS$Dealer_Price_OES[j]))
            revenue_allied <- revenue_allied + (FCST_allied_selldown[1] * CR * (ATB_ADS$Dealer_Price_Allied_Export[j]))
            
            ##revenue_non_npv <- revenue_non_npv + (FCST[1] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
            revenue_non_npv_iam <- revenue_non_npv_iam + (FCST_iam_selldown[1] * (ATB_ADS$Dealer_Price_IAM[j]))
            revenue_non_npv_oes <- revenue_non_npv_oes + (FCST_oes_selldown[1] * (ATB_ADS$Dealer_Price_OES[j]))
            revenue_non_npv_allied <- revenue_non_npv_allied + (FCST_allied_selldown[1] * (ATB_ADS$Dealer_Price_Allied_Export[j]))
            revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
            
            Storage_Cost <- Storage_Cost + ((yr_qty[1]) * ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j] * CR)
            Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1])*ATB_ADS$MTH_SQ_FT_COST_PER_PEICE[j])
            
          }
        }
        
        offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
        
        Offsite_trans_cost <- ATB_ADS$OFFSITE_TRANS_COST_PP[j] * offsite_quantity
        Freight_cost <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost) * (1-(0.15/12))
        Freight_cost_non_npv <- (((ATB_ADS$ONSITE_TRANS_COST_PER_PIECE[j]) * BQ) + Offsite_trans_cost)
        
        Offsite_labour_cost <- offsite_quantity * as.numeric(ATB_ADS$OFFSITE_LCPP[j])
        Total_Processing_cost <- (((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
        Total_Processing_cost_non_npv <- (((ATB_ADS$ONSITE_PRCS_COST_PP[j] - ATB_ADS$AVG_PCPP[j]) * BQ) + Offsite_labour_cost)
        
        Packaging_cost <- ATB_ADS$AVG_PCPP[j] * BQ * (1-(0.15/12))
        Packaging_cost_non_npv <- ATB_ADS$AVG_PCPP[j] * BQ
        
        Material_cost <- BQ * ATB_ADS$LAST_COST[j] * (1-(0.15/12))
        Material_cost_non_npv <- BQ * ATB_ADS$LAST_COST[j]
        
        Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + ATB_ADS$Additional_cost[j] + Material_cost + Packaging_cost
        revenue <- revenue_iam + revenue_oes + revenue_allied
        NPV_with_capital_rate <- revenue - Total_Expense
        
        Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + Material_cost_non_npv + ATB_ADS$Additional_cost[j] + Packaging_cost_non_npv
        NPV_non_npv <- revenue_non_npv - Total_Expense_non_npv
        
        Selldown_NPV <- data.frame(lapply(Selldown_NPV, as.character), stringsAsFactors=FALSE)
        Selldown_NPV <- rbind(Selldown_NPV, c(ATB_ADS[j,1], Material_cost, Storage_Cost,Freight_cost,Total_Processing_cost,Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                              Material_cost_non_npv, Storage_Cost_non_npv, Freight_cost_non_npv, Total_Processing_cost_non_npv, Total_Expense_non_npv,
                                              revenue_non_npv, NPV_non_npv, revenue_iam, revenue_oes, revenue_allied, revenue_non_npv_iam, revenue_non_npv_oes,
                                              revenue_non_npv_allied, Packaging_cost, Packaging_cost_non_npv, ATB_ADS$TOTAL_INVENTORY[j]))
        
        colnames(Selldown_NPV) <- c("Part_Nbr","Selldown_Material_cost", "Selldown_Storage_Cost","Selldown_Freight_cost","Selldown_Processing_cost",
                                    "Total_Expense","Selldown_Revenue","Selldown_NPV","Total_BQ", "Selldown_Material_cost_non_npv", "Selldown_Storage_Cost_non_npv",
                                    "Selldown_Freight_cost_non_npv", "Selldown_Processing_cost_non_npv", "Total_Expense_non_npv", "Selldown_Revenue_non_npv",
                                    "Selldown_NPV_non_npv", "Selldown_Revenue_IAM", "Selldown_Revenue_OES", "Selldown_Revenue_Allied", "Selldown_Revenue_non_npv_IAM",
                                    "Selldown_Revenue_non_npv_OES", "Selldown_Revenue_non_npv_Allied", "Selldown_Packaging_cost", "Selldown_Packaging_cost_non_npv",
                                    "Total_Inventory")
        
      }
      Selldown_NPV <- data.frame(lapply(Selldown_NPV, as.character), stringsAsFactors=FALSE)
      Selldown_NPV <- data.frame(lapply(Selldown_NPV, as.numeric), stringsAsFactors=FALSE)
      Selldown_NPV <- Selldown_NPV %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      Selldown_NPV$Part_Nbr <- str_pad(Selldown_NPV$Part_Nbr, width=8, side="left", pad="0")
      
      
      incProgress(1/5, detail = "Running Calculations")
      
      ########## Variation of Forecast Demand
      
      shinyjs::show("line2")
      output$line2 <- renderHighchart({
        
        graph2 <- data.frame(Year_demand, FCST_demand)
        graph2$Year <- as.numeric(as.character(Year_demand)) + as.numeric(strftime(Sys.Date(), "%Y"))
        graph2$FCST <- as.numeric(as.character(FCST_demand))
        
        
        highchart() %>% 
          hc_title(text="Variation of Forecast Demand (Forecee)") %>%
          hc_chart(type = "line") %>%
          hc_xAxis(title=list(text="Year"),categories= as.vector(graph2$Year))  %>%
          hc_yAxis(title=list(text="Forecast Demand"))  %>% 
          hc_add_theme(hc_theme_sandsignika()) %>%
          hc_add_series(name = "Demand", data = as.vector(graph2$FCST))
        
        
      })
      
      spl_1 <- Original_current
      spl_1$Part_Nbr <- str_pad(spl_1$Part_Nbr, width=8, side="left", pad="0")	  
      spl_2 <- Original_optimal 
      spl_2$Part_Nbr <- str_pad(spl_2$Part_Nbr, width=8, side="left", pad="0")
      spl_3 <- Selldown_NPV 
      spl_3$Part_Nbr <- str_pad(spl_3$Part_Nbr, width=8, side="left", pad="0")
      spl_x <- t_scenario_curr
      spl_12 <- merge(spl_1, spl_2, by = "Part_Nbr")
      spl_123 <- merge(spl_12, spl_3, by = "Part_Nbr")
      spl_123 <- merge(spl_123, spl_x, by = "Part_Nbr")
      spl_123$First_buy <- First_buy
      spl_123$Last_buy <- Last_buy
      spl_123$Last_sale <- Last_sale
      print("x1")
      pb_excel<-global_ads$df_data_ads_pb
      print("x2")
      finance_current_scenario_pb<-global_ads$df_data_ads_pb_orig
      print("x3")
      spl_123<-merge(spl_123, finance_current_scenario_pb[ ,c("Part_Nbr","flat_pb","disc_pb")], by = "Part_Nbr")
      print("x4")
      spl_123<-merge(spl_123, pb_excel[ ,c("Part_Nbr","ATB_Units","X210","X373")], by = "Part_Nbr")
      print("x5")
      spl_123 <- spl_123 %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                    Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                    Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                    Selldown_Revenue,Selldown_Revenue_non_npv,
                                    Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                    Total_Inventory,
                                    First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                    Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                    Optimal_Revenue, Optimal_Material_Cost,Optimal_setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                    Optimal_Storage_Cost,
                                    Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                    Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost,Dealer_Price,  Dealer_OES_Price, Dealer_Allied_Export_Price, # change 786
                                    WD_Price,  Dealer_IAM_Price,Discount_Percent_OES, Discount_Percent_Allied_Export,Discount_Percent_IAM, Material_Cost, MOQ,Standard_Pack,Setup_Cost_curr,Additional_Cost_curr,Monthly_square_feet_cpp,
                                    Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                    Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp,flat_pb,disc_pb,ATB_Units,X210)
      print("x6")
      spl_123$Part_Nbr <- str_pad(spl_123$Part_Nbr, width=8, side="left", pad="0")
      write.csv(spl_123, file = "current_scenario.csv", row.names = FALSE)
      print("x7")
      output$download_current_scenario <- downloadHandler(
        filename = function() { 
          paste("Part_view_Current_Scenario",".csv", sep="") 
        },
        content = function(file) {
          abc <- spl_123
          abc$Part_Nbr <- str_pad(abc$Part_Nbr, width=8, side="left", pad="0")
          abc <- data.frame(Part_Nbr = abc[,1],##change
                            lapply(abc[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                            lapply(abc[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                            lapply(abc[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(abc[,53] , big.mark=",", digits=0, format="f"),formatC(abc[,54] , big.mark=",", digits=2, format="f"), # change 786
                            lapply(abc[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                            lapply(abc[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                            paste("$", formatC(abc[,65] , big.mark=",", digits=0, format="f")),
                            lapply(abc[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                            lapply(abc[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                            abc[,80:83],
                            stringsAsFactors = FALSE)
          print("x8")
          colnames(abc) <- c("Part Number",
                             "NPV", "Selldown NPV","Selldown Non NPV",
                             "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                             "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                             "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                             "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                             "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                             "Current Inventory",
                             "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                             "Total Purchase", "Total Sales", "Optimal NPV",
                             "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                             "Optimal Storage Cost",
                             "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                             "Optimal ATB Quantity","Optimal payback period", "Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export", #change 786 
                             "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                             "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                             "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                             "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)","Simple payabck period","Discounted payback period","2 year payback ATB","2 year payback NPV")
          write.csv(abc, file)
          
        },
        contentType = "csv"
      )
      
      
      download_report <- spl_123
      download_report$Selected_scenario <- "None"
      
      download_report <- download_report %>% select(Part_Nbr,NPV, Selldown_NPV,Selldown_NPV_non_npv,
                                                    Revenue,Revenue_non_npv,Part_cost,Material_cost_non_npv, Setup_cost, Total_transport_cost,Total_transport_cost_non_npv, Storage_Cost,Storage_Cost_non_npv,
                                                    Total_process_cost,Total_process_cost_non_npv, Package_cost,Package_cost_non_npv, Total_offsite_labor_cost,Total_offsite_labor_cost_non_npv,Total_offsite_transport_cost,Total_offsite_transport_cost_non_npv,Additional_Cost,
                                                    Selldown_Revenue,Selldown_Revenue_non_npv,
                                                    Selldown_Material_cost,Selldown_Material_cost_non_npv, Selldown_Freight_cost,Selldown_Freight_cost_non_npv, Selldown_Storage_Cost,Selldown_Storage_Cost_non_npv, Selldown_Processing_cost,Selldown_Processing_cost_non_npv, Selldown_Packaging_cost,Selldown_Packaging_cost_non_npv,
                                                    Total_Inventory,
                                                    First_buy,Last_buy, Last_sale, Scrap_amount, Entered_Buy_Quantity,
                                                    Buy_Quantity, Total_Forecast  ,Optimal_NPV,
                                                    Optimal_Revenue, Optimal_Material_Cost,Optimal_setup_cost, Optimal_Total_transport_cost, Optimal_Total_offsite_transport_cost,
                                                    Optimal_Storage_Cost,
                                                    Optimal_Total_process_cost, Optimal_Packaging_cost, Optimal_Total_offsite_labor_cost,
                                                    Optimal_ATB_Quantity,X373,Extended_optimal_buy_cost,Extended_purchase_cost ,Dealer_Price,  Dealer_OES_Price, Dealer_Allied_Export_Price, # change 786 
                                                    WD_Price,  Dealer_IAM_Price,Discount_Percent_OES, Discount_Percent_Allied_Export,Discount_Percent_IAM, Material_Cost, MOQ,Standard_Pack,Setup_Cost_curr,Additional_Cost_curr,Monthly_square_feet_cpp,
                                                    Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                                    Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp, Selected_scenario,flat_pb,disc_pb,ATB_Units,X210)
      
      download_report_current <- download_report
      #download_report_current[,c(43:54)] <- 0 ##change
      
      report_update <- global_current_sce_down$df_data_current
      report_update$Part_Nbr <- str_pad(report_update$Part_Nbr, width=8, side="left", pad="0")
      report_update[report_update$Part_Nbr == input$Part_Number, 2:84] <- download_report_current[1, 2:84] ##change
      global_current_sce_down$df_data_current <- report_update
      
      ## Income Statement Report
      income_report_current <- c(1:52)
      income_report_current<- as.data.frame(income_report_current)
      income_report_current$Fields <-  c('Dealer Price', 'Wd price', 'Allied Price', 'Dealer discount %', 'Wd discount %', 'Allied Discount %', 'Net Dealer', 'Net Wd',
                                         'Net Allied',
                                         'Lifetime Revenue(Non NPV)',
                                         'Lifetime Revenue(NPV)',
                                         'Sell Down Revenue(Non NPV) - OES',
                                         'Sell Down Revenue(Non NPV) - IAM',
                                         'Sell Down Revenue(Non NPV) - Allied/Export',
                                         'Sell Down Revenue(Non NPV',
                                         'Selldown Revenue (NPV)',
                                         'Material Cost(Non NPV)',
                                         'Material Cost(NPV)',
                                         'Sell Down Material (Non Npv)',
                                         'Sell Down Material (NPV)',
                                         'Transportation Cost(NON NPV)',
                                         'Transportation Cost(NPV)',
                                         'Sell Down Transportation cost (Non NPV)',
                                         'Sell Down Transportation cost (NPV)',
                                         'Labor Cost(NON NPV)',
                                         'Labor Cost(NPV)',
                                         'Sell Down Labor (NON NPV)',
                                         'Sell Down Labor (NPV)',
                                         'Storage Cost (Non NPV)',
                                         'Storage Cost(NPV)',
                                         'Sell Down Storage(Non NPV)',
                                         'Sell Down Storage(NPV)',
                                         'Packaging Cost(NON NPV)',
                                         'Packaging Cost(NPV)',
                                         'Sell Down Packaging Cost (NON NPV)',
                                         'Sell Down Packaging Cost (NPV)',
                                         'Set up Cost (NON NPV)',
                                         'Setup Cost(NPV)',
                                         'Additional Cost($)',
                                         'Total Expense(NON NPV)',
                                         'Total Expense(NPV)',
                                         'Profit (Non NPV)',
                                         'NPV',
                                         'Selldown (non Npv)',
                                         'Selldown NPV',
                                         'National Inventory',
                                         'Total Purchase',
                                         'Total Inventory and Purchase',
                                         'Total Sales',
                                         'Scrap',
                                         'MOQ',
                                         'Standard Pack')
      
      sales_oes <- sum(FCST_oes)
      sales_iam <- sum(FCST_iam)
      sales_allied <- sum(FCST_allied)
      
      inventory_oes <- round(ATB_ADS$TOTAL_INVENTORY[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
      inventory_iam <- round(ATB_ADS$TOTAL_INVENTORY[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
      inventory_allied <- round(ATB_ADS$TOTAL_INVENTORY[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
      
      purchase_oes <- round(Original_current$Buy_Quantity[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
      purchase_iam <- round(Original_current$Buy_Quantity[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
      purchase_allied <- round(Original_current$Buy_Quantity[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
      
      ## Calculating the difference in sales, inventory and purchase before and after rounding
      diff_sales <- Original_current$Total_Forecast[1] - (sales_oes + sales_iam + sales_allied)
      diff_inventory <- ATB_ADS$TOTAL_INVENTORY[1] - (inventory_oes + inventory_iam + inventory_allied)
      diff_purchase <- ceiling(Original_current$Buy_Quantity[1]) - (purchase_oes + purchase_iam + purchase_allied)
      
      ## Calling function to adjust the rounding error in sales, purcahse and inventory
      sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
      sales_values <- unlist(sales_values)
      sales_oes <- sales_values[1]
      sales_iam <- sales_values[2]
      sales_allied <- sales_values[3]
      
      inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
      inventory_values <- unlist(inventory_values)
      inventory_oes <- inventory_values[1]
      inventory_iam <- inventory_values[2]
      inventory_allied <- inventory_values[3]
      
      purchase_values <- Round_fn(purchase_oes, purchase_iam, purchase_allied, diff_purchase)
      purchase_values <- unlist(purchase_values)
      purchase_oes <- purchase_values[1]
      purchase_iam <- purchase_values[2]
      purchase_allied <- purchase_values[3]
      
      purchase_inventory <- ceiling((ATB_ADS$TOTAL_INVENTORY[1] + Original_current$Buy_Quantity[1]))
      purchase_inventory_oes <- inventory_oes + purchase_oes
      purchase_inventory_iam <- inventory_iam + purchase_iam
      purchase_inventory_allied <- inventory_allied + purchase_allied
      income_report_current$income_report_current <- NULL
      
      income_report_current$Per_unit <- c(ATB_ADS$DEALER_PRICE_NO_DISCOUNT[1], ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[1], 
                                          ATB_ADS$DEALER_PRICE_NO_DISCOUNT[1], ATB_ADS$Discount_oes_percent[1], 
                                          ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                          Original_current$Revenue_OES_non_npv_discount[1], Original_current$Revenue_IAM_non_npv_discount[1], 
                                          Original_current$Revenue_Allied_non_npv_discount[1], 
                                          Original_current$Revenue_non_npv[1], Original_current$Revenue[1], Selldown_NPV$Selldown_Revenue_non_npv_OES,
                                          Selldown_NPV$Selldown_Revenue_non_npv_IAM, Selldown_NPV$Selldown_Revenue_non_npv_Allied,
                                          Selldown_NPV$Selldown_Revenue_non_npv[1],
                                          Selldown_NPV$Selldown_Revenue[1], ATB_ADS$LAST_COST[1], Original_current$Part_cost[1],
                                          ATB_ADS$LAST_COST[1], Selldown_NPV$Selldown_Material_cost[1], 
                                          Original_current$Transportation_cost_non_npv[1], Original_current$Transportation_cost[1], Selldown_NPV$Selldown_Freight_cost_non_npv[1],
                                          Selldown_NPV$Selldown_Freight_cost[1], 
                                          (Original_current$Total_offsite_labor_cost_non_npv[1] + Original_current$Total_process_cost_non_npv[1]), 
                                          (Original_current$Total_offsite_labor_cost[1] + Original_current$Total_process_cost[1]),
                                          Selldown_NPV$Selldown_Processing_cost_non_npv[1], Selldown_NPV$Selldown_Processing_cost[1],
                                          Original_current$Storage_Cost_non_npv[1],
                                          Original_current$Storage_Cost[1], Selldown_NPV$Selldown_Storage_Cost_non_npv[1], Selldown_NPV$Selldown_Storage_Cost[1],
                                          Original_current$Package_cost_non_npv[1], Original_current$Package_cost[1], 
                                          Selldown_NPV$Selldown_Packaging_cost_non_npv[1],Selldown_NPV$Selldown_Packaging_cost[1],
                                          Original_current$Setup_cost[1], Original_current$Setup_cost[1],
                                          ATB_ADS$Additional_cost[1], Original_current$Expense_non_npv[1], Original_current$Expense[1],
                                          Original_current$Profit_Non_NPV[1], Original_current$NPV[1], Selldown_NPV$Selldown_NPV_non_npv[1],
                                          Selldown_NPV$Selldown_NPV[1],ATB_ADS$TOTAL_INVENTORY[1], ceiling(Original_current$Buy_Quantity[1]),
                                          ceiling((ATB_ADS$TOTAL_INVENTORY[1] + Original_current$Buy_Quantity[1])),
                                          Original_current$Total_Forecast[1], Original_current$Scrap_amount[1], ATB_ADS$MINIMUM_BUY_QTY[1],
                                          ATB_ADS$STD_PACK_QTY[1])
      
      income_report_current$Per_unit[c(10:11)] <- income_report_current$Per_unit[c(10:11)] / Original_current$Total_Forecast[1]
      
      div_oes <- ifelse(inventory_oes > sales_oes, sales_oes, inventory_oes)
      div_iam <- ifelse(inventory_iam > sales_iam, sales_iam, inventory_iam)
      div_allied <- ifelse(inventory_allied > sales_allied, sales_allied, inventory_allied)
      div_inventory <- ifelse(ATB_ADS$TOTAL_INVENTORY[1] > Original_current$Total_Forecast[1], Original_current$Total_Forecast[1], ATB_ADS$TOTAL_INVENTORY[1])
      
      income_report_current$Per_unit[c(15:16)] <- income_report_current$Per_unit[c(15:16)] / div_inventory
      income_report_current$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] <- income_report_current$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] / purchase_inventory
      income_report_current$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] <- income_report_current$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] / ATB_ADS$TOTAL_INVENTORY[1]
      income_report_current$Per_unit <- ifelse(is.nan(income_report_current$Per_unit), 0, income_report_current$Per_unit)
      
      income_report_current$OES <- 0
      income_report_current$IAM <- 0
      income_report_current$Allied_export <- 0
      income_report_current$Total <- 0
      
      income_report_current$OES[1] <- income_report_current$Per_unit[1] * sales_oes
      income_report_current$OES[4] <- (ATB_ADS$Discount_oes_percent/100) * income_report_current$OES[1]
      income_report_current$OES[7] <- income_report_current$OES[1] - income_report_current$OES[4]
      income_report_current$Per_unit[7] <- income_report_current$OES[7] / sales_oes
      income_report_current$OES[10] <-  income_report_current$OES[7]
      
      income_report_current$IAM[2] <- income_report_current$Per_unit[2] * sales_iam
      income_report_current$IAM[5] <- (ATB_ADS$Discount_iam_percent/100) * income_report_current$IAM[2]
      income_report_current$IAM[8] <- income_report_current$IAM[2] - income_report_current$IAM[5]
      income_report_current$Per_unit[8] <- income_report_current$IAM[8] / sales_iam
      income_report_current$IAM[10] <-  income_report_current$IAM[8]
      
      income_report_current$Allied_export[3] <- income_report_current$Per_unit[3] * sales_allied
      income_report_current$Allied_export[6] <- (ATB_ADS$Discount_allied_export_percent/100) * income_report_current$Allied_export[3]
      income_report_current$Allied_export[9] <- income_report_current$Allied_export[3] - income_report_current$Allied_export[6]
      income_report_current$Per_unit[9] <- income_report_current$Allied_export[9] / sales_allied
      income_report_current$Allied_export[10] <-  income_report_current$Allied_export[9]
      
      income_report_current$Per_unit[12] <- income_report_current$Per_unit[7]
      income_report_current$Per_unit[13] <- income_report_current$Per_unit[8]
      income_report_current$Per_unit[14] <- income_report_current$Per_unit[9]
      
      income_report_current$OES[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] <- income_report_current$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] * purchase_inventory_oes
      
      
      income_report_current$OES[11:16] <-c( Original_current$Revenue_OES_discount[1], (income_report_current$Per_unit[12] * div_oes),0,0,
                                            (income_report_current$Per_unit[12] * div_oes),Selldown_NPV$Selldown_Revenue_OES[1])
      
      income_report_current$OES[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_current$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_oes
      income_report_current$OES[44] <- income_report_current$OES[15] - sum(income_report_current$OES[c(19,23,27,31,35)])
      income_report_current$OES[45] <- income_report_current$OES[16] - sum(income_report_current$OES[c(20,24,28,32,36)])
      
      income_report_current$OES[c(46:49)] <- c(round(inventory_oes,digits = 0), round(purchase_oes,digits = 0), round(purchase_inventory_oes,digits = 0), round(sales_oes, digits = 0))
      
      income_report_current$OES[40] <- income_report_current$OES[17] + income_report_current$OES[21] + income_report_current$OES[25] + income_report_current$OES[29] + income_report_current$OES[33] + income_report_current$OES[37] + income_report_current$OES[39]
      income_report_current$OES[41] <- income_report_current$OES[18] + income_report_current$OES[22] + income_report_current$OES[26] + income_report_current$OES[30] + income_report_current$OES[34] + income_report_current$OES[38] + income_report_current$OES[39]
      
      income_report_current$OES[42] <- income_report_current$OES[10] - income_report_current$OES[40]
      income_report_current$OES[43] <- income_report_current$OES[11] - income_report_current$OES[41]
      
      ##
      income_report_current$IAM[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_current$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_iam
      income_report_current$IAM[11:16] <- c(Original_current$Revenue_IAM_discount[1], 0, (income_report_current$Per_unit[13] * div_iam), 0, (income_report_current$Per_unit[13] * div_iam), Selldown_NPV$Selldown_Revenue_IAM[1])
      
      income_report_current$IAM[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_current$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_iam
      income_report_current$IAM[44] <- income_report_current$IAM[15] - sum(income_report_current$IAM[c(19,23,27,31,35)])
      income_report_current$IAM[45] <- income_report_current$IAM[16] - sum(income_report_current$IAM[c(20,24,28,32,36)])
      
      income_report_current$IAM[c(46:49)] <- c(round(inventory_iam,digits = 0) , round(purchase_iam,digits = 0) , round(purchase_inventory_iam,digits = 0) , round(sales_iam, digits = 0))
      
      income_report_current$IAM[40] <- income_report_current$IAM[17] + income_report_current$IAM[21] + income_report_current$IAM[25] + income_report_current$IAM[29] + income_report_current$IAM[33] + income_report_current$IAM[37] + income_report_current$IAM[39]
      income_report_current$IAM[41] <- income_report_current$IAM[18] + income_report_current$IAM[22] + income_report_current$IAM[26] + income_report_current$IAM[30] + income_report_current$IAM[34] + income_report_current$IAM[38] + income_report_current$IAM[39]
      
      income_report_current$IAM[42] <- income_report_current$IAM[10] - income_report_current$IAM[40]
      income_report_current$IAM[43] <- income_report_current$IAM[11] - income_report_current$IAM[41]
      
      ####
      income_report_current$Allied_export[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_current$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_allied
      income_report_current$Allied_export[11:16] <- c(Original_current$Revenue_Allied_discount[1], 0,0, (income_report_current$Per_unit[14] * div_allied), (income_report_current$Per_unit[14] * div_allied),Selldown_NPV$Selldown_Revenue_Allied[1])
      
      income_report_current$Allied_export[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_current$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_allied
      income_report_current$Allied_export[44] <- income_report_current$Allied_export[15] - sum(income_report_current$Allied_export[c(19,23,27,31,35)])
      income_report_current$Allied_export[45] <- income_report_current$Allied_export[16] - sum(income_report_current$Allied_export[c(20,24,28,32,36)])
      
      income_report_current$Allied_export[c(46:49)] <- c(round(inventory_allied,digits = 0) , round(purchase_allied,digits = 0) , round(purchase_inventory_allied,digits = 0) , round(sales_allied, digits = 0))
      
      income_report_current$Allied_export[40] <- income_report_current$Allied_export[17] + income_report_current$Allied_export[21] + income_report_current$Allied_export[25] + income_report_current$Allied_export[29] + income_report_current$Allied_export[33] + income_report_current$Allied_export[37] + income_report_current$Allied_export[39]
      income_report_current$Allied_export[41] <- income_report_current$Allied_export[18] + income_report_current$Allied_export[22] + income_report_current$Allied_export[26] + income_report_current$Allied_export[30] + income_report_current$Allied_export[34] + income_report_current$Allied_export[38] + income_report_current$Allied_export[39]
      
      income_report_current$Allied_export[42] <- income_report_current$Allied_export[10] - income_report_current$Allied_export[40]
      income_report_current$Allied_export[43] <- income_report_current$Allied_export[11] - income_report_current$Allied_export[41]
      
      income_report_current$Per_unit <- ifelse(is.nan(income_report_current$Per_unit), 0, income_report_current$Per_unit)
      income_report_current$OES <- ifelse(is.nan(income_report_current$OES), 0, income_report_current$OES)
      income_report_current$IAM <- ifelse(is.nan(income_report_current$IAM), 0, income_report_current$IAM)
      income_report_current$Allied_export <- ifelse(is.nan(income_report_current$Allied_export), 0, income_report_current$Allied_export)
      income_report_current$Total <- ifelse(is.nan(income_report_current$Total), 0, income_report_current$Total)
      
      income_report_current$Total <- income_report_current$Allied_export + income_report_current$IAM + income_report_current$OES
      
      income_report_current$Total[50:52] <- income_report_current$Per_unit[50:52]
      
      pb_info <- global_ads$df_data_ads_pb
      pb_inform <- as.data.frame(pb_info)
      pb_inform$X <- NULL
      pb_inform$Part_Nbr<- str_pad(pb_inform$Part_Nbr, width=8, side="left", pad="0")
      ATB_ADS_pb<-pb_inform[which(pb_inform$Part_Nbr == input$Part_Number),]
      
      
      pb_orig_info <- global_ads$df_data_ads_pb_orig
      pb_orig_inform <- as.data.frame(pb_orig_info)
      pb_orig_inform$X <- NULL
      pb_orig_inform$Part_Nbr<- str_pad(pb_orig_inform$Part_Nbr, width=8, side="left", pad="0")
      ATB_ADS_pb_orig<-pb_orig_inform[which(pb_orig_inform$Part_Nbr == input$Part_Number),]
      
      incProgress(1/5, detail = "Running Calculations")
      
      ########## Result table for Current Scenario
      shinyjs::show("Curr_scen")
      output$Curr_scen <- renderHotable({
        
        revenue_non <- Original_current$Revenue_non_npv[1]
        material_non <- Original_current$Material_cost_non_npv[1]
        
        part_view <- 0
        part_view<- as.data.frame(part_view)
        part_view$part_view <- NULL
        part_view$Fields <- "NPV($)" 
        part_view[2,1]<- "Selldown NPV($)"       
        part_view[3,1]<- "Net"
        part_view[4,1]<- "Scrap"
        
        part_view[5,1]<- "First Buy"
        part_view[6,1]<- "Last Buy"
        part_view[7,1]<- "Last Sale"    
        part_view[8,1]<- "Lifetime Revenue(NPV)" 
        part_view[9,1]<- "Lifetime Revenue(Non NPV)"
        part_view[10,1]<- "Material Cost(NPV)"
        part_view[11,1]<- "Material Cost(Non NPV)"
        part_view[12,1]<- "Setup Cost(NPV)"
        part_view[13,1]<- "Transportation Cost(NPV)"
        part_view[14,1]<- "Labor Cost(NPV)"
        part_view[15,1]<- "Storage Cost(NPV)"
        part_view[16,1]<- "Packaging Cost(NPV)"
        part_view[17,1]<- "Offsite Labor Cost(NPV)"
        part_view[18,1]<- "Offsite Trans Cost(NPV)"
        part_view[19,1]<- "Total Expense(NPV)"
        part_view[20,1]<- "Optimal NPV"
        part_view[21,1]<- "Optimal Buy Qty"
        part_view[22,1]<- "Total Purchase"
        part_view[23,1]<- "Inventory and Purchase"
        part_view[24,1]<- 'Extended Optimal Buy Cost'
        part_view[25,1]<- 'Extended Buy Qty Cost'
        part_view[26,1]<- "ATB qty for 2 year payback"
        part_view[27,1]<- "Discounted payback period based on ATB qty"		  
        part_view[28,1] <- "Optimal payback"
        
        part_view$Values <- paste("$", formatC(Original_current$NPV[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[2, 2] <-  paste("$", formatC(Selldown_NPV$Selldown_NPV[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[3, 2] <-  paste("$", formatC((Original_current$NPV[1] - Selldown_NPV$Selldown_NPV[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[4, 2] <-  round(Original_current$Scrap_amount[1], 0)
        
        part_view[5, 2] <- as.character(round(First_buy,0))
        part_view[6, 2] <- as.character(round(Last_buy,0)) 
        part_view[7, 2] <- as.character(round(Last_sale,0))
        part_view[8, 2] <- paste("$", formatC(Original_current$Revenue[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[9, 2] <-  paste("$", formatC(revenue_non, big.mark=",", digits=2, format="f"), sep = " ")
        part_view[10, 2] <-  paste("$", formatC(Original_current$Part_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[11, 2] <-  paste("$", formatC(material_non, big.mark=",", digits=2, format="f"), sep = " ")
        part_view[12, 2] <- 0
        part_view[13, 2] <-  paste("$", formatC(Original_current$Total_transport_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[14, 2] <- paste("$", formatC((Original_current$Total_process_cost[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[15, 2] <-  paste("$", formatC(Original_current$Storage_Cost[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[16, 2] <-  paste("$", formatC((Original_current$Package_cost[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[17, 2] <-  paste("$", formatC(Original_current$Total_offsite_labor_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[18, 2] <-  paste("$", formatC(Original_current$Total_offsite_transport_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[19, 2] <-  paste("$", formatC(Original_current$Expense[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[20, 2] <-  paste("$", formatC(Original_optimal$Optimal_NPV[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[21, 2] <- paste(formatC(ceiling(Original_optimal$Optimal_ATB_Quantity[1]), big.mark=",", digits=0, format="f"))
        part_view[22,2] <-  paste(formatC(ceiling(Original_current$Buy_Quantity[1]), big.mark=",", digits=0, format="f"))
        part_view[23,2] <-  paste(formatC(ceiling((ATB_ADS$TOTAL_INVENTORY[1] + Original_current$Buy_Quantity[1])), big.mark=",", digits=0, format="f"))
        part_view[24, 2] <-  paste("$", formatC(Original_optimal$Extended_optimal_buy_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[25, 2] <-  paste("$", formatC(Original_current$Extended_purchase_cost[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[26, 2] <- round(as.numeric(ATB_ADS_pb$ATB_Units),0)
        part_view[27, 2] <- round(as.numeric(ATB_ADS_pb_orig$disc_pb),2)
        part_view[28, 2] <- round(as.numeric(ATB_ADS_pb$X373),2)
        
        part_view
        
      }, readOnly = TRUE)
      
      income_report_current$Per_unit[c(1:3, 7:16, 18, 20:45)] <- paste("$", formatC(income_report_current$Per_unit[c(1:3, 7:16, 18, 20:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_current$Per_unit[c(17, 19)] <- paste("$", formatC(income_report_current$Per_unit[c(17, 19)], big.mark=",", digits=7, format="f"), sep = " ")
      
      income_report_current$Per_unit[c(4:6)] <- paste(formatC(income_report_current$Per_unit[c(4:6)], big.mark=",", digits=20, format="f"), "%" , sep = " ")
      income_report_current$Per_unit[c(46:52)] <- paste(formatC(income_report_current$Per_unit[c(46:52)], big.mark=",", digits=20, format="f"))
      
      income_report_current$OES[c(1:45)] <- paste("$", formatC(income_report_current$OES[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_current$OES[c(46:52)] <- paste(formatC(as.numeric(income_report_current$OES[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_current$IAM[c(1:45)] <- paste("$", formatC(income_report_current$IAM[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_current$IAM[c(46:52)] <- paste(formatC(as.numeric(income_report_current$IAM[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_current$Allied_export[c(1:45)] <- paste("$", formatC(income_report_current$Allied_export[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_current$Allied_export[c(46:52)] <- paste(formatC(as.numeric(income_report_current$Allied_export[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_current$Total[c(1:45)] <- paste("$", formatC(income_report_current$Total[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_current$Total[c(46:52)] <- paste(formatC(income_report_current$Total[c(46:52)], big.mark=",", digits=20, format="f"))
      
      income_report_current$Per_unit[c(10,11,15,16,40:45)] <- "-"
      
      
      output$download_income_report <- downloadHandler(
        filename = function() {
          paste("Income_statement_report_current_scenario_",input$Part_Number, ".csv", sep="") 
        },
        content = function(file) {
          abc <- income_report_current
          
          write.csv(abc, file)
          
        }
      )
      
      
    })  # Closing for Messages and progress bar
    
    ########################### Starting of Scenario-1
    shinyjs::enable("downloadData_s_1")
    shinyjs::enable("download_income_report_s_1")
    
    part_info <- global_ads$df_data_ads
    
    part_inform <- as.data.frame(part_info)
    part_inform$X <- NULL
    part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
    
    ATB_ADS <- part_inform[which(part_inform$PART_NBR == input$Part_Number),]
    #----------------------------------------
    ####### Code for Scenario - 1    
    #----------------------------------------
    ######### Code for Scenario-1-Optimal    
    
    withProgress(message = 'Processing in Progress', value = 0, {
      
      
      DLR_Price_3 <- round(as.numeric(scenario_1$Values[1]), 4)
      wd_price <- round(as.numeric(scenario_1$Values[2]), 4)
      
      Dealer_Price_Allied_Export <- DLR_Price_3 * (1 - (ATB_ADS$Discount_allied_export_percent[1]/100))
      Dealer_Price_OES <- DLR_Price_3 * (1 - (ATB_ADS$Discount_oes_percent[1]/100))
      Dealer_Price_IAM <- wd_price * (1 - (ATB_ADS$Discount_iam_percent[1]/100))
      
      part_c_3 <- round(as.numeric(scenario_1$Values[3]) , 5)
      moq <- round(as.numeric(scenario_1$Values[4]) , 0)
      std_p <- round(as.numeric(scenario_1$Values[5]), 0)
      std_p <- ifelse(std_p == 0, 1, std_p)
      setup_cost <- round(as.numeric(scenario_1$Values[6]), 4)
      add_cost <- round(as.numeric(scenario_1$Values[7]), 4)
      Monthly_square_feet_cpp1 <- round(as.numeric(scenario_1$Values[8]), 7)
      Offsite_transportation_cpp1 <- round(as.numeric(scenario_1$Values[9]), 7)
      Redistribution_cpp1 <- round(as.numeric(scenario_1$Values[10]), 7)
      Offsite_Labor_cpp1 <- round(as.numeric(scenario_1$Values[11]), 7)
      Inbound_Labor_cpp1 <- round(as.numeric(scenario_1$Values[12]), 7)
      Outbound_Labor_cpp1 <- round(as.numeric(scenario_1$Values[13]), 7)
      Average_Labor_cpp1 <- round(as.numeric(scenario_1$Values[14]), 7)
      Average_Processing_cpp1 <- round(as.numeric(scenario_1$Values[15]), 7)
      Inbound_Transportation_cpp1 <- round(as.numeric(scenario_1$Values[16]), 7)
      Outbound_Transportation_cpp1 <- round(as.numeric(scenario_1$Values[17]), 7)
      
      Current_Inventory <-  round(as.numeric(scenario_1$Values[18]), 4)
      print("Values assigned")
      
      #ONSITE_TRANS_COST_PER_PIECE
      Onsite_trans_cpp1 <- Inbound_Transportation_cpp1 + Outbound_Transportation_cpp1 + Redistribution_cpp1
      
      #ONSITE_PRCS_COST_PP
      Onsite_procs_cpp1 <- Inbound_Labor_cpp1 + Outbound_Labor_cpp1 + Average_Labor_cpp1 + Average_Processing_cpp1
      
      ##### ATB Scenario calculation
      Scenario_1_optimal <- data.frame()
      NPV_Data_1 <- data.frame()
      First_buy <- 0
      Last_sale <- 0
      flag <- 0
      flag_last_buy <- 0
      Last_buy <- 0
      
      for (jj in (1:nrow(ATB_ADS))) {
        
        cat("\nsc_1_opt Part Number: ",jj," : ", ATB_ADS[jj,1])
        final_NPV_list <- 0
        Optimal_year_count_list <- 1
        LTBQ_list <- 0
        Year_list <- c()
        FCST_list <- c()
        NPV_CR_list <- c()
        Revenue_CR_list <- c()
        Revenue_list_non_npv <- c()
        Expense_list <- c()
        Storage_cost_CR_list <- c()
        Freight_cost_CR_list <- c()
        Processing_cost_CR_list <- c()
        
        transport_cost <- c()
        offsite_transport_cost <- c()
        offsite_labor_cost <- c()
        process_cost <- c()
        packaging_cost <- c()
        
        Material_cost_CR_list <- c()
        Buy_quantity_list <- c()
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        
        for(nn in (1:30)){
          FCST_list[nn] <- ATB_ADS[jj,(YI-1+nn)]
        }
        
        FCST_list[1] <- FCST_list[1] + ATB_ADS$CURRENT_YEAR[jj]
        FCST_list <- Updated_FCST
        
        if(FCST_list[1] != 0)
        {
          First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
        } else
        {
          First_buy <- 0
        }
        
        for(i in 1:30)
        {
          if(FCST_list[i] == 0 & flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
            flag = 1
          } 
        }
        if(flag != 1)
        {
          Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
        }
        
        ###########
        Sum_Forecast <- sum(FCST_list)
        
        iam_weight <- ATB_ADS$IAM_FRACTION[jj]
        oes_weight <- ATB_ADS$OES_FRACTION[jj]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[jj]
        
        FCST_iam <- round(FCST_list * iam_weight, digits = 0)
        FCST_oes <- round(FCST_list * oes_weight, digits = 0)
        FCST_allied <- round(FCST_list * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
        
        Diff_FCST <- Sum_FCST - Sum_Forecast
        
        
        if(Sum_Forecast > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied!=0),1)
          } else
          {
            index <- 1
          }
        } else
        {
          index <- 1
        }
        if(length(index)==0)
        {
          index <- 1
        }
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
        {
          FCST_oes[index] <- FCST_oes[index] - Diff_FCST
          
        } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
        {
          FCST_iam[index] <- FCST_iam[index] - Diff_FCST
          
        } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
        {
          FCST_allied[index] <- FCST_allied[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied[index] <- 0
        }
        
        for(i in 1:30)
        {
          FCST_list[i] <- FCST_allied[i] + FCST_iam[i] + FCST_oes[i]
        }
        ###########
        
        
        for (nn in (1:30)) {
          Sum_Forecast_list <- sum(FCST_list[1:nn])
          BQ_list <- Sum_Forecast_list
          qty_list <- 0
          yr_qty_list <- c()
          
          if(nn > 1){
            for (ii in (1:(nn-1))) {
              ss <- ((BQ_list - sum(FCST_list[1:ii])) + (BQ_list - sum(FCST_list[1:(1+ii)])))/2
              qty_list <- qty_list + ss 
              yr_qty_list[ii+1] <- ss
            }
          }
          yr_qty_list[1] <- (2*BQ_list - FCST_list[1])/2        
          
          Total_storage_qty_list <- sum(yr_qty_list)
          Storage_Cost_list <- 0
          revenue_list <- 0
          revenue_list_non_npv <- 0
          revenue_iam <- 0 
          revenue_oes <- 0
          revenue_allied <- 0
          
          
          for(kk in (1: (nn) ))
          {
            CR <- ((1-(0.15/12))^(kk*12))
            revenue_list <- revenue_list + (FCST_list[kk] * CR *((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam[kk] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes[kk] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied[kk] * CR * (Dealer_Price_Allied_Export))
            
            revenue_list_non_npv <- revenue_list_non_npv + ((FCST_list[kk]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj])))
            Storage_Cost_list <- Storage_Cost_list + ((yr_qty_list[kk])*Monthly_square_feet_cpp1 * CR)
            
          }
          
          offsite_quantity <- ifelse((BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))) > 0, (BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))), 0)
          
          Offsite_trans_cost_list <- Offsite_transportation_cpp1 * offsite_quantity
          Freight_cost_list <- ((Onsite_trans_cpp1 * BQ_list) + Offsite_trans_cost_list) * (1-(0.15/12))
          Offsite_labour_cost_list <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          Total_Processing_cost_list <- ((Onsite_procs_cpp1 * BQ_list) + Offsite_labour_cost_list) * (1-(0.15/12))
          
          
          Material_cost_list <- (part_c_3*BQ_list)*(1-(0.15/12))
          
          Total_transport_cost <- (Onsite_trans_cpp1 * BQ_list) * (1-(0.15/12))
          Total_offsite_transport_cost <- Offsite_trans_cost_list * (1-(0.15/12))
          Total_offsite_labor_cost <- Offsite_labour_cost_list * (1-(0.15/12))
          Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ_list) * (1-(0.15/12))
          Total_package_cost <- Average_Processing_cpp1 * BQ_list * (1-(0.15/12)) 
          
          Total_Expense_list <- Storage_Cost_list + Freight_cost_list + Total_Processing_cost_list + Material_cost_list + setup_cost + add_cost
          revenue_list <- revenue_iam + revenue_oes + revenue_allied
          
          NPV_with_capital_rate_list <- revenue_list - Total_Expense_list
          Year_list[nn] <- nn
          NPV_CR_list[nn] <- NPV_with_capital_rate_list
          Expense_list[nn] <- Total_Expense_list
          Revenue_CR_list[nn] <- revenue_list
          Revenue_list_non_npv[nn] <- revenue_list_non_npv
          Storage_cost_CR_list[nn] <- Storage_Cost_list
          Freight_cost_CR_list[nn] <- Freight_cost_list
          Processing_cost_CR_list[nn] <- Total_Processing_cost_list
          Material_cost_CR_list[nn] <- Material_cost_list
          Buy_quantity_list[nn] <- BQ_list
          
          
          transport_cost[nn] <- Total_transport_cost
          offsite_transport_cost[nn] <- Total_offsite_transport_cost
          offsite_labor_cost[nn] <- Total_offsite_labor_cost
          process_cost[nn] <- Total_process_cost
          packaging_cost[nn] <- Total_package_cost
          
          if(NPV_with_capital_rate_list>0) {
            
            if(final_NPV_list<NPV_with_capital_rate_list){
              
              final_NPV_list <- NPV_with_capital_rate_list
              Optimal_year_count_list <- nn
              LTBQ_list <- BQ_list
              Total_Expense_NPV_list <- Total_Expense_list
              Revenue_NPV_list <- revenue_list
              Revenue_NPV_list_non_npv <- revenue_list_non_npv
              Storage_cost_NPV_list <- Storage_Cost_list
              Freight_cost_NPV_list <- Freight_cost_list
              Processing_cost_NPV_list <- Total_Processing_cost_list
              Material_cost_NPV_list <- Material_cost_list
              
              transport_cost_list <- Total_transport_cost
              offsite_transport_cost_list <- Total_offsite_transport_cost
              offsite_labor_cost_list <- Total_offsite_labor_cost
              process_cost_list <- Total_process_cost
              package_cost_list <- Total_package_cost
            }
          } else if((nn==1) && (NPV_with_capital_rate_list<=0)) {
            
            Optimal_year_count_list <- 0
            Total_Expense_NPV_list <- Expense_list[1]
            Revenue_NPV_list <- Revenue_CR_list[1]
            Revenue_NPV_list_non_npv <- Revenue_list_non_npv[1]
            Storage_cost_NPV_list <- Storage_cost_CR_list[1]
            Freight_cost_NPV_list <- Freight_cost_CR_list[1]
            Processing_cost_NPV_list <- Processing_cost_CR_list[1]
            Material_cost_NPV_list <- Material_cost_CR_list[1]
            
            transport_cost_list <- transport_cost[1]
            offsite_transport_cost_list <- offsite_transport_cost[1]
            offsite_labor_cost_list <- offsite_labor_cost[1]
            process_cost_list <- process_cost[1]
            package_cost_list <- packaging_cost[1]
            
          }
        }
        if(offsite_transport_cost_list < 0 )
        {
          offsite_transport_cost_list <- 0
        }
        if(offsite_labor_cost_list < 0)
        {
          offsite_labor_cost_list <- 0
        }
        
        LTBQ_list <- LTBQ_list - Current_Inventory
        
        if(LTBQ_list <= 0)
        {
          LTBQ_list = 0
        }
        
        Extended_optimal_buy_cost <- LTBQ_list * part_c_3
        
        Material_cost_list_non_npv <- (Material_cost_NPV_list / (1-(0.15/12)))
        Scenario_1_optimal <- data.frame(lapply(Scenario_1_optimal, as.character), stringsAsFactors=FALSE)
        Scenario_1_optimal <- rbind(Scenario_1_optimal, c(ATB_ADS[jj,1],Storage_cost_NPV_list,Freight_cost_NPV_list,Processing_cost_NPV_list,
                                                          Material_cost_NPV_list,Total_Expense_NPV_list,Revenue_NPV_list,final_NPV_list,
                                                          Optimal_year_count_list,LTBQ_list,Revenue_NPV_list_non_npv, Material_cost_list_non_npv,
                                                          transport_cost_list, offsite_transport_cost_list, offsite_labor_cost_list, process_cost_list,
                                                          setup_cost, DLR_Price_3, Dealer_Price_OES, Dealer_Price_Allied_Export, wd_price,Dealer_Price_IAM,
                                                          ATB_ADS$Discount_iam_percent[jj], ATB_ADS$Discount_oes_percent[jj], ATB_ADS$Discount_allied_export_percent[jj],
                                                          package_cost_list, Extended_optimal_buy_cost, add_cost, Current_Inventory))
        
        NPV_Data_1 <- data.frame(ATB_ADS[jj,1],Year_list,FCST_list,Storage_cost_CR_list,Freight_cost_CR_list,Processing_cost_CR_list,Material_cost_CR_list,Buy_quantity_list,Expense_list,Revenue_CR_list,NPV_CR_list)
      }
      colnames(Scenario_1_optimal) <- c("Part_Nbr","Optimal_Storage_Cost_Scenario_1","Optimal_Transportation_Cost_Scenario_1",
                                        "Optimal_Processing_Cost_Scenario_1","Optimal_Material_Cost_Scenario_1","Optimal_Expense_Scenario_1",
                                        "Optimal_Revenue_Scenario_1","Optimal_NPV_Scenario_1","Optimal_year_count_Scenario_1","Optimal_ATB_Quantity_Scenario_1",
                                        "Optimal_Revenue_Non_Npv_Scenario_1", "Optimal_Material_cost_non_npv_Scenario_1", "Optimal_Total_transport_cost_Scenario_1",
                                        "Optimal_Total_offsite_transport_cost_Scenario_1","Optimal_Total_offsite_labor_cost_Scenario_1",
                                        "Optimal_Total_process_cost_Scenario_1", "Optimal_Setup_cost_Scenario_1","Proposed_Dealer_Price_1",
                                        "Dealer_Price_OES_1", "Dealer_Price_Allied_Export_1", "Proposed_Wd_Price_1", "Dealer_Price_IAM_1", 
                                        "Discount_iam_percent", "Discount_oes_percent", "Discount_allied_export_percent", "Optimal_Packaging_cost_Scenario_1",
                                        "Extended_optimal_buy_cost_1", "Additional_Cost_1", "Total_Inventory")
      
      Scenario_1_optimal <- data.frame(lapply(Scenario_1_optimal, as.character), stringsAsFactors=FALSE)
      Scenario_1_optimal <- data.frame(lapply(Scenario_1_optimal, as.numeric), stringsAsFactors=FALSE)
      Scenario_1_optimal <- Scenario_1_optimal %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      Scenario_1_optimal$Part_Nbr <- str_pad(Scenario_1_optimal$Part_Nbr, width=8, side="left", pad="0")
      
      incProgress(1/4, detail = "Running Calculations")
      
      
      
      ########## Code for Scenario-1: Current 
      if(input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
      {
        BQ_S1 <- as.numeric(ATB_ADS$Buy_Quantity_Scenario_1)
      } else
      {
        BQ_S1 <- NA
      }
      
      if(is.na(BQ_S1))
      {
        shinyjs::enable("download_income_report_s_1")
        Scenario_1_current <- data.frame()
        
        for(j in (1:nrow(ATB_ADS)))
        {
          cat("\nsc_1_cur Part Number: ",j," : ", ATB_ADS[j,1])
          FCST <- c()
          Curr_Inv <- round(as.numeric(scenario_1$Values[18]), 4)
          Curr_Inv_copy <- Curr_Inv
          Revenue <- c()
          Revenue_Allied <- c()
          Revenue_OES <- c()
          Revenue_IAM <- c()
          
          Revenue_non_npv <- c()
          
          AMD <- c()
          AMD_iam <- c()
          AMD_oes <- c()
          AMD_allied <- c()
          
          First_buy <- 0
          Last_sale <- 0
          Last_buy <- 0
          flag <- 0
          flag_last_buy <- 0
          
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
            Revenue[n] <- 0
            Revenue_Allied[n] <- 0
            Revenue_OES[n] <- 0
            Revenue_IAM[n] <- 0
            
            Revenue_non_npv[n] <- 0
          }
          
          FCST[1] <- ATB_ADS$CURRENT_YEAR[j] + FCST[1]
          FCST <- Updated_FCST
          
          Total_FCST <- sum(FCST)
          
          if(FCST[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          ###########          
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam <- round(FCST * iam_weight, digits = 0)
          FCST_oes <- round(FCST * oes_weight, digits = 0)
          FCST_allied <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Total_FCST
          
          if(Total_FCST > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          ###########          
          for(n in (1:30)){
            AMD[n] <- FCST[n]/12
            AMD_oes[n] <- FCST_oes[n] / 12
            AMD_iam[n] <- FCST_iam[n] / 12
            AMD_allied[n] <- FCST_allied[n] / 12
          }
          
          
          for(k in (1:30))
          {
            CR <- ((1-(0.15/12))^(k*12))
            Revenue[k] <- Revenue[k] + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
            
            Revenue_Allied[k] <- Revenue_Allied[k] + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
            Revenue_OES[k] <- Revenue_OES[k] + (FCST_oes[k] * CR * (Dealer_Price_OES))
            Revenue_IAM[k] <- Revenue_IAM[k] + (FCST_iam[k] * CR * (Dealer_Price_IAM))
            
            Revenue_non_npv[k] <- Revenue_non_npv[k] + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
            
          }
          
          Revenue_OES_non_npv_no_discount <- sum(FCST_oes) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
          Revenue_IAM_non_npv_no_discount <- sum(FCST_iam) * ATB_ADS$WD_DEALER_PRICE_NO_DISCOUNT[j]
          Revenue_Allied_non_npv_no_discount <- sum(FCST_allied) * ATB_ADS$DEALER_PRICE_NO_DISCOUNT[j]
          
          Revenue_OES_non_npv_discount <- sum(FCST_oes) * Dealer_Price_OES
          Revenue_IAM_non_npv_discount <- sum(FCST_iam) * Dealer_Price_IAM 
          Revenue_Allied_non_npv_discount <- sum(FCST_allied) * Dealer_Price_Allied_Export
          
          Revenue_Allied_discount <- sum(Revenue_Allied)
          Revenue_OES_discount <- sum(Revenue_OES)
          Revenue_IAM_discount <- sum(Revenue_IAM)
          
          year <- 0
          month <- 0
          get_demand <- 0
          
          for(i in 1:30)
          {
            get_demand = get_demand + FCST[i]
            if(Curr_Inv > get_demand)
            {
              year = year + 1
            } else if(Curr_Inv <= FCST[1])
            {
              remain = Curr_Inv
              
              year_remain = FCST[1] - remain
              
              month = 1
              demand_for_break_year = 0
              for(i in 1:12)
              {
                demand_for_break_year = demand_for_break_year + (FCST[1] / 12)
                if(remain > demand_for_break_year)
                {
                  month = month + 1
                }
              }
              
              FCST[year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(year+1)])
              break()
            }
          }
          
          ###
          if(Curr_Inv > FCST[1] & year < 30)
          {
            remain <- Curr_Inv - sum(FCST[1:year])
            
            year_remain <- FCST[(year+1)] - remain
            
            month = 1
            demand_for_break_year = 0
            for(i in 1:12)
            {
              demand_for_break_year = demand_for_break_year + (FCST[year+1] / 12)
              if(remain > demand_for_break_year)
              {
                month = month+1
              }
            }
            
            FCST[year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(year+1)])
          } else if(year >= 30)
          {
            remain <- Curr_Inv - sum(FCST[1:year])
            FCST[year+1] <- 0
            year_remain <- 0
            Sum_Forecast <- sum(FCST[1:(year + 1)])
            month <- 0
          }
          
          
          BQ <- ceiling(Curr_Inv)
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(year))) {
            storage_qty <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + storage_qty
            yr_qty[i+1] <- storage_qty
          }
          
          yr_qty[1] <- (2*BQ - FCST[1])/2        
          yr_qty[year + 2] <- 0
          
          Storage_Cost_Curr_Inv <- 0
          Storage_Cost_Curr_Inv_non_npv <- 0
          
          
          for(k in (1 : (year+1)))
          {
            CR <- ((1-(0.15/12))^(k*12))
            Storage_Cost_Curr_Inv <- Storage_Cost_Curr_Inv + ((yr_qty[k])* Monthly_square_feet_cpp1 * CR)
            Storage_Cost_Curr_Inv_non_npv <- Storage_Cost_Curr_Inv_non_npv + (yr_qty[k]) * Monthly_square_feet_cpp1
            
          }
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost_curr_inv <- Offsite_transportation_cpp1 * offsite_quantity
          transport_cost_curr_inv <- Onsite_trans_cpp1 * BQ * (1-(0.15/12)) 
          transport_cost_curr_inv_non_npv <- Onsite_trans_cpp1 * BQ 
          
          Freight_cost_curr_inv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv) * (1-(0.15/12))
          Freight_cost_curr_inv_non_npv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv)
          
          Offsite_labour_cost_curr_inv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1) * (1-(0.15/12))
          Offsite_labour_cost_curr_inv_non_npv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          
          process_cost_curr_inv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ * (1-(0.15/12))
          process_cost_curr_inv_non_npv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ
          
          package_cost_curr_inv <- Average_Processing_cpp1 * BQ * (1-(0.15/12))  
          package_cost_curr_inv_non_npv <- Average_Processing_cpp1 * BQ
          
          Total_Processing_cost_curr_inv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost_curr_inv) * (1-(0.15/12)) 
          Material_cost_curr_inv <- BQ * part_c_3 * (1-(0.15/12)) 
          Material_cost_curr_inv_non_npv <- BQ * part_c_3 
          
          
          FCST[year+1] <- year_remain
          
          Adj_Dem <- c()
          BF_BQ <- c()
          Curr_Inv <- c()
          BQ <- c()
          Purchase_times <- c()
          Yearly_BQ <- c()
          Storage_Cost <- c()
          Storage_Cost_non_npv <- c()
          Offsite_Qty <- c()
          Freight_cost <- c()
          Freight_cost_non_npv <- c()
          transport_cost <- c()
          offsite_transport_cost <- c()
          transport_cost_non_npv <- c()
          offsite_transport_cost_non_npv <- c()
          Processing_cost <- c()
          offsite_labor_cost <- c()
          offsite_labor_cost_non_npv <- c()
          process_cost <- c()
          process_cost_non_npv <- c()
          package_cost <- c()
          package_cost_non_npv <- c()
          Material_cost <- c()
          Material_cost_non_npv <- c()
          All_Expense <- c()
          
          for(i in 1:year)
          {
            Adj_Dem[i] = 0
            BF_BQ[i] = 0
            Curr_Inv[i] = 0
            BQ[i] = 0
            Purchase_times[i] = 0
            Yearly_BQ[i] = 0
            Storage_Cost[i] = 0
            Storage_Cost_non_npv[i] = 0
            Offsite_Qty[i] = 0
            Freight_cost[i] = 0
            Freight_cost_non_npv[i] = 0
            transport_cost[i] = 0
            offsite_transport_cost[i] = 0
            transport_cost_non_npv[i] = 0
            offsite_transport_cost_non_npv[i] = 0
            Processing_cost[i] = 0
            offsite_labor_cost[i] = 0
            offsite_labor_cost_non_npv[i] = 0
            process_cost[i] = 0
            process_cost_non_npv[i] = 0
            package_cost[i] = 0
            package_cost_non_npv[i] = 0
            Material_cost[i] = 0
            Material_cost_non_npv[i] = 0
            All_Expense[i] = 0
          }
          
          Total_BQ <- 0
          
          if((year + 1) < 31)
          {
            Curr_Inv[(year + 1)] <- 0
            for(k in ((year + 1) : 30)){
              Adj_Dem[k] <- (FCST[k] - Curr_Inv[k])
              BF_BQ[k] <- ifelse(k == (year + 1),((ATB_ADS$BUY_FREQ[j]*(AMD[k]/4.33)) * (12-month)/12),(ATB_ADS$BUY_FREQ[j]*(((Adj_Dem[k])/12)/4.33)))
              
              BQ[k] <- ceiling(ifelse((Curr_Inv[k] < Adj_Dem[k]),(max(moq, std_p, BF_BQ[k])), 0))
              Purchase_times[k] <- ifelse((BQ[k]!=0),(ceiling(Adj_Dem[k]/BQ[k])),0)
              Yearly_BQ[k] <- BQ[k] * Purchase_times[k]
              Curr_Inv[k+1] <- Yearly_BQ[k] - Adj_Dem[k]
              Storage_Cost[k] <- 0
              Storage_Cost_non_npv[k] <- 0
            }
            
            Total_BQ <- ceiling(sum(Yearly_BQ))
            scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
            adjusment_factor <- Total_BQ%%std_p
            
            if(adjusment_factor > scrap_amount)
            {
              Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] + (std_p - Total_BQ%%std_p)
              Total_BQ <- Total_BQ + (std_p - Total_BQ%%std_p)
              
              BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
            } else if(adjusment_factor <= scrap_amount)
            {
              Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] - Total_BQ%%std_p
              Total_BQ <- Total_BQ - Total_BQ%%std_p
              
              BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
            }
            
            for(i in ((year + 1):30))
            {
              if(Yearly_BQ[i] == 0 & flag_last_buy != 1)
              {
                if(i != (year + 1))
                {
                  Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                  flag_last_buy = 1
                } else
                {
                  Last_buy <- 0
                  flag_last_buy = 1
                }
              } 
            }
            if(flag_last_buy != 1)
            {
              Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
            }
            
            
            for(k in ((year + 1):30))
            {
              CR <- ((1-(0.15/12))^(k*12))
              Storage_Cost[k] <- Storage_Cost[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv[k] <- Storage_Cost_non_npv[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1)
              
            }
            
            for(k in ((year + 1):30)){
              
              CR <- (1-(0.15/12))^(k*12)
              Offsite_Qty[k] <- ifelse((BQ[k] > (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),(BQ[k] - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),0)
              Freight_cost[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k] * CR
              Freight_cost_non_npv[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k]
              
              transport_cost[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] * CR
              offsite_transport_cost[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k] * CR
              transport_cost_non_npv[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] 
              offsite_transport_cost_non_npv[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k] 
              
              Processing_cost[k] <- ((Onsite_procs_cpp1 * BQ[k]) + (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1))) * Purchase_times[k] * CR
              
              offsite_labor_cost[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k] * CR
              offsite_labor_cost_non_npv[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k]
              
              process_cost[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k] * CR
              process_cost_non_npv[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k]
              
              package_cost[k] <- Average_Processing_cpp1 * BQ[k] * CR * Purchase_times[k]
              package_cost_non_npv[k] <- Average_Processing_cpp1 * BQ[k] * Purchase_times[k]
              
              Material_cost[k] <- (part_c_3 * BQ[k]) * Purchase_times[k] * CR
              Material_cost_non_npv[k] <- (part_c_3 * BQ[k]) * Purchase_times[k]
              All_Expense[k] <- Storage_Cost[k] + Freight_cost[k] + Processing_cost[k] + Material_cost[k]
              
            }
          } else
          {
            Last_buy <- 0
          }
          
          scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
          
          Total_Storage_Cost_current <- sum(Storage_Cost) + Storage_Cost_Curr_Inv
          Total_Storage_Cost_current_non_npv <- sum(Storage_Cost_non_npv) + Storage_Cost_Curr_Inv_non_npv
          Total_Freight_cost_current <- sum(Freight_cost) + Freight_cost_curr_inv
          Total_Freight_cost_current_non_npv <- sum(Freight_cost_non_npv) + Freight_cost_curr_inv_non_npv
          Total_Processing_cost_current <-sum(Processing_cost) + Total_Processing_cost_curr_inv
          Total_Material_cost_current <- sum(Material_cost) + Material_cost_curr_inv
          Total_Material_cost_non_npv_current <- sum(Material_cost_non_npv) + Material_cost_curr_inv_non_npv
          
          
          Total_Revenue_current <- Revenue_Allied_discount + Revenue_OES_discount + Revenue_IAM_discount
          Total_Revenue_non_npv_current <- Revenue_OES_non_npv_discount + Revenue_IAM_non_npv_discount + Revenue_Allied_non_npv_discount
          
          
          Total_transport_cost <- sum(transport_cost) + transport_cost_curr_inv
          Total_offsite_transport_cost <- sum(offsite_transport_cost) + Offsite_trans_cost_curr_inv
          Total_transport_cost_non_npv <- sum(transport_cost_non_npv) + transport_cost_curr_inv_non_npv
          Total_offsite_transport_cost_non_npv <- sum(offsite_transport_cost_non_npv) + Offsite_trans_cost_curr_inv
          
          Total_offsite_labor_cost <- sum(offsite_labor_cost) + Offsite_labour_cost_curr_inv
          Total_offsite_labor_cost_non_npv <- sum(offsite_labor_cost_non_npv) + Offsite_labour_cost_curr_inv_non_npv
          
          Total_process_cost <- sum(process_cost) + process_cost_curr_inv
          
          
          
          Total_process_cost_non_npv <- sum(process_cost_non_npv) + process_cost_curr_inv_non_npv
          Total_package_cost <- sum(package_cost) + package_cost_curr_inv
          Total_package_cost_non_npv <- sum(package_cost_non_npv) + package_cost_curr_inv_non_npv
          
          Total_Expense_current <- Total_Storage_Cost_current + Total_Freight_cost_current + Total_process_cost + Total_offsite_labor_cost + Total_package_cost + Total_Material_cost_current  + setup_cost + add_cost
          
          Total_Expense_current_non_npv <- Total_Storage_Cost_current_non_npv + Total_Freight_cost_current_non_npv + Total_Material_cost_non_npv_current + Total_offsite_labor_cost_non_npv + Total_package_cost_non_npv + Total_process_cost_non_npv + setup_cost + add_cost
          
          Total_NPV <- Total_Revenue_current - Total_Expense_current 
          Total_NPV_non_npv <-  Total_Revenue_non_npv_current - Total_Expense_current_non_npv
          Total_Purchase_Qty <- Total_BQ
          Total_Inventory_Purchase <- Total_Purchase_Qty + Curr_Inv_copy
          BQ_S1_check <- ifelse(is.na(BQ_S1), 0, BQ_S1)
          
          Extended_purchase_cost <- BQ_S1_check * part_c_3
          
          Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
          
          Scenario_1_current <- rbind(Scenario_1_current, c(ATB_ADS[j,1],Total_Storage_Cost_current,Total_Storage_Cost_current_non_npv, Total_Freight_cost_current, 
                                                            Total_Freight_cost_current_non_npv, Total_Processing_cost_current,
                                                            Total_Material_cost_current,Total_Expense_current,Total_Expense_current_non_npv, Total_Revenue_current,
                                                            Total_NPV,Total_NPV_non_npv, Total_BQ,Total_FCST, 
                                                            Total_Material_cost_non_npv_current, Total_Revenue_non_npv_current, Total_transport_cost, Total_offsite_transport_cost,Total_transport_cost_non_npv, Total_offsite_transport_cost_non_npv,
                                                            Total_offsite_labor_cost, Total_offsite_labor_cost_non_npv, Total_process_cost,Total_process_cost_non_npv,
                                                            setup_cost, BQ_S1_check, First_buy, Last_sale,
                                                            Last_buy, Total_package_cost, Total_package_cost_non_npv, scrap_amount,
                                                            Revenue_OES_non_npv_no_discount, Revenue_IAM_non_npv_no_discount, Revenue_Allied_non_npv_no_discount,
                                                            Revenue_OES_non_npv_discount, Revenue_IAM_non_npv_discount, Revenue_Allied_non_npv_discount, add_cost,
                                                            Revenue_Allied_discount, Revenue_OES_discount, Revenue_IAM_discount, Total_Purchase_Qty,
                                                            Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST))
          
        }
        
        
        colnames(Scenario_1_current) <- c("Part_Nbr","Storage_Cost_Scenario_1","Storage_Cost_non_npv_Scenario_1", "Transportation_Cost_Scenario_1", "Transportation_cost_non_npv_Scenario_1",
                                          "Processing_Cost_Scenario_1","Part_Cost_Scenario_1","Expense_Scenario_1", "Expense_non_npv_Scenario_1", "Revenue_Scenario_1", "NPV_Scenario_1", "Profit_Non_NPV_Scenario_1",
                                          "Buy_Quantity_Scenario_1","Total_Forecast_Scenario_1", "Material_cost_non_npv_Scenario_1", "Revenue_non_npv_Scenario_1",
                                          "Total_transport_cost_Scenario_1", 
                                          "Total_offsite_transport_cost_Scenario_1","Total_transport_cost_non_npv_Scenario_1", "Total_offsite_transport_cost_non_npv_Scenario_1","Total_offsite_labor_cost_Scenario_1", "Total_offsite_labor_cost_non_npv_Scenario_1", 
                                          "Total_process_cost_Scenario_1", "Total_process_cost_non_npv_Scenario_1", "Setup_cost_Scenario_1", "LTB_Buy_Quantity_Scenario_1",
                                          "First_buy",
                                          "Last_sale", "Last_buy", "Package_cost_Scenario_1", "Package_cost_non_npv_Scenario_1", "Scrap_amount_Scenario_1",
                                          'Revenue_OES_non_npv_no_discount_1', 
                                          'Revenue_IAM_non_npv_no_discount_1', 'Revenue_Allied_non_npv_no_discount_1',
                                          'Revenue_OES_non_npv_discount_1', 'Revenue_IAM_non_npv_discount_1', 'Revenue_Allied_non_npv_discount_1', "Additional_cost_Scenario_1",
                                          'Revenue_Allied_discount_1', 'Revenue_OES_discount_1', 'Revenue_IAM_discount_1', "Total_Purchase_Qty_1",
                                          "Total_Inventory_Purchase_1", "Extended_purchase_cost_1", "total_forecast")
        
        Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
        Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.numeric), stringsAsFactors=FALSE)
        Scenario_1_current <- Scenario_1_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        Scenario_1_current$Part_Nbr <- str_pad(Scenario_1_current$Part_Nbr, width=8, side="left", pad="0")
        
        
        incProgress(1/4, detail = "Running Calculations")
        
      } else
      {
        
        Scenario_1_current <- data.frame()
        
        for (j in (1:nrow(ATB_ADS))) {
          
          cat("\nsc_1_cur Part Number: ",j," : ", ATB_ADS[j,1])
          final_NPV <- 0
          Optimal_year_count <- 1
          LTBQ <- 0
          Year <- c()
          FCST <- c()
          NPV_CR <- c()
          transport_cost <- c()
          offsite_transport_cost <- c()
          offsite_labor_cost <- c()
          process_cost <- c()
          Curr_Inv <- round(as.numeric(scenario_1$Values[18]), 4)
          
          Material_cost_CR_list <- c()
          
          Buy_Qty <- BQ_S1
          Total_Purchase_Qty <- BQ_S1
          Buy_Qty <- Buy_Qty + Curr_Inv
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
          }
          
          FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
          
          FCST <- Updated_FCST
          
          Total_FCST <- sum(FCST)
          
          ## Calculating First Buy, Last Sale and Last Buy
          First_buy <- 0
          Last_sale <- 0
          Last_buy <- 0
          flag <- 0
          
          
          if(FCST[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          Last_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          
          p_to_get_year = 0
          q_to_get_demand = 0
          
          for(i in 1:30)
          {
            q_to_get_demand = q_to_get_demand + FCST[i]
            if(Buy_Qty > q_to_get_demand)
            {
              p_to_get_year = p_to_get_year + 1
            } else if(Buy_Qty <= FCST[1])
            {
              remain <- Buy_Qty
              c = 1
              d = 0
              for(i in 1:12)
              {
                d = d + (FCST[p_to_get_year+1] / 12)
                if(remain > d)
                {
                  c = c+1
                }
              }
              
              FCST[p_to_get_year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
              break()
            }
          }
          
          if(Buy_Qty > FCST[1] & p_to_get_year < 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
          } else if(p_to_get_year >= 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            FCST[p_to_get_year+1] <- 0
            Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
            c <- 0
          }
          
          if(p_to_get_year < 29)
          {
            for(i in ((p_to_get_year + 2) : 30))
            {
              FCST[i] <- 0
            }
          }
          
          ###########
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam <- round(FCST * iam_weight, digits = 0)
          FCST_oes <- round(FCST * oes_weight, digits = 0)
          FCST_allied <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Sum_Forecast
          
          
          if(Buy_Qty > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
              
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
              
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
              
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          ###########          
          BQ <- Buy_Qty
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(p_to_get_year))) {
            s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + s
            yr_qty[i+1] <- s
          }
          
          
          
          yr_qty[1] <- (2*BQ - FCST[1])/2   
          yr_qty[p_to_get_year + 2] <- 0
          
          Total_storage_qty <- sum(yr_qty)
          
          Storage_Cost <- 0
          Storage_Cost_non_npv <- 0
          revenue <- 0
          revenue_non <- 0
          revenue_allied <- 0
          revenue_oes <- 0
          revenue_iam <- 0
          revenue_non_npv_allied <- 0
          revenue_non_npv_oes <- 0
          revenue_non_npv_iam <- 0
          Revenue_OES_non_npv_no_discount_1 <- 0
          Revenue_IAM_non_npv_no_discount_1 <- 0
          Revenue_Allied_non_npv_no_discount_1 <- 0
          Revenue_OES_non_npv_discount_1 <- 0
          Revenue_IAM_non_npv_discount_1 <- 0
          Revenue_Allied_non_npv_discount_1 <- 0
          
          if(p_to_get_year > 0)
          {
            for(k in (1 : (p_to_get_year + 1)))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              revenue_allied <- revenue_allied + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
              revenue_oes <- revenue_oes + (FCST_oes[k] * CR * (Dealer_Price_OES))
              revenue_iam <- revenue_iam + (FCST_iam[k] * CR * (Dealer_Price_IAM))
              
              revenue_non <- revenue_non + ((FCST[k]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
              
            }
          }
          
          if(p_to_get_year == 0)
          {
            
            for(k in (1:1))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + ((FCST[1]) * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_allied <- revenue_allied + (FCST_allied[1] * CR * (Dealer_Price_Allied_Export))
              revenue_oes <- revenue_oes + (FCST_oes[1] * CR * (Dealer_Price_OES))
              revenue_iam <- revenue_iam + (FCST_iam[1] * CR * (Dealer_Price_IAM))
              
              revenue_non <- revenue_non + ((FCST[1]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
            }
          }
          
          Revenue_OES_non_npv_no_discount_1 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$OES_FRACTION[j]
          Revenue_IAM_non_npv_no_discount_1 <- Sum_Forecast * wd_price * ATB_ADS$IAM_FRACTION[j]
          Revenue_Allied_non_npv_no_discount_1 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          Revenue_OES_non_npv_discount_1 <- sum(FCST_oes) * Dealer_Price_OES
          Revenue_IAM_non_npv_discount_1 <- sum(FCST_iam) * Dealer_Price_IAM 
          Revenue_Allied_non_npv_discount_1 <- sum(FCST_allied) * Dealer_Price_Allied_Export
          
          revenue_non <- Revenue_OES_non_npv_discount_1 + Revenue_IAM_non_npv_discount_1 + Revenue_Allied_non_npv_discount_1
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
          Freight_cost <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost) * (1-(0.15/12))
          Freight_cost_non_npv <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost)
          
          Offsite_labour_cost <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          Total_Processing_cost <- ((Onsite_procs_cpp1 * BQ) + Offsite_labour_cost) * (1-(0.15/12))
          Total_Processing_cost_non_npv <- ((Onsite_procs_cpp1  * BQ) + Offsite_labour_cost)
          
          package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
          package_cost_non_npv <- Average_Processing_cpp1 * BQ
          
          Material_cost <- (part_c_3 * BQ)*(1-(0.15/12))
          Material_cost_non_npv <- (part_c_3 * BQ)
          
          Total_transport_cost <- (Onsite_trans_cpp1 * BQ) * (1-(0.15/12))
          Total_offsite_transport_cost <- Offsite_trans_cost * (1-(0.15/12))
          Total_offsite_labor_cost <- Offsite_labour_cost * (1-(0.15/12))
          Total_transport_cost_non_npv <- (Onsite_trans_cpp1 * BQ) 
          
          Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ) * (1-(0.15/12))
          Total_process_cost_non_npv <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ)
          
          Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + setup_cost + Material_cost
          revenue <- (revenue_allied + revenue_oes + revenue_iam)
          NPV_with_capital_rate <- revenue - Total_Expense
          
          Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + setup_cost +  Material_cost_non_npv
          NPV_non_npv <- revenue_non - Total_Expense_non_npv
          Total_Inventory_Purchase <- Buy_Qty
          
          scrap_amount <-  Buy_Qty - Total_FCST
          scrap_amount <- ifelse(scrap_amount < 0, 0, scrap_amount)
          Extended_purchase_cost <- BQ_S1 * part_c_3
          
          Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
          Scenario_1_current <- rbind(Scenario_1_current, c(ATB_ADS[j,1],Storage_Cost,Freight_cost,Total_Processing_cost,
                                                            Material_cost, Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                                            sum(FCST), Material_cost_non_npv, revenue_non, Total_transport_cost,Total_transport_cost_non_npv,
                                                            Total_offsite_transport_cost,Offsite_trans_cost, Total_offsite_labor_cost, Total_process_cost,
                                                            setup_cost, BQ_S1, scrap_amount, Storage_Cost_non_npv, Freight_cost_non_npv, Total_Processing_cost_non_npv,
                                                            add_cost, package_cost_non_npv, package_cost, Offsite_labour_cost, Total_process_cost_non_npv, Total_Expense_non_npv,
                                                            NPV_non_npv, Revenue_OES_non_npv_no_discount_1, Revenue_IAM_non_npv_no_discount_1, Revenue_Allied_non_npv_no_discount_1,
                                                            Revenue_OES_non_npv_discount_1, Revenue_IAM_non_npv_discount_1, Revenue_Allied_non_npv_discount_1,
                                                            revenue_allied, revenue_oes, revenue_iam, First_buy, Last_sale, Last_buy, Total_Purchase_Qty,
                                                            Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST))
          
          colnames(Scenario_1_current) <- c("Part_Nbr","Storage_Cost_Scenario_1","Transportation_Cost_Scenario_1","Processing_Cost_Scenario_1",
                                            "Part_Cost_Scenario_1","Expense_Scenario_1","Revenue_Scenario_1","NPV_Scenario_1","Buy_Quantity_Scenario_1",
                                            "Total_Forecast_Scenario_1", "Material_cost_non_npv_Scenario_1","Revenue_non_npv_Scenario_1", 
                                            "Total_transport_cost_Scenario_1","Total_transport_cost_non_npv_Scenario_1","Total_offsite_transport_cost_Scenario_1","Total_offsite_transport_cost_non_npv_Scenario_1","Total_offsite_labor_cost_Scenario_1",
                                            "Total_process_cost_Scenario_1", "Setup_cost_Scenario_1", "LTB_Buy_Quantity_Scenario_1", "Scrap_amount_Scenario_1",
                                            "Storage_Cost_non_npv_Scenario_1", "Transportation_cost_non_npv_Scenario_1", "Processing_Cost_non_npv_Scenario_1",
                                            "Additional_cost_Scenario_1", "Package_cost_non_npv_Scenario_1", "Package_cost_Scenario_1", "Total_offsite_labor_cost_non_npv_Scenario_1",
                                            "Total_process_cost_non_npv_Scenario_1", "Expense_non_npv_Scenario_1", "Profit_Non_NPV_Scenario_1", "Revenue_OES_non_npv_no_discount_1",
                                            "Revenue_IAM_non_npv_no_discount_1", "Revenue_Allied_non_npv_no_discount_1", "Revenue_OES_non_npv_discount_1", "Revenue_IAM_non_npv_discount_1",
                                            "Revenue_Allied_non_npv_discount_1", "Revenue_Allied_discount_1", "Revenue_OES_discount_1", "Revenue_IAM_discount_1",
                                            "First_buy", "Last_sale", "Last_buy", "Total_Purchase_Qty_1", "Total_Inventory_Purchase_1", "Extended_purchase_cost_1",
                                            "total_forecast")
          
        }
        Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.character), stringsAsFactors=FALSE)
        Scenario_1_current <- data.frame(lapply(Scenario_1_current, as.numeric), stringsAsFactors=FALSE)
        Scenario_1_current <- Scenario_1_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        Scenario_1_current$Part_Nbr <- str_pad(Scenario_1_current$Part_Nbr, width=8, side="left", pad="0")
        
      }
      
      
      
      ########## Code for Scenario-1: Selldown calculation
      Selldown_NPV_Scenario_1 <- data.frame()
      Buy_Qty <- round(as.numeric(scenario_1$Values[18]), 4)
      
      for (j in (1:nrow(ATB_ADS))) {
        
        cat("\nsc_1_sell Part Number: ",j," : ", ATB_ADS[j,1])
        final_NPV <- 0
        Optimal_year_count <- 1
        LTBQ <- 0
        Year <- c()
        FCST <- c()
        NPV_CR <- c()
        Revenue_CR <- c()
        Expense <- c()
        Storage_cost_CR <- c()
        Freight_cost_CR <- c()
        Processing_cost_CR <- c()
        
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        
        for(n in (1:30)){
          FCST[n] <- ATB_ADS[j,(YI-1+n)]
        }
        
        FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
        
        p_to_get_year = 0
        q_to_get_demand = 0
        
        for(i in 1:30)
        {
          q_to_get_demand = q_to_get_demand + FCST[i]
          if(Buy_Qty > q_to_get_demand)
          {
            p_to_get_year = p_to_get_year + 1
          } else if(Buy_Qty <= FCST[1])
          {
            remain <- Buy_Qty
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
            break()
          }
        }
        
        if(Buy_Qty > FCST[1] & p_to_get_year < 30)
        {
          remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
          c = 1
          d = 0
          for(i in 1:12)
          {
            d = d + (FCST[p_to_get_year+1] / 12)
            if(remain > d)
            {
              c = c+1
            }
          }
          
          FCST[p_to_get_year+1] <- remain
          Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
        } else if(p_to_get_year >= 30)
        {
          remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
          FCST[p_to_get_year+1] <- 0
          Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
          c <- 0
        }
        
        if(p_to_get_year < 29)
        {
          for(i in ((p_to_get_year + 2) : 30))
          {
            FCST[i] <- 0
          }
        }
        
        ###########
        
        iam_weight <- ATB_ADS$IAM_FRACTION[j]
        oes_weight <- ATB_ADS$OES_FRACTION[j]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
        
        FCST_iam_selldown <- round(FCST * iam_weight, digits = 0)
        FCST_oes_selldown <- round(FCST * oes_weight, digits = 0)
        FCST_allied_selldown <- round(FCST * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam_selldown) + sum(FCST_oes_selldown) + sum(FCST_allied_selldown)
        
        Diff_FCST <- Sum_FCST - Sum_Forecast
        index <- 1
        
        if(Buy_Qty > 0 & Sum_Forecast > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes_selldown!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam_selldown!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied_selldown!=0),1)
          } else
          {
            index <- 1
          }
          
        } else
        {
          index <- 1
        }
        
        if(length(index)==0)
        {
          index <- 1
        }
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes_selldown[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam_selldown[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied_selldown[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes_selldown[index] < FCST_iam_selldown[index] & FCST_oes_selldown[index] < FCST_allied_selldown[index] & oes_weight != 0)
        {
          FCST_oes_selldown[index] <- FCST_oes_selldown[index] - Diff_FCST
          
        } else if(FCST_iam_selldown[index] <= FCST_oes_selldown[index] & FCST_iam_selldown[index] <= FCST_allied_selldown[index] & iam_weight != 0)
        {
          FCST_iam_selldown[index] <- FCST_iam_selldown[index] - Diff_FCST
          
        } else if(FCST_allied_selldown[index] <= FCST_oes_selldown[index] & FCST_allied_selldown[index] <= FCST_iam_selldown[index] & allied_weight != 0)
        {
          FCST_allied_selldown[index] <- FCST_allied_selldown[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes_selldown[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam_selldown[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied_selldown[index] <- 0
        }
        
        ###########          
        
        
        BQ <- Buy_Qty
        qty <- 0
        yr_qty <- c()
        
        for (i in (1:(p_to_get_year))) {
          s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
          qty <- qty + s
          yr_qty[i+1] <- s
        }
        
        yr_qty[1] <- (2*BQ - FCST[1])/2        
        yr_qty[p_to_get_year + 2] <- 0
        
        Total_storage_qty <- sum(yr_qty)
        
        Storage_Cost <- 0
        Storage_Cost_non_npv <- 0
        revenue <- 0
        revenue_iam <- 0
        revenue_oes <- 0
        revenue_allied <- 0
        revenue_non_npv <- 0
        revenue_non_npv_iam <- 0
        revenue_non_npv_oes <- 0
        revenue_non_npv_allied <- 0
        
        if(p_to_get_year > 0)
        {
          
          for(k in (1 : (p_to_get_year + 1)))
          {
            CR <- ((1-(0.15/12))^(k*12))
            revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            #revenue_non_npv <- revenue_non_npv + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam_selldown[k] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes_selldown[k] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied_selldown[k] * CR * (Dealer_Price_Allied_Export))
            
            #revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[k] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
            #revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[k] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
            #revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[k] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
            #revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
            
            revenue_non_npv <- revenue_non_npv + (FCST[k] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
            
            Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
            Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
            
            
          }
        }
        
        if(p_to_get_year == 0)
        {
          
          for(k in 1 : 1)
          {
            CR <- ((1-(0.15/12))^(k*12))
            revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            #revenue_non_npv <- revenue_non_npv + (FCST[1] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam_selldown[1] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes_selldown[1] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied_selldown[1] * CR * (Dealer_Price_Allied_Export))
            
            #revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[1] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
            #revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[1] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
            #revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[1] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
            #revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
            revenue_non_npv <- revenue_non_npv + (FCST[1] * ((ATB_ADS$Dealer_Price_Allied_Export[j] * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (ATB_ADS$Dealer_Price_OES[j] * ATB_ADS$OES_FRACTION[j]) + (ATB_ADS$Dealer_Price_IAM[j] * ATB_ADS$IAM_FRACTION[j]))) 
            Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
            Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
            
            
          }
        }
        
        offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
        
        Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
        Freight_cost <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost) * (1-(0.15/12))
        Freight_cost_non_npv <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost)
        
        Offsite_labour_cost <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
        #Total_Processing_cost <- (((Onsite_procs_cpp1 ) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
        Total_Processing_cost <- (((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
        
        #Total_Processing_cost_non_npv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost)
        
        Total_Processing_cost_non_npv <- (((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ) + Offsite_labour_cost)
        
        package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
        package_cost_non_npv <- Average_Processing_cpp1 * BQ
        
        #Total_Processing_cost <- Total_Processing_cost - package_cost
        #Total_Processing_cost_non_npv <- Total_Processing_cost_non_npv - package_cost_non_npv
        
        Material_cost <- BQ * part_c_3 * (1-(0.15/12))
        Material_cost_non_npv <- BQ * part_c_3
        
        Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + Material_cost  + setup_cost + package_cost
        revenue <- revenue_iam + revenue_oes + revenue_allied
        NPV_with_capital_rate <- revenue - Total_Expense
        
        Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + Material_cost_non_npv + setup_cost + package_cost_non_npv
        
        NPV_with_capital_rate_non_npv <- revenue_non_npv - Total_Expense_non_npv
        
        Selldown_NPV_Scenario_1 <- data.frame(lapply(Selldown_NPV_Scenario_1, as.character), stringsAsFactors=FALSE)
        Selldown_NPV_Scenario_1 <- rbind(Selldown_NPV_Scenario_1, c(ATB_ADS[j,1], Material_cost, Storage_Cost,Freight_cost,Total_Processing_cost,
                                                                    Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                                                    Material_cost_non_npv, Storage_Cost_non_npv, Freight_cost_non_npv,
                                                                    Total_Processing_cost_non_npv, add_cost, package_cost_non_npv,
                                                                    setup_cost, package_cost, revenue_non_npv, NPV_with_capital_rate_non_npv,
                                                                    revenue_iam, revenue_oes, revenue_allied, revenue_non_npv_iam, revenue_non_npv_oes, revenue_non_npv_allied))
        
        colnames(Selldown_NPV_Scenario_1) <- c("Part_Nbr","Selldown_Material_cost_Scenario_1", "Selldown_Storage_Cost_Scenario_1",
                                               "Selldown_Freight_cost_Scenario_1",
                                               "Selldown_Processing_Cost_Scenario_1","Total_Expense_Scenario_1","Selldown_Revenue_Scenario_1",
                                               "Selldown_NPV_Scenario_1","Total_BQ_Scenario_1", "Selldown_Material_cost_non_npv_Scenario_1", "Selldown_Storage_Cost_non_npv_Scenario_1",
                                               "Selldown_Freight_cost_non_npv_Scenario_1", "Selldown_Processing_Cost_non_npv_Scenario_1", "Selldown_Additional_Cost_Scenario_1",
                                               "Selldown_Package_Cost_non_npv_Scenario_1", "Selldown_Setup_Cost_Scenario_1", "Selldown_Package_Cost_Scenario_1",
                                               "Selldown_Revenue_non_npv_Scenario_1", "Selldown_NPV_non_npv_Scenario_1", "Selldown_Revenue_Scenario_1_IAM", 
                                               "Selldown_Revenue_Scenario_1_OES", "Selldown_Revenue_Scenario_1_Allied", "Selldown_Revenue_non_npv_Scenario_1_IAM",
                                               "Selldown_Revenue_non_npv_Scenario_1_OES", "Selldown_Revenue_non_npv_Scenario_1_Allied")
        
      }
      Selldown_NPV_Scenario_1 <- data.frame(lapply(Selldown_NPV_Scenario_1, as.character), stringsAsFactors=FALSE)
      Selldown_NPV_Scenario_1 <- data.frame(lapply(Selldown_NPV_Scenario_1, as.numeric), stringsAsFactors=FALSE)
      Selldown_NPV_Scenario_1 <- Selldown_NPV_Scenario_1 %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      Selldown_NPV_Scenario_1$Part_Nbr <- str_pad(Selldown_NPV_Scenario_1$Part_Nbr, width=8, side="left", pad="0")
      
      
      incProgress(1/4, detail = "Running Calculations")
      
      shinyjs::show("line_1")
      output$line_1<- renderHighchart({
        
        graph_1 <- NPV_Data_1
        
        graph_1 <- as.data.frame(graph_1)
        graph_1$Buy_quantity_list <- as.numeric(as.character(graph_1$Buy_quantity_list))
        graph_1$NPV_CR_list <- as.numeric(as.character(graph_1$NPV_CR_list))
        
        highchart() %>% 
          hc_title(text="NPV variation with Buy Qty") %>%
          hc_chart(type = "line") %>%
          hc_xAxis(title=list(text="Buy Quantity"),categories= as.vector(graph_1$Buy_quantity_list))  %>%
          hc_yAxis(title=list(text="NPV"))  %>% 
          hc_add_theme(hc_theme_sandsignika()) %>%
          hc_add_series(name = "NPV", data = as.vector(graph_1$NPV_CR_list))
        
      })
      
      incProgress(1/4, detail = "Running Calculations")
      
      ## Creating Download Report of Scenario-1 
      result_scenario_1 <- merge(Scenario_1_current, Scenario_1_optimal, by = "Part_Nbr")
      result_scenario_1 <- merge(result_scenario_1, Selldown_NPV_Scenario_1, by = "Part_Nbr")
      result_scenario_1 <- merge(result_scenario_1, t_scenario_1, by = "Part_Nbr")
      
      result_scenario_1 <- result_scenario_1 %>% select(Part_Nbr, NPV_Scenario_1,
                                                        Selldown_NPV_Scenario_1,Selldown_NPV_non_npv_Scenario_1, Revenue_Scenario_1,Revenue_non_npv_Scenario_1,Part_Cost_Scenario_1,Material_cost_non_npv_Scenario_1,
                                                        Setup_cost_Scenario_1 ,Total_transport_cost_Scenario_1,Total_transport_cost_non_npv_Scenario_1,Storage_Cost_Scenario_1,Storage_Cost_non_npv_Scenario_1,
                                                        Total_process_cost_Scenario_1,  Total_process_cost_non_npv_Scenario_1,Package_cost_Scenario_1,Package_cost_non_npv_Scenario_1,
                                                        Total_offsite_labor_cost_Scenario_1,Total_offsite_labor_cost_non_npv_Scenario_1,Total_offsite_transport_cost_Scenario_1,Total_offsite_transport_cost_non_npv_Scenario_1, 
                                                        Additional_Cost_1,Selldown_Revenue_Scenario_1,Selldown_Revenue_non_npv_Scenario_1,
                                                        Selldown_Material_cost_Scenario_1,Selldown_Material_cost_non_npv_Scenario_1,
                                                        Selldown_Freight_cost_Scenario_1,Selldown_Freight_cost_non_npv_Scenario_1,Selldown_Storage_Cost_Scenario_1,Selldown_Storage_Cost_non_npv_Scenario_1, Selldown_Processing_Cost_Scenario_1,
                                                        Selldown_Processing_Cost_non_npv_Scenario_1,Selldown_Package_Cost_Scenario_1,Selldown_Package_Cost_non_npv_Scenario_1,
                                                        Total_Inventory,
                                                        First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_1, LTB_Buy_Quantity_Scenario_1,
                                                        Total_Purchase_Qty_1, Total_Forecast_Scenario_1,
                                                        Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_Material_Cost_Scenario_1, Optimal_Setup_cost_Scenario_1,
                                                        Optimal_Total_transport_cost_Scenario_1,
                                                        Optimal_Total_offsite_transport_cost_Scenario_1, Optimal_Storage_Cost_Scenario_1, Optimal_Total_process_cost_Scenario_1,
                                                        Optimal_Packaging_cost_Scenario_1,
                                                        Optimal_Total_offsite_labor_cost_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1,
                                                        Extended_purchase_cost_1,Proposed_Dealer_Price, Proposed_WD_Price, Material_Cost, MOQ,Standard_Pack,Setup_Cost_s1,Additional_Cost_s1,Monthly_square_feet_cpp,
                                                        Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                                        Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp)
      
      result_scenario_1$Part_Nbr <- str_pad(result_scenario_1$Part_Nbr, width=8, side="left", pad="0")
      write.csv(result_scenario_1, file = "Result_scenario_1.csv", row.names = FALSE)
      
      output$downloadData_s_1 <- downloadHandler(
        filename = function() {
          paste("Part_view_Scenario-1",".csv", sep="") 
        },
        content = function(file) {
          scenario_1 <- result_scenario_1
          scenario_1$Part_Nbr <- str_pad(scenario_1$Part_Nbr, width=8, side="left", pad="0")
          scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],
                                   lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                                   lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                   lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   stringsAsFactors = FALSE)
          
          colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                    "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                    "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                    "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                    "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                    "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                    "Current Inventory",
                                    "First Buy","Last Buy","Last Sale","Scrap Scenario-1",  "Entered Buy Quantity Scenario-1",
                                    "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                    "Optimal NPV  Scenario-1",
                                    "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                    "Optimal Offsite transport cost Scenario-1",
                                    "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                    "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                    "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                    "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
          
          write.csv(scenario_1, file)
          
          
        },
        contentType = "csv"
      )
      
      
      ## Refreshing DATA at the back end
      spl_4 <- Scenario_1_current
      spl_4$Part_Nbr <- str_pad(spl_4$Part_Nbr, width=8, side="left", pad="0")	  
      spl_5 <- Scenario_1_optimal
      spl_5$Part_Nbr <- str_pad(spl_5$Part_Nbr, width=8, side="left", pad="0")
      spl_6 <- Selldown_NPV_Scenario_1
      spl_6$Part_Nbr <- str_pad(spl_6$Part_Nbr, width=8, side="left", pad="0")
      spl_x1 <- t_scenario_1
      spl_45 <- merge(spl_4, spl_5, by = "Part_Nbr")
      spl_456 <- merge(spl_45, spl_6, by = "Part_Nbr")
      spl_456 <- merge(spl_456, spl_x1, by = "Part_Nbr")
      
      global_scenario_1$df_data_sce_1 <- spl_456
      
      spl_456_result <- spl_456 %>% select(Part_Nbr, NPV_Scenario_1, Selldown_NPV_Scenario_1, Revenue_Scenario_1, Revenue_non_npv_Scenario_1,
                                           Optimal_NPV_Scenario_1, Optimal_ATB_Quantity_Scenario_1,total_forecast)
      
      spl_456_result <- as.data.frame(spl_456_result)
      spl_456_result <- data.frame(lapply(spl_456_result, as.character), stringsAsFactors=FALSE)
      spl_456_result <- data.frame(lapply(spl_456_result, as.numeric), stringsAsFactors=FALSE)
      
      shinyjs::show("analysis_sce_1")
      
      if (input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
      {
        scenario_1_display <- read.csv("spl_456_result.csv", stringsAsFactors = FALSE)
        
        scenario_1_display[scenario_1_display$Part_Nbr == spl_456_result$Part_Nbr[1], ] <- spl_456_result[1,]
        write.csv(scenario_1_display, file = "spl_456_result.csv", row.names = FALSE)
        
        scenario_1_display$Part_Nbr <- str_pad(scenario_1_display$Part_Nbr, width=8, side="left", pad="0")
        
        output$analysis_sce_1 <- renderHotable({
          scenario_1_display <- data.frame(Part_Nbr = scenario_1_display[,1], lapply(scenario_1_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                           formatC(scenario_1_display[,7] , big.mark=",", digits=0, format="f"),formatC(scenario_1_display[,8] , big.mark=",", digits=0, format="f")  ,stringsAsFactors = FALSE)
          colnames(scenario_1_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
          scenario_1_display
        })
      } else
      {
        scenario_1_display <- read.csv("spl_123_result_s1.csv", stringsAsFactors = FALSE)
        scenario_1_display[scenario_1_display$Part_Nbr == spl_456_result$Part_Nbr[1], ] <- spl_456_result[1,]
        
        write.csv(scenario_1_display, file = "spl_123_result_s1.csv", row.names = FALSE)
        scenario_1_display$Part_Nbr <- str_pad(scenario_1_display$Part_Nbr, width=8, side="left", pad="0")
        
        output$analysis_sce_1 <- renderHotable({
          scenario_1_display <- data.frame(Part_Nbr = scenario_1_display[,1], lapply(scenario_1_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                           formatC(scenario_1_display[,7] , big.mark=",", digits=0, format="f"),formatC(scenario_1_display[,8] , big.mark=",", digits=0, format="f")  ,stringsAsFactors = FALSE)
          
          colnames(scenario_1_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
          scenario_1_display
        })
        
      }
      
      reflect_back_scenario_1 <- spl_456 %>% select(Part_Nbr, NPV_Scenario_1,
                                                    Selldown_NPV_Scenario_1,Selldown_NPV_non_npv_Scenario_1, Revenue_Scenario_1,Revenue_non_npv_Scenario_1,Part_Cost_Scenario_1,Material_cost_non_npv_Scenario_1,
                                                    Setup_cost_Scenario_1 ,Total_transport_cost_Scenario_1,Total_transport_cost_non_npv_Scenario_1,Storage_Cost_Scenario_1,Storage_Cost_non_npv_Scenario_1,
                                                    Total_process_cost_Scenario_1,  Total_process_cost_non_npv_Scenario_1,Package_cost_Scenario_1,Package_cost_non_npv_Scenario_1,
                                                    Total_offsite_labor_cost_Scenario_1,Total_offsite_labor_cost_non_npv_Scenario_1,Total_offsite_transport_cost_Scenario_1,Total_offsite_transport_cost_non_npv_Scenario_1, 
                                                    Additional_Cost_1,Selldown_Revenue_Scenario_1,Selldown_Revenue_non_npv_Scenario_1,
                                                    Selldown_Material_cost_Scenario_1,Selldown_Material_cost_non_npv_Scenario_1,
                                                    Selldown_Freight_cost_Scenario_1,Selldown_Freight_cost_non_npv_Scenario_1,Selldown_Storage_Cost_Scenario_1,Selldown_Storage_Cost_non_npv_Scenario_1, Selldown_Processing_Cost_Scenario_1,
                                                    Selldown_Processing_Cost_non_npv_Scenario_1,Selldown_Package_Cost_Scenario_1,Selldown_Package_Cost_non_npv_Scenario_1,
                                                    Total_Inventory,
                                                    First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_1, LTB_Buy_Quantity_Scenario_1,
                                                    Total_Purchase_Qty_1, Total_Forecast_Scenario_1,
                                                    Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_Material_Cost_Scenario_1, Optimal_Setup_cost_Scenario_1,
                                                    Optimal_Total_transport_cost_Scenario_1,
                                                    Optimal_Total_offsite_transport_cost_Scenario_1, Optimal_Storage_Cost_Scenario_1, Optimal_Total_process_cost_Scenario_1,
                                                    Optimal_Packaging_cost_Scenario_1,
                                                    Optimal_Total_offsite_labor_cost_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1,
                                                    Extended_purchase_cost_1,Proposed_Dealer_Price, Proposed_WD_Price, Material_Cost, MOQ,Standard_Pack,Setup_Cost_s1,Additional_Cost_s1,Monthly_square_feet_cpp,
                                                    Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                                    Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp)
      
      
      report_update <- global_scenario_1_down$df_data_scenario_1_down
      report_update$Part_Nbr <- str_pad(report_update$Part_Nbr, width=8, side="left", pad="0")
      
      
      report_update[report_update$Part_Nbr == reflect_back_scenario_1$Part_Nbr[1], 2:72] <- reflect_back_scenario_1[1, 2:72]
      global_scenario_1_down$df_data_scenario_1_down <- report_update 
      
      ##---------------------------
      ## Management Report Snippet:
      ##---------------------------     
      management_report_1 <- global_scenario_1_down$df_data_scenario_1_down
      management_report_1 <- management_report_1 %>% select(Part_Nbr, NPV_Scenario_1, Revenue_Scenario_1, LTB_Buy_Quantity_Scenario_1, Extended_purchase_cost_1, 
                                                            Optimal_NPV_Scenario_1, Optimal_Revenue_Scenario_1, Optimal_ATB_Quantity_Scenario_1, Extended_optimal_buy_cost_1)
      
      management_report_1 <- management_report_1[management_report_1$LTB_Buy_Quantity_Scenario_1 > 0,]
      
      incProgress(1/3, detail = "Preparing the tables")
      
      if(nrow(management_report_1) > 0)
      {
        
        management_report_1$NPV_impact_1 <- management_report_1$Optimal_NPV_Scenario_1 - management_report_1$NPV_Scenario_1
        management_report_1$Revenue_impact_1 <- management_report_1$Optimal_Revenue_Scenario_1 - management_report_1$Revenue_Scenario_1
        management_report_1$Buy_impact_1 <- management_report_1$Extended_optimal_buy_cost_1 - management_report_1$Extended_purchase_cost_1
        colnames(management_report_1)[4] <- "Entered_Buy_Quantity_1"
        colnames(management_report_1)[8] <- "Optimal_Quantity_Scenario_1"
        management_report_1$Time_stamp_1 <- Sys.Date()
        management_report_1$Day_1 <- day(Sys.Date())
        management_report_1$Month_1 <- month(Sys.Date())
        management_report_1$Year_1 <- year(Sys.Date())
        
        management_report_1$Part_Nbr <- as.character(str_pad(management_report_1$Part_Nbr, width=8, side="left", pad="0"))
        management_report_1$Time_stamp_1 <- as.character(management_report_1$Time_stamp_1)
        management_report_1$Day_1 <- as.character(management_report_1$Day_1)
        management_report_1$Month_1 <- as.character(management_report_1$Month_1)
        management_report_1$Year_1 <- as.character(management_report_1$Year_1)
        
        management_report_1$RAT_NUMBER <- "-"
        management_report_1$GM_ID <- test$gm_id[1]
        
        dbWriteTable(conn = con,
                     name = TEMP_MAN_REP_1_NAME,
                     value = management_report_1, overwrite = TRUE, append = FALSE)
        
        dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_1 IN EXCLUSIVE MODE")
        
        sql_management_rep_1 <- paste("UPDATE MANAGEMENT_TABLE_1 A
                                      SET (A.NPV_SCENARIO_1, A.REVENUE_SCENARIO_1, A.ENTERED_BUY_QUANTITY_1, A.EXTENDED_PURCHASE_COST_1, A.OPTIMAL_NPV_SCENARIO_1, A.OPTIMAL_REVENUE_SCENARIO_1,
                                      A.OPTIMAL_QUANTITY_SCENARIO_1, A.EXTENDED_OPTIMAL_BUY_COST_1, A.NPV_IMPACT_1, A.REVENUE_IMPACT_1, A.BUY_IMPACT_1, 
                                      A.TIME_STAMP, A.DAY_1, A.MONTH_1, A.YEAR_1, A.RAT_NUMBER, A.GM_ID) =
                                      (SELECT B.NPV_SCENARIO_1, B.REVENUE_SCENARIO_1, B.ENTERED_BUY_QUANTITY_1, B.EXTENDED_PURCHASE_COST_1, 
                                      B.OPTIMAL_NPV_SCENARIO_1, B.OPTIMAL_REVENUE_SCENARIO_1, B.OPTIMAL_QUANTITY_SCENARIO_1, B.EXTENDED_OPTIMAL_BUY_COST_1, 
                                      B.NPV_IMPACT_1,B.REVENUE_IMPACT_1, B.BUY_IMPACT_1, B.TIME_STAMP_1, B.DAY_1, B.MONTH_1, B.YEAR_1, B.RAT_NUMBER, B.GM_ID
                                      FROM",
                                      TEMP_MAN_REP_1_NAME, "B
                                      WHERE 
                                      LPAD(A.PART_NBR, 8, '0')= LPAD(B.PART_NBR, 8, '0'))
                                      WHERE EXISTS (SELECT NPV_SCENARIO_1
                                      FROM",
                                      TEMP_MAN_REP_1_NAME, "C WHERE
                                      LPAD(C.PART_NBR, 8, '0')= LPAD(A.PART_NBR, 8, '0'))")
        
        value_management_rep_1 <- dbSendUpdate(con, sql_management_rep_1)
        
        
        dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_1 IN EXCLUSIVE MODE")
        
        sql_management_rep_insert_1 <- paste("INSERT INTO MANAGEMENT_TABLE_1 
                                             SELECT A.* FROM", TEMP_MAN_REP_1_NAME," A
                                             WHERE A.PART_NBR NOT IN (SELECT DISTINCT PART_NBR FROM MANAGEMENT_TABLE_1)")
        
        value_management_rep_insert_1 <- dbSendUpdate(con, sql_management_rep_insert_1)
        
        dbSendUpdate(con, paste("BEGIN
                                EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_1_NAME , "';
                                EXCEPTION
                                WHEN OTHERS THEN NULL;
                                END;"))
        
      }
      
      
      ## Generating income report for Scenario-1
      income_report_scenario_1 <- c(1:52)
      income_report_scenario_1<- as.data.frame(income_report_scenario_1)
      income_report_scenario_1$Fields <-  c('Dealer Price', 'Wd price', 'Allied Price', 'Dealer discount %', 'Wd discount %', 'Allied Discount %', 'Net Dealer', 'Net Wd',
                                            'Net Allied',
                                            'Lifetime Revenue(Non NPV)',
                                            'Lifetime Revenue(NPV)',
                                            'Sell Down Revenue(Non NPV) - OES',
                                            'Sell Down Revenue(Non NPV) - IAM',
                                            'Sell Down Revenue(Non NPV) - Allied/Export',
                                            'Sell Down Revenue(Non NPV',
                                            'Selldown Revenue (NPV)',
                                            'Material Cost(Non NPV)',
                                            'Material Cost(NPV)',
                                            'Sell Down Material Non Npv',
                                            'Sell Down Material (NPV)',
                                            'Transportation Cost(NON NPV)',
                                            'Transportation Cost(NPV)',
                                            'Sell Down Transportation cost (Non NPV)',
                                            'Sell Down Transportation cost (NPV)',
                                            'Labor Cost(NON NPV)',
                                            'Labor Cost(NPV)',
                                            'Sell Down Labor (NON NPV)',
                                            'Sell Down Labor (NPV)',
                                            'Storage Cost (Non NPV)',
                                            'Storage Cost(NPV)',
                                            'Sell Down Storage(Non NPV)',
                                            'Sell Down Storage(NPV)',
                                            'Packaging Cost(NON NPV)',
                                            'Packaging Cost(NPV)',
                                            'Sell Down Packaging Cost (NON NPV)',
                                            'Sell Down Packaging Cost (NPV)',
                                            'Set up Cost (NON NPV)',
                                            'Setup Cost(NPV)',
                                            'Additional Cost($)',
                                            'Total Expense(NON NPV)',
                                            'Total Expense(NPV)',
                                            'Profit (Non NPV)',
                                            'NPV',
                                            'Selldown (non Npv)',
                                            'Selldown NPV',
                                            'National Inventory',
                                            'Total Purchase',
                                            'Total Inventory and Purchase',
                                            'Total Sales',
                                            'Scrap',
                                            'MOQ',
                                            'Standard Pack')
      
      sales_oes <- sum(FCST_oes)
      sales_iam <- sum(FCST_iam)
      sales_allied <- sum(FCST_allied)
      
      
      inventory_oes <- round(Current_Inventory * ATB_ADS$OES_FRACTION[1], digits = 0)
      inventory_iam <- round(Current_Inventory * ATB_ADS$IAM_FRACTION[1], digits = 0)
      inventory_allied <- round(Current_Inventory * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
      
      if(is.na(BQ_S1))
      {
        
        purchase_oes <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
        
        purchase_iam <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
        purchase_allied <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        ## Calculating the difference in sales, inventory and purchase before and after rounding
        diff_sales <- Scenario_1_current$Total_Forecast_Scenario_1[1] - (sales_oes + sales_iam + sales_allied)
        diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
        diff_purchase <- ceiling(Scenario_1_current$Buy_Quantity_Scenario_1[1]) - (purchase_oes + purchase_iam + purchase_allied)
        
        ## Calling function to adjust the rounding error in sales, purcahse and inventory
        sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
        sales_values <- unlist(sales_values)
        sales_oes <- sales_values[1]
        sales_iam <- sales_values[2]
        sales_allied <- sales_values[3]
        
        inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
        inventory_values <- unlist(inventory_values)
        inventory_oes <- inventory_values[1]
        inventory_iam <- inventory_values[2]
        inventory_allied <- inventory_values[3]
        
        
        
        purchase_values <- Round_fn(purchase_oes, purchase_iam, purchase_allied, diff_purchase)
        purchase_values <- unlist(purchase_values)
        purchase_oes <- purchase_values[1]
        purchase_iam <- purchase_values[2]
        purchase_allied <- purchase_values[3]
        
        
        purchase_inventory <- ceiling((Current_Inventory + Scenario_1_current$Buy_Quantity_Scenario_1[1]))
        purchase_inventory_oes <- inventory_oes + purchase_oes
        purchase_inventory_iam <- inventory_iam + purchase_iam
        purchase_inventory_allied <- inventory_allied + purchase_allied
        income_report_scenario_1$income_report_scenario_1 <- NULL
        
        
        income_report_scenario_1$Per_unit <- c(Scenario_1_optimal$Proposed_Dealer_Price_1[1], Scenario_1_optimal$Proposed_Wd_Price_1[1], 
                                               Scenario_1_optimal$Proposed_Dealer_Price_1[1], ATB_ADS$Discount_oes_percent[1], 
                                               ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                               Scenario_1_current$Revenue_OES_non_npv_discount_1[1], Scenario_1_current$Revenue_IAM_non_npv_discount_1[1], 
                                               Scenario_1_current$Revenue_Allied_non_npv_discount_1[1], 
                                               Scenario_1_current$Revenue_non_npv_Scenario_1[1], Scenario_1_current$Revenue_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_OES[1], Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_IAM[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_Allied[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1[1], part_c_3, 
                                               Scenario_1_current$Part_Cost_Scenario_1[1],
                                               part_c_3, Selldown_NPV_Scenario_1$Selldown_Material_cost_Scenario_1[1], 
                                               Scenario_1_current$Transportation_cost_non_npv_Scenario_1[1], Scenario_1_current$Transportation_Cost_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Freight_cost_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Freight_cost_Scenario_1[1], 
                                               (Scenario_1_current$Total_offsite_labor_cost_non_npv_Scenario_1[1] + Scenario_1_current$Total_process_cost_non_npv_Scenario_1[1]), 
                                               (Scenario_1_current$Total_offsite_labor_cost_Scenario_1[1] + Scenario_1_current$Total_process_cost_Scenario_1[1]),
                                               Selldown_NPV_Scenario_1$Selldown_Processing_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Processing_Cost_Scenario_1[1],
                                               Scenario_1_current$Storage_Cost_non_npv_Scenario_1[1],
                                               Scenario_1_current$Storage_Cost_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Storage_Cost_non_npv_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Storage_Cost_Scenario_1[1],
                                               Scenario_1_current$Package_cost_non_npv_Scenario_1[1], Scenario_1_current$Package_cost_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Package_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Package_Cost_Scenario_1[1],
                                               Scenario_1_current$Setup_cost_Scenario_1[1], Scenario_1_current$Setup_cost_Scenario_1[1],
                                               Scenario_1_current$Additional_cost_Scenario_1[1], Scenario_1_current$Expense_non_npv_Scenario_1[1], Scenario_1_current$Expense_Scenario_1[1],
                                               Scenario_1_current$Profit_Non_NPV_Scenario_1[1], Scenario_1_current$NPV_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_NPV_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1], Current_Inventory, ceiling(Scenario_1_current$Buy_Quantity_Scenario_1[1]),
                                               ceiling((Current_Inventory + Scenario_1_current$Buy_Quantity_Scenario_1[1])),
                                               Scenario_1_current$Total_Forecast_Scenario_1[1], Scenario_1_current$Scrap_amount_Scenario_1[1], moq,
                                               std_p)
        
      }  else
      {
        purchase_inventory <- Scenario_1_current$Buy_Quantity_Scenario_1[1]
        purchase_inventory_oes <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
        purchase_inventory_iam <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
        purchase_inventory_allied <- round(Scenario_1_current$Buy_Quantity_Scenario_1[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        ## Calculating the difference in sales, inventory and purchase before and after rounding
        diff_sales <- Scenario_1_current$Total_Forecast_Scenario_1[1] - (sales_oes + sales_iam + sales_allied)
        diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
        diff_purchase_inventory <- ceiling(Scenario_1_current$Buy_Quantity_Scenario_1[1]) - (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied)
        
        ## Calling function to adjust the rounding error in sales, purcahse and inventory
        sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
        sales_values <- unlist(sales_values)
        sales_oes <- sales_values[1]
        sales_iam <- sales_values[2]
        sales_allied <- sales_values[3]
        
        
        
        inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
        inventory_values <- unlist(inventory_values)
        inventory_oes <- inventory_values[1]
        inventory_iam <- inventory_values[2]
        inventory_allied <- inventory_values[3]
        
        purchase_inventory_values <- Round_fn(purchase_inventory_oes, purchase_inventory_iam, purchase_inventory_allied, diff_purchase_inventory)
        purchase_inventory_values <- unlist(purchase_inventory_values)
        purchase_inventory_oes <- purchase_inventory_values[1]
        purchase_inventory_iam <- purchase_inventory_values[2]
        purchase_inventory_allied <- purchase_inventory_values[3]
        
        purchase_values <- Scenario_1_current$Buy_Quantity_Scenario_1[1] - Current_Inventory
        purchase_oes <- purchase_inventory_oes - inventory_oes
        purchase_iam <- purchase_inventory_iam - inventory_iam
        purchase_allied <- purchase_inventory_allied - inventory_allied
        
        income_report_scenario_1$income_report_scenario_1 <- NULL
        
        
        income_report_scenario_1$Per_unit <- c(Scenario_1_optimal$Proposed_Dealer_Price_1[1], Scenario_1_optimal$Proposed_Wd_Price_1[1], 
                                               Scenario_1_optimal$Proposed_Dealer_Price_1[1], ATB_ADS$Discount_oes_percent[1], 
                                               ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                               Scenario_1_current$Revenue_OES_non_npv_discount_1[1], Scenario_1_current$Revenue_IAM_non_npv_discount_1[1], 
                                               Scenario_1_current$Revenue_Allied_non_npv_discount_1[1], 
                                               Scenario_1_current$Revenue_non_npv_Scenario_1[1], Scenario_1_current$Revenue_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_OES[1], Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_IAM[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1_Allied[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1[1], part_c_3, 
                                               Scenario_1_current$Part_Cost_Scenario_1[1],
                                               part_c_3, Selldown_NPV_Scenario_1$Selldown_Material_cost_Scenario_1[1], 
                                               Scenario_1_current$Transportation_cost_non_npv_Scenario_1[1], Scenario_1_current$Transportation_Cost_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Freight_cost_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_Freight_cost_Scenario_1[1], 
                                               (Scenario_1_current$Total_offsite_labor_cost_non_npv_Scenario_1[1] + Scenario_1_current$Total_process_cost_non_npv_Scenario_1[1]), 
                                               (Scenario_1_current$Total_offsite_labor_cost_Scenario_1[1] + Scenario_1_current$Total_process_cost_Scenario_1[1]),
                                               Selldown_NPV_Scenario_1$Selldown_Processing_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Processing_Cost_Scenario_1[1],
                                               Scenario_1_current$Storage_Cost_non_npv_Scenario_1[1],
                                               Scenario_1_current$Storage_Cost_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Storage_Cost_non_npv_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Storage_Cost_Scenario_1[1],
                                               Scenario_1_current$Package_cost_non_npv_Scenario_1[1], Scenario_1_current$Package_cost_Scenario_1[1], 
                                               Selldown_NPV_Scenario_1$Selldown_Package_Cost_non_npv_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_Package_Cost_Scenario_1[1],
                                               Scenario_1_current$Setup_cost_Scenario_1[1], Scenario_1_current$Setup_cost_Scenario_1[1],
                                               Scenario_1_current$Additional_cost_Scenario_1[1], Scenario_1_current$Expense_non_npv_Scenario_1[1], Scenario_1_current$Expense_Scenario_1[1],
                                               Scenario_1_current$Profit_Non_NPV_Scenario_1[1], Scenario_1_current$NPV_Scenario_1[1], Selldown_NPV_Scenario_1$Selldown_NPV_non_npv_Scenario_1[1],
                                               Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1], Current_Inventory, (purchase_oes + purchase_iam + purchase_allied),
                                               (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied),
                                               Scenario_1_current$Total_Forecast_Scenario_1[1], Scenario_1_current$Scrap_amount_Scenario_1[1], moq,
                                               std_p)
      }
      
      income_report_scenario_1$Per_unit[c(10:11)] <- income_report_scenario_1$Per_unit[c(10:11)] / Scenario_1_current$Total_Forecast_Scenario_1[1]
      
      div_oes <- ifelse(inventory_oes > sales_oes, sales_oes, inventory_oes)
      div_iam <- ifelse(inventory_iam > sales_iam, sales_iam, inventory_iam)
      div_allied <- ifelse(inventory_allied > sales_allied, sales_allied, inventory_allied)
      div_inventory <- ifelse(Current_Inventory > Scenario_1_current$Total_Forecast_Scenario_1, Scenario_1_current$Total_Forecast_Scenario_1, Current_Inventory)
      
      income_report_scenario_1$Per_unit[c(15:16)] <- income_report_scenario_1$Per_unit[c(15:16)] / div_inventory
      income_report_scenario_1$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] <- income_report_scenario_1$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] / purchase_inventory
      income_report_scenario_1$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] <- income_report_scenario_1$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] / Current_Inventory
      income_report_scenario_1$Per_unit <- ifelse(is.nan(income_report_scenario_1$Per_unit), 0, income_report_scenario_1$Per_unit)
      
      income_report_scenario_1$OES <- 0
      income_report_scenario_1$IAM <- 0
      income_report_scenario_1$Allied_export <- 0
      income_report_scenario_1$Total <- 0
      
      income_report_scenario_1$OES[1] <- income_report_scenario_1$Per_unit[1] * sales_oes
      income_report_scenario_1$OES[4] <- (ATB_ADS$Discount_oes_percent/100) * income_report_scenario_1$OES[1]
      income_report_scenario_1$OES[7] <- income_report_scenario_1$OES[1] - income_report_scenario_1$OES[4]
      income_report_scenario_1$Per_unit[7] <- income_report_scenario_1$OES[7] / sales_oes
      income_report_scenario_1$OES[10] <-  income_report_scenario_1$OES[7]
      
      income_report_scenario_1$IAM[2] <- income_report_scenario_1$Per_unit[2] * sales_iam
      income_report_scenario_1$IAM[5] <- (ATB_ADS$Discount_iam_percent/100) * income_report_scenario_1$IAM[2]
      income_report_scenario_1$IAM[8] <- income_report_scenario_1$IAM[2] - income_report_scenario_1$IAM[5]
      income_report_scenario_1$Per_unit[8] <- income_report_scenario_1$IAM[8] / sales_iam
      income_report_scenario_1$IAM[10] <-  income_report_scenario_1$IAM[8]
      
      income_report_scenario_1$Allied_export[3] <- income_report_scenario_1$Per_unit[3] * sales_allied
      income_report_scenario_1$Allied_export[6] <- (ATB_ADS$Discount_allied_export_percent/100) * income_report_scenario_1$Allied_export[3]
      income_report_scenario_1$Allied_export[9] <- income_report_scenario_1$Allied_export[3] - income_report_scenario_1$Allied_export[6]
      income_report_scenario_1$Per_unit[9] <- income_report_scenario_1$Allied_export[9] / sales_allied
      income_report_scenario_1$Allied_export[10] <-  income_report_scenario_1$Allied_export[9]
      
      income_report_scenario_1$Per_unit[12] <- income_report_scenario_1$Per_unit[7]
      income_report_scenario_1$Per_unit[13] <- income_report_scenario_1$Per_unit[8]
      income_report_scenario_1$Per_unit[14] <- income_report_scenario_1$Per_unit[9]
      
      income_report_scenario_1$OES[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] <- income_report_scenario_1$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] * purchase_inventory_oes
      
      income_report_scenario_1$OES[11:16] <-c( Scenario_1_current$Revenue_OES_discount_1[1],(income_report_scenario_1$Per_unit[12] * div_oes), 0,0,
                                               (income_report_scenario_1$Per_unit[12] * div_oes),
                                               Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1_OES[1])
      
      income_report_scenario_1$OES[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_1$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_oes
      income_report_scenario_1$OES[44] <- income_report_scenario_1$OES[15] - sum(income_report_scenario_1$OES[c(19,23,27,31,35)])
      income_report_scenario_1$OES[45] <- income_report_scenario_1$OES[16] - sum(income_report_scenario_1$OES[c(20,24,28,32,36)])
      
      income_report_scenario_1$OES[c(46:49)] <- c(inventory_oes, purchase_oes,purchase_inventory_oes , sales_oes)
      
      income_report_scenario_1$OES[40] <- income_report_scenario_1$OES[17] + income_report_scenario_1$OES[21] + income_report_scenario_1$OES[25] + income_report_scenario_1$OES[29] + income_report_scenario_1$OES[33] + income_report_scenario_1$OES[37] + income_report_scenario_1$OES[39]
      income_report_scenario_1$OES[41] <- income_report_scenario_1$OES[18] + income_report_scenario_1$OES[22] + income_report_scenario_1$OES[26] + income_report_scenario_1$OES[30] + income_report_scenario_1$OES[34] + income_report_scenario_1$OES[38] + income_report_scenario_1$OES[39]
      
      income_report_scenario_1$OES[42] <- income_report_scenario_1$OES[10] - income_report_scenario_1$OES[40]
      income_report_scenario_1$OES[43] <- income_report_scenario_1$OES[11] - income_report_scenario_1$OES[41]
      
      ##
      income_report_scenario_1$IAM[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_1$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_iam
      
      income_report_scenario_1$IAM[11:16] <-c(Scenario_1_current$Revenue_IAM_discount_1[1], 0, (income_report_scenario_1$Per_unit[13] * div_iam), 0,
                                              (income_report_scenario_1$Per_unit[13] * div_iam),
                                              Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1_IAM[1])
      
      income_report_scenario_1$IAM[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_1$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_iam
      income_report_scenario_1$IAM[44] <- income_report_scenario_1$IAM[15] - sum(income_report_scenario_1$IAM[c(19,23,27,31,35)])
      income_report_scenario_1$IAM[45] <- income_report_scenario_1$IAM[16] - sum(income_report_scenario_1$IAM[c(20,24,28,32,36)])
      
      income_report_scenario_1$IAM[c(46:49)] <- c(inventory_iam, purchase_iam, purchase_inventory_iam, sales_iam)
      
      income_report_scenario_1$IAM[40] <- income_report_scenario_1$IAM[17] + income_report_scenario_1$IAM[21] + income_report_scenario_1$IAM[25] + income_report_scenario_1$IAM[29] + income_report_scenario_1$IAM[33] + income_report_scenario_1$IAM[37] + income_report_scenario_1$IAM[39]
      income_report_scenario_1$IAM[41] <- income_report_scenario_1$IAM[18] + income_report_scenario_1$IAM[22] + income_report_scenario_1$IAM[26] + income_report_scenario_1$IAM[30] + income_report_scenario_1$IAM[34] + income_report_scenario_1$IAM[38] + income_report_scenario_1$IAM[39]
      income_report_scenario_1$IAM[42] <- income_report_scenario_1$IAM[10] - income_report_scenario_1$IAM[40]
      income_report_scenario_1$IAM[43] <- income_report_scenario_1$IAM[11] - income_report_scenario_1$IAM[41]
      
      ####
      income_report_scenario_1$Allied_export[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_1$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_allied
      income_report_scenario_1$Allied_export[11:16] <-c( Scenario_1_current$Revenue_Allied_discount_1[1], 0, 0, (income_report_scenario_1$Per_unit[14] * div_allied),
                                                         (income_report_scenario_1$Per_unit[14] * div_allied),
                                                         Selldown_NPV_Scenario_1$Selldown_Revenue_Scenario_1_Allied[1])
      
      income_report_scenario_1$Allied_export[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_1$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_allied
      income_report_scenario_1$Allied_export[44] <- income_report_scenario_1$Allied_export[15] - sum(income_report_scenario_1$Allied_export[c(19,23,27,31,35)])
      income_report_scenario_1$Allied_export[45] <- income_report_scenario_1$Allied_export[16] - sum(income_report_scenario_1$Allied_export[c(20,24,28,32,36)])
      
      income_report_scenario_1$Allied_export[c(46:49)] <- c(inventory_allied, purchase_allied, purchase_inventory_allied, sales_allied)
      
      income_report_scenario_1$Allied_export[40] <- income_report_scenario_1$Allied_export[17] + income_report_scenario_1$Allied_export[21] + income_report_scenario_1$Allied_export[25] + income_report_scenario_1$Allied_export[29] + income_report_scenario_1$Allied_export[33] + income_report_scenario_1$Allied_export[37] + income_report_scenario_1$Allied_export[39]
      income_report_scenario_1$Allied_export[41] <- income_report_scenario_1$Allied_export[18] + income_report_scenario_1$Allied_export[22] + income_report_scenario_1$Allied_export[26] + income_report_scenario_1$Allied_export[30] + income_report_scenario_1$Allied_export[34] + income_report_scenario_1$Allied_export[38] + income_report_scenario_1$Allied_export[39]
      
      income_report_scenario_1$Allied_export[42] <- income_report_scenario_1$Allied_export[10] - income_report_scenario_1$Allied_export[40]
      income_report_scenario_1$Allied_export[43] <- income_report_scenario_1$Allied_export[11] - income_report_scenario_1$Allied_export[41]
      
      income_report_scenario_1$Per_unit <- ifelse(is.nan(income_report_scenario_1$Per_unit), 0, income_report_scenario_1$Per_unit)
      income_report_scenario_1$OES <- ifelse(is.nan(income_report_scenario_1$OES), 0, income_report_scenario_1$OES)
      income_report_scenario_1$IAM <- ifelse(is.nan(income_report_scenario_1$IAM), 0, income_report_scenario_1$IAM)
      income_report_scenario_1$Allied_export <- ifelse(is.nan(income_report_scenario_1$Allied_export), 0, income_report_scenario_1$Allied_export)
      income_report_scenario_1$Total <- ifelse(is.nan(income_report_scenario_1$Total), 0, income_report_scenario_1$Total)
      
      income_report_scenario_1$Total <- income_report_scenario_1$Allied_export + income_report_scenario_1$IAM + income_report_scenario_1$OES
      
      income_report_scenario_1$Total[50:52] <- income_report_scenario_1$Per_unit[50:52]
      
      revenue_non <- as.numeric(income_report_scenario_1$Total[10])
      material_non <- as.numeric(income_report_scenario_1$Total[17])
      
      
      ## Displaying result of Scenario-1
      shinyjs::show("Scen_1")
      
      output$Scen_1 <- renderHotable({
        
        part_view <- 0
        part_view<- as.data.frame(part_view)
        part_view$part_view <- NULL
        part_view$Fields <- "NPV($)" 
        part_view[2,1]<- "Selldown NPV($)"       
        part_view[3,1]<- "Net"
        part_view[4,1]<- "Scrap"
        part_view[5,1]<- "Dealer Price($): OES"
        part_view[6,1]<- "Dealer Price($): Allied/Export"
        part_view[7,1]<- "Dealer Price($): IAM"
        part_view[8,1]<- "First Buy"
        part_view[9,1]<- "Last Buy"
        part_view[10,1]<- "Last Sale"    
        part_view[11,1]<- "Lifetime Revenue(NPV)" 
        part_view[12,1]<- "Lifetime Revenue(Non NPV)"
        part_view[13,1]<- "Material Cost(NPV)"
        part_view[14,1]<- "Material Cost(Non NPV)"
        part_view[15,1]<- "Setup Cost(NPV)"
        part_view[16,1]<- "Transportation Cost(NPV)"
        part_view[17,1]<- "Labor Cost(NPV)"
        part_view[18,1]<- "Storage Cost(NPV)"
        part_view[19,1]<- "Packaging Cost(NPV)"
        part_view[20,1]<- "Offsite Labor Cost(NPV)"
        part_view[21,1]<- "Offsite Trans Cost(NPV)"
        part_view[22,1]<- "Total Expense(NPV)"
        part_view[23,1]<- "Optimal NPV"
        part_view[24,1]<- "Optimal Buy Qty"
        part_view[25,1]<- "Total Purchase"
        part_view[26,1]<- "Inventory and Purchase"
        part_view[27,1]<- "Extended Optimal Buy Cost"
        part_view[28,1]<- "Extended Buy Qty Cost"
        
        part_view$Values <- paste("$", formatC(Scenario_1_current$NPV_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[2, 2] <-  paste("$", formatC(Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[3, 2] <-  paste("$", formatC((Scenario_1_current$NPV_Scenario_1[1] - Selldown_NPV_Scenario_1$Selldown_NPV_Scenario_1[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[4, 2] <- round(Scenario_1_current$Scrap_amount_Scenario_1[1], 0)
        part_view[5, 2] <- paste("$", formatC(Scenario_1_optimal$Dealer_Price_OES_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[6, 2] <- paste("$", formatC(Scenario_1_optimal$Dealer_Price_Allied_Export_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[7, 2] <- paste("$", formatC(Scenario_1_optimal$Dealer_Price_IAM_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[8, 2] <- as.character(round(First_buy,0))
        part_view[9, 2] <- as.character(round(Last_buy,0))
        part_view[10, 2] <- as.character(round(Last_sale,0))
        part_view[11, 2] <- paste("$", formatC(Scenario_1_current$Revenue_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[12, 2] <- paste("$", formatC(Scenario_1_current$Revenue_non_npv_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[13, 2] <- paste("$", formatC(Scenario_1_current$Part_Cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[14, 2] <- paste("$", formatC(Scenario_1_current$Material_cost_non_npv_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[15, 2] <- paste("$", formatC(setup_cost , big.mark=",", digits=2, format="f"), sep = " ")
        part_view[16, 2] <-  paste("$", formatC(Scenario_1_current$Total_transport_cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[17, 2] <-  paste("$", formatC((Scenario_1_current$Total_process_cost_Scenario_1[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[18, 2] <-  paste("$", formatC(Scenario_1_current$Storage_Cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[19, 2] <-  paste("$", formatC((Scenario_1_current$Package_cost_Scenario_1[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[20, 2] <-  paste("$", formatC(Scenario_1_current$Total_offsite_labor_cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[21, 2] <-  paste("$", formatC(Scenario_1_current$Total_offsite_transport_cost_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[22, 2] <-  paste("$", formatC(Scenario_1_current$Expense_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[23, 2] <-  paste("$", formatC(Scenario_1_optimal$Optimal_NPV_Scenario_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[24, 2] <- paste(formatC(ceiling(Scenario_1_optimal$Optimal_ATB_Quantity_Scenario_1[1]), big.mark=",", digits=0, format="f"))
        part_view[25,2] <-  paste(formatC((Scenario_1_current$Total_Purchase_Qty_1[1]), big.mark=",", digits=0, format="f"))
        part_view[26,2] <-  paste(formatC(Scenario_1_current$Total_Inventory_Purchase_1[1], big.mark=",", digits=0, format="f"))
        part_view[27, 2] <-  paste("$", formatC(Scenario_1_optimal$Extended_optimal_buy_cost_1[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[28, 2] <-  paste("$", formatC(Scenario_1_current$Extended_purchase_cost_1[1], big.mark=",", digits=2, format="s"), sep = " ")
        
        part_view
        
      }, readOnly = TRUE)
      
      ## Formatting the results for income report 
      income_report_scenario_1$Per_unit[c(1:3, 7:16, 18, 20:45)] <- paste("$", formatC(income_report_scenario_1$Per_unit[c(1:3, 7:16, 18, 20:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_1$Per_unit[c(17, 19)] <- paste("$", formatC(income_report_scenario_1$Per_unit[c(17, 19)], big.mark=",", digits=7, format="f"), sep = " ")
      
      income_report_scenario_1$Per_unit[c(4:6)] <- paste(formatC(income_report_scenario_1$Per_unit[c(4:6)], big.mark=",", digits=20, format="f"), "%" , sep = " ")
      income_report_scenario_1$Per_unit[c(46:52)] <- paste(formatC(income_report_scenario_1$Per_unit[c(46:52)], big.mark=",", digits=20, format="f"))
      
      income_report_scenario_1$OES[c(1:45)] <- paste("$", formatC(income_report_scenario_1$OES[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_1$OES[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_1$OES[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_1$IAM[c(1:45)] <- paste("$", formatC(income_report_scenario_1$IAM[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_1$IAM[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_1$IAM[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_1$Allied_export[c(1:45)] <- paste("$", formatC(income_report_scenario_1$Allied_export[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_1$Allied_export[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_1$Allied_export[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_1$Total[c(1:45)] <- paste("$", formatC(income_report_scenario_1$Total[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_1$Total[c(46:52)] <- paste(formatC(income_report_scenario_1$Total[c(46:52)], big.mark=",", digits=20, format="f"))
      
      income_report_scenario_1$Per_unit[c(10,11,15,16,40:45)] <- "-"
      income_report_scenario_1[c(12:16, 19,20,23,24,27,28,31,32,35,36,44,45), c(2:6)] <- "-"
      
      output$download_income_report_s_1 <- downloadHandler(
        filename = function() {
          paste("Income_statement_report_s_1", ".csv", sep="") 
        },
        content = function(file) {
          abc <- income_report_scenario_1
          
          write.csv(abc, file)
          
        }
      )
      
    } # Closing for Progress Indicator
        ) 
    ############################ Closing of Scenario-1
    #####
    #####
    ############################ Starting of Scenario-2
    
    shinyjs::enable("download_all_scenario")
    shinyjs::enable("downloadData_s_2")
    shinyjs::enable("download_income_report_s_2")
    
    part_info <- global_ads$df_data_ads
    
    part_inform <- as.data.frame(part_info)
    part_inform$X <- NULL
    part_inform$PART_NBR<- str_pad(part_inform$PART_NBR, width=8, side="left", pad="0")
    
    ATB_ADS <- part_inform[which(part_inform$PART_NBR == input$Part_Number),]
    
    #----------------------------------------
    ####### Code for Scenario - 2    
    #----------------------------------------
    
    ######### Code for Scenario-2-Optimal    
    
    withProgress(message = 'Processing in Progress', value = 0, {
      
      DLR_Price_3 <- round(as.numeric(scenario_2$Values[1]), 4)
      wd_price <- round(as.numeric(scenario_2$Values[2]), 4)
      
      Dealer_Price_Allied_Export <- DLR_Price_3 * (1 - (ATB_ADS$Discount_allied_export_percent[1]/100))
      Dealer_Price_OES <- DLR_Price_3 * (1 - (ATB_ADS$Discount_oes_percent[1]/100))
      Dealer_Price_IAM <- wd_price * (1 - (ATB_ADS$Discount_iam_percent[1]/100))
      
      part_c_3 <- round(as.numeric(scenario_2$Values[3]) , 5)
      moq <- round(as.numeric(scenario_2$Values[4]) , 4)
      std_p <- round(as.numeric(scenario_2$Values[5]), 4)
      std_p <- ifelse(std_p == 0, 1, std_p)
      setup_cost <- round(as.numeric(scenario_2$Values[6]), 4)
      add_cost <- round(as.numeric(scenario_2$Values[7]), 4)
      Monthly_square_feet_cpp1 <- round(as.numeric(scenario_2$Values[8]), 7)
      Offsite_transportation_cpp1 <- round(as.numeric(scenario_2$Values[9]), 7)
      Redistribution_cpp1 <- round(as.numeric(scenario_2$Values[10]), 7)
      Offsite_Labor_cpp1 <- round(as.numeric(scenario_2$Values[11]), 7)
      Inbound_Labor_cpp1 <- round(as.numeric(scenario_2$Values[12]), 7)
      Outbound_Labor_cpp1 <- round(as.numeric(scenario_2$Values[13]), 7)
      Average_Labor_cpp1 <- round(as.numeric(scenario_2$Values[14]), 7)
      Average_Processing_cpp1 <- round(as.numeric(scenario_2$Values[15]), 7)
      Inbound_Transportation_cpp1 <- round(as.numeric(scenario_2$Values[16]), 7)
      Outbound_Transportation_cpp1 <- round(as.numeric(scenario_2$Values[17]), 7)
      
      Current_Inventory <-  round(as.numeric(scenario_2$Values[18]), 4)
      #ONSITE_TRANS_COST_PER_PIECE
      Onsite_trans_cpp1 <- Inbound_Transportation_cpp1 + Outbound_Transportation_cpp1 + Redistribution_cpp1
      #ONSITE_PRCS_COST_PP
      Onsite_procs_cpp1 <- Inbound_Labor_cpp1 + Outbound_Labor_cpp1 + Average_Labor_cpp1 + Average_Processing_cpp1
      
      incProgress(1/4, detail = "Running Calculations")
      
      ##### ATB Scenario calculation
      
      Scenario_2_optimal <- data.frame()
      NPV_Data_2 <- data.frame()
      First_buy <- 0
      Last_sale <- 0
      flag <- 0
      flag_last_buy <- 0
      Last_buy <- 0
      
      for (jj in (1:nrow(ATB_ADS))) {
        
        cat("\nsc_2_opt Part Number: ",jj," : ", ATB_ADS[jj,1])
        final_NPV_list <- 0
        Optimal_year_count_list <- 1
        LTBQ_list <- 0
        Year_list <- c()
        FCST_list <- c()
        NPV_CR_list <- c()
        Revenue_CR_list <- c()
        Revenue_list_non_npv <- c()
        Expense_list <- c()
        Storage_cost_CR_list <- c()
        Freight_cost_CR_list <- c()
        Processing_cost_CR_list <- c()
        
        transport_cost <- c()
        offsite_transport_cost <- c()
        offsite_labor_cost <- c()
        process_cost <- c()
        packaging_cost <- c()
        
        Material_cost_CR_list <- c()
        Buy_quantity_list <- c()
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        
        for(nn in (1:30)){
          FCST_list[nn] <- ATB_ADS[jj,(YI-1+nn)]
        }
        
        FCST_list[1] <- FCST_list[1] + ATB_ADS$CURRENT_YEAR[jj]
        FCST_list <- Updated_FCST
        
        if(FCST_list[1] != 0)
        {
          First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
        } else
        {
          First_buy <- 0
        }
        
        for(i in 1:30)
        {
          if(FCST_list[i] == 0 & flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
            flag = 1
          } 
        }
        if(flag != 1)
        {
          Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
        }
        
        
        ###########
        Sum_Forecast <- sum(FCST_list)
        
        iam_weight <- ATB_ADS$IAM_FRACTION[jj]
        oes_weight <- ATB_ADS$OES_FRACTION[jj]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[jj]
        
        FCST_iam <- round(FCST_list * iam_weight, digits = 0)
        FCST_oes <- round(FCST_list * oes_weight, digits = 0)
        FCST_allied <- round(FCST_list * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
        
        Diff_FCST <- Sum_FCST - Sum_Forecast
        
        if(Sum_Forecast > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied!=0),1)
          } else
          {
            index <- 1
          }
        } else
        {
          index <- 1
        }
        
        if(length(index)==0)
        {
          index <- 1
        }
        
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
        {
          FCST_oes[index] <- FCST_oes[index] - Diff_FCST
          
        } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
        {
          FCST_iam[index] <- FCST_iam[index] - Diff_FCST
          
        } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
        {
          FCST_allied[index] <- FCST_allied[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied[index] <- 0
        }
        
        for(i in 1:30)
        {
          FCST_list[i] <- FCST_allied[i] + FCST_iam[i] + FCST_oes[i]
        }
        ###########
        
        for (nn in (1:30)) {
          Sum_Forecast_list <- sum(FCST_list[1:nn])
          BQ_list <- Sum_Forecast_list
          qty_list <- 0
          yr_qty_list <- c()
          
          if(nn > 1){
            for (ii in (1:(nn-1))) {
              ss <- ((BQ_list - sum(FCST_list[1:ii])) + (BQ_list - sum(FCST_list[1:(1+ii)])))/2
              qty_list <- qty_list + ss 
              yr_qty_list[ii+1] <- ss
            }
          }
          yr_qty_list[1] <- (2*BQ_list - FCST_list[1])/2        
          
          Total_storage_qty_list <- sum(yr_qty_list)
          Storage_Cost_list <- 0
          revenue_list <- 0
          revenue_list_non_npv <- 0
          revenue_iam <- 0
          revenue_oes <- 0
          revenue_allied <- 0
          
          for(kk in (1: (nn) ))
          {
            CR <- ((1-(0.15/12))^(kk*12))
            revenue_list <- revenue_list + (FCST_list[kk] * CR *((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam[kk] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes[kk] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied[kk] * CR * (Dealer_Price_Allied_Export))
            
            revenue_list_non_npv <- revenue_list_non_npv + ((FCST_list[kk]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[jj]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[jj]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[jj])))
            Storage_Cost_list <- Storage_Cost_list + ((yr_qty_list[kk])*Monthly_square_feet_cpp1 * CR)
            
          }
          
          offsite_quantity <- ifelse((BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))) > 0, (BQ_list - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[jj]) * ((as.numeric(FCST_list[1])/12)/4.33))), 0)
          
          Offsite_trans_cost_list <- Offsite_transportation_cpp1 * offsite_quantity
          Freight_cost_list <- ((Onsite_trans_cpp1 * BQ_list) + Offsite_trans_cost_list) * (1-(0.15/12))
          Offsite_labour_cost_list <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          Total_Processing_cost_list <- ((Onsite_procs_cpp1 * BQ_list) + Offsite_labour_cost_list) * (1-(0.15/12))
          Material_cost_list <- (part_c_3*BQ_list)*(1-(0.15/12))
          
          Total_transport_cost <- (Onsite_trans_cpp1 * BQ_list) * (1-(0.15/12))
          Total_offsite_transport_cost <- Offsite_trans_cost_list * (1-(0.15/12))
          Total_offsite_labor_cost <- Offsite_labour_cost_list * (1-(0.15/12))
          Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ_list) * (1-(0.15/12))
          Total_package_cost <- Average_Processing_cpp1 * BQ_list * (1-(0.15/12))
          
          Total_Expense_list <- Storage_Cost_list + Freight_cost_list + Total_Processing_cost_list + Material_cost_list + setup_cost + add_cost
          revenue_list <- revenue_iam + revenue_oes + revenue_allied
          NPV_with_capital_rate_list <- revenue_list - Total_Expense_list
          Year_list[nn] <- nn
          NPV_CR_list[nn] <- NPV_with_capital_rate_list
          Expense_list[nn] <- Total_Expense_list
          Revenue_CR_list[nn] <- revenue_list
          Revenue_list_non_npv[nn] <- revenue_list_non_npv
          Storage_cost_CR_list[nn] <- Storage_Cost_list
          Freight_cost_CR_list[nn] <- Freight_cost_list
          Processing_cost_CR_list[nn] <- Total_Processing_cost_list
          Material_cost_CR_list[nn] <- Material_cost_list
          Buy_quantity_list[nn] <- BQ_list
          
          transport_cost[nn] <- Total_transport_cost
          offsite_transport_cost[nn] <- Total_offsite_transport_cost
          offsite_labor_cost[nn] <- Total_offsite_labor_cost
          process_cost[nn] <- Total_process_cost
          packaging_cost[nn] <- Total_package_cost
          
          if( NPV_with_capital_rate_list>0 ) {
            
            if(final_NPV_list<NPV_with_capital_rate_list){
              
              final_NPV_list <- NPV_with_capital_rate_list
              Optimal_year_count_list <- nn
              LTBQ_list <- BQ_list
              Total_Expense_NPV_list <- Total_Expense_list
              Revenue_NPV_list <- revenue_list
              Revenue_NPV_list_non_npv <- revenue_list_non_npv
              Storage_cost_NPV_list <- Storage_Cost_list
              Freight_cost_NPV_list <- Freight_cost_list
              Processing_cost_NPV_list <- Total_Processing_cost_list
              Material_cost_NPV_list <- Material_cost_list
              
              transport_cost_list <- Total_transport_cost
              offsite_transport_cost_list <- Total_offsite_transport_cost
              offsite_labor_cost_list <- Total_offsite_labor_cost
              process_cost_list <- Total_process_cost
              package_cost_list <- Total_package_cost
              
            }
          } else if((nn==1) && (NPV_with_capital_rate_list<=0)) {
            
            Optimal_year_count_list <- 0
            Total_Expense_NPV_list <- Expense_list[1]
            Revenue_NPV_list <- Revenue_CR_list[1]
            Revenue_NPV_list_non_npv <- Revenue_list_non_npv[1]
            Storage_cost_NPV_list <- Storage_cost_CR_list[1]
            Freight_cost_NPV_list <- Freight_cost_CR_list[1]
            Processing_cost_NPV_list <- Processing_cost_CR_list[1]
            Material_cost_NPV_list <- Material_cost_CR_list[1]
            
            transport_cost_list <- transport_cost[1]
            offsite_transport_cost_list <- offsite_transport_cost[1]
            offsite_labor_cost_list <- offsite_labor_cost[1]
            process_cost_list <- process_cost[1]
            package_cost_list <- packaging_cost[1]
          }
        }
        
        if(offsite_transport_cost_list < 0 )
        {
          offsite_transport_cost_list <- 0
        }
        if(offsite_labor_cost_list < 0)
        {
          offsite_labor_cost_list <- 0
        }
        
        LTBQ_list <- LTBQ_list - Current_Inventory
        
        if(LTBQ_list <= 0)
        {
          LTBQ_list = 0
        }
        Extended_optimal_buy_cost <- LTBQ_list * part_c_3
        
        Material_cost_list_non_npv <- (Material_cost_NPV_list / (1-(0.15/12)))
        Scenario_2_optimal <- data.frame(lapply(Scenario_2_optimal, as.character), stringsAsFactors=FALSE)
        Scenario_2_optimal <- rbind(Scenario_2_optimal, c(ATB_ADS[jj,1],Storage_cost_NPV_list,Freight_cost_NPV_list,Processing_cost_NPV_list,
                                                          Material_cost_NPV_list,Total_Expense_NPV_list,Revenue_NPV_list,final_NPV_list,
                                                          Optimal_year_count_list,LTBQ_list,Revenue_NPV_list_non_npv, Material_cost_list_non_npv,
                                                          transport_cost_list, offsite_transport_cost_list, offsite_labor_cost_list, process_cost_list,
                                                          setup_cost,DLR_Price_3, Dealer_Price_OES, Dealer_Price_Allied_Export, wd_price,Dealer_Price_IAM,
                                                          ATB_ADS$Discount_iam_percent[jj], ATB_ADS$Discount_oes_percent[jj], ATB_ADS$Discount_allied_export_percent[jj],
                                                          package_cost_list, Extended_optimal_buy_cost, add_cost, Current_Inventory))
        
        NPV_Data_2 <- data.frame(ATB_ADS[jj,1],Year_list,FCST_list,Storage_cost_CR_list,Freight_cost_CR_list,Processing_cost_CR_list,Material_cost_CR_list,Buy_quantity_list,Expense_list,Revenue_CR_list,NPV_CR_list)
      }
      colnames(Scenario_2_optimal) <- c("Part_Nbr","Optimal_Storage_Cost_Scenario_2","Optimal_Transportation_Cost_Scenario_2",
                                        "Optimal_Processing_Cost_Scenario_2","Optimal_Material_Cost_Scenario_2","Optimal_Expense_Scenario_2",
                                        "Optimal_Revenue_Scenario_2","Optimal_NPV_Scenario_2","Optimal_year_count_Scenario_2","Optimal_ATB_Quantity_Scenario_2",
                                        "Optimal_Revenue_Non_Npv_Scenario_2", "Optimal_Material_cost_non_npv_Scenario_2", "Optimal_Total_transport_cost_Scenario_2",
                                        "Optimal_Total_offsite_transport_cost_Scenario_2","Optimal_Total_offsite_labor_cost_Scenario_2",
                                        "Optimal_Total_process_cost_Scenario_2", "Optimal_Setup_cost_Scenario_2", "Proposed_Dealer_Price_2",
                                        "Dealer_Price_OES_2", "Dealer_Price_Allied_Export_2", "Proposed_Wd_Price_2", "Dealer_Price_IAM_2", 
                                        "Discount_iam_percent", "Discount_oes_percent", "Discount_allied_export_percent", "Optimal_Packaging_cost_Scenario_2",
                                        "Extended_optimal_buy_cost_2", "Additional_Cost_2", "Total_Inventory")
      
      Scenario_2_optimal <- data.frame(lapply(Scenario_2_optimal, as.character), stringsAsFactors=FALSE)
      Scenario_2_optimal <- data.frame(lapply(Scenario_2_optimal, as.numeric), stringsAsFactors=FALSE)
      Scenario_2_optimal <- Scenario_2_optimal %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      Scenario_2_optimal$Part_Nbr <- str_pad(Scenario_2_optimal$Part_Nbr, width=8, side="left", pad="0")
      
      
      incProgress(1/4, detail = "Running Calculations")
      
      ########## Code for Scenario-2: Current 
      if(input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
      {
        BQ_S2 <- as.numeric(ATB_ADS$Buy_Quantity_Scenario_2)
      } else
      {
        BQ_S2 <- NA
      }
      
      if(is.na(BQ_S2))
      {
        Scenario_2_current <- data.frame()
        shinyjs::enable("download_income_report_s_2")
        for(j in (1:nrow(ATB_ADS)))
        {
          cat("\nsc_2_cur Part Number: ",j," : ", ATB_ADS[j,1])
          FCST <- c()
          Curr_Inv <- round(as.numeric(scenario_2$Values[18]), 4)
          Curr_Inv_copy <- Curr_Inv
          Revenue <- c()
          
          Revenue_Allied <- c()
          Revenue_OES <- c()
          Revenue_IAM <- c()
          
          Revenue_non_npv <- c()
          AMD <- c()
          AMD_iam <- c()
          AMD_oes <- c()
          AMD_allied <- c()
          
          First_buy <- 0
          Last_sale <- 0
          Last_buy <- 0
          flag <- 0
          flag_last_buy <- 0
          
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
            Revenue[n] <- 0
            Revenue_Allied[n] <- 0
            Revenue_OES[n] <- 0
            Revenue_IAM[n] <- 0
            
            Revenue_non_npv[n] <- 0
          }
          
          FCST[1] <- ATB_ADS$CURRENT_YEAR[j] + FCST[1]
          FCST <- Updated_FCST
          
          Total_FCST <- sum(FCST)
          
          if(FCST[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          ###########          
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam <- round(FCST * iam_weight, digits = 0)
          FCST_oes <- round(FCST * oes_weight, digits = 0)
          FCST_allied <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Total_FCST
          
          if(Total_FCST > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          ###########          
          for(n in (1:30)){
            AMD[n] <- FCST[n]/12
            AMD_oes[n] <- FCST_oes[n] / 12
            AMD_iam[n] <- FCST_iam[n] / 12
            AMD_allied[n] <- FCST_allied[n] / 12
          }
          
          
          for(k in (1:30))
          {
            CR <- ((1-(0.15/12))^(k*12))
            Revenue[k] <- Revenue[k] + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
            
            Revenue_Allied[k] <- Revenue_Allied[k] + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
            Revenue_OES[k] <- Revenue_OES[k] + (FCST_oes[k] * CR * (Dealer_Price_OES))
            Revenue_IAM[k] <- Revenue_IAM[k] + (FCST_iam[k] * CR * (Dealer_Price_IAM))
            
            Revenue_non_npv[k] <- Revenue_non_npv[k] + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
            
            
          }
          
          Revenue_OES_non_npv_no_discount <- Total_FCST * DLR_Price_3 * ATB_ADS$OES_FRACTION[j]
          Revenue_IAM_non_npv_no_discount <- Total_FCST * wd_price * ATB_ADS$IAM_FRACTION[j]
          Revenue_Allied_non_npv_no_discount <- Total_FCST * DLR_Price_3 * ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          Revenue_OES_non_npv_discount <- sum(FCST_oes) * Dealer_Price_OES
          Revenue_IAM_non_npv_discount <- sum(FCST_iam) * Dealer_Price_IAM 
          Revenue_Allied_non_npv_discount <- sum(FCST_allied) * Dealer_Price_Allied_Export
          
          Revenue_Allied_discount <- sum(Revenue_Allied)
          Revenue_OES_discount <- sum(Revenue_OES)
          Revenue_IAM_discount <- sum(Revenue_IAM)
          
          year <- 0
          month <- 0
          get_demand <- 0
          
          for(i in 1:30)
          {
            get_demand = get_demand + FCST[i]
            if(Curr_Inv > get_demand)
            {
              year = year + 1
            } else if(Curr_Inv <= FCST[1])
            {
              remain = Curr_Inv
              
              year_remain = FCST[1] - remain
              
              month = 1
              demand_for_break_year = 0
              for(i in 1:12)
              {
                demand_for_break_year = demand_for_break_year + (FCST[1] / 12)
                if(remain > demand_for_break_year)
                {
                  month = month + 1
                }
              }
              
              FCST[year+1] <- remain
              Sum_Forecast <- sum(FCST[1:(year+1)])
              break()
            }
          }
          
          ###
          if(Curr_Inv > FCST[1] & year < 30)
          {
            remain <- Curr_Inv - sum(FCST[1:year])
            
            year_remain <- FCST[(year+1)] - remain
            
            month = 1
            demand_for_break_year = 0
            for(i in 1:12)
            {
              demand_for_break_year = demand_for_break_year + (FCST[year+1] / 12)
              if(remain > demand_for_break_year)
              {
                month = month+1
              }
            }
            
            FCST[year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(year+1)])
          } else if(year >= 30)
          {
            remain <- Curr_Inv - sum(FCST[1:year])
            FCST[year+1] <- 0
            year_remain <- 0
            Sum_Forecast <- sum(FCST[1:(year + 1)])
            month <- 0
          }
          
          
          BQ <- ceiling(Curr_Inv)
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(year))) {
            storage_qty <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + storage_qty
            yr_qty[i+1] <- storage_qty
          }
          
          yr_qty[1] <- (2*BQ - FCST[1])/2        
          yr_qty[year + 2] <- 0
          
          Storage_Cost_Curr_Inv <- 0
          Storage_Cost_Curr_Inv_non_npv <- 0
          
          
          for(k in (1 : (year + 1)))
          {
            CR <- ((1-(0.15/12))^(k*12))
            Storage_Cost_Curr_Inv <- Storage_Cost_Curr_Inv + ((yr_qty[k])* Monthly_square_feet_cpp1 * CR)
            Storage_Cost_Curr_Inv_non_npv <- Storage_Cost_Curr_Inv_non_npv + (yr_qty[k]) * Monthly_square_feet_cpp1
            
          }
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost_curr_inv <- Offsite_transportation_cpp1 * offsite_quantity
          transport_cost_curr_inv <- Onsite_trans_cpp1 * BQ * (1-(0.15/12))
          
          transport_cost_curr_inv_non_npv <- Onsite_trans_cpp1 * BQ 
          
          
          
          Freight_cost_curr_inv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv) * (1-(0.15/12))
          Freight_cost_curr_inv_non_npv <- ((Onsite_trans_cpp1 * BQ) + Offsite_trans_cost_curr_inv)
          
          Offsite_labour_cost_curr_inv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1) * (1-(0.15/12))
          Offsite_labour_cost_curr_inv_non_npv <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          
          process_cost_curr_inv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ * (1-(0.15/12))
          process_cost_curr_inv_non_npv <- (Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ
          
          package_cost_curr_inv <- Average_Processing_cpp1 * BQ * (1-(0.15/12))  
          package_cost_curr_inv_non_npv <- Average_Processing_cpp1 * BQ
          
          Total_Processing_cost_curr_inv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost_curr_inv) * (1-(0.15/12))
          Material_cost_curr_inv <- BQ * part_c_3 * (1-(0.15/12))
          Material_cost_curr_inv_non_npv <- BQ * part_c_3 
          
          
          FCST[year+1] <- year_remain
          
          Adj_Dem <- c()
          BF_BQ <- c()
          Curr_Inv <- c()
          BQ <- c()
          Purchase_times <- c()
          Yearly_BQ <- c()
          Storage_Cost <- c()
          Storage_Cost_non_npv <- c()
          Offsite_Qty <- c()
          Freight_cost <- c()
          Freight_cost_non_npv <- c()
          transport_cost <- c()
          offsite_transport_cost <- c()
          transport_cost_non_npv <- c()
          offsite_transport_cost_non_npv <- c()
          Processing_cost <- c()
          offsite_labor_cost <- c()
          offsite_labor_cost_non_npv <- c()
          process_cost <- c()
          process_cost_non_npv <- c()
          package_cost <- c()
          package_cost_non_npv <- c()
          Material_cost <- c()
          Material_cost_non_npv <- c()
          All_Expense <- c()
          
          for(i in 1:year)
          {
            Adj_Dem[i] = 0
            BF_BQ[i] = 0
            Curr_Inv[i] = 0
            BQ[i] = 0
            Purchase_times[i] = 0
            Yearly_BQ[i] = 0
            Storage_Cost[i] = 0
            Storage_Cost_non_npv[i] = 0
            Offsite_Qty[i] = 0
            Freight_cost[i] = 0
            Freight_cost_non_npv[i] = 0
            transport_cost[i] = 0
            offsite_transport_cost[i] = 0
            transport_cost_non_npv[i] = 0
            offsite_transport_cost_non_npv[i] = 0
            Processing_cost[i] = 0
            offsite_labor_cost[i] = 0
            offsite_labor_cost_non_npv[i] = 0
            process_cost[i] = 0
            process_cost_non_npv[i] = 0
            package_cost[i] = 0
            package_cost_non_npv[i] = 0
            Material_cost[i] = 0
            Material_cost_non_npv[i] = 0
            All_Expense[i] = 0
          }
          
          Total_BQ <- 0
          
          if((year + 1) < 31)
          {
            Curr_Inv[(year + 1)] <- 0
            for(k in ((year + 1) : 30)){
              Adj_Dem[k] <- (FCST[k] - Curr_Inv[k])
              BF_BQ[k] <- ifelse(k == (year + 1),((ATB_ADS$BUY_FREQ[j]*(AMD[k]/4.33)) * (12-month)/12),(ATB_ADS$BUY_FREQ[j]*(((Adj_Dem[k])/12)/4.33)))
              
              BQ[k] <- ceiling(ifelse((Curr_Inv[k] < Adj_Dem[k]),(max(moq, std_p, BF_BQ[k])), 0))
              Purchase_times[k] <- ifelse((BQ[k]!=0),(ceiling(Adj_Dem[k]/BQ[k])),0)
              Yearly_BQ[k] <- BQ[k] * Purchase_times[k]
              Curr_Inv[k+1] <- Yearly_BQ[k] - Adj_Dem[k]
              Storage_Cost[k] <- 0
              Storage_Cost_non_npv[k] <- 0
            }
            
            Total_BQ <- ceiling(sum(Yearly_BQ))
            scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
            adjusment_factor <- Total_BQ%%std_p
            
            if(adjusment_factor > scrap_amount)
            {
              Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] + (std_p - Total_BQ%%std_p)
              Total_BQ <- Total_BQ + (std_p - Total_BQ%%std_p)
              
              BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
            } else if(adjusment_factor <= scrap_amount)
            {
              Yearly_BQ[tail(which(Yearly_BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)] - Total_BQ%%std_p
              Total_BQ <- Total_BQ - Total_BQ%%std_p
              
              BQ[tail(which(BQ!=0),1)] <- Yearly_BQ[tail(which(Yearly_BQ!=0),1)]/Purchase_times[tail(which(Purchase_times!=0),1)]
            }
            
            for(i in ((year + 1):30))
            {
              if(Yearly_BQ[i] == 0 & flag_last_buy != 1)
              {
                if(i != (year + 1))
                {
                  Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + i
                  flag_last_buy = 1
                } else
                {
                  Last_buy <- 0
                  flag_last_buy = 1
                }
              } 
            }
            if(flag_last_buy != 1)
            {
              Last_buy <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
            }
            
            
            for(k in ((year + 1):30))
            {
              CR <- ((1-(0.15/12))^(k*12))
              Storage_Cost[k] <- Storage_Cost[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv[k] <- Storage_Cost_non_npv[k] + (((BQ[k])*6) * Monthly_square_feet_cpp1)
              
            }
            
            for(k in ((year + 1):30)){
              
              CR <- (1-(0.15/12))^(k*12)
              Offsite_Qty[k] <- ifelse((BQ[k] > (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),(BQ[k] - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * (as.numeric(AMD[k])/4.33))),0)
              Freight_cost[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k] * CR
              Freight_cost_non_npv[k] <- ((Onsite_trans_cpp1 * BQ[k]) + (Offsite_transportation_cpp1 * Offsite_Qty[k])) * Purchase_times[k]
              
              transport_cost[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] * CR
              offsite_transport_cost[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k] * CR
              transport_cost_non_npv[k] <- (Onsite_trans_cpp1 * BQ[k]) * Purchase_times[k] 
              offsite_transport_cost_non_npv[k] <- (Offsite_transportation_cpp1 * Offsite_Qty[k])* Purchase_times[k]
              
              Processing_cost[k] <- ((Onsite_procs_cpp1 * BQ[k]) + (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1))) * Purchase_times[k] * CR
              
              offsite_labor_cost[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k] * CR
              offsite_labor_cost_non_npv[k] <- (Offsite_Qty[k] * as.numeric(Offsite_Labor_cpp1)) * Purchase_times[k]
              
              process_cost[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k] * CR
              process_cost_non_npv[k] <- ((Onsite_procs_cpp1 - Average_Processing_cpp1) * BQ[k]) * Purchase_times[k]
              
              package_cost[k] <- Average_Processing_cpp1 * BQ[k] * CR * Purchase_times[k]
              package_cost_non_npv[k] <- Average_Processing_cpp1 * BQ[k] * Purchase_times[k]
              
              Material_cost[k] <- (part_c_3 * BQ[k]) * Purchase_times[k] * CR
              Material_cost_non_npv[k] <- (part_c_3 * BQ[k]) * Purchase_times[k]
              All_Expense[k] <- Storage_Cost[k] + Freight_cost[k] + Processing_cost[k] + Material_cost[k]
              
            }
          } else
          {
            Last_buy <- 0
          }
          
          scrap_amount <- Curr_Inv_copy + Total_BQ - Total_FCST
          
          Total_Storage_Cost_current <- sum(Storage_Cost) + Storage_Cost_Curr_Inv
          Total_Storage_Cost_current_non_npv <- sum(Storage_Cost_non_npv) + Storage_Cost_Curr_Inv_non_npv
          Total_Freight_cost_current <- sum(Freight_cost) + Freight_cost_curr_inv
          Total_Freight_cost_current_non_npv <- sum(Freight_cost_non_npv) + Freight_cost_curr_inv_non_npv
          Total_Processing_cost_current <-sum(Processing_cost) + Total_Processing_cost_curr_inv
          Total_Material_cost_current <- sum(Material_cost) + Material_cost_curr_inv
          Total_Material_cost_non_npv_current <- sum(Material_cost_non_npv) + Material_cost_curr_inv_non_npv
          Total_Revenue_current <- Revenue_Allied_discount + Revenue_OES_discount + Revenue_IAM_discount
          Total_Revenue_non_npv_current <- Revenue_OES_non_npv_discount + Revenue_IAM_non_npv_discount + Revenue_Allied_non_npv_discount
          
          Total_transport_cost <- sum(transport_cost) + transport_cost_curr_inv
          Total_offsite_transport_cost <- sum(offsite_transport_cost) + Offsite_trans_cost_curr_inv
          Total_transport_cost_non_npv <- sum(transport_cost_non_npv) + transport_cost_curr_inv_non_npv
          Total_offsite_transport_cost_non_npv <- sum(offsite_transport_cost_non_npv) + Offsite_trans_cost_curr_inv
          
          Total_offsite_labor_cost <- sum(offsite_labor_cost) + Offsite_labour_cost_curr_inv
          Total_offsite_labor_cost_non_npv <- sum(offsite_labor_cost_non_npv) + Offsite_labour_cost_curr_inv_non_npv
          
          Total_process_cost <- sum(process_cost) + process_cost_curr_inv
          Total_process_cost_non_npv <- sum(process_cost_non_npv) + process_cost_curr_inv_non_npv
          Total_package_cost <- sum(package_cost) + package_cost_curr_inv
          Total_package_cost_non_npv <- sum(package_cost_non_npv) + package_cost_curr_inv_non_npv
          Total_Expense_current_non_npv <- Total_Storage_Cost_current_non_npv + Total_Freight_cost_current_non_npv + Total_Material_cost_non_npv_current + Total_offsite_labor_cost_non_npv + Total_package_cost_non_npv + Total_process_cost_non_npv + setup_cost + add_cost
          Total_Expense_current <- Total_Storage_Cost_current + Total_Freight_cost_current + Total_process_cost + Total_package_cost + Total_offsite_labor_cost + Total_Material_cost_current  + setup_cost + add_cost
          
          Total_NPV <- Total_Revenue_current - Total_Expense_current 
          
          Total_NPV_non_npv <-  Total_Revenue_non_npv_current - Total_Expense_current_non_npv
          
          Total_Purchase_Qty <- Total_BQ
          Total_Inventory_Purchase <- Total_Purchase_Qty + Curr_Inv_copy
          BQ_S2_check <- ifelse(is.na(BQ_S2), 0, BQ_S1)
          Extended_purchase_cost <- BQ_S2_check * part_c_3
          
          Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
          
          Scenario_2_current <- rbind(Scenario_2_current, c(ATB_ADS[j,1],Total_Storage_Cost_current,Total_Storage_Cost_current_non_npv, Total_Freight_cost_current, 
                                                            Total_Freight_cost_current_non_npv, Total_Processing_cost_current,
                                                            Total_Material_cost_current,Total_Expense_current,Total_Expense_current_non_npv, Total_Revenue_current,
                                                            Total_NPV,Total_NPV_non_npv, Total_BQ,Total_FCST, 
                                                            Total_Material_cost_non_npv_current, Total_Revenue_non_npv_current, Total_transport_cost, Total_offsite_transport_cost,Total_transport_cost_non_npv, Total_offsite_transport_cost_non_npv,
                                                            Total_offsite_labor_cost, Total_offsite_labor_cost_non_npv, Total_process_cost,Total_process_cost_non_npv,
                                                            setup_cost, BQ_S2_check, First_buy, Last_sale,
                                                            Last_buy, Total_package_cost, Total_package_cost_non_npv, scrap_amount, DLR_Price_3,
                                                            wd_price ,
                                                            Revenue_OES_non_npv_no_discount, Revenue_IAM_non_npv_no_discount, Revenue_Allied_non_npv_no_discount,
                                                            Revenue_OES_non_npv_discount, Revenue_IAM_non_npv_discount, Revenue_Allied_non_npv_discount, add_cost,
                                                            Revenue_Allied_discount, Revenue_OES_discount, Revenue_IAM_discount, Total_Purchase_Qty,
                                                            Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST))
          
        }
        
        colnames(Scenario_2_current) <- c("Part_Nbr","Storage_Cost_Scenario_2","Storage_Cost_non_npv_Scenario_2", "Transportation_Cost_Scenario_2", "Transportation_cost_non_npv_Scenario_2",
                                          "Processing_Cost_Scenario_2","Part_Cost_Scenario_2","Expense_Scenario_2", "Expense_non_npv_Scenario_2", "Revenue_Scenario_2", "NPV_Scenario_2", "Profit_Non_NPV_Scenario_2",
                                          "Buy_Quantity_Scenario_2","Total_Forecast_Scenario_2", "Material_cost_non_npv_Scenario_2", "Revenue_non_npv_Scenario_2",
                                          "Total_transport_cost_Scenario_2", "Total_offsite_transport_cost_Scenario_2","Total_transport_cost_non_npv_Scenario_2", "Total_offsite_transport_cost_non_npv_Scenario_2",
                                          "Total_offsite_labor_cost_Scenario_2", "Total_offsite_labor_cost_non_npv_Scenario_2", 
                                          "Total_process_cost_Scenario_2", "Total_process_cost_non_npv_Scenario_2", "Setup_cost_Scenario_2", "LTB_Buy_Quantity_Scenario_2",
                                          "First_buy",
                                          "Last_sale", "Last_buy", "Package_cost_Scenario_2", "Package_cost_non_npv_Scenario_2", "Scrap_amount_Scenario_2", "Dealer_price_Scenario_2", "WD_dealer_price_Scenario_2", 
                                          'Revenue_OES_non_npv_no_discount_2', 
                                          'Revenue_IAM_non_npv_no_discount_2', 'Revenue_Allied_non_npv_no_discount_2',
                                          'Revenue_OES_non_npv_discount_2', 'Revenue_IAM_non_npv_discount_2', 'Revenue_Allied_non_npv_discount_2', "Additional_cost_Scenario_2",
                                          'Revenue_Allied_discount_2', 'Revenue_OES_discount_2', 'Revenue_IAM_discount_2', "Total_Purchase_Qty_2",
                                          "Total_Inventory_Purchase_2", "Extended_purchase_cost_2", "total_forecast")
        
        Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
        Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.numeric), stringsAsFactors=FALSE)
        Scenario_2_current <- Scenario_2_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        Scenario_2_current$Part_Nbr <- str_pad(Scenario_2_current$Part_Nbr, width=8, side="left", pad="0")
        
      } else
      {
        
        Scenario_2_current <- data.frame()
        
        for (j in (1:nrow(ATB_ADS))) {
          
          cat("\nsc_2_cur Part Number: ",j," : ", ATB_ADS[j,1])
          final_NPV <- 0
          Optimal_year_count <- 1
          LTBQ <- 0
          Year <- c()
          FCST <- c()
          NPV_CR <- c()
          
          transport_cost <- c()
          offsite_transport_cost <- c()
          offsite_labor_cost <- c()
          process_cost <- c()
          
          Curr_Inv <- round(as.numeric(scenario_2$Values[18]), 4)
          Material_cost_CR_list <- c()
          Buy_Qty <- BQ_S2
          Total_Purchase_Qty <- BQ_S2
          
          Buy_Qty <- Buy_Qty + Curr_Inv
          
          YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
          
          for(n in (1:30)){
            FCST[n] <- ATB_ADS[j,(YI-1+n)]
          }
          
          FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
          FCST <- Updated_FCST
          Total_FCST <- sum(FCST)
          
          ## Calculating First Buy, Last Sale and Last Buy
          First_buy <- 0
          Last_sale <- 0
          Last_buy <- 0
          flag <- 0
          
          
          if(FCST[1] != 0)
          {
            First_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          } else
          {
            First_buy <- 0
          }
          
          for(i in 1:30)
          {
            if(FCST[i] == 0 & flag != 1)
            {
              Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + i
              flag = 1
            } 
          }
          if(flag != 1)
          {
            Last_sale <- as.numeric(strftime(Sys.Date(), "%Y")) + 30
          }
          
          Last_buy <- as.numeric(strftime(Sys.Date(), "%Y"))
          
          p_to_get_year = 0
          q_to_get_demand = 0
          
          for(i in 1:30)
          {
            q_to_get_demand = q_to_get_demand + FCST[i]
            if(Buy_Qty > q_to_get_demand)
            {
              p_to_get_year = p_to_get_year + 1
            } else if(Buy_Qty <= FCST[1])
            {
              remain <- Buy_Qty
              
              c = 1
              d = 0
              for(i in 1:12)
              {
                d = d + (FCST[p_to_get_year+1] / 12)
                if(remain > d)
                {
                  c = c+1
                }
              }
              
              FCST[p_to_get_year+1] <- remain
              
              Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
              break()
            }
          }
          
          if(Buy_Qty > FCST[1] & p_to_get_year < 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
          } else if(p_to_get_year >= 30)
          {
            remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
            FCST[p_to_get_year+1] <- 0
            Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
            c <- 0
          }
          
          if(p_to_get_year < 29)
          {
            for(i in ((p_to_get_year + 2) : 30))
            {
              FCST[i] <- 0
            }
          }
          
          ###########
          
          iam_weight <- ATB_ADS$IAM_FRACTION[j]
          oes_weight <- ATB_ADS$OES_FRACTION[j]
          allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          FCST_iam <- round(FCST * iam_weight, digits = 0)
          FCST_oes <- round(FCST * oes_weight, digits = 0)
          FCST_allied <- round(FCST * allied_weight, digits = 0)
          
          Sum_FCST <- sum(FCST_iam) + sum(FCST_oes) + sum(FCST_allied)
          
          Diff_FCST <- Sum_FCST - Sum_Forecast
          
          if(Buy_Qty > 0)
          {
            
            if(oes_weight != 0)
            {
              index <- tail(which(FCST_oes!=0),1)
            } else if(iam_weight != 0)
            {
              index <- tail(which(FCST_iam!=0),1)
            } else if(allied_weight != 0)
            {
              index <- tail(which(FCST_allied!=0),1)
            } else
            {
              index <- 1
            }
          } else
          {
            index <- 1
          }
          
          if(length(index)==0)
          {
            index <- 1
          }
          
          flag_revenue_oes <- 0
          flag_revenue_iam <- 0
          flag_revenue_allied <- 0
          
          if(oes_weight == 0)
          {
            FCST_oes[index] <- Sum_FCST + 1000
            flag_revenue_oes <- 1
          }
          if(iam_weight == 0)
          {
            FCST_iam[index] <- Sum_FCST + 1000
            flag_revenue_iam <- 1
          }
          if(allied_weight == 0)
          {
            FCST_allied[index] <- Sum_FCST + 1000
            flag_revenue_allied <- 1
          }
          
          
          if(FCST_oes[index] < FCST_iam[index] & FCST_oes[index] < FCST_allied[index] & oes_weight != 0)
          {
            FCST_oes[index] <- FCST_oes[index] - Diff_FCST
            
          } else if(FCST_iam[index] <= FCST_oes[index] & FCST_iam[index] <= FCST_allied[index] & iam_weight != 0)
          {
            FCST_iam[index] <- FCST_iam[index] - Diff_FCST
            
          } else if(FCST_allied[index] <= FCST_oes[index] & FCST_allied[index] <= FCST_iam[index] & allied_weight != 0)
          {
            FCST_allied[index] <- FCST_allied[index] - Diff_FCST
          }
          
          if(flag_revenue_oes == 1)
          {
            FCST_oes[index] <- 0
          }
          if(flag_revenue_iam == 1)
          {
            FCST_iam[index] <- 0
          }
          if(flag_revenue_allied == 1)
          {
            FCST_allied[index] <- 0
          }
          
          ###########           
          BQ <- Buy_Qty
          
          qty <- 0
          yr_qty <- c()
          
          for (i in (1:(p_to_get_year))) {
            s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
            qty <- qty + s
            yr_qty[i+1] <- s
          }
          
          yr_qty[1] <- (2*BQ - FCST[1])/2        
          yr_qty[p_to_get_year + 2] <- 0
          
          Total_storage_qty <- sum(yr_qty)
          
          Storage_Cost <- 0
          revenue <- 0
          revenue_non <- 0
          revenue_allied <- 0
          revenue_oes <- 0
          revenue_iam <- 0
          Storage_Cost_non_npv <- 0
          Revenue_OES_non_npv_no_discount_2 <- 0
          Revenue_IAM_non_npv_no_discount_2 <- 0
          Revenue_Allied_non_npv_no_discount_2 <- 0
          Revenue_OES_non_npv_discount_2 <- 0
          Revenue_IAM_non_npv_discount_2 <- 0
          Revenue_Allied_non_npv_discount_2 <- 0
          
          if(p_to_get_year > 0)
          {
            
            for(k in (1 : (p_to_get_year + 1)))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_allied <- revenue_allied + (FCST_allied[k] * CR * (Dealer_Price_Allied_Export))
              revenue_oes <- revenue_oes + (FCST_oes[k] * CR * (Dealer_Price_OES))
              revenue_iam <- revenue_iam + (FCST_iam[k] * CR * (Dealer_Price_IAM))
              
              revenue_non <- revenue_non + ((FCST[k]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              
              Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
              
            }
          }
          
          
          if(p_to_get_year == 0)
          {
            
            for(k in (1:1))
            {
              CR <- ((1-(0.15/12))^(k*12))
              revenue <- revenue + ((FCST[1]) * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
              revenue_allied <- revenue_allied + (FCST_allied[1] * CR * (Dealer_Price_Allied_Export))
              revenue_oes <- revenue_oes + (FCST_oes[1] * CR * (Dealer_Price_OES))
              revenue_iam <- revenue_iam + (FCST_iam[1] * CR * (Dealer_Price_IAM))
              
              revenue_non <- revenue_non + ((FCST[1]) * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j])))
              Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
              Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
            }
          }
          
          Revenue_OES_non_npv_no_discount_2 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$OES_FRACTION[j]
          Revenue_IAM_non_npv_no_discount_2 <- Sum_Forecast * wd_price * ATB_ADS$IAM_FRACTION[j]
          Revenue_Allied_non_npv_no_discount_2 <- Sum_Forecast * DLR_Price_3 * ATB_ADS$ALLIED_EXPORT_FRACTION[j]
          
          Revenue_OES_non_npv_discount_2 <- sum(FCST_oes) * Dealer_Price_OES 
          Revenue_IAM_non_npv_discount_2 <- sum(FCST_iam) * Dealer_Price_IAM
          Revenue_Allied_non_npv_discount_2 <- sum(FCST_allied) * Dealer_Price_Allied_Export
          
          revenue_non <- Revenue_OES_non_npv_discount_2 + Revenue_IAM_non_npv_discount_2 + Revenue_Allied_non_npv_discount_2
          
          offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
          
          Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
          Freight_cost <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost) * (1-(0.15/12))
          Freight_cost_non_npv <- ((Onsite_trans_cpp1 ) * BQ + Offsite_trans_cost)
          
          Offsite_labour_cost <- offsite_quantity * as.numeric(Offsite_Labor_cpp1)
          Total_Processing_cost <- (((Onsite_procs_cpp1 ) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
          Total_Processing_cost_non_npv <- ((Onsite_procs_cpp1  * BQ) + Offsite_labour_cost)
          
          package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
          package_cost_non_npv <- Average_Processing_cpp1 * BQ
          
          Material_cost <- (part_c_3 * BQ)*(1-(0.15/12))
          Material_cost_non_npv <- (part_c_3 * BQ)
          
          Total_transport_cost <- (Onsite_trans_cpp1 * BQ) * (1-(0.15/12))
          Total_offsite_transport_cost <- Offsite_trans_cost * (1-(0.15/12))
          Total_offsite_labor_cost <- Offsite_labour_cost * (1-(0.15/12))
          Total_transport_cost_non_npv <- (Onsite_trans_cpp1 * BQ) 
          
          Total_process_cost<- ((Onsite_procs_cpp1 - Average_Processing_cpp1)  * BQ) * (1-(0.15/12))
          Total_process_cost_non_npv <- ((Onsite_procs_cpp1 - Average_Processing_cpp1)  * BQ)
          
          
          Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + setup_cost + Material_cost
          revenue <- (revenue_allied + revenue_oes + revenue_iam)
          NPV_with_capital_rate <- revenue - Total_Expense
          
          Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + setup_cost +  Material_cost_non_npv
          NPV_non_npv <- revenue_non - Total_Expense_non_npv
          Total_Inventory_Purchase <- Buy_Qty
          
          scrap_amount <- Buy_Qty - sum(FCST)
          scrap_amount <- ifelse(scrap_amount < 0, 0, scrap_amount)
          Extended_purchase_cost <- BQ_S2 * part_c_3
          
          Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
          Scenario_2_current <- rbind(Scenario_2_current, c(ATB_ADS[j,1],Storage_Cost,Freight_cost,Total_Processing_cost,
                                                            Material_cost, Total_Expense,revenue,NPV_with_capital_rate,Buy_Qty,
                                                            sum(FCST), Material_cost_non_npv, revenue_non, Total_transport_cost,Total_transport_cost_non_npv,
                                                            Total_offsite_transport_cost,Offsite_trans_cost, Total_offsite_labor_cost, Total_process_cost, setup_cost, BQ_S2, scrap_amount,
                                                            Storage_Cost_non_npv, Freight_cost_non_npv, Total_Processing_cost_non_npv, add_cost, package_cost_non_npv, 
                                                            package_cost, Offsite_labour_cost, Total_process_cost_non_npv, Total_Expense_non_npv,
                                                            NPV_non_npv, Revenue_OES_non_npv_no_discount_2, Revenue_IAM_non_npv_no_discount_2,
                                                            Revenue_Allied_non_npv_no_discount_2, Revenue_OES_non_npv_discount_2,
                                                            Revenue_IAM_non_npv_discount_2, Revenue_Allied_non_npv_discount_2,
                                                            revenue_allied, revenue_oes, revenue_iam, First_buy, Last_sale, Last_buy, Total_Purchase_Qty,
                                                            Total_Inventory_Purchase, Extended_purchase_cost, Total_FCST
          ))
          
          colnames(Scenario_2_current) <- c("Part_Nbr","Storage_Cost_Scenario_2","Transportation_Cost_Scenario_2","Processing_Cost_Scenario_2",
                                            "Part_Cost_Scenario_2","Expense_Scenario_2","Revenue_Scenario_2","NPV_Scenario_2","Buy_Quantity_Scenario_2",
                                            "Total_Forecast_Scenario_2", "Material_cost_non_npv_Scenario_2","Revenue_non_npv_Scenario_2", 
                                            "Total_transport_cost_Scenario_2","Total_transport_cost_non_npv_Scenario_2","Total_offsite_transport_cost_Scenario_2","Total_offsite_transport_cost_non_npv_Scenario_2","Total_offsite_labor_cost_Scenario_2",
                                            "Total_process_cost_Scenario_2", "Setup_cost_Scenario_2", "LTB_Buy_Quantity_Scenario_2", "Scrap_amount_Scenario_2",
                                            "Storage_Cost_non_npv_Scenario_2", "Transportation_cost_non_npv_Scenario_2","Processing_Cost_non_npv_Scenario_2",
                                            "Additional_cost_Scenario_2", "Package_cost_non_npv_Scenario_2", "Package_cost_Scenario_2", "Total_offsite_labor_cost_non_npv_Scenario_2",
                                            "Total_process_cost_non_npv_Scenario_2", "Expense_non_npv_Scenario_2", "Profit_Non_NPV_Scenario_2", "Revenue_OES_non_npv_no_discount_2",
                                            "Revenue_IAM_non_npv_no_discount_2", "Revenue_Allied_non_npv_no_discount_2", "Revenue_OES_non_npv_discount_2", "Revenue_IAM_non_npv_discount_2",
                                            "Revenue_Allied_non_npv_discount_2", "Revenue_Allied_discount_2", "Revenue_OES_discount_2", "Revenue_IAM_discount_2",
                                            "First_buy", "Last_sale", "Last_buy", "Total_Purchase_Qty_2", "Total_Inventory_Purchase_2", "Extended_purchase_cost_2",
                                            "total_forecast")
          
        }
        Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.character), stringsAsFactors=FALSE)
        Scenario_2_current <- data.frame(lapply(Scenario_2_current, as.numeric), stringsAsFactors=FALSE)
        Scenario_2_current <- Scenario_2_current %>% mutate_each(funs(round(.,2)), -Part_Nbr)
        Scenario_2_current$Part_Nbr <- str_pad(Scenario_2_current$Part_Nbr, width=8, side="left", pad="0")
        
      }
      
      scrap_amount <- Scenario_2_current$Scrap_amount_Scenario_2[1]
      
      incProgress(1/4, detail = "Running Calculations")
      
      ########## Code for Scenario-2: Selldown calculation
      
      Selldown_NPV_Scenario_2 <- data.frame()
      Buy_Qty <- round(as.numeric(scenario_2$Values[18]), 4)
      
      for (j in (1:nrow(ATB_ADS))) {
        
        cat("\nsc_2_sell Part Number: ",j," : ", ATB_ADS[j,1])
        final_NPV <- 0
        Optimal_year_count <- 1
        LTBQ <- 0
        Year <- c()
        FCST <- c()
        NPV_CR <- c()
        Revenue_CR <- c()
        Expense <- c()
        Storage_cost_CR <- c()
        Freight_cost_CR <- c()
        Processing_cost_CR <- c()
        
        
        YI <- which(colnames(ATB_ADS)=="FORECAST_YR_1")
        for(n in (1:30)){
          FCST[n] <- ATB_ADS[j,(YI-1+n)]
        }
        
        FCST[1] <- FCST[1] + ATB_ADS$CURRENT_YEAR[j]
        FCST <- Updated_FCST
        
        p_to_get_year = 0
        q_to_get_demand = 0
        
        for(i in 1:30)
        {
          q_to_get_demand = q_to_get_demand + FCST[i]
          if(Buy_Qty > q_to_get_demand)
          {
            p_to_get_year = p_to_get_year + 1
          } else if(Buy_Qty <= FCST[1])
          {
            remain <- Buy_Qty
            c = 1
            d = 0
            for(i in 1:12)
            {
              d = d + (FCST[p_to_get_year+1] / 12)
              if(remain > d)
              {
                c = c+1
              }
            }
            
            FCST[p_to_get_year+1] <- remain
            Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
            break()
          }
        }
        
        if(Buy_Qty > FCST[1] & p_to_get_year < 30)
        {
          remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
          c = 1
          d = 0
          for(i in 1:12)
          {
            d = d + (FCST[p_to_get_year+1] / 12)
            if(remain > d)
            {
              c = c+1
            }
          }
          
          FCST[p_to_get_year+1] <- remain
          Sum_Forecast <- sum(FCST[1:(p_to_get_year+1)])
        } else if(p_to_get_year >= 30)
        {
          remain <- Buy_Qty - sum(FCST[1:p_to_get_year])
          FCST[p_to_get_year+1] <- 0
          Sum_Forecast <- sum(FCST[1:(p_to_get_year + 1)])
          c <- 0
        }
        
        if(p_to_get_year < 29)
        {
          for(i in ((p_to_get_year + 2) : 30))
          {
            FCST[i] <- 0
          }
        }
        
        ###########
        
        iam_weight <- ATB_ADS$IAM_FRACTION[j]
        oes_weight <- ATB_ADS$OES_FRACTION[j]
        allied_weight <- ATB_ADS$ALLIED_EXPORT_FRACTION[j]
        
        FCST_iam_selldown <- round(FCST * iam_weight, digits = 0)
        FCST_oes_selldown <- round(FCST * oes_weight, digits = 0)
        FCST_allied_selldown <- round(FCST * allied_weight, digits = 0)
        
        Sum_FCST <- sum(FCST_iam_selldown) + sum(FCST_oes_selldown) + sum(FCST_allied_selldown)
        
        Diff_FCST <- Sum_FCST - Sum_Forecast
        
        if(Buy_Qty > 0 & Sum_Forecast > 0)
        {
          
          if(oes_weight != 0)
          {
            index <- tail(which(FCST_oes_selldown!=0),1)
          } else if(iam_weight != 0)
          {
            index <- tail(which(FCST_iam_selldown!=0),1)
          } else if(allied_weight != 0)
          {
            index <- tail(which(FCST_allied_selldown!=0),1)
          } else
          {
            index <- 1
          }
          
        } else
        {
          index <- 1
        }
        
        if(length(index)==0)
        {
          index <- 1
        }
        
        flag_revenue_oes <- 0
        flag_revenue_iam <- 0
        flag_revenue_allied <- 0
        
        if(oes_weight == 0)
        {
          FCST_oes_selldown[index] <- Sum_FCST + 1000
          flag_revenue_oes <- 1
        }
        if(iam_weight == 0)
        {
          FCST_iam_selldown[index] <- Sum_FCST + 1000
          flag_revenue_iam <- 1
        }
        if(allied_weight == 0)
        {
          FCST_allied_selldown[index] <- Sum_FCST + 1000
          flag_revenue_allied <- 1
        }
        
        
        if(FCST_oes_selldown[index] < FCST_iam_selldown[index] & FCST_oes_selldown[index] < FCST_allied_selldown[index] & oes_weight != 0)
        {
          FCST_oes_selldown[index] <- FCST_oes_selldown[index] - Diff_FCST
          
        } else if(FCST_iam_selldown[index] <= FCST_oes_selldown[index] & FCST_iam_selldown[index] <= FCST_allied_selldown[index] & iam_weight != 0)
        {
          FCST_iam_selldown[index] <- FCST_iam_selldown[index] - Diff_FCST
          
        } else if(FCST_allied_selldown[index] <= FCST_oes_selldown[index] & FCST_allied_selldown[index] <= FCST_iam_selldown[index] & allied_weight != 0)
        {
          FCST_allied_selldown[index] <- FCST_allied_selldown[index] - Diff_FCST
        }
        
        if(flag_revenue_oes == 1)
        {
          FCST_oes_selldown[index] <- 0
        }
        if(flag_revenue_iam == 1)
        {
          FCST_iam_selldown[index] <- 0
        }
        if(flag_revenue_allied == 1)
        {
          FCST_allied_selldown[index] <- 0
        }
        
        ###########
        
        
        BQ <- Buy_Qty
        qty <- 0
        yr_qty <- c()
        
        for (i in (1:(p_to_get_year))) {
          s <- ((BQ - sum(FCST[1:i])) + (BQ - sum(FCST[1:(1+i)])))/2
          qty <- qty + s
          yr_qty[i+1] <- s
        }
        
        yr_qty[1] <- (2*BQ - FCST[1])/2        
        yr_qty[p_to_get_year + 2] <- 0
        
        Total_storage_qty <- sum(yr_qty)
        
        Storage_Cost <- 0
        Storage_Cost_non_npv <- 0
        revenue <- 0
        revenue_iam <- 0
        revenue_oes <- 0
        revenue_allied <- 0
        revenue_non_npv <- 0
        revenue_non_npv_iam <- 0
        revenue_non_npv_oes <- 0
        revenue_non_npv_allied <- 0
        
        
        if(p_to_get_year > 0)
        {
          
          for(k in (1 : (p_to_get_year + 1)))
          {
            CR <- ((1-(0.15/12))^(k*12))
            
            revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            #revenue_non_npv <- revenue_non_npv + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam_selldown[k] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes_selldown[k] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied_selldown[k] * CR * (Dealer_Price_Allied_Export))
            
            revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[k] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
            revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[k] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
            revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[k] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
            revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
            
            Storage_Cost <- Storage_Cost + ((yr_qty[k]) * Monthly_square_feet_cpp1 * CR)
            Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[k]) * Monthly_square_feet_cpp1)
            
            
          }
        }
        
        if(p_to_get_year == 0)
        {
          
          for(k in (1:1))
          {
            CR <- ((1-(0.15/12))^(k*12))
            revenue <- revenue + (FCST[k] * CR * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            #revenue_non_npv <- revenue_non_npv + (FCST[k] * ((Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]) + (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]) + (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))) 
            
            revenue_iam <- revenue_iam + (FCST_iam_selldown[1] * CR * (Dealer_Price_IAM))
            revenue_oes <- revenue_oes + (FCST_oes_selldown[1] * CR * (Dealer_Price_OES))
            revenue_allied <- revenue_allied + (FCST_allied_selldown[1] * CR * (Dealer_Price_Allied_Export))
            
            revenue_non_npv_iam <- revenue_non_npv_iam + (FCST[1] * (Dealer_Price_IAM * ATB_ADS$IAM_FRACTION[j]))
            revenue_non_npv_oes <- revenue_non_npv_oes + (FCST[1] * (Dealer_Price_OES * ATB_ADS$OES_FRACTION[j]))
            revenue_non_npv_allied <- revenue_non_npv_allied + (FCST[1] * (Dealer_Price_Allied_Export * ATB_ADS$ALLIED_EXPORT_FRACTION[j]))
            revenue_non_npv <-round(revenue_non_npv_iam,2)+round(revenue_non_npv_oes,2)+round(revenue_non_npv_allied,2)
            Storage_Cost <- Storage_Cost + ((yr_qty[1]) * Monthly_square_feet_cpp1 * CR)
            Storage_Cost_non_npv <- Storage_Cost_non_npv + ((yr_qty[1]) * Monthly_square_feet_cpp1)
          }
        }
        
        offsite_quantity <- ifelse((BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))) > 0, (BQ - (as.numeric(ATB_ADS$MAX_WEEKS_SUPPLY[j]) * ((as.numeric(FCST[1])/12)/4.33))), 0)
        
        Offsite_trans_cost <- Offsite_transportation_cpp1 * offsite_quantity
        Freight_cost <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost) * (1-(0.15/12))
        Freight_cost_non_npv <- ((Onsite_trans_cpp1) * BQ + Offsite_trans_cost)
        
        Offsite_labour_cost <- offsite_quantity*as.numeric(Offsite_Labor_cpp1)
        Total_Processing_cost <- (((Onsite_procs_cpp1 ) * BQ) + Offsite_labour_cost) * (1-(0.15/12))
        Total_Processing_cost_non_npv <- (((Onsite_procs_cpp1) * BQ) + Offsite_labour_cost)
        
        package_cost <- Average_Processing_cpp1 * BQ * (1-(0.15/12))
        package_cost_non_npv <- Average_Processing_cpp1 * BQ
        
        Total_Processing_cost <- Total_Processing_cost - package_cost
        Total_Processing_cost_non_npv <- Total_Processing_cost_non_npv - package_cost_non_npv
        
        Material_cost <- BQ * part_c_3 * (1-(0.15/12))
        Material_cost_non_npv <- BQ * part_c_3
        
        Total_Expense <- Storage_Cost + Freight_cost + Total_Processing_cost + add_cost + Material_cost  + setup_cost + package_cost
        revenue <- revenue_iam + revenue_oes + revenue_allied
        NPV_with_capital_rate <- revenue - Total_Expense
        
        Total_Expense_non_npv <- Storage_Cost_non_npv + Freight_cost_non_npv + Total_Processing_cost_non_npv + add_cost + Material_cost_non_npv + setup_cost + package_cost_non_npv
        NPV_with_capital_rate_non_npv <- revenue_non_npv - Total_Expense_non_npv
        
        Selldown_NPV_Scenario_2 <- data.frame(lapply(Selldown_NPV_Scenario_2, as.character), stringsAsFactors=FALSE)
        Selldown_NPV_Scenario_2 <- rbind(Selldown_NPV_Scenario_2, c(ATB_ADS[j,1], Material_cost, Storage_Cost,Freight_cost,Total_Processing_cost,Total_Expense,
                                                                    revenue,NPV_with_capital_rate,Buy_Qty,
                                                                    Material_cost_non_npv, Storage_Cost_non_npv, Freight_cost_non_npv,
                                                                    Total_Processing_cost_non_npv, add_cost, package_cost_non_npv,
                                                                    setup_cost, package_cost, revenue_non_npv, NPV_with_capital_rate_non_npv,
                                                                    revenue_iam, revenue_oes, revenue_allied, revenue_non_npv_iam, revenue_non_npv_oes, revenue_non_npv_allied))
        
        colnames(Selldown_NPV_Scenario_2) <- c("Part_Nbr","Selldown_Material_cost_Scenario_2","Selldown_Storage_Cost_Scenario_2","Selldown_Freight_cost_Scenario_2",##change
                                               "Selldown_Processing_Cost_Scenario_2","Total_Expense_Scenario_2","Selldown_Revenue_Scenario_2",
                                               "Selldown_NPV_Scenario_2","Total_BQ_Scenario_2", "Selldown_Material_cost_non_npv_Scenario_2", "Selldown_Storage_Cost_non_npv_Scenario_2",
                                               "Selldown_Freight_cost_non_npv_Scenario_2", "Selldown_Processing_Cost_non_npv_Scenario_2", "Selldown_Additional_Cost_Scenario_2",
                                               "Selldown_Package_Cost_non_npv_Scenario_2", "Selldown_Setup_Cost_Scenario_2", "Selldown_Package_Cost_Scenario_2",
                                               "Selldown_Revenue_non_npv_Scenario_2", "Selldown_NPV_non_npv_Scenario_2", "Selldown_Revenue_Scenario_2_IAM", 
                                               "Selldown_Revenue_Scenario_2_OES", "Selldown_Revenue_Scenario_2_Allied", "Selldown_Revenue_non_npv_Scenario_2_IAM",
                                               "Selldown_Revenue_non_npv_Scenario_2_OES", "Selldown_Revenue_non_npv_Scenario_2_Allied")
        
      }
      Selldown_NPV_Scenario_2 <- data.frame(lapply(Selldown_NPV_Scenario_2, as.character), stringsAsFactors=FALSE)
      Selldown_NPV_Scenario_2 <- data.frame(lapply(Selldown_NPV_Scenario_2, as.numeric), stringsAsFactors=FALSE)
      Selldown_NPV_Scenario_2 <- Selldown_NPV_Scenario_2 %>% mutate_each(funs(round(.,2)), -Part_Nbr)
      Selldown_NPV_Scenario_2$Part_Nbr <- str_pad(Selldown_NPV_Scenario_2$Part_Nbr, width=8, side="left", pad="0")
      
      incProgress(1/4, detail = "Running Calculations")
      
      ###################
      shinyjs::show("line_2")
      output$line_2 <- renderHighchart({
        
        graph_2 <- NPV_Data_2
        graph_2 <- as.data.frame(graph_2)
        graph_2$Buy_quantity_list <- as.numeric(as.character(graph_2$Buy_quantity_list))
        graph_2$NPV_CR_list <- as.numeric(as.character(graph_2$NPV_CR_list))
        
        highchart() %>% 
          hc_title(text="NPV variation with Buy Qty") %>%
          hc_chart(type = "line") %>%
          hc_xAxis(title=list(text="Buy Quantity"),categories= as.vector(graph_2$Buy_quantity_list))  %>%
          hc_yAxis(title=list(text="NPV"))  %>% 
          hc_add_theme(hc_theme_sandsignika()) %>%
          hc_add_series(name = "NPV", data = as.vector(graph_2$NPV_CR_list))
        
      })
      
      
      ## Creating Download Report of Scenario-2 
      result_scenario_2 <- merge(Scenario_2_current, Scenario_2_optimal, by = "Part_Nbr")
      result_scenario_2 <- merge(result_scenario_2, Selldown_NPV_Scenario_2, by = "Part_Nbr")
      result_scenario_2 <- merge(result_scenario_2, t_scenario_2, by = "Part_Nbr")
      
      result_scenario_2 <- result_scenario_2 %>% select(Part_Nbr, NPV_Scenario_2,
                                                        Selldown_NPV_Scenario_2,Selldown_NPV_non_npv_Scenario_2, Revenue_Scenario_2,Revenue_non_npv_Scenario_2,Part_Cost_Scenario_2,Material_cost_non_npv_Scenario_2,
                                                        Setup_cost_Scenario_2 ,Total_transport_cost_Scenario_2,Total_transport_cost_non_npv_Scenario_2,Storage_Cost_Scenario_2,Storage_Cost_non_npv_Scenario_2,
                                                        Total_process_cost_Scenario_2,  Total_process_cost_non_npv_Scenario_2,Package_cost_Scenario_2,Package_cost_non_npv_Scenario_2,
                                                        Total_offsite_labor_cost_Scenario_2,Total_offsite_labor_cost_non_npv_Scenario_2,Total_offsite_transport_cost_Scenario_2,Total_offsite_transport_cost_non_npv_Scenario_2, 
                                                        Additional_Cost_2,Selldown_Revenue_Scenario_2,Selldown_Revenue_non_npv_Scenario_2,
                                                        Selldown_Material_cost_Scenario_2,Selldown_Material_cost_non_npv_Scenario_2,
                                                        Selldown_Freight_cost_Scenario_2,Selldown_Freight_cost_non_npv_Scenario_2,Selldown_Storage_Cost_Scenario_2,Selldown_Storage_Cost_non_npv_Scenario_2, Selldown_Processing_Cost_Scenario_2,
                                                        Selldown_Processing_Cost_non_npv_Scenario_2,Selldown_Package_Cost_Scenario_2,Selldown_Package_Cost_non_npv_Scenario_2,
                                                        Total_Inventory,
                                                        First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_2, LTB_Buy_Quantity_Scenario_2,
                                                        Total_Purchase_Qty_2, Total_Forecast_Scenario_2,
                                                        Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2, Optimal_Material_Cost_Scenario_2, Optimal_Setup_cost_Scenario_2,
                                                        Optimal_Total_transport_cost_Scenario_2,
                                                        Optimal_Total_offsite_transport_cost_Scenario_2, Optimal_Storage_Cost_Scenario_2, Optimal_Total_process_cost_Scenario_2,
                                                        Optimal_Packaging_cost_Scenario_2,
                                                        Optimal_Total_offsite_labor_cost_Scenario_2, Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2,
                                                        Extended_purchase_cost_2,Proposed_Dealer_Price, Proposed_WD_Price, Material_Cost, MOQ,Standard_Pack,Setup_Cost_s2,Additional_Cost_s2,Monthly_square_feet_cpp,
                                                        Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                                        Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp)
      
      
      result_scenario_2$Part_Nbr <- str_pad(result_scenario_2$Part_Nbr, width=8, side="left", pad="0")
      write.csv(result_scenario_2, file = "Result_scenario_2.csv", row.names = FALSE)
      
      output$downloadData_s_2 <- downloadHandler(
        filename = function() { 
          paste("Part_view_Scenario-2",".csv", sep="") 
        },
        content = function(file) {
          scenario_2 <- result_scenario_2
          scenario_2$Part_Nbr <- str_pad(scenario_2$Part_Nbr, width=8, side="left", pad="0")
          scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],##change
                                   lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                                   lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                   lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   stringsAsFactors = FALSE)
          
          colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                    "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                    "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                    "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                    "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                    "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                    "Current Inventory",
                                    "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                    "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                    "Optimal NPV  Scenario-2",
                                    "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                    "Optimal Offsite transport cost Scenario-2",
                                    "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                    "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                    "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                    "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
          
          write.csv(scenario_2, file)
          
        },
        contentType = "csv"
      )
      
      ## Downloading all Scenarios
      output$download_all_scenario<- downloadHandler(
        filename = function() {
          paste("All_Scenarios",".xlsx", sep="") 
        },
        content = function(file) {
          scenario_current <- read.csv("current_scenario.csv", stringsAsFactors = FALSE)
          scenario_1 <- read.csv("Result_scenario_1.csv", stringsAsFactors = FALSE)
          scenario_2 <- read.csv("Result_scenario_2.csv", stringsAsFactors = FALSE)
          
          scenario_current <- data.frame(Part_Nbr = scenario_current[,1],##change
                                         lapply(scenario_current[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                         lapply(scenario_current[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                         lapply(scenario_current[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), formatC(scenario_current[,53] , big.mark=",", digits=0, format="f"),formatC(scenario_current[,54] , big.mark=",", digits=0, format="f"),
                                         lapply(scenario_current[,55:61], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), # change 786
                                         lapply(scenario_current[,62:64], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                         paste("$", formatC(scenario_current[,65] , big.mark=",", digits=0, format="f")),
                                         lapply(scenario_current[,66:67], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                         lapply(scenario_current[,68:79], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                         scenario_current[,80:83],
                                         stringsAsFactors = FALSE)
          
          colnames(scenario_current) <- c("Part Number",
                                          "NPV", "Selldown NPV","Selldown Non NPV",
                                          "Revenue","Revenue non NPV" ,"Material Cost","Material Cost non NPV", "Setup Cost", "Transportation Cost","Transportation Cost non NPV",
                                          "Storage Cost","Storage Cost non NPV", "Labor Cost","Labor Cost non NPV", "Packaging Cost","Packaging Cost non NPV", "Offsite Labor Cost","Offsite Labor Cost non NPV",
                                          "Offsite Transportation Cost","Offsite Transportation Cost non NPV", "Additional Cost",
                                          "Sell Down Revenue","Sell Down Revenue non NPV","Sell Down Material Cost","Sell Down Material Cost non NPV", "Sell Down Transport Cost","Sell Down Transport Cost non NPV",
                                          "Sell Down Storage Cost","Sell Down Storage Cost non NPV", "Sell Down Labor Cost","Sell Down Labor Cost non NPV", "Sell Down Packaging Cost","Sell Down Packaging Cost non NPV",
                                          "Current Inventory",
                                          "First Buy","Last Buy", "Last Sale", "Scrap", "Entered Buy Quantity",
                                          "Total Purchase", "Total Sales", "Optimal NPV",
                                          "Optimal Revenue", "Optimal Material Cost", "Optimal Setup Cost", "Optimal Transportation Cost","Optimal Offsite Transport Cost",
                                          "Optimal Storage Cost",
                                          "Optimal Labor Cost", "Optimal Packaging Cost", "Optimal Offsite Labor Cost",
                                          "Optimal ATB Quantity","Optimal payback period", "Extended Optimal Buy Cost", "Extended Buy Qty Cost","Dealer Price($)",  "Dealer Price($): OES", "Dealer Price($): Allied/Export",
                                          "WD Price($)",  "Dealer Price($): IAM","Discount Percent(%): OES", "Discount Percent(%): Allied/Export","Discount Percent(%): IAM",
                                          "Material Cost($)", "MOQ","Standard Pack","Setup Cost($)","Additional Cost($)","Monthly square feet cpp($)",
                                          "Offsite transportation cpp($)","Redistribution cpp($)","Offsite Labor cpp($)","Inbound Labor cpp($)","Outbound Labor cpp($)",
                                          "Average Labor cpp($)","Average Processing cpp($)","Inbound Transportation cpp($)","Outbound Transportation cpp($)","Simple payabck period","Discounted payback period","2 year payback ATB","2 year payback NPV")
          
          scenario_1 <- data.frame(Part_Nbr = scenario_1[,1],##change
                                   lapply(scenario_1[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_1[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_1[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   formatC(scenario_1[,53] , big.mark=",", digits=0, format="f"),
                                   lapply(scenario_1[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                   lapply(scenario_1[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   lapply(scenario_1[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_1[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   stringsAsFactors = FALSE)
          
          colnames(scenario_1) <- c("Part Number", "NPV Scenario-1", "Selldown NPV Scenario-1","Selldown Non NPV Scenario-1",
                                    "Revenue Scenario-1","Revenue non NPV Scenario-1", "Material Cost Scenario-1","Material Cost non NPV Scenario-1", "Setup Cost Scenario-1", "Transportation cost Scenario-1","Transportation cost non NPV Scenario-1",
                                    "Storage Cost Scenario-1","Storage Cost non NPV Scenario-1", "Labor cost Scenario-1","Labor cost non NPV Scenario-1", "Packaging Cost Scenario-1","Packaging Cost non NPV Scenario-1", "Offsite labor cost Scenario-1","Offsite labor cost non NPV Scenario-1",
                                    "Offsite transportation cost Scenario-1","Offsite transportation cost non NPV Scenario-1", "Additional Cost Scenario-1",
                                    "Selldown Revenue Scenario-1","Selldown Revenue non NPV Scenario-1", "Selldown Material Cost Scenario-1","Selldown Material Cost non NPV Scenario-1", "Selldown Transport cost Scenario-1","Selldown Transport cost non NPV Scenario-1",
                                    "Selldown Storage Cost  Scenario-1","Selldown Storage Cost non NPV Scenario-1", "Selldown Labor Cost Scenario-1","Selldown Labor Cost non NPV Scenario-1", "Selldown Packaging Cost Scenario-1","Selldown Packaging Cost non NPV Scenario-1",
                                    "Current Inventory",
                                    "First Buy","Last Buy","Last Sale","Scrap Scenario-1", "Entered Buy Quantity Scenario-1",
                                    "Total Purchase Scenario-1", "Total Sales Scenario-1",
                                    "Optimal NPV Scenario-1",
                                    "Optimal Revenue Scenario-1", "Optimal Material Cost Scenario-1","Optimal Setup Cost Scenario-1","Optimal transportation cost Scenario-1",
                                    "Optimal Offsite transport cost Scenario-1",
                                    "Optimal Storage Cost Scenario-1", "Optimal Labor cost Scenario-1", "Optimal Packaging cost Scenario-1", "Optimal Offsite labor cost Scenario-1",
                                    "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1", "Extended Buy Qty Cost Scenario-1","Proposed Dealer Price 1", "Proposed WD Price 1", "Material Cost 1", "MOQ 1","Standard Pack 1","Setup Cost 1","Additional Cost 1","Monthly square feet cpp 1",
                                    "Offsite transportation cpp 1","Redistribution cpp 1","Offsite Labor cpp 1","Inbound Labor cpp 1","Outbound Labor cpp 1",
                                    "Average Labor cpp 1","Average Processing cpp 1","Inbound Transportation cpp 1","Outbound Transportation cpp 1")
          
          scenario_2 <- data.frame(Part_Nbr = scenario_2[,1],##change
                                   lapply(scenario_2[,2:34], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_2[,35:42], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_2[,43:52], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   formatC(scenario_2[,53] , big.mark=",", digits=0, format="f"),
                                   lapply(scenario_2[,54:55], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="s"), sep = " ")),
                                   lapply(scenario_2[,56:58], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")), 
                                   lapply(scenario_2[,59:60], function(x) formatC(x , big.mark=",", digits=0, format="f")),
                                   lapply(scenario_2[,61:72], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                   stringsAsFactors = FALSE)
          
          colnames(scenario_2) <- c("Part Number", "NPV Scenario-2", "Selldown NPV Scenario-2","Selldown Non NPV Scenario-2",
                                    "Revenue Scenario-2","Revenue non NPV Scenario-2", "Material Cost Scenario-2","Material Cost non NPV Scenario-2", "Setup Cost Scenario-2", "Transportation cost Scenario-2","Transportation cost non NPV Scenario-2",
                                    "Storage Cost Scenario-2","Storage Cost non NPV Scenario-2", "Labor cost Scenario-2","Labor cost non NPV Scenario-2", "Packaging Cost Scenario-2","Packaging Cost non NPV Scenario-2", "Offsite labor cost Scenario-2","Offsite labor cost non NPV Scenario-2",
                                    "Offsite transportation cost Scenario-2","Offsite transportation cost non NPV Scenario-2", "Additional Cost Scenario-2",
                                    "Selldown Revenue Scenario-2","Selldown Revenue non NPV Scenario-2", "Selldown Material Cost Scenario-2","Selldown Material Cost non NPV Scenario-2", "Selldown Transport cost Scenario-2","Selldown Transport cost non NPV Scenario-2",
                                    "Selldown Storage Cost  Scenario-2","Selldown Storage Cost non NPV Scenario-2", "Selldown Labor Cost Scenario-2","Selldown Labor Cost non NPV Scenario-2", "Selldown Packaging Cost Scenario-2","Selldown Packaging Cost non NPV Scenario-2",
                                    "Current Inventory",
                                    "First Buy","Last Buy","Last Sale","Scrap Scenario-2",  "Entered Buy Quantity Scenario-2",
                                    "Total Purchase Scenario-2", "Total Sales Scenario-2",
                                    "Optimal NPV  Scenario-2",
                                    "Optimal Revenue Scenario-2", "Optimal Material Cost Scenario-2","Optimal Setup Cost Scenario-2","Optimal transportation cost Scenario-2",
                                    "Optimal Offsite transport cost Scenario-2",
                                    "Optimal Storage Cost Scenario-2", "Optimal Labor cost Scenario-2", "Optimal Packaging cost Scenario-2", "Optimal Offsite labor cost Scenario-2",
                                    "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2", "Extended Buy Qty Cost Scenario-2","Proposed Dealer Price 2", "Proposed WD Price 2", "Material Cost 2", "MOQ 2","Standard Pack 2","Setup Cost 2","Additional Cost 2","Monthly square feet cpp 2",
                                    "Offsite transportation cpp 2","Redistribution cpp 2","Offsite Labor cpp 2","Inbound Labor cpp 2","Outbound Labor cpp 2",
                                    "Average Labor cpp 2","Average Processing cpp 2","Inbound Transportation cpp 2","Outbound Transportation cpp 2")
          
          write.xlsx2(scenario_current, file, sheetName="Current", row.names=FALSE)
          write.xlsx2(scenario_1, file, sheetName="Scenario-1", append=TRUE, row.names=FALSE)
          write.xlsx2(scenario_2, file, sheetName="Scenario-2", append=TRUE, row.names=FALSE)
          
        }
      )
      
      ## Refreshing data at the back end
      spl_7 <- Scenario_2_current
      spl_7$Part_Nbr <- str_pad(spl_7$Part_Nbr, width=8, side="left", pad="0")
      spl_8 <- Scenario_2_optimal
      spl_8$Part_Nbr <- str_pad(spl_8$Part_Nbr, width=8, side="left", pad="0")
      spl_9 <- Selldown_NPV_Scenario_2
      spl_9$Part_Nbr <- str_pad(spl_9$Part_Nbr, width=8, side="left", pad="0")
      spl_x2 <- t_scenario_2
      
      spl_78 <- merge(spl_7, spl_8, by = "Part_Nbr")
      spl_789 <- merge(spl_78, spl_9, by = "Part_Nbr")
      spl_789 <- merge(spl_789, spl_x2, by = "Part_Nbr")
      global_scenario_2$df_data_sce_2 <- spl_789
      
      spl_789_result <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2, Selldown_NPV_Scenario_2, Revenue_Scenario_2, Revenue_non_npv_Scenario_2,
                                           Optimal_NPV_Scenario_2, Optimal_ATB_Quantity_Scenario_2,total_forecast)
      
      spl_789_result <- as.data.frame(spl_789_result)
      spl_789_result <- data.frame(lapply(spl_789_result, as.character), stringsAsFactors=FALSE)
      spl_789_result <- data.frame(lapply(spl_789_result, as.numeric), stringsAsFactors=FALSE)
      
      shinyjs::show("analysis_sce_2")
      if (input$sel == "Cost" | input$sel == "Forecee_n_Cost" | input$sel == "Cognos_n_Cost")
      {
        scenario_2_display <- read.csv("spl_789_result.csv", stringsAsFactors = FALSE)
        
        scenario_2_display[scenario_2_display$Part_Nbr == spl_789_result$Part_Nbr[1], ] <- spl_789_result[1,]
        write.csv(scenario_2_display, file = "spl_789_result.csv", row.names = FALSE)
        
        scenario_2_display$Part_Nbr <- str_pad(scenario_2_display$Part_Nbr, width=8, side="left", pad="0")
        
        output$analysis_sce_2 <- renderHotable({
          scenario_2_display <- data.frame(Part_Nbr = scenario_2_display[,1], lapply(scenario_2_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                           formatC(scenario_2_display[,7] , big.mark=",", digits=0, format="f"), formatC(scenario_2_display[,8] , big.mark=",", digits=0, format="f") ,stringsAsFactors = FALSE)
          
          colnames(scenario_2_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
          
          scenario_2_display
        })
        
      } else
      {
        scenario_2_display <- read.csv("spl_123_result_s2.csv", stringsAsFactors = FALSE)
        scenario_2_display[scenario_2_display$Part_Nbr == spl_789_result$Part_Nbr[1], ] <- spl_789_result[1,]
        write.csv(scenario_2_display, file = "spl_123_result_s2.csv", row.names = FALSE)
        
        scenario_2_display$Part_Nbr <- str_pad(scenario_2_display$Part_Nbr, width=8, side="left", pad="0")
        
        output$analysis_sce_2 <- renderHotable({
          scenario_2_display <- data.frame(Part_Nbr = scenario_2_display[,1], lapply(scenario_2_display[,2:6], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                                           formatC(scenario_2_display[,7] , big.mark=",", digits=0, format="f"), formatC(scenario_2_display[,8] , big.mark=",", digits=0, format="f") ,stringsAsFactors = FALSE)
          
          colnames(scenario_2_display) <- c("Part Number", "NPV", "Selldown NPV", "Revenue", "Revenue(Non NPV)", "Optimal NPV", "Optimal Buy Qty", "Total Forecast")
          scenario_2_display
        })
      }
      
      reflect_back_scenario_2 <- spl_789 %>% select(Part_Nbr, NPV_Scenario_2,
                                                    Selldown_NPV_Scenario_2,Selldown_NPV_non_npv_Scenario_2, Revenue_Scenario_2,Revenue_non_npv_Scenario_2,Part_Cost_Scenario_2,Material_cost_non_npv_Scenario_2,
                                                    Setup_cost_Scenario_2 ,Total_transport_cost_Scenario_2,Total_transport_cost_non_npv_Scenario_2,Storage_Cost_Scenario_2,Storage_Cost_non_npv_Scenario_2,
                                                    Total_process_cost_Scenario_2,  Total_process_cost_non_npv_Scenario_2,Package_cost_Scenario_2,Package_cost_non_npv_Scenario_2,
                                                    Total_offsite_labor_cost_Scenario_2,Total_offsite_labor_cost_non_npv_Scenario_2,Total_offsite_transport_cost_Scenario_2,Total_offsite_transport_cost_non_npv_Scenario_2, 
                                                    Additional_Cost_2,Selldown_Revenue_Scenario_2,Selldown_Revenue_non_npv_Scenario_2,
                                                    Selldown_Material_cost_Scenario_2,Selldown_Material_cost_non_npv_Scenario_2,
                                                    Selldown_Freight_cost_Scenario_2,Selldown_Freight_cost_non_npv_Scenario_2,Selldown_Storage_Cost_Scenario_2,Selldown_Storage_Cost_non_npv_Scenario_2, Selldown_Processing_Cost_Scenario_2,
                                                    Selldown_Processing_Cost_non_npv_Scenario_2,Selldown_Package_Cost_Scenario_2,Selldown_Package_Cost_non_npv_Scenario_2,
                                                    Total_Inventory,
                                                    First_buy,Last_buy, Last_sale, Scrap_amount_Scenario_2, LTB_Buy_Quantity_Scenario_2,
                                                    Total_Purchase_Qty_2, Total_Forecast_Scenario_2,
                                                    Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2, Optimal_Material_Cost_Scenario_2, Optimal_Setup_cost_Scenario_2,
                                                    Optimal_Total_transport_cost_Scenario_2,
                                                    Optimal_Total_offsite_transport_cost_Scenario_2, Optimal_Storage_Cost_Scenario_2, Optimal_Total_process_cost_Scenario_2,
                                                    Optimal_Packaging_cost_Scenario_2,
                                                    Optimal_Total_offsite_labor_cost_Scenario_2, Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2,
                                                    Extended_purchase_cost_2,Proposed_Dealer_Price, Proposed_WD_Price, Material_Cost, MOQ,Standard_Pack,Setup_Cost_s2,Additional_Cost_s2,Monthly_square_feet_cpp,
                                                    Offsite_transportation_cpp,Redistribution_cpp,Offsite_Labor_cpp,Inbound_Labor_cpp,Outbound_Labor_cpp,
                                                    Average_Labor_cpp,Average_Processing_cpp,Inbound_Transportation_cpp,Outbound_Transportation_cpp)
      
      report_update <- global_scenario_2_down$df_data_scenario_2_down
      report_update[report_update$Part_Nbr == reflect_back_scenario_2$Part_Nbr[1], 2:72] <- reflect_back_scenario_2[1, 2:72] #change
      global_scenario_2_down$df_data_scenario_2_down <- report_update
      
      ##------------------------------
      ## Management Report Snippet:
      ##------------------------------
      
      management_report_2 <- global_scenario_2_down$df_data_scenario_2_down
      management_report_2 <- management_report_2 %>% select(Part_Nbr, NPV_Scenario_2, Revenue_Scenario_2, LTB_Buy_Quantity_Scenario_2, Extended_purchase_cost_2, 
                                                            Optimal_NPV_Scenario_2, Optimal_Revenue_Scenario_2, Optimal_ATB_Quantity_Scenario_2, Extended_optimal_buy_cost_2)
      
      management_report_2 <- management_report_2[management_report_2$LTB_Buy_Quantity_Scenario_2 > 0,]
      
      if(nrow(management_report_2) > 0)
      {
        
        management_report_2$NPV_impact_2 <- management_report_2$Optimal_NPV_Scenario_2 - management_report_2$NPV_Scenario_2
        management_report_2$Revenue_impact_2 <- management_report_2$Optimal_Revenue_Scenario_2 - management_report_2$Revenue_Scenario_2
        management_report_2$Buy_impact_2 <- management_report_2$Extended_optimal_buy_cost_2 - management_report_2$Extended_purchase_cost_2
        colnames(management_report_2)[4] <- "Entered_Buy_Quantity_2"
        colnames(management_report_2)[8] <- "Optimal_Quantity_Scenario_2"
        management_report_2$Time_stamp_2 <- Sys.Date()
        management_report_2$Day_2 <- day(Sys.Date())
        management_report_2$Month_2 <- month(Sys.Date())
        management_report_2$Year_2 <- year(Sys.Date())
        
        management_report_2$Part_Nbr <- as.character(str_pad(management_report_2$Part_Nbr, width=8, side="left", pad="0"))
        management_report_2$Time_stamp_2 <- as.character(management_report_2$Time_stamp_2)
        management_report_2$Day_2 <- as.character(management_report_2$Day_2)
        management_report_2$Month_2 <- as.character(management_report_2$Month_2)
        management_report_2$Year_2 <- as.character(management_report_2$Year_2)
        
        management_report_2$RAT_NUMBER <- "-"
        management_report_2$GM_ID <- test$gm_id[1]
        
        dbWriteTable(conn = con,
                     name = TEMP_MAN_REP_2_NAME,
                     value = management_report_2, overwrite = TRUE, append = FALSE)
        
        dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_2 IN EXCLUSIVE MODE")
        
        sql_management_rep_2 <- paste("UPDATE MANAGEMENT_TABLE_2 A
                                      SET (A.NPV_SCENARIO_2, A.REVENUE_SCENARIO_2, A.ENTERED_BUY_QUANTITY_2, A.EXTENDED_PURCHASE_COST_2, A.OPTIMAL_NPV_SCENARIO_2, A.OPTIMAL_REVENUE_SCENARIO_2,
                                      A.OPTIMAL_QUANTITY_SCENARIO_2, A.EXTENDED_OPTIMAL_BUY_COST_2, A.NPV_IMPACT_2, A.REVENUE_IMPACT_2, A.BUY_IMPACT_2, 
                                      A.TIME_STAMP, A.DAY_2, A.MONTH_2, A.YEAR_2, A.RAT_NUMBER, A.GM_ID) =
                                      (SELECT B.NPV_Scenario_2, B.Revenue_Scenario_2, B.Entered_Buy_Quantity_2, B.Extended_purchase_cost_2, 
                                      B.Optimal_NPV_Scenario_2, B.Optimal_Revenue_Scenario_2, B.Optimal_Quantity_Scenario_2, B.Extended_optimal_buy_cost_2, 
                                      B.NPV_impact_2,B.Revenue_impact_2, B.Buy_impact_2, B.Time_stamp_2, B.Day_2, B.Month_2, B.Year_2, B.RAT_NUMBER, B.GM_ID
                                      FROM",
                                      TEMP_MAN_REP_2_NAME, "B
                                      WHERE 
                                      LPAD(A.PART_NBR, 8, '0') = LPAD(B.Part_Nbr, 8, '0'))
                                      WHERE EXISTS (SELECT NPV_SCENARIO_2
                                      FROM",
                                      TEMP_MAN_REP_2_NAME, "C WHERE
                                      LPAD(C.PART_NBR, 8, '0')= LPAD(A.PART_NBR, 8, '0'))")
        
        value_management_rep_2 <- dbSendUpdate(con, sql_management_rep_2)
        
        dbSendUpdate(con, "LOCK TABLE MANAGEMENT_TABLE_2 IN EXCLUSIVE MODE")
        
        sql_management_rep_insert_2 <- paste("INSERT INTO MANAGEMENT_TABLE_2 
                                             SELECT A.* FROM", TEMP_MAN_REP_2_NAME," A
                                             WHERE A.PART_NBR NOT IN (SELECT DISTINCT PART_NBR FROM MANAGEMENT_TABLE_2)")
        
        value_management_rep_insert_2 <- dbSendUpdate(con, sql_management_rep_insert_2)
        
        dbSendUpdate(con, paste("BEGIN
                                EXECUTE IMMEDIATE 'DROP TABLE",TEMP_MAN_REP_2_NAME , "';
                                EXCEPTION
                                WHEN OTHERS THEN NULL;
                                END;"))
        
      }
      
      ## Generating income report for Scenario-2
      income_report_scenario_2 <- c(1:52)
      income_report_scenario_2<- as.data.frame(income_report_scenario_2)
      income_report_scenario_2$Fields <-  c('Dealer Price', 'Wd price', 'Allied Price', 'Dealer discount %', 'Wd discount %', 'Allied Discount %', 'Net Dealer', 'Net Wd',
                                            'Net Allied',
                                            'Lifetime Revenue(Non NPV)',
                                            'Lifetime Revenue(NPV)',
                                            'Sell Down Revenue(Non NPV) - OES',
                                            'Sell Down Revenue(Non NPV) - IAM',
                                            'Sell Down Revenue(Non NPV) - Allied/Export',
                                            'Sell Down Revenue(Non NPV',
                                            'Selldown Revenue (NPV)',
                                            'Material Cost(Non NPV)',
                                            'Material Cost(NPV)',
                                            'Sell Down Material Non Npv',
                                            'Sell Down Material (NPV)',
                                            'Transportation Cost(NON NPV)',
                                            'Transportation Cost(NPV)',
                                            'Sell Down Transportation cost (Non NPV)',
                                            'Sell Down Transportation cost (NPV)',
                                            'Labor Cost(NON NPV)',
                                            'Labor Cost(NPV)',
                                            'Sell Down Labor (NON NPV)',
                                            'Sell Down Labor (NPV)',
                                            'Storage Cost (Non NPV)',
                                            'Storage Cost(NPV)',
                                            'Sell Down Storage(Non NPV)',
                                            'Sell Down Storage(NPV)',
                                            'Packaging Cost(NON NPV)',
                                            'Packaging Cost(NPV)',
                                            'Sell Down Packaging Cost (NON NPV)',
                                            'Sell Down Packaging Cost (NPV)',
                                            'Set up Cost (NON NPV)',
                                            'Setup Cost(NPV)',
                                            'Additional Cost($)',
                                            'Total Expense(NON NPV)',
                                            'Total Expense(NPV)',
                                            'Profit (Non NPV)',
                                            'NPV',
                                            'Selldown (non Npv)',
                                            'Selldown NPV',
                                            'National Inventory',
                                            'Total Purchase',
                                            'Total Inventory and Purchase',
                                            'Total Sales',
                                            'Scrap',
                                            'MOQ',
                                            'Standard Pack')
      
      sales_oes <- sum(FCST_oes)
      sales_iam <- sum(FCST_iam)
      sales_allied <- sum(FCST_allied)
      
      inventory_oes <- round(Current_Inventory * ATB_ADS$OES_FRACTION[1], digits = 0)
      inventory_iam <- round(Current_Inventory * ATB_ADS$IAM_FRACTION[1], digits = 0)
      inventory_allied <- round(Current_Inventory * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
      
      if(is.na(BQ_S2))
      {
        
        purchase_oes <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
        purchase_iam <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
        purchase_allied <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        ## Calculating the difference in sales, inventory and purchase before and after rounding
        diff_sales <- Scenario_2_current$Total_Forecast_Scenario_2[1] - (sales_oes + sales_iam + sales_allied)
        diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
        diff_purchase <- ceiling(Scenario_2_current$Buy_Quantity_Scenario_2[1]) - (purchase_oes + purchase_iam + purchase_allied)
        
        ## Calling function to adjust the rounding error in sales, purcahse and inventory
        sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
        sales_values <- unlist(sales_values)
        sales_oes <- sales_values[1]
        sales_iam <- sales_values[2]
        sales_allied <- sales_values[3]
        
        inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
        inventory_values <- unlist(inventory_values)
        inventory_oes <- inventory_values[1]
        inventory_iam <- inventory_values[2]
        inventory_allied <- inventory_values[3]
        
        purchase_values <- Round_fn(purchase_oes, purchase_iam, purchase_allied, diff_purchase)
        purchase_values <- unlist(purchase_values)
        purchase_oes <- purchase_values[1]
        purchase_iam <- purchase_values[2]
        purchase_allied <- purchase_values[3]
        
        purchase_inventory <- ceiling((Current_Inventory + Scenario_2_current$Buy_Quantity_Scenario_2[1]))
        purchase_inventory_oes <- inventory_oes + purchase_oes
        purchase_inventory_iam <- inventory_iam + purchase_iam
        purchase_inventory_allied <- inventory_allied + purchase_allied
        income_report_scenario_2$income_report_scenario_2 <- NULL
        
        income_report_scenario_2$Per_unit <- c(Scenario_2_optimal$Proposed_Dealer_Price_2[1], Scenario_2_optimal$Proposed_Wd_Price_2[1], 
                                               Scenario_2_optimal$Proposed_Dealer_Price_2[1], ATB_ADS$Discount_oes_percent[1], 
                                               ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                               Scenario_2_current$Revenue_OES_non_npv_discount_2[1], Scenario_2_current$Revenue_IAM_non_npv_discount_2[1], 
                                               Scenario_2_current$Revenue_Allied_non_npv_discount_2[1], 
                                               Scenario_2_current$Revenue_non_npv_Scenario_2[1], Scenario_2_current$Revenue_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_OES[1], Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_IAM[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_Allied[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2[1], part_c_3, 
                                               Scenario_2_current$Part_Cost_Scenario_2[1],
                                               part_c_3, Selldown_NPV_Scenario_2$Selldown_Material_cost_Scenario_2[1], 
                                               Scenario_2_current$Transportation_cost_non_npv_Scenario_2[1], Scenario_2_current$Transportation_Cost_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Freight_cost_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Freight_cost_Scenario_2[1], 
                                               (Scenario_2_current$Total_offsite_labor_cost_non_npv_Scenario_2[1] + Scenario_2_current$Total_process_cost_non_npv_Scenario_2[1]), 
                                               (Scenario_2_current$Total_offsite_labor_cost_Scenario_2[1] + Scenario_2_current$Total_process_cost_Scenario_2[1]),
                                               Selldown_NPV_Scenario_2$Selldown_Processing_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Processing_Cost_Scenario_2[1],
                                               Scenario_2_current$Storage_Cost_non_npv_Scenario_2[1],
                                               Scenario_2_current$Storage_Cost_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Storage_Cost_non_npv_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Storage_Cost_Scenario_2[1],
                                               Scenario_2_current$Package_cost_non_npv_Scenario_2[1], Scenario_2_current$Package_cost_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Package_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Package_Cost_Scenario_2[1],
                                               Scenario_2_current$Setup_cost_Scenario_2[1], Scenario_2_current$Setup_cost_Scenario_2[1],
                                               Scenario_2_current$Additional_cost_Scenario_2[1], Scenario_2_current$Expense_non_npv_Scenario_2[1], Scenario_2_current$Expense_Scenario_2[1],
                                               Scenario_2_current$Profit_Non_NPV_Scenario_2[1], Scenario_2_current$NPV_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_NPV_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1], Current_Inventory, ceiling(Scenario_2_current$Buy_Quantity_Scenario_2[1]),
                                               ceiling((Current_Inventory + Scenario_2_current$Buy_Quantity_Scenario_2[1])),
                                               Scenario_2_current$Total_Forecast_Scenario_2[1], Scenario_2_current$Scrap_amount_Scenario_2[1], moq,
                                               std_p)
        
      } else
      {
        purchase_inventory <- Scenario_2_current$Buy_Quantity_Scenario_2[1]
        purchase_inventory_oes <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$OES_FRACTION[1], digits = 0)
        purchase_inventory_iam <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$IAM_FRACTION[1], digits = 0)
        purchase_inventory_allied <- round(Scenario_2_current$Buy_Quantity_Scenario_2[1] * ATB_ADS$ALLIED_EXPORT_FRACTION[1], digits = 0)
        
        ## Calculating the difference in sales, inventory and purchase before and after rounding
        diff_sales <- Scenario_2_current$Total_Forecast_Scenario_2[1] - (sales_oes + sales_iam + sales_allied)
        diff_inventory <- Current_Inventory - (inventory_oes + inventory_iam + inventory_allied)
        diff_purchase_inventory <- ceiling(Scenario_2_current$Buy_Quantity_Scenario_2[1]) - (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied)
        
        ## Calling function to adjust the rounding error in sales, purcahse and inventory
        sales_values <- Round_fn(sales_oes, sales_iam, sales_allied, diff_sales)
        sales_values <- unlist(sales_values)
        sales_oes <- sales_values[1]
        sales_iam <- sales_values[2]
        sales_allied <- sales_values[3]
        
        inventory_values <- Round_fn(inventory_oes, inventory_iam, inventory_allied, diff_inventory)
        inventory_values <- unlist(inventory_values)
        inventory_oes <- inventory_values[1]
        inventory_iam <- inventory_values[2]
        inventory_allied <- inventory_values[3]
        
        purchase_inventory_values <- Round_fn(purchase_inventory_oes, purchase_inventory_iam, purchase_inventory_allied, diff_purchase_inventory)
        purchase_inventory_values <- unlist(purchase_inventory_values)
        purchase_inventory_oes <- purchase_inventory_values[1]
        purchase_inventory_iam <- purchase_inventory_values[2]
        purchase_inventory_allied <- purchase_inventory_values[3]
        
        purchase_values <- Scenario_2_current$Buy_Quantity_Scenario_2[1] - Current_Inventory
        purchase_oes <- purchase_inventory_oes - inventory_oes
        purchase_iam <- purchase_inventory_iam - inventory_iam
        purchase_allied <- purchase_inventory_allied - inventory_allied
        
        income_report_scenario_2$income_report_scenario_2 <- NULL
        
        income_report_scenario_2$Per_unit <- c(Scenario_2_optimal$Proposed_Dealer_Price_2[1], Scenario_2_optimal$Proposed_Wd_Price_2[1], 
                                               Scenario_2_optimal$Proposed_Dealer_Price_2[1], ATB_ADS$Discount_oes_percent[1], 
                                               ATB_ADS$Discount_iam_percent[1], ATB_ADS$Discount_allied_export_percent[1],
                                               Scenario_2_current$Revenue_OES_non_npv_discount_2[1], Scenario_2_current$Revenue_IAM_non_npv_discount_2[1], 
                                               Scenario_2_current$Revenue_Allied_non_npv_discount_2[1], 
                                               Scenario_2_current$Revenue_non_npv_Scenario_2[1], Scenario_2_current$Revenue_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_OES[1], Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_IAM[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2_Allied[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2[1], part_c_3, 
                                               Scenario_2_current$Part_Cost_Scenario_2[1],
                                               part_c_3, Selldown_NPV_Scenario_2$Selldown_Material_cost_Scenario_2[1], 
                                               Scenario_2_current$Transportation_cost_non_npv_Scenario_2[1], Scenario_2_current$Transportation_Cost_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Freight_cost_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_Freight_cost_Scenario_2[1], 
                                               (Scenario_2_current$Total_offsite_labor_cost_non_npv_Scenario_2[1] + Scenario_2_current$Total_process_cost_non_npv_Scenario_2[1]), 
                                               (Scenario_2_current$Total_offsite_labor_cost_Scenario_2[1] + Scenario_2_current$Total_process_cost_Scenario_2[1]),
                                               Selldown_NPV_Scenario_2$Selldown_Processing_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Processing_Cost_Scenario_2[1],
                                               Scenario_2_current$Storage_Cost_non_npv_Scenario_2[1],
                                               Scenario_2_current$Storage_Cost_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Storage_Cost_non_npv_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Storage_Cost_Scenario_2[1],
                                               Scenario_2_current$Package_cost_non_npv_Scenario_2[1], Scenario_2_current$Package_cost_Scenario_2[1], 
                                               Selldown_NPV_Scenario_2$Selldown_Package_Cost_non_npv_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_Package_Cost_Scenario_2[1],
                                               Scenario_2_current$Setup_cost_Scenario_2[1], Scenario_2_current$Setup_cost_Scenario_2[1],
                                               Scenario_2_current$Additional_cost_Scenario_2[1], Scenario_2_current$Expense_non_npv_Scenario_2[1], Scenario_2_current$Expense_Scenario_2[1],
                                               Scenario_2_current$Profit_Non_NPV_Scenario_2[1], Scenario_2_current$NPV_Scenario_2[1], Selldown_NPV_Scenario_2$Selldown_NPV_non_npv_Scenario_2[1],
                                               Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1], Current_Inventory, (purchase_oes + purchase_iam + purchase_allied),
                                               (purchase_inventory_oes + purchase_inventory_iam + purchase_inventory_allied),
                                               Scenario_2_current$Total_Forecast_Scenario_2[1], Scenario_2_current$Scrap_amount_Scenario_2[1], moq,
                                               std_p)
        
      }
      income_report_scenario_2$Per_unit[c(10:11)] <- income_report_scenario_2$Per_unit[c(10:11)] / Scenario_2_current$Total_Forecast_Scenario_2[1]
      
      div_oes <- ifelse(inventory_oes > sales_oes, sales_oes, inventory_oes)
      div_iam <- ifelse(inventory_iam > sales_iam, sales_iam, inventory_iam)
      div_allied <- ifelse(inventory_allied > sales_allied, sales_allied, inventory_allied)
      div_inventory <- ifelse(Current_Inventory > Scenario_2_current$Total_Forecast_Scenario_2, Scenario_2_current$Total_Forecast_Scenario_2, Current_Inventory)
      
      
      income_report_scenario_2$Per_unit[c(15:16)] <- income_report_scenario_2$Per_unit[c(15:16)] / div_inventory
      income_report_scenario_2$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] <- income_report_scenario_2$Per_unit[c(18, 21:22, 25:26, 29:30, 33:34, 37:43)] / purchase_inventory
      income_report_scenario_2$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] <- income_report_scenario_2$Per_unit[c(20, 23:24, 27:28, 31:32, 35:36, 44:45)] / Current_Inventory
      income_report_scenario_2$Per_unit <- ifelse(is.nan(income_report_scenario_2$Per_unit), 0, income_report_scenario_2$Per_unit)
      
      income_report_scenario_2$OES <- 0
      income_report_scenario_2$IAM <- 0
      income_report_scenario_2$Allied_export <- 0
      income_report_scenario_2$Total <- 0
      
      income_report_scenario_2$OES[1] <- income_report_scenario_2$Per_unit[1] * sales_oes
      income_report_scenario_2$OES[4] <- (ATB_ADS$Discount_oes_percent[1]/100) * income_report_scenario_2$OES[1]
      income_report_scenario_2$OES[7] <- income_report_scenario_2$OES[1] - income_report_scenario_2$OES[4]
      income_report_scenario_2$Per_unit[7] <- income_report_scenario_2$OES[7] / sales_oes
      income_report_scenario_2$OES[10] <-  income_report_scenario_2$OES[7]
      
      income_report_scenario_2$IAM[2] <- income_report_scenario_2$Per_unit[2] * sales_iam
      income_report_scenario_2$IAM[5] <- (ATB_ADS$Discount_iam_percent[1]/100) * income_report_scenario_2$IAM[2]
      income_report_scenario_2$IAM[8] <- income_report_scenario_2$IAM[2] - income_report_scenario_2$IAM[5]
      income_report_scenario_2$Per_unit[8] <- income_report_scenario_2$IAM[8] / sales_iam
      income_report_scenario_2$IAM[10] <-  income_report_scenario_2$IAM[8]
      
      income_report_scenario_2$Allied_export[3] <- income_report_scenario_2$Per_unit[3] * sales_allied
      income_report_scenario_2$Allied_export[6] <- (ATB_ADS$Discount_allied_export_percent[1]/100) * income_report_scenario_2$Allied_export[3]
      income_report_scenario_2$Allied_export[9] <- income_report_scenario_2$Allied_export[3] - income_report_scenario_2$Allied_export[6]
      income_report_scenario_2$Per_unit[9] <- income_report_scenario_2$Allied_export[9] / sales_allied
      income_report_scenario_2$Allied_export[10] <-  income_report_scenario_2$Allied_export[9]
      
      income_report_scenario_2$Per_unit[12] <- income_report_scenario_2$Per_unit[7]
      income_report_scenario_2$Per_unit[13] <- income_report_scenario_2$Per_unit[8]
      income_report_scenario_2$Per_unit[14] <- income_report_scenario_2$Per_unit[9]
      
      income_report_scenario_2$OES[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] <- income_report_scenario_2$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34, 37:39)] * purchase_inventory_oes
      income_report_scenario_2$OES[11:16] <-c( Scenario_2_current$Revenue_OES_discount_2[1],(income_report_scenario_2$Per_unit[12] * div_oes), 0,0,
                                               (income_report_scenario_2$Per_unit[12] * div_oes),
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2_OES[1])
      
      income_report_scenario_2$OES[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_2$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_oes
      income_report_scenario_2$OES[44] <- income_report_scenario_2$OES[15] - sum(income_report_scenario_2$OES[c(19,23,27,31,35)])
      income_report_scenario_2$OES[45] <- income_report_scenario_2$OES[16] - sum(income_report_scenario_2$OES[c(20,24,28,32,36)])
      
      income_report_scenario_2$OES[c(46:49)] <- c(inventory_oes, purchase_oes, purchase_inventory_oes, sales_oes)
      
      income_report_scenario_2$OES[40] <- income_report_scenario_2$OES[17] + income_report_scenario_2$OES[21] + income_report_scenario_2$OES[25] + income_report_scenario_2$OES[29] + income_report_scenario_2$OES[33] + income_report_scenario_2$OES[37] + income_report_scenario_2$OES[39]
      income_report_scenario_2$OES[41] <- income_report_scenario_2$OES[18] + income_report_scenario_2$OES[22] + income_report_scenario_2$OES[26] + income_report_scenario_2$OES[30] + income_report_scenario_2$OES[34] + income_report_scenario_2$OES[38] + income_report_scenario_2$OES[39]
      
      income_report_scenario_2$OES[42] <- income_report_scenario_2$OES[10] - income_report_scenario_2$OES[40]
      income_report_scenario_2$OES[43] <- income_report_scenario_2$OES[11] - income_report_scenario_2$OES[41]
      
      ##
      income_report_scenario_2$IAM[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_2$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_iam
      income_report_scenario_2$IAM[11:16] <-c( Scenario_2_current$Revenue_IAM_discount_2[1], 0, (income_report_scenario_2$Per_unit[13] * div_iam), 0,
                                               (income_report_scenario_2$Per_unit[13] * div_iam),
                                               Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2_IAM[1])
      
      income_report_scenario_2$IAM[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_2$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_iam
      income_report_scenario_2$IAM[44] <- income_report_scenario_2$IAM[15] - sum(income_report_scenario_2$IAM[c(19,23,27,31,35)])
      income_report_scenario_2$IAM[45] <- income_report_scenario_2$IAM[16] - sum(income_report_scenario_2$IAM[c(20,24,28,32,36)])
      
      income_report_scenario_2$IAM[c(46:49)] <- c(inventory_iam, purchase_iam, purchase_inventory_iam, sales_iam)
      
      income_report_scenario_2$IAM[40] <- income_report_scenario_2$IAM[17] + income_report_scenario_2$IAM[21] + income_report_scenario_2$IAM[25] + income_report_scenario_2$IAM[29] + income_report_scenario_2$IAM[33] + income_report_scenario_2$IAM[37] + income_report_scenario_2$IAM[39]
      income_report_scenario_2$IAM[41] <- income_report_scenario_2$IAM[18] + income_report_scenario_2$IAM[22] + income_report_scenario_2$IAM[26] + income_report_scenario_2$IAM[30] + income_report_scenario_2$IAM[34] + income_report_scenario_2$IAM[38] + income_report_scenario_2$IAM[39]
      
      income_report_scenario_2$IAM[42] <- income_report_scenario_2$IAM[10] - income_report_scenario_2$IAM[40]
      income_report_scenario_2$IAM[43] <- income_report_scenario_2$IAM[11] - income_report_scenario_2$IAM[41]
      
      ####
      income_report_scenario_2$Allied_export[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] <- income_report_scenario_2$Per_unit[c(17:18,21:22, 25:26, 29:30, 33:34,37:39)] * purchase_inventory_allied
      income_report_scenario_2$Allied_export[11:16] <-c( Scenario_2_current$Revenue_Allied_discount_2[1], 0, 0, (income_report_scenario_2$Per_unit[14] * div_allied),
                                                         (income_report_scenario_2$Per_unit[14] * div_allied),
                                                         Selldown_NPV_Scenario_2$Selldown_Revenue_Scenario_2_Allied[1])
      
      income_report_scenario_2$Allied_export[c(19:20, 23:24, 27:28, 31:32, 35:36)] <- income_report_scenario_2$Per_unit[c(19:20, 23:24, 27:28, 31:32, 35:36)] * inventory_allied
      income_report_scenario_2$Allied_export[44] <- income_report_scenario_2$Allied_export[15] - sum(income_report_scenario_2$Allied_export[c(19,23,27,31,35)])
      income_report_scenario_2$Allied_export[45] <- income_report_scenario_2$Allied_export[16] - sum(income_report_scenario_2$Allied_export[c(20,24,28,32,36)])
      
      income_report_scenario_2$Allied_export[c(46:49)] <- c(inventory_allied, purchase_allied, purchase_inventory_allied, sales_allied)
      
      income_report_scenario_2$Allied_export[40] <- income_report_scenario_2$Allied_export[17] + income_report_scenario_2$Allied_export[21] + income_report_scenario_2$Allied_export[25] + income_report_scenario_2$Allied_export[29] + income_report_scenario_2$Allied_export[33] + income_report_scenario_2$Allied_export[37] + income_report_scenario_2$Allied_export[39]
      income_report_scenario_2$Allied_export[41] <- income_report_scenario_2$Allied_export[18] + income_report_scenario_2$Allied_export[22] + income_report_scenario_2$Allied_export[26] + income_report_scenario_2$Allied_export[30] + income_report_scenario_2$Allied_export[34] + income_report_scenario_2$Allied_export[38] + income_report_scenario_2$Allied_export[39]
      
      income_report_scenario_2$Allied_export[42] <- income_report_scenario_2$Allied_export[10] - income_report_scenario_2$Allied_export[40]
      income_report_scenario_2$Allied_export[43] <- income_report_scenario_2$Allied_export[11] - income_report_scenario_2$Allied_export[41]
      
      income_report_scenario_2$Per_unit <- ifelse(is.nan(income_report_scenario_2$Per_unit), 0, income_report_scenario_2$Per_unit)
      income_report_scenario_2$OES <- ifelse(is.nan(income_report_scenario_2$OES), 0, income_report_scenario_2$OES)
      income_report_scenario_2$IAM <- ifelse(is.nan(income_report_scenario_2$IAM), 0, income_report_scenario_2$IAM)
      income_report_scenario_2$Allied_export <- ifelse(is.nan(income_report_scenario_2$Allied_export), 0, income_report_scenario_2$Allied_export)
      income_report_scenario_2$Total <- ifelse(is.nan(income_report_scenario_2$Total), 0, income_report_scenario_2$Total)
      
      income_report_scenario_2$Total <- income_report_scenario_2$Allied_export + income_report_scenario_2$IAM + income_report_scenario_2$OES
      
      income_report_scenario_2$Total[50:52] <- income_report_scenario_2$Per_unit[50:52]
      
      revenue_non <- income_report_scenario_2$Total[10]
      material_non <- income_report_scenario_2$Total[17]
      
      ## Displaying results for Scenario-2
      shinyjs::show("Scen_2")
      output$Scen_2 <- renderHotable({
        
        part_view <- 0
        part_view<- as.data.frame(part_view)
        part_view$part_view <- NULL
        part_view$Fields <- "NPV($)"
        part_view[2,1]<- "Selldown NPV($)"
        part_view[3,1]<- "Net"
        part_view[4,1]<- "Scrap"
        part_view[5,1]<- "Dealer Price($): OES"
        part_view[6,1]<- "Dealer Price($): Allied/Export"
        part_view[7,1]<- "Dealer Price($): IAM"
        part_view[8,1]<- "First Buy"
        part_view[9,1]<- "Last Buy"
        part_view[10,1]<- "Last Sale"
        part_view[11,1]<- "Lifetime Revenue(NPV)"
        part_view[12,1]<- "Lifetime Revenue(Non NPV)"
        part_view[13,1]<- "Material Cost(NPV)"
        part_view[14,1]<- "Material Cost(Non NPV)"
        part_view[15,1]<- "Setup Cost(NPV)"
        part_view[16,1]<- "Transportation Cost(NPV)"
        part_view[17,1]<- "Labor Cost(NPV)"
        part_view[18,1]<- "Storage Cost(NPV)"
        part_view[19,1]<- "Packaging Cost(NPV)"
        part_view[20,1]<- "Offsite Labor Cost(NPV)"
        part_view[21,1]<- "Offsite Trans Cost(NPV)"
        part_view[22,1]<- "Total Expense(NPV)"
        part_view[23,1]<- "Optimal NPV"
        part_view[24,1]<- "Optimal Buy Qty"
        part_view[25,1]<- "Total Purchase"
        part_view[26,1]<- "Inventory and Purchase"
        part_view[27,1]<- "Extended Optimal Buy Cost"
        part_view[28,1]<- "Extended Buy Qty Cost"
        
        part_view$Values <-  paste("$", formatC(Scenario_2_current$NPV_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[2, 2] <-  paste("$", formatC(Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[3, 2] <-  paste("$", formatC((Scenario_2_current$NPV_Scenario_2[1] - Selldown_NPV_Scenario_2$Selldown_NPV_Scenario_2[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[4, 2] <- round(Scenario_2_current$Scrap_amount_Scenario_2[1], 0)
        part_view[5, 2] <- paste("$", formatC(Scenario_2_optimal$Dealer_Price_OES_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[6, 2] <- paste("$", formatC(Scenario_2_optimal$Dealer_Price_Allied_Export_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[7, 2] <- paste("$", formatC(Scenario_2_optimal$Dealer_Price_IAM_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[8, 2] <- as.character(round(First_buy,0))
        part_view[9, 2] <- as.character(round(Last_buy,0))
        part_view[10, 2] <- as.character(round(Last_sale,0))
        part_view[11, 2] <-  paste("$", formatC(Scenario_2_current$Revenue_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[12, 2] <-  paste("$", formatC(Scenario_2_current$Revenue_non_npv_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[13, 2] <-  paste("$", formatC(Scenario_2_current$Part_Cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[14, 2] <- paste("$", formatC(Scenario_2_current$Material_cost_non_npv_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[15, 2] <-  paste("$", formatC(setup_cost, big.mark=",", digits=2, format="f"), sep = " ")
        part_view[16, 2] <- paste("$", formatC(Scenario_2_current$Total_transport_cost_Scenario_2[1] , big.mark=",", digits=2, format="f"), sep = " ")
        part_view[17, 2] <-  paste("$", formatC((Scenario_2_current$Total_process_cost_Scenario_2[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[18, 2] <-  paste("$", formatC(Scenario_2_current$Storage_Cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[19, 2] <-  paste("$", formatC((Scenario_2_current$Package_cost_Scenario_2[1]), big.mark=",", digits=2, format="f"), sep = " ")
        part_view[20, 2] <-  paste("$", formatC(Scenario_2_current$Total_offsite_labor_cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[21, 2] <- paste("$", formatC( Scenario_2_current$Total_offsite_transport_cost_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[22, 2] <- paste("$", formatC(Scenario_2_current$Expense_Scenario_2[1] , big.mark=",", digits=2, format="f"), sep = " ")
        part_view[23, 2] <-  paste("$", formatC(Scenario_2_optimal$Optimal_NPV_Scenario_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[24, 2] <- paste(formatC(ceiling(Scenario_2_optimal$Optimal_ATB_Quantity_Scenario_2[1]), big.mark=",", digits=0, format="f"), sep = " ")
        part_view[25,2] <-  paste(formatC((Scenario_2_current$Total_Purchase_Qty_2[1]), big.mark=",", digits=0, format="f"))
        part_view[26,2] <-  paste(formatC(Scenario_2_current$Total_Inventory_Purchase_2[1], big.mark=",", digits=0, format="f"), sep = " ")
        part_view[27, 2] <-  paste("$", formatC(Scenario_2_optimal$Extended_optimal_buy_cost_2[1], big.mark=",", digits=2, format="f"), sep = " ")
        part_view[28, 2] <-  paste("$", formatC(Scenario_2_current$Extended_purchase_cost_2[1], big.mark=",", digits=2, format="s"), sep = " ")
        
        part_view
        
      }, readOnly = TRUE)
      
      ## Formatting results for income report
      income_report_scenario_2$Per_unit[c(1:3, 7:16, 18, 20:45)] <- paste("$", formatC(income_report_scenario_2$Per_unit[c(1:3, 7:16, 18, 20:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_2$Per_unit[c(17, 19)] <- paste("$", formatC(income_report_scenario_2$Per_unit[c(17, 19)], big.mark=",", digits=7, format="f"), sep = " ")
      
      income_report_scenario_2$Per_unit[c(4:6)] <- paste(formatC(income_report_scenario_2$Per_unit[c(4:6)], big.mark=",", digits=20, format="f"), "%" , sep = " ")
      income_report_scenario_2$Per_unit[c(46:52)] <- paste(formatC(income_report_scenario_2$Per_unit[c(46:52)], big.mark=",", digits=20, format="f"))
      
      income_report_scenario_2$OES[c(1:45)] <- paste("$", formatC(income_report_scenario_2$OES[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_2$OES[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_2$OES[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_2$IAM[c(1:45)] <- paste("$", formatC(income_report_scenario_2$IAM[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_2$IAM[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_2$IAM[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_2$Allied_export[c(1:45)] <- paste("$", formatC(income_report_scenario_2$Allied_export[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_2$Allied_export[c(46:52)] <- paste(formatC(as.numeric(income_report_scenario_2$Allied_export[c(46:52)]), big.mark=",", digits=20, format="f"))
      
      income_report_scenario_2$Total[c(1:45)] <- paste("$", formatC(income_report_scenario_2$Total[c(1:45)], big.mark=",", digits=20, format="f"), sep = " ")
      income_report_scenario_2$Total[c(46:52)] <- paste(formatC(income_report_scenario_2$Total[c(46:52)], big.mark=",", digits=20, format="f"))
      
      income_report_scenario_2$Per_unit[c(10,11,15,16,40:45)] <- "-"
      income_report_scenario_2[c(12:16, 19,20,23,24,27,28,31,32,35,36,44,45), c(2:6)] <- "-"
      
      
      output$download_income_report_s_2 <- downloadHandler(
        filename = function() {
          paste("Income_statement_report_s_2", ".csv", sep="")
        },
        content = function(file) {
          abc <- income_report_scenario_2
          
          write.csv(abc, file)
          
        }
      )
      
    } # Closing for Progress Indicator
        )
    ############################ Closing of Scenario-2
    
    })
  
  
  observeEvent({
    input$management_report
  }, {
    
    
    showModal(modalDialog(title='Select download type',
                          radioButtons("selected_report", "Choose the report type you want to download and click confirm",
                                       c("Daily" = "Daily",
                                         "Monthly" = "Monthly",
                                         "Quarterly" = "Quarterly",
                                         "Yearly" = "Yearly"),
                                       selected = "Daily", inline = TRUE
                          ),
                          actionButton('confirm_download', 'Confirm'),
                          tags$br(),
                          tags$br(),
                          downloadButton('create_download_report', 'Download Management Report')))
    
    
    
    shinyjs::disable("create_download_report")
    
  })
  
  observeEvent({
    input$confirm_download
  }, {
    
    shinyjs::disable("create_download_report")
    
    Current_Date <- Sys.Date()
    Current_Day <- as.character(day(Sys.Date()))
    Current_Month <- as.character(month(Sys.Date()))
    Current_Year <- as.character(year(Sys.Date()))
    Current_Quarter <- as.character(quarter(Sys.Date()))
    
    if(input$selected_report == 'Daily')
    {
      mannagement_report_download_1 <- paste0("SELECT PART_NBR, NPV_SCENARIO_1, REVENUE_SCENARIO_1, ENTERED_BUY_QUANTITY_1, EXTENDED_PURCHASE_COST_1, 
                                              OPTIMAL_NPV_SCENARIO_1, OPTIMAL_REVENUE_SCENARIO_1, OPTIMAL_QUANTITY_SCENARIO_1, 
                                              EXTENDED_OPTIMAL_BUY_COST_1, NPV_IMPACT_1, REVENUE_IMPACT_1, BUY_IMPACT_1, TIME_STAMP, 
                                              DAY_1, MONTH_1, YEAR_1, RAT_NUMBER, GM_ID
                                              FROM MANAGEMENT_TABLE_1
                                              WHERE TIME_STAMP IN '",Current_Date, "'")
      
      mannagement_report_download_2 <- paste0("SELECT PART_NBR, NPV_SCENARIO_2, REVENUE_SCENARIO_2, ENTERED_BUY_QUANTITY_2, EXTENDED_PURCHASE_COST_2, 
                                              OPTIMAL_NPV_SCENARIO_2, OPTIMAL_REVENUE_SCENARIO_2, OPTIMAL_QUANTITY_SCENARIO_2, 
                                              EXTENDED_OPTIMAL_BUY_COST_2, NPV_IMPACT_2, REVENUE_IMPACT_2, BUY_IMPACT_2, TIME_STAMP, 
                                              DAY_2, MONTH_2, YEAR_2, RAT_NUMBER, GM_ID
                                              FROM MANAGEMENT_TABLE_2
                                              WHERE TIME_STAMP IN '",Current_Date, "'")
      
    } else if(input$selected_report == 'Monthly')
    {
      mannagement_report_download_1 <- paste0("SELECT PART_NBR, NPV_SCENARIO_1, REVENUE_SCENARIO_1, ENTERED_BUY_QUANTITY_1, EXTENDED_PURCHASE_COST_1, 
                                              OPTIMAL_NPV_SCENARIO_1, OPTIMAL_REVENUE_SCENARIO_1, OPTIMAL_QUANTITY_SCENARIO_1, 
                                              EXTENDED_OPTIMAL_BUY_COST_1, NPV_IMPACT_1, REVENUE_IMPACT_1, BUY_IMPACT_1, TIME_STAMP, 
                                              DAY_1, MONTH_1, YEAR_1, RAT_NUMBER, GM_ID
                                              FROM MANAGEMENT_TABLE_1
                                              WHERE MONTH_1 IN '", Current_Month, "' AND YEAR_1 IN '", Current_Year, "'")
      
      mannagement_report_download_2 <- paste0("SELECT PART_NBR, NPV_SCENARIO_2, REVENUE_SCENARIO_2, ENTERED_BUY_QUANTITY_2, EXTENDED_PURCHASE_COST_2, 
                                              OPTIMAL_NPV_SCENARIO_2, OPTIMAL_REVENUE_SCENARIO_2, OPTIMAL_QUANTITY_SCENARIO_2, 
                                              EXTENDED_OPTIMAL_BUY_COST_2, NPV_IMPACT_2, REVENUE_IMPACT_2, BUY_IMPACT_2, TIME_STAMP, 
                                              DAY_2, MONTH_2, YEAR_2, RAT_NUMBER, GM_ID
                                              FROM MANAGEMENT_TABLE_2
                                              WHERE MONTH_2 IN '", Current_Month, "' AND YEAR_2 IN '", Current_Year, "'")
      
    } else if(input$selected_report == 'Quarterly')
    {
      
      mannagement_report_download_1 <- paste0("SELECT PART_NBR, NPV_SCENARIO_1, REVENUE_SCENARIO_1, ENTERED_BUY_QUANTITY_1, EXTENDED_PURCHASE_COST_1, 
                                              OPTIMAL_NPV_SCENARIO_1, OPTIMAL_REVENUE_SCENARIO_1, OPTIMAL_QUANTITY_SCENARIO_1, 
                                              EXTENDED_OPTIMAL_BUY_COST_1, NPV_IMPACT_1, REVENUE_IMPACT_1, BUY_IMPACT_1, TIME_STAMP, 
                                              DAY_1, MONTH_1, YEAR_1, RAT_NUMBER, GM_ID
                                              FROM MANAGEMENT_TABLE_1
                                              WHERE YEAR_1 IN '", Current_Year, "'")
      
      mannagement_report_download_2 <- paste0("SELECT PART_NBR, NPV_SCENARIO_2, REVENUE_SCENARIO_2, ENTERED_BUY_QUANTITY_2, EXTENDED_PURCHASE_COST_2, 
                                              OPTIMAL_NPV_SCENARIO_2, OPTIMAL_REVENUE_SCENARIO_2, OPTIMAL_QUANTITY_SCENARIO_2, 
                                              EXTENDED_OPTIMAL_BUY_COST_2, NPV_IMPACT_2, REVENUE_IMPACT_2, BUY_IMPACT_2, TIME_STAMP, 
                                              DAY_2, MONTH_2, YEAR_2, RAT_NUMBER, GM_ID
                                              FROM MANAGEMENT_TABLE_2
                                              WHERE YEAR_2 IN '", Current_Year, "'")
      
      
    } else if(input$selected_report == 'Yearly')
    {
      mannagement_report_download_1 <- paste0("SELECT PART_NBR, NPV_SCENARIO_1, REVENUE_SCENARIO_1, ENTERED_BUY_QUANTITY_1, EXTENDED_PURCHASE_COST_1, 
                                              OPTIMAL_NPV_SCENARIO_1, OPTIMAL_REVENUE_SCENARIO_1, OPTIMAL_QUANTITY_SCENARIO_1, 
                                              EXTENDED_OPTIMAL_BUY_COST_1, NPV_IMPACT_1, REVENUE_IMPACT_1, BUY_IMPACT_1, TIME_STAMP, 
                                              DAY_1, MONTH_1, YEAR_1, RAT_NUMBER, GM_ID
                                              FROM MANAGEMENT_TABLE_1
                                              WHERE YEAR_1 IN '", Current_Year, "'")
      
      mannagement_report_download_2 <- paste0("SELECT PART_NBR, NPV_SCENARIO_2, REVENUE_SCENARIO_2, ENTERED_BUY_QUANTITY_2, EXTENDED_PURCHASE_COST_2, 
                                              OPTIMAL_NPV_SCENARIO_2, OPTIMAL_REVENUE_SCENARIO_2, OPTIMAL_QUANTITY_SCENARIO_2, 
                                              EXTENDED_OPTIMAL_BUY_COST_2, NPV_IMPACT_2, REVENUE_IMPACT_2, BUY_IMPACT_2, TIME_STAMP, 
                                              DAY_2, MONTH_2, YEAR_2, RAT_NUMBER, GM_ID
                                              FROM MANAGEMENT_TABLE_2
                                              WHERE YEAR_2 IN '", Current_Year, "'")
      
    }
    
    management_report_pulled_1 <- dbGetQuery(con, mannagement_report_download_1)
    management_report_pulled_2 <- dbGetQuery(con, mannagement_report_download_2)
    
    if(nrow(management_report_pulled_1) > 0)
    {
      
      if(nrow(management_report_pulled_2) == 0)
      {
        management_report_pulled_2 <- management_report_pulled_1
      }
      
      management_report_pulled_1$Quarter_1 <- quarter(management_report_pulled_1$TIME_STAMP)
      management_report_pulled_2$Quarter_2 <- quarter(management_report_pulled_2$TIME_STAMP)
      formatting_management_report_1 <- management_report_pulled_1
      formatting_management_report_2 <- management_report_pulled_2
      
      if(input$selected_report == 'Quarterly')
      {
        formatting_management_report_1 <- formatting_management_report_1[formatting_management_report_1$Quarter_1 == Current_Quarter & formatting_management_report_1$YEAR_1 == Current_Year, ]
        formatting_management_report_2 <- formatting_management_report_2[formatting_management_report_2$Quarter_2 == Current_Quarter & formatting_management_report_2$YEAR_2 == Current_Year, ]
        
      }
      
      if(nrow(formatting_management_report_2) == 0)
      {
        formatting_management_report_2 <- formatting_management_report_1
      }
      
      shinyjs::enable("create_download_report")
      
      output$create_download_report <- downloadHandler(
        filename = function() {
          paste('Management_Report', Sys.Date(), '.xlsx', sep='')
        },
        content = function(file) {
          abc <- formatting_management_report_1
          abc <- data.frame(Part_Nbr = abc[,1],
                            lapply(abc[,2:3], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                            formatC(abc[,4] , big.mark=",", digits=0, format="f"),
                            lapply(abc[,5:7], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                            formatC(abc[,8] , big.mark=",", digits=0, format="f"),
                            lapply(abc[,9:12], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                            abc[,13:19], stringsAsFactors = FALSE)
          
          colnames(abc) <- c("Part Number", "NPV Scenario-1", "Revenue Scenario-1", "Entered Buy Quantity Scenario-1", "Extended Buy Qty Cost Scenario-1",
                             "Optimal NPV Scenario-1", "Optimal Revenue Scenario-1", "Optimal ATB Quantity Scenario-1", "Extended Optimal Buy Cost Scenario-1",
                             "NPV Impact Scenario-1", "Revenue Impact Scenario-1", "Buy Impact Scenario-1", "Time Stamp",
                             "Day", "Month", "Year", "RAT number", "GM ID", "Quarter")
          
          abc_2 <- formatting_management_report_2
          abc_2 <- data.frame(Part_Nbr = abc_2[,1],
                              lapply(abc_2[,2:3], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                              formatC(abc_2[,4] , big.mark=",", digits=0, format="f"),
                              lapply(abc_2[,5:7], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                              formatC(abc_2[,8] , big.mark=",", digits=0, format="f"),
                              lapply(abc_2[,9:12], function(x) paste("$", formatC(x , big.mark=",", digits=2, format="f"), sep = " ")),
                              abc_2[,13:19], stringsAsFactors = FALSE)
          
          colnames(abc_2) <- c("Part Number", "NPV Scenario-2", "Revenue Scenario-2", "Entered Buy Quantity Scenario-2", "Extended Buy Qty Cost Scenario-2",
                               "Optimal NPV Scenario-2", "Optimal Revenue Scenario-2", "Optimal ATB Quantity Scenario-2", "Extended Optimal Buy Cost Scenario-2",
                               "NPV Impact Scenario-2", "Revenue Impact Scenario-2", "Buy Impact Scenario-2", "Time Stamp",
                               "Day", "Month", "Year", "RAT number", "GM ID", "Quarter")
          
          write.xlsx2(abc, file , sheetName = "Scenario-1", append = TRUE, row.names = FALSE)
          write.xlsx2(abc_2, file , sheetName = "Scenario-2", append = TRUE, row.names = FALSE)
          
        }
      )
      
    } else
    {
      showModal(modalDialog(
        title = "Warning Message",
        "Buy Quantity has not been entered for any parts"
      ))
    }
    
  })
  
    }

shinyApp(ui, server)

